/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 733.0, "minX": 0.0, "maxY": 60531.0, "series": [{"data": [[0.0, 733.0], [0.1, 754.0], [0.2, 812.0], [0.3, 845.0], [0.4, 864.0], [0.5, 876.0], [0.6, 941.0], [0.7, 944.0], [0.8, 993.0], [0.9, 994.0], [1.0, 1020.0], [1.1, 1046.0], [1.2, 1049.0], [1.3, 1057.0], [1.4, 1076.0], [1.5, 1108.0], [1.6, 1110.0], [1.7, 1117.0], [1.8, 1144.0], [1.9, 1152.0], [2.0, 1159.0], [2.1, 1171.0], [2.2, 1233.0], [2.3, 1235.0], [2.4, 1266.0], [2.5, 1278.0], [2.6, 1293.0], [2.7, 1320.0], [2.8, 1321.0], [2.9, 1323.0], [3.0, 1324.0], [3.1, 1326.0], [3.2, 1333.0], [3.3, 1337.0], [3.4, 1341.0], [3.5, 1386.0], [3.6, 1388.0], [3.7, 1394.0], [3.8, 1412.0], [3.9, 1430.0], [4.0, 1433.0], [4.1, 1443.0], [4.2, 1448.0], [4.3, 1459.0], [4.4, 1475.0], [4.5, 1498.0], [4.6, 1530.0], [4.7, 1547.0], [4.8, 1574.0], [4.9, 1622.0], [5.0, 1627.0], [5.1, 1646.0], [5.2, 1659.0], [5.3, 1682.0], [5.4, 1736.0], [5.5, 1768.0], [5.6, 1773.0], [5.7, 1795.0], [5.8, 1807.0], [5.9, 1915.0], [6.0, 1942.0], [6.1, 1971.0], [6.2, 1977.0], [6.3, 2000.0], [6.4, 2015.0], [6.5, 2017.0], [6.6, 2035.0], [6.7, 2057.0], [6.8, 2075.0], [6.9, 2097.0], [7.0, 2120.0], [7.1, 2122.0], [7.2, 2123.0], [7.3, 2126.0], [7.4, 2141.0], [7.5, 2183.0], [7.6, 2217.0], [7.7, 2220.0], [7.8, 2241.0], [7.9, 2263.0], [8.0, 2318.0], [8.1, 2322.0], [8.2, 2324.0], [8.3, 2334.0], [8.4, 2353.0], [8.5, 2395.0], [8.6, 2411.0], [8.7, 2439.0], [8.8, 2459.0], [8.9, 2463.0], [9.0, 2495.0], [9.1, 2505.0], [9.2, 2505.0], [9.3, 2575.0], [9.4, 2628.0], [9.5, 2635.0], [9.6, 2654.0], [9.7, 2664.0], [9.8, 2668.0], [9.9, 2681.0], [10.0, 2682.0], [10.1, 2697.0], [10.2, 2706.0], [10.3, 2707.0], [10.4, 2752.0], [10.5, 2773.0], [10.6, 2802.0], [10.7, 2838.0], [10.8, 2857.0], [10.9, 2884.0], [11.0, 2888.0], [11.1, 2936.0], [11.2, 2956.0], [11.3, 2985.0], [11.4, 3037.0], [11.5, 3039.0], [11.6, 3045.0], [11.7, 3056.0], [11.8, 3075.0], [11.9, 3093.0], [12.0, 3098.0], [12.1, 3098.0], [12.2, 3109.0], [12.3, 3147.0], [12.4, 3250.0], [12.5, 3252.0], [12.6, 3254.0], [12.7, 3256.0], [12.8, 3274.0], [12.9, 3380.0], [13.0, 3381.0], [13.1, 3418.0], [13.2, 3425.0], [13.3, 3436.0], [13.4, 3452.0], [13.5, 3482.0], [13.6, 3524.0], [13.7, 3540.0], [13.8, 3612.0], [13.9, 3647.0], [14.0, 3653.0], [14.1, 3685.0], [14.2, 3723.0], [14.3, 3754.0], [14.4, 3772.0], [14.5, 3772.0], [14.6, 3829.0], [14.7, 3831.0], [14.8, 3831.0], [14.9, 3913.0], [15.0, 3933.0], [15.1, 3948.0], [15.2, 3980.0], [15.3, 3983.0], [15.4, 4010.0], [15.5, 4026.0], [15.6, 4036.0], [15.7, 4050.0], [15.8, 4072.0], [15.9, 4101.0], [16.0, 4111.0], [16.1, 4149.0], [16.2, 4192.0], [16.3, 4197.0], [16.4, 4210.0], [16.5, 4227.0], [16.6, 4239.0], [16.7, 4243.0], [16.8, 4262.0], [16.9, 4301.0], [17.0, 4328.0], [17.1, 4351.0], [17.2, 4370.0], [17.3, 4396.0], [17.4, 4480.0], [17.5, 4495.0], [17.6, 4502.0], [17.7, 4504.0], [17.8, 4524.0], [17.9, 4563.0], [18.0, 4595.0], [18.1, 4612.0], [18.2, 4618.0], [18.3, 4655.0], [18.4, 4672.0], [18.5, 4683.0], [18.6, 4697.0], [18.7, 4779.0], [18.8, 4826.0], [18.9, 4839.0], [19.0, 4851.0], [19.1, 4852.0], [19.2, 4901.0], [19.3, 4938.0], [19.4, 4949.0], [19.5, 4959.0], [19.6, 4966.0], [19.7, 5026.0], [19.8, 5031.0], [19.9, 5047.0], [20.0, 5049.0], [20.1, 5059.0], [20.2, 5084.0], [20.3, 5176.0], [20.4, 5189.0], [20.5, 5213.0], [20.6, 5216.0], [20.7, 5236.0], [20.8, 5264.0], [20.9, 5280.0], [21.0, 5293.0], [21.1, 5299.0], [21.2, 5301.0], [21.3, 5395.0], [21.4, 5413.0], [21.5, 5421.0], [21.6, 5514.0], [21.7, 5531.0], [21.8, 5543.0], [21.9, 5568.0], [22.0, 5573.0], [22.1, 5588.0], [22.2, 5628.0], [22.3, 5641.0], [22.4, 5697.0], [22.5, 5707.0], [22.6, 5731.0], [22.7, 5756.0], [22.8, 5758.0], [22.9, 5802.0], [23.0, 5827.0], [23.1, 5838.0], [23.2, 5867.0], [23.3, 5883.0], [23.4, 5884.0], [23.5, 5943.0], [23.6, 6008.0], [23.7, 6016.0], [23.8, 6037.0], [23.9, 6044.0], [24.0, 6093.0], [24.1, 6123.0], [24.2, 6152.0], [24.3, 6207.0], [24.4, 6212.0], [24.5, 6334.0], [24.6, 6378.0], [24.7, 6379.0], [24.8, 6428.0], [24.9, 6446.0], [25.0, 6466.0], [25.1, 6508.0], [25.2, 6521.0], [25.3, 6598.0], [25.4, 6604.0], [25.5, 6627.0], [25.6, 6657.0], [25.7, 6677.0], [25.8, 6704.0], [25.9, 6721.0], [26.0, 6768.0], [26.1, 6770.0], [26.2, 6773.0], [26.3, 6824.0], [26.4, 6850.0], [26.5, 6880.0], [26.6, 6965.0], [26.7, 7006.0], [26.8, 7056.0], [26.9, 7057.0], [27.0, 7102.0], [27.1, 7119.0], [27.2, 7154.0], [27.3, 7157.0], [27.4, 7183.0], [27.5, 7206.0], [27.6, 7243.0], [27.7, 7313.0], [27.8, 7354.0], [27.9, 7399.0], [28.0, 7420.0], [28.1, 7498.0], [28.2, 7533.0], [28.3, 7544.0], [28.4, 7550.0], [28.5, 7596.0], [28.6, 7608.0], [28.7, 7620.0], [28.8, 7673.0], [28.9, 7729.0], [29.0, 7789.0], [29.1, 7804.0], [29.2, 7815.0], [29.3, 7895.0], [29.4, 7932.0], [29.5, 7937.0], [29.6, 7976.0], [29.7, 7980.0], [29.8, 7991.0], [29.9, 7997.0], [30.0, 7999.0], [30.1, 8013.0], [30.2, 8093.0], [30.3, 8173.0], [30.4, 8239.0], [30.5, 8256.0], [30.6, 8319.0], [30.7, 8338.0], [30.8, 8343.0], [30.9, 8397.0], [31.0, 8408.0], [31.1, 8417.0], [31.2, 8437.0], [31.3, 8456.0], [31.4, 8513.0], [31.5, 8519.0], [31.6, 8563.0], [31.7, 8631.0], [31.8, 8701.0], [31.9, 8711.0], [32.0, 8767.0], [32.1, 8803.0], [32.2, 8821.0], [32.3, 8841.0], [32.4, 8876.0], [32.5, 8973.0], [32.6, 8977.0], [32.7, 8990.0], [32.8, 8995.0], [32.9, 9014.0], [33.0, 9099.0], [33.1, 9210.0], [33.2, 9214.0], [33.3, 9239.0], [33.4, 9241.0], [33.5, 9284.0], [33.6, 9330.0], [33.7, 9379.0], [33.8, 9403.0], [33.9, 9460.0], [34.0, 9467.0], [34.1, 9534.0], [34.2, 9556.0], [34.3, 9721.0], [34.4, 9732.0], [34.5, 9755.0], [34.6, 9789.0], [34.7, 9848.0], [34.8, 9863.0], [34.9, 9907.0], [35.0, 9919.0], [35.1, 9983.0], [35.2, 9997.0], [35.3, 10043.0], [35.4, 10058.0], [35.5, 10062.0], [35.6, 10074.0], [35.7, 10122.0], [35.8, 10153.0], [35.9, 10267.0], [36.0, 10295.0], [36.1, 10303.0], [36.2, 10399.0], [36.3, 10409.0], [36.4, 10421.0], [36.5, 10536.0], [36.6, 10543.0], [36.7, 10561.0], [36.8, 10678.0], [36.9, 10738.0], [37.0, 10760.0], [37.1, 10779.0], [37.2, 10790.0], [37.3, 10803.0], [37.4, 10833.0], [37.5, 10913.0], [37.6, 10919.0], [37.7, 10943.0], [37.8, 10990.0], [37.9, 11020.0], [38.0, 11067.0], [38.1, 11077.0], [38.2, 11095.0], [38.3, 11225.0], [38.4, 11255.0], [38.5, 11277.0], [38.6, 11281.0], [38.7, 11308.0], [38.8, 11313.0], [38.9, 11385.0], [39.0, 11391.0], [39.1, 11395.0], [39.2, 11431.0], [39.3, 11449.0], [39.4, 11476.0], [39.5, 11564.0], [39.6, 11596.0], [39.7, 11773.0], [39.8, 11812.0], [39.9, 11958.0], [40.0, 11977.0], [40.1, 12040.0], [40.2, 12064.0], [40.3, 12085.0], [40.4, 12103.0], [40.5, 12139.0], [40.6, 12151.0], [40.7, 12192.0], [40.8, 12279.0], [40.9, 12292.0], [41.0, 12352.0], [41.1, 12399.0], [41.2, 12410.0], [41.3, 12426.0], [41.4, 12473.0], [41.5, 12483.0], [41.6, 12520.0], [41.7, 12524.0], [41.8, 12599.0], [41.9, 12634.0], [42.0, 12670.0], [42.1, 12791.0], [42.2, 12843.0], [42.3, 12857.0], [42.4, 12915.0], [42.5, 12927.0], [42.6, 13012.0], [42.7, 13030.0], [42.8, 13077.0], [42.9, 13173.0], [43.0, 13233.0], [43.1, 13241.0], [43.2, 13273.0], [43.3, 13311.0], [43.4, 13317.0], [43.5, 13348.0], [43.6, 13355.0], [43.7, 13471.0], [43.8, 13499.0], [43.9, 13510.0], [44.0, 13570.0], [44.1, 13636.0], [44.2, 13741.0], [44.3, 13741.0], [44.4, 13758.0], [44.5, 13798.0], [44.6, 13855.0], [44.7, 13972.0], [44.8, 13975.0], [44.9, 14016.0], [45.0, 14035.0], [45.1, 14163.0], [45.2, 14178.0], [45.3, 14229.0], [45.4, 14231.0], [45.5, 14283.0], [45.6, 14305.0], [45.7, 14308.0], [45.8, 14398.0], [45.9, 14412.0], [46.0, 14474.0], [46.1, 14493.0], [46.2, 14523.0], [46.3, 14589.0], [46.4, 14652.0], [46.5, 14665.0], [46.6, 14777.0], [46.7, 14794.0], [46.8, 14796.0], [46.9, 14823.0], [47.0, 14839.0], [47.1, 14842.0], [47.2, 14878.0], [47.3, 14924.0], [47.4, 15163.0], [47.5, 15196.0], [47.6, 15251.0], [47.7, 15252.0], [47.8, 15260.0], [47.9, 15397.0], [48.0, 15443.0], [48.1, 15487.0], [48.2, 15542.0], [48.3, 15563.0], [48.4, 15586.0], [48.5, 15712.0], [48.6, 15726.0], [48.7, 15727.0], [48.8, 15732.0], [48.9, 15733.0], [49.0, 15853.0], [49.1, 15860.0], [49.2, 15879.0], [49.3, 15913.0], [49.4, 15920.0], [49.5, 16017.0], [49.6, 16028.0], [49.7, 16055.0], [49.8, 16094.0], [49.9, 16332.0], [50.0, 16361.0], [50.1, 16378.0], [50.2, 16399.0], [50.3, 16418.0], [50.4, 16463.0], [50.5, 16493.0], [50.6, 16605.0], [50.7, 16680.0], [50.8, 16682.0], [50.9, 16699.0], [51.0, 16729.0], [51.1, 16774.0], [51.2, 16793.0], [51.3, 16850.0], [51.4, 16859.0], [51.5, 16891.0], [51.6, 17009.0], [51.7, 17014.0], [51.8, 17032.0], [51.9, 17056.0], [52.0, 17064.0], [52.1, 17075.0], [52.2, 17135.0], [52.3, 17171.0], [52.4, 17193.0], [52.5, 17362.0], [52.6, 17421.0], [52.7, 17550.0], [52.8, 17592.0], [52.9, 17792.0], [53.0, 17857.0], [53.1, 17872.0], [53.2, 17935.0], [53.3, 17969.0], [53.4, 17979.0], [53.5, 18028.0], [53.6, 18039.0], [53.7, 18078.0], [53.8, 18299.0], [53.9, 18322.0], [54.0, 18354.0], [54.1, 18396.0], [54.2, 18448.0], [54.3, 18527.0], [54.4, 18564.0], [54.5, 18579.0], [54.6, 18610.0], [54.7, 18643.0], [54.8, 18777.0], [54.9, 18809.0], [55.0, 18871.0], [55.1, 18900.0], [55.2, 18915.0], [55.3, 18945.0], [55.4, 19092.0], [55.5, 19100.0], [55.6, 19145.0], [55.7, 19226.0], [55.8, 19286.0], [55.9, 19331.0], [56.0, 19357.0], [56.1, 19397.0], [56.2, 19483.0], [56.3, 19559.0], [56.4, 19603.0], [56.5, 19604.0], [56.6, 19652.0], [56.7, 19831.0], [56.8, 19879.0], [56.9, 19891.0], [57.0, 19913.0], [57.1, 19916.0], [57.2, 19917.0], [57.3, 19968.0], [57.4, 19972.0], [57.5, 20012.0], [57.6, 20038.0], [57.7, 20081.0], [57.8, 20223.0], [57.9, 20237.0], [58.0, 20309.0], [58.1, 20314.0], [58.2, 20362.0], [58.3, 20379.0], [58.4, 20405.0], [58.5, 20449.0], [58.6, 20740.0], [58.7, 20869.0], [58.8, 20886.0], [58.9, 20890.0], [59.0, 20896.0], [59.1, 20919.0], [59.2, 20962.0], [59.3, 20994.0], [59.4, 21074.0], [59.5, 21088.0], [59.6, 21198.0], [59.7, 21252.0], [59.8, 21292.0], [59.9, 21299.0], [60.0, 21369.0], [60.1, 21411.0], [60.2, 21495.0], [60.3, 21502.0], [60.4, 21518.0], [60.5, 21752.0], [60.6, 21765.0], [60.7, 21980.0], [60.8, 21990.0], [60.9, 22093.0], [61.0, 22159.0], [61.1, 22263.0], [61.2, 22352.0], [61.3, 22390.0], [61.4, 22495.0], [61.5, 22608.0], [61.6, 22686.0], [61.7, 22696.0], [61.8, 22718.0], [61.9, 22738.0], [62.0, 22825.0], [62.1, 22829.0], [62.2, 22852.0], [62.3, 22977.0], [62.4, 23027.0], [62.5, 23031.0], [62.6, 23173.0], [62.7, 23209.0], [62.8, 23403.0], [62.9, 23444.0], [63.0, 23445.0], [63.1, 23458.0], [63.2, 23499.0], [63.3, 23824.0], [63.4, 23882.0], [63.5, 24050.0], [63.6, 24103.0], [63.7, 24109.0], [63.8, 24160.0], [63.9, 24277.0], [64.0, 24345.0], [64.1, 24353.0], [64.2, 24384.0], [64.3, 24418.0], [64.4, 24469.0], [64.5, 24482.0], [64.6, 24531.0], [64.7, 24549.0], [64.8, 24582.0], [64.9, 24624.0], [65.0, 24647.0], [65.1, 24744.0], [65.2, 24799.0], [65.3, 24909.0], [65.4, 24945.0], [65.5, 25073.0], [65.6, 25199.0], [65.7, 25208.0], [65.8, 25247.0], [65.9, 25296.0], [66.0, 25358.0], [66.1, 25376.0], [66.2, 25459.0], [66.3, 25471.0], [66.4, 25498.0], [66.5, 25534.0], [66.6, 25570.0], [66.7, 25775.0], [66.8, 25777.0], [66.9, 25809.0], [67.0, 25906.0], [67.1, 26000.0], [67.2, 26043.0], [67.3, 26102.0], [67.4, 26148.0], [67.5, 26186.0], [67.6, 26328.0], [67.7, 26427.0], [67.8, 26501.0], [67.9, 26503.0], [68.0, 26525.0], [68.1, 26603.0], [68.2, 26718.0], [68.3, 26760.0], [68.4, 26817.0], [68.5, 26945.0], [68.6, 26964.0], [68.7, 27172.0], [68.8, 27253.0], [68.9, 27284.0], [69.0, 27294.0], [69.1, 27319.0], [69.2, 27381.0], [69.3, 27385.0], [69.4, 27470.0], [69.5, 27506.0], [69.6, 27542.0], [69.7, 27640.0], [69.8, 27848.0], [69.9, 27867.0], [70.0, 27927.0], [70.1, 28066.0], [70.2, 28138.0], [70.3, 28231.0], [70.4, 28295.0], [70.5, 28356.0], [70.6, 28397.0], [70.7, 28409.0], [70.8, 28528.0], [70.9, 28568.0], [71.0, 28594.0], [71.1, 28595.0], [71.2, 28611.0], [71.3, 28880.0], [71.4, 29057.0], [71.5, 29095.0], [71.6, 29155.0], [71.7, 29177.0], [71.8, 29293.0], [71.9, 29523.0], [72.0, 29536.0], [72.1, 29550.0], [72.2, 29553.0], [72.3, 29653.0], [72.4, 29731.0], [72.5, 29840.0], [72.6, 29934.0], [72.7, 30131.0], [72.8, 30138.0], [72.9, 30212.0], [73.0, 30276.0], [73.1, 30328.0], [73.2, 30408.0], [73.3, 30440.0], [73.4, 30462.0], [73.5, 30665.0], [73.6, 30734.0], [73.7, 30751.0], [73.8, 30902.0], [73.9, 30922.0], [74.0, 31213.0], [74.1, 31272.0], [74.2, 31273.0], [74.3, 31309.0], [74.4, 31315.0], [74.5, 31366.0], [74.6, 31452.0], [74.7, 31631.0], [74.8, 31639.0], [74.9, 31672.0], [75.0, 31794.0], [75.1, 31951.0], [75.2, 32002.0], [75.3, 32016.0], [75.4, 32102.0], [75.5, 32233.0], [75.6, 32391.0], [75.7, 32400.0], [75.8, 32415.0], [75.9, 32607.0], [76.0, 32636.0], [76.1, 32761.0], [76.2, 32761.0], [76.3, 32798.0], [76.4, 32845.0], [76.5, 32940.0], [76.6, 33040.0], [76.7, 33096.0], [76.8, 33157.0], [76.9, 33243.0], [77.0, 33276.0], [77.1, 33285.0], [77.2, 33744.0], [77.3, 33827.0], [77.4, 33891.0], [77.5, 33917.0], [77.6, 33958.0], [77.7, 34002.0], [77.8, 34162.0], [77.9, 34172.0], [78.0, 34358.0], [78.1, 34443.0], [78.2, 34549.0], [78.3, 34587.0], [78.4, 34816.0], [78.5, 34884.0], [78.6, 34993.0], [78.7, 35005.0], [78.8, 35124.0], [78.9, 35148.0], [79.0, 35179.0], [79.1, 35197.0], [79.2, 35308.0], [79.3, 35377.0], [79.4, 35382.0], [79.5, 35438.0], [79.6, 35787.0], [79.7, 35876.0], [79.8, 35933.0], [79.9, 36151.0], [80.0, 36204.0], [80.1, 36230.0], [80.2, 36256.0], [80.3, 36264.0], [80.4, 36311.0], [80.5, 36418.0], [80.6, 36444.0], [80.7, 36596.0], [80.8, 36748.0], [80.9, 37036.0], [81.0, 37284.0], [81.1, 37417.0], [81.2, 37437.0], [81.3, 37457.0], [81.4, 37531.0], [81.5, 37592.0], [81.6, 37651.0], [81.7, 37652.0], [81.8, 38059.0], [81.9, 38158.0], [82.0, 38237.0], [82.1, 38260.0], [82.2, 38270.0], [82.3, 38293.0], [82.4, 38327.0], [82.5, 38630.0], [82.6, 38648.0], [82.7, 38795.0], [82.8, 38847.0], [82.9, 38907.0], [83.0, 39346.0], [83.1, 39477.0], [83.2, 39505.0], [83.3, 39643.0], [83.4, 39689.0], [83.5, 39789.0], [83.6, 39860.0], [83.7, 39916.0], [83.8, 40126.0], [83.9, 40200.0], [84.0, 40246.0], [84.1, 40354.0], [84.2, 40540.0], [84.3, 40657.0], [84.4, 40721.0], [84.5, 40761.0], [84.6, 40923.0], [84.7, 41006.0], [84.8, 41027.0], [84.9, 41114.0], [85.0, 41120.0], [85.1, 41229.0], [85.2, 41386.0], [85.3, 41588.0], [85.4, 41638.0], [85.5, 41714.0], [85.6, 41744.0], [85.7, 42020.0], [85.8, 42020.0], [85.9, 42035.0], [86.0, 42153.0], [86.1, 42221.0], [86.2, 42548.0], [86.3, 42828.0], [86.4, 42831.0], [86.5, 42897.0], [86.6, 43110.0], [86.7, 43123.0], [86.8, 43312.0], [86.9, 43346.0], [87.0, 43385.0], [87.1, 43423.0], [87.2, 43436.0], [87.3, 43577.0], [87.4, 43994.0], [87.5, 44252.0], [87.6, 44269.0], [87.7, 44365.0], [87.8, 44406.0], [87.9, 44413.0], [88.0, 44546.0], [88.1, 44587.0], [88.2, 44655.0], [88.3, 45000.0], [88.4, 45227.0], [88.5, 45348.0], [88.6, 45505.0], [88.7, 45560.0], [88.8, 45785.0], [88.9, 46102.0], [89.0, 46128.0], [89.1, 46142.0], [89.2, 46194.0], [89.3, 46202.0], [89.4, 46369.0], [89.5, 46630.0], [89.6, 46757.0], [89.7, 46934.0], [89.8, 47304.0], [89.9, 47430.0], [90.0, 47481.0], [90.1, 47495.0], [90.2, 47515.0], [90.3, 47538.0], [90.4, 47688.0], [90.5, 48148.0], [90.6, 48424.0], [90.7, 48426.0], [90.8, 48500.0], [90.9, 48500.0], [91.0, 48811.0], [91.1, 49020.0], [91.2, 49054.0], [91.3, 49061.0], [91.4, 49193.0], [91.5, 49460.0], [91.6, 49761.0], [91.7, 49950.0], [91.8, 50134.0], [91.9, 50341.0], [92.0, 50351.0], [92.1, 50444.0], [92.2, 50596.0], [92.3, 50713.0], [92.4, 50790.0], [92.5, 50928.0], [92.6, 51363.0], [92.7, 51367.0], [92.8, 51509.0], [92.9, 51591.0], [93.0, 51894.0], [93.1, 52041.0], [93.2, 52242.0], [93.3, 52630.0], [93.4, 52713.0], [93.5, 52780.0], [93.6, 53223.0], [93.7, 53329.0], [93.8, 53440.0], [93.9, 53600.0], [94.0, 53841.0], [94.1, 54153.0], [94.2, 54468.0], [94.3, 54764.0], [94.4, 54787.0], [94.5, 54884.0], [94.6, 54980.0], [94.7, 55366.0], [94.8, 55574.0], [94.9, 55703.0], [95.0, 55771.0], [95.1, 55928.0], [95.2, 55996.0], [95.3, 56423.0], [95.4, 56455.0], [95.5, 56546.0], [95.6, 56835.0], [95.7, 57039.0], [95.8, 57199.0], [95.9, 57806.0], [96.0, 57953.0], [96.1, 58082.0], [96.2, 58160.0], [96.3, 58576.0], [96.4, 58592.0], [96.5, 59296.0], [96.6, 59421.0], [96.7, 59836.0], [96.8, 60010.0], [96.9, 60014.0], [97.0, 60014.0], [97.1, 60039.0], [97.2, 60077.0], [97.3, 60078.0], [97.4, 60177.0], [97.5, 60181.0], [97.6, 60183.0], [97.7, 60185.0], [97.8, 60185.0], [97.9, 60189.0], [98.0, 60191.0], [98.1, 60198.0], [98.2, 60198.0], [98.3, 60200.0], [98.4, 60208.0], [98.5, 60215.0], [98.6, 60215.0], [98.7, 60220.0], [98.8, 60227.0], [98.9, 60235.0], [99.0, 60244.0], [99.1, 60248.0], [99.2, 60253.0], [99.3, 60255.0], [99.4, 60274.0], [99.5, 60312.0], [99.6, 60327.0], [99.7, 60332.0], [99.8, 60401.0], [99.9, 60406.0], [100.0, 60531.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 14.0, "series": [{"data": [[32900.0, 2.0], [34500.0, 3.0], [33700.0, 1.0], [35300.0, 4.0], [36100.0, 1.0], [36900.0, 1.0], [40100.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [41700.0, 3.0], [42500.0, 1.0], [43300.0, 4.0], [44900.0, 1.0], [45700.0, 1.0], [47300.0, 2.0], [48100.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [51300.0, 3.0], [55300.0, 2.0], [58500.0, 2.0], [60100.0, 11.0], [700.0, 2.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 8.0], [1200.0, 6.0], [1300.0, 13.0], [1400.0, 10.0], [1500.0, 4.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 9.0], [2100.0, 7.0], [2200.0, 5.0], [2300.0, 6.0], [2400.0, 6.0], [2500.0, 4.0], [2600.0, 9.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 4.0], [3000.0, 9.0], [3100.0, 3.0], [3200.0, 6.0], [3300.0, 2.0], [3400.0, 6.0], [3500.0, 2.0], [3700.0, 5.0], [3600.0, 5.0], [3800.0, 4.0], [3900.0, 5.0], [4000.0, 6.0], [4100.0, 6.0], [4200.0, 6.0], [4300.0, 6.0], [4600.0, 8.0], [4500.0, 5.0], [4400.0, 3.0], [4700.0, 1.0], [4800.0, 4.0], [4900.0, 6.0], [5000.0, 7.0], [5100.0, 3.0], [5300.0, 3.0], [5200.0, 8.0], [5500.0, 7.0], [5400.0, 2.0], [5600.0, 4.0], [5800.0, 6.0], [5700.0, 5.0], [6000.0, 6.0], [6100.0, 2.0], [5900.0, 2.0], [6200.0, 3.0], [6300.0, 3.0], [6600.0, 5.0], [6400.0, 4.0], [6500.0, 3.0], [6900.0, 2.0], [6700.0, 6.0], [6800.0, 3.0], [7100.0, 6.0], [7000.0, 3.0], [7200.0, 2.0], [7300.0, 4.0], [7400.0, 2.0], [7500.0, 5.0], [7600.0, 4.0], [7700.0, 2.0], [7900.0, 8.0], [7800.0, 4.0], [8100.0, 1.0], [8000.0, 2.0], [8200.0, 3.0], [8600.0, 1.0], [8400.0, 4.0], [9200.0, 5.0], [9000.0, 3.0], [8800.0, 5.0], [9400.0, 4.0], [10200.0, 2.0], [10000.0, 5.0], [9800.0, 2.0], [10400.0, 2.0], [10600.0, 1.0], [11200.0, 4.0], [10800.0, 2.0], [11000.0, 4.0], [11400.0, 4.0], [12200.0, 2.0], [12000.0, 3.0], [11800.0, 2.0], [12400.0, 5.0], [12600.0, 2.0], [13200.0, 4.0], [13000.0, 3.0], [12800.0, 2.0], [13400.0, 2.0], [13800.0, 2.0], [13600.0, 1.0], [14000.0, 2.0], [14200.0, 4.0], [14400.0, 3.0], [14800.0, 5.0], [14600.0, 2.0], [15200.0, 4.0], [15400.0, 2.0], [15600.0, 1.0], [15800.0, 3.0], [16000.0, 4.0], [16400.0, 3.0], [16800.0, 3.0], [18400.0, 1.0], [18000.0, 3.0], [19200.0, 2.0], [18800.0, 2.0], [20400.0, 2.0], [19600.0, 3.0], [20000.0, 3.0], [20800.0, 4.0], [21200.0, 3.0], [22000.0, 1.0], [22400.0, 1.0], [23200.0, 2.0], [22800.0, 3.0], [24400.0, 4.0], [24000.0, 1.0], [25200.0, 4.0], [26000.0, 2.0], [26400.0, 1.0], [27200.0, 3.0], [27600.0, 1.0], [26800.0, 1.0], [28400.0, 1.0], [28000.0, 1.0], [29600.0, 2.0], [29200.0, 1.0], [28800.0, 1.0], [30400.0, 3.0], [31600.0, 3.0], [31200.0, 3.0], [32400.0, 2.0], [32000.0, 2.0], [32800.0, 1.0], [34400.0, 1.0], [37600.0, 2.0], [38400.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [48800.0, 2.0], [50400.0, 1.0], [52000.0, 1.0], [53600.0, 1.0], [54400.0, 1.0], [56800.0, 1.0], [59200.0, 1.0], [60000.0, 7.0], [33100.0, 1.0], [33900.0, 3.0], [36300.0, 1.0], [38700.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [41100.0, 2.0], [43500.0, 1.0], [44300.0, 1.0], [46700.0, 1.0], [49100.0, 1.0], [47500.0, 2.0], [50700.0, 2.0], [49900.0, 1.0], [51500.0, 2.0], [54700.0, 2.0], [57100.0, 1.0], [55500.0, 1.0], [57900.0, 1.0], [60300.0, 4.0], [17300.0, 1.0], [16500.0, 1.0], [17700.0, 1.0], [18100.0, 1.0], [19300.0, 4.0], [18500.0, 4.0], [18900.0, 3.0], [20900.0, 4.0], [21300.0, 1.0], [21700.0, 2.0], [22100.0, 1.0], [22900.0, 2.0], [24500.0, 3.0], [24100.0, 3.0], [24900.0, 3.0], [25300.0, 2.0], [26500.0, 4.0], [25700.0, 2.0], [26100.0, 4.0], [27300.0, 4.0], [26900.0, 2.0], [28500.0, 5.0], [28100.0, 1.0], [30100.0, 3.0], [29700.0, 1.0], [30900.0, 2.0], [31300.0, 4.0], [31700.0, 1.0], [32100.0, 1.0], [33800.0, 2.0], [33000.0, 2.0], [36200.0, 5.0], [35400.0, 1.0], [37000.0, 1.0], [38600.0, 2.0], [40200.0, 3.0], [39400.0, 1.0], [41000.0, 2.0], [43400.0, 3.0], [44200.0, 2.0], [45000.0, 1.0], [46600.0, 1.0], [49000.0, 3.0], [47400.0, 3.0], [52200.0, 1.0], [53800.0, 1.0], [57000.0, 2.0], [56200.0, 1.0], [57800.0, 1.0], [60200.0, 14.0], [59400.0, 1.0], [34100.0, 2.0], [36500.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [40500.0, 1.0], [41300.0, 1.0], [42100.0, 1.0], [44500.0, 2.0], [46100.0, 4.0], [46900.0, 1.0], [45300.0, 1.0], [48500.0, 2.0], [47700.0, 1.0], [50100.0, 1.0], [50900.0, 1.0], [49300.0, 1.0], [54100.0, 1.0], [54900.0, 1.0], [53300.0, 1.0], [55700.0, 2.0], [56500.0, 1.0], [58100.0, 1.0], [60500.0, 1.0], [8300.0, 5.0], [8500.0, 4.0], [8700.0, 4.0], [8900.0, 4.0], [9300.0, 3.0], [9700.0, 5.0], [9500.0, 2.0], [9900.0, 5.0], [10100.0, 2.0], [10500.0, 4.0], [10700.0, 5.0], [10300.0, 3.0], [10900.0, 5.0], [11100.0, 1.0], [11700.0, 1.0], [11300.0, 6.0], [11500.0, 2.0], [12100.0, 5.0], [11900.0, 2.0], [12500.0, 3.0], [12300.0, 3.0], [12700.0, 2.0], [13300.0, 5.0], [12900.0, 3.0], [13100.0, 1.0], [13700.0, 5.0], [13500.0, 2.0], [14100.0, 2.0], [13900.0, 2.0], [14300.0, 4.0], [14700.0, 3.0], [14500.0, 3.0], [15100.0, 3.0], [15300.0, 1.0], [14900.0, 1.0], [15500.0, 3.0], [15700.0, 6.0], [15900.0, 3.0], [16300.0, 5.0], [17000.0, 7.0], [16600.0, 4.0], [17400.0, 2.0], [17800.0, 2.0], [18200.0, 1.0], [18600.0, 3.0], [19000.0, 2.0], [19400.0, 1.0], [20200.0, 3.0], [19800.0, 3.0], [21000.0, 2.0], [21400.0, 3.0], [20600.0, 1.0], [22200.0, 2.0], [21800.0, 1.0], [22600.0, 3.0], [23000.0, 2.0], [23400.0, 5.0], [24200.0, 2.0], [23800.0, 2.0], [25400.0, 3.0], [25000.0, 1.0], [24600.0, 3.0], [26600.0, 1.0], [25800.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28600.0, 2.0], [27800.0, 2.0], [28200.0, 3.0], [29400.0, 1.0], [29000.0, 2.0], [30200.0, 2.0], [29800.0, 1.0], [30600.0, 2.0], [31400.0, 1.0], [31000.0, 1.0], [32600.0, 3.0], [32200.0, 1.0], [31800.0, 1.0], [33200.0, 3.0], [34800.0, 2.0], [34000.0, 1.0], [36400.0, 2.0], [37200.0, 1.0], [38800.0, 1.0], [38000.0, 1.0], [39600.0, 2.0], [42000.0, 3.0], [42800.0, 3.0], [41200.0, 2.0], [44400.0, 3.0], [45200.0, 1.0], [46000.0, 1.0], [48400.0, 2.0], [47600.0, 1.0], [53200.0, 2.0], [54800.0, 1.0], [56400.0, 2.0], [58000.0, 1.0], [60400.0, 2.0], [34300.0, 1.0], [35100.0, 4.0], [35900.0, 2.0], [36700.0, 1.0], [38300.0, 1.0], [37500.0, 2.0], [40700.0, 2.0], [39900.0, 1.0], [41500.0, 1.0], [43100.0, 2.0], [43900.0, 1.0], [45500.0, 2.0], [46300.0, 1.0], [50300.0, 3.0], [52700.0, 2.0], [51900.0, 1.0], [55900.0, 2.0], [16700.0, 4.0], [17100.0, 4.0], [18300.0, 3.0], [17900.0, 4.0], [17500.0, 2.0], [19100.0, 2.0], [18700.0, 1.0], [19500.0, 2.0], [20300.0, 4.0], [19900.0, 7.0], [21100.0, 2.0], [21500.0, 2.0], [20700.0, 1.0], [22300.0, 2.0], [21900.0, 2.0], [22700.0, 3.0], [23100.0, 1.0], [23500.0, 1.0], [24300.0, 3.0], [24700.0, 2.0], [25500.0, 3.0], [25100.0, 1.0], [25900.0, 2.0], [26300.0, 1.0], [26700.0, 2.0], [27500.0, 3.0], [27100.0, 1.0], [28300.0, 2.0], [27900.0, 1.0], [29100.0, 2.0], [29500.0, 4.0], [30700.0, 2.0], [29900.0, 1.0], [30300.0, 1.0], [32300.0, 2.0], [32700.0, 3.0], [31900.0, 1.0], [33400.0, 1.0], [35000.0, 2.0], [35800.0, 1.0], [38200.0, 5.0], [37400.0, 4.0], [39800.0, 2.0], [40600.0, 1.0], [39000.0, 1.0], [42200.0, 2.0], [44600.0, 1.0], [46200.0, 2.0], [49400.0, 1.0], [51800.0, 1.0], [52600.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [58200.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1099.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 54.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1099.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 35.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.724137931034479, "minX": 1.65123984E12, "maxY": 95.73214285714282, "series": [{"data": [[1.65123984E12, 12.724137931034479], [1.65124002E12, 62.468208092485526], [1.6512402E12, 87.52694610778447], [1.6512399E12, 27.49390243902439], [1.65124008E12, 79.15757575757578], [1.65124026E12, 19.0], [1.65123996E12, 44.940828402366876], [1.65124014E12, 95.73214285714282]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124026E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3979.186046511629, "minX": 1.0, "maxY": 60332.0, "series": [{"data": [[2.0, 59296.0], [3.0, 20624.333333333332], [4.0, 30632.0], [5.0, 29732.0], [6.0, 28749.5], [7.0, 21131.333333333332], [8.0, 19423.0], [9.0, 27653.0], [10.0, 3979.186046511629], [11.0, 23531.0], [12.0, 18951.666666666664], [13.0, 23529.0], [14.0, 18225.666666666664], [15.0, 22174.5], [16.0, 19730.0], [17.0, 23632.5], [18.0, 15985.0], [19.0, 19957.0], [20.0, 6881.174418604649], [21.0, 19422.333333333336], [22.0, 26671.0], [23.0, 16982.0], [24.0, 29946.0], [25.0, 12035.0], [26.0, 15686.333333333334], [27.0, 18149.0], [28.0, 21737.0], [29.0, 13495.0], [30.0, 10323.1686746988], [31.0, 27381.0], [32.0, 22953.0], [33.0, 12421.333333333332], [34.0, 22598.5], [35.0, 15760.0], [36.0, 16516.0], [37.0, 16170.333333333332], [38.0, 21878.5], [39.0, 16692.0], [40.0, 13057.709302325582], [41.0, 30309.666666666664], [42.0, 12476.0], [43.0, 29983.0], [44.0, 29127.333333333336], [45.0, 12215.5], [46.0, 25522.666666666664], [47.0, 38815.5], [48.0, 14527.0], [49.0, 27558.333333333336], [50.0, 16375.90697674419], [51.0, 39769.0], [52.0, 15370.333333333334], [53.0, 31980.0], [54.0, 17215.0], [55.0, 29515.666666666664], [56.0, 11661.5], [57.0, 30206.666666666664], [58.0, 38438.0], [59.0, 30734.0], [60.0, 19240.172413793098], [61.0, 35730.333333333336], [62.0, 36082.5], [63.0, 36256.666666666664], [64.0, 40579.0], [65.0, 36950.666666666664], [66.0, 37266.0], [67.0, 40229.5], [68.0, 35517.5], [69.0, 23788.666666666668], [70.0, 18895.390804597697], [71.0, 37353.0], [72.0, 24978.0], [73.0, 36645.8], [74.0, 37247.0], [75.0, 22437.666666666668], [76.0, 33799.333333333336], [77.0, 38930.5], [78.0, 40635.0], [79.0, 25300.0], [80.0, 26474.25882352941], [81.0, 40310.666666666664], [82.0, 31846.0], [83.0, 44134.666666666664], [84.0, 42306.0], [85.0, 37416.75], [86.0, 47666.0], [87.0, 32590.0], [88.0, 46963.0], [89.0, 43438.5], [90.0, 28011.172413793112], [91.0, 44071.8], [92.0, 58056.5], [93.0, 34878.333333333336], [94.0, 34262.666666666664], [95.0, 33293.8], [96.0, 22941.0], [97.0, 33308.666666666664], [98.0, 22768.0], [99.0, 16049.2], [100.0, 32743.236994219653], [1.0, 60332.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[58.265993265993295, 20811.29292929294]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 95.58333333333333, "minX": 1.65123984E12, "maxY": 668.4, "series": [{"data": [[1.65123984E12, 422.8333333333333], [1.65124002E12, 506.71666666666664], [1.6512402E12, 668.4], [1.6512399E12, 479.31666666666666], [1.65124008E12, 483.46666666666664], [1.65124026E12, 134.06666666666666], [1.65123996E12, 494.78333333333336], [1.65124014E12, 511.46666666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65123984E12, 374.5833333333333], [1.65124002E12, 446.9166666666667], [1.6512402E12, 431.4166666666667], [1.6512399E12, 423.6666666666667], [1.65124008E12, 426.25], [1.65124026E12, 95.58333333333333], [1.65123996E12, 436.5833333333333], [1.65124014E12, 434.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124026E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3820.524137931034, "minX": 1.65123984E12, "maxY": 43088.513513513506, "series": [{"data": [[1.65123984E12, 3820.524137931034], [1.65124002E12, 18706.763005780354], [1.6512402E12, 37614.95808383235], [1.6512399E12, 8818.554878048777], [1.65124008E12, 25843.91515151514], [1.65124026E12, 43088.513513513506], [1.65123996E12, 14474.165680473372], [1.65124014E12, 29172.46428571428]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124026E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3820.4551724137937, "minX": 1.65123984E12, "maxY": 43088.513513513506, "series": [{"data": [[1.65123984E12, 3820.4551724137937], [1.65124002E12, 18706.722543352593], [1.6512402E12, 37614.95808383235], [1.6512399E12, 8818.500000000002], [1.65124008E12, 25843.89090909091], [1.65124026E12, 43088.513513513506], [1.65123996E12, 14474.130177514802], [1.65124014E12, 29172.44642857143]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124026E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.810810810810811, "minX": 1.65123984E12, "maxY": 15.25517241379311, "series": [{"data": [[1.65123984E12, 15.25517241379311], [1.65124002E12, 7.878612716763006], [1.6512402E12, 7.407185628742514], [1.6512399E12, 9.243902439024392], [1.65124008E12, 7.53939393939394], [1.65124026E12, 6.810810810810811], [1.65123996E12, 8.112426035502962], [1.65124014E12, 7.184523809523809]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124026E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 733.0, "minX": 1.65123984E12, "maxY": 60078.0, "series": [{"data": [[1.65123984E12, 12279.0], [1.65124002E12, 41386.0], [1.6512402E12, 60077.0], [1.6512399E12, 25906.0], [1.65124008E12, 50928.0], [1.65124026E12, 59296.0], [1.65123996E12, 36204.0], [1.65124014E12, 60078.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65123984E12, 7546.4], [1.65124002E12, 33013.4], [1.6512402E12, 55703.0], [1.6512399E12, 16594.5], [1.65124008E12, 44735.8], [1.65124026E12, 55807.4], [1.65123996E12, 25777.0], [1.65124014E12, 52739.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65123984E12, 11794.159999999993], [1.65124002E12, 40566.81999999999], [1.6512402E12, 60051.8], [1.6512399E12, 25012.249999999993], [1.65124008E12, 50403.96], [1.65124026E12, 59296.0], [1.65123996E12, 35486.500000000015], [1.65124014E12, 59644.380000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65123984E12, 8549.099999999997], [1.65124002E12, 35697.099999999984], [1.6512402E12, 58082.0], [1.6512399E12, 18236.25], [1.65124008E12, 47458.0], [1.65124026E12, 58565.2], [1.65123996E12, 29936.5], [1.65124014E12, 55880.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65123984E12, 733.0], [1.65124002E12, 1046.0], [1.6512402E12, 1108.0], [1.6512399E12, 864.0], [1.65124008E12, 1020.0], [1.65124026E12, 25358.0], [1.65123996E12, 754.0], [1.65124014E12, 1033.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65123984E12, 3256.0], [1.65124002E12, 18643.0], [1.6512402E12, 33276.0], [1.6512399E12, 8159.0], [1.65124008E12, 27284.0], [1.65124026E12, 40923.0], [1.65123996E12, 13855.0], [1.65124014E12, 27562.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124026E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13292.0, "minX": 1.0, "maxY": 60531.0, "series": [{"data": [[2.0, 18299.0], [4.0, 19286.0], [1.0, 33744.0], [5.0, 48574.0], [3.0, 13292.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60200.0], [2.0, 60531.0], [5.0, 60244.0], [3.0, 60200.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13292.0, "minX": 1.0, "maxY": 60531.0, "series": [{"data": [[2.0, 18299.0], [4.0, 19286.0], [1.0, 33744.0], [5.0, 48574.0], [3.0, 13292.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60200.0], [2.0, 60531.0], [5.0, 60244.0], [3.0, 60200.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.7333333333333334, "minX": 1.65123984E12, "maxY": 3.216666666666667, "series": [{"data": [[1.65123984E12, 2.75], [1.65124002E12, 3.216666666666667], [1.6512402E12, 1.7333333333333334], [1.6512399E12, 3.066666666666667], [1.65124008E12, 3.0833333333333335], [1.65123996E12, 2.9833333333333334], [1.65124014E12, 2.966666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512402E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65123984E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65123984E12, 2.4166666666666665], [1.65124002E12, 2.8833333333333333], [1.6512402E12, 2.316666666666667], [1.6512399E12, 2.7333333333333334], [1.65124008E12, 2.75], [1.65124026E12, 0.55], [1.65123996E12, 2.816666666666667], [1.65124014E12, 2.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6512402E12, 0.4666666666666667], [1.65124026E12, 0.06666666666666667], [1.65124014E12, 0.05]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124026E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65123984E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65123984E12, 2.4166666666666665], [1.65124002E12, 2.8833333333333333], [1.6512402E12, 2.316666666666667], [1.6512399E12, 2.7333333333333334], [1.65124008E12, 2.75], [1.65124026E12, 0.55], [1.65123996E12, 2.816666666666667], [1.65124014E12, 2.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6512402E12, 0.4666666666666667], [1.65124026E12, 0.06666666666666667], [1.65124014E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124026E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65123984E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65123984E12, 2.4166666666666665], [1.65124002E12, 2.8833333333333333], [1.6512402E12, 2.316666666666667], [1.6512399E12, 2.7333333333333334], [1.65124008E12, 2.75], [1.65124026E12, 0.55], [1.65123996E12, 2.816666666666667], [1.65124014E12, 2.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6512402E12, 0.4666666666666667], [1.65124026E12, 0.06666666666666667], [1.65124014E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124026E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


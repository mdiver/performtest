/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 724.0, "minX": 0.0, "maxY": 60400.0, "series": [{"data": [[0.0, 724.0], [0.1, 810.0], [0.2, 823.0], [0.3, 894.0], [0.4, 914.0], [0.5, 915.0], [0.6, 921.0], [0.7, 928.0], [0.8, 955.0], [0.9, 991.0], [1.0, 1016.0], [1.1, 1016.0], [1.2, 1024.0], [1.3, 1034.0], [1.4, 1037.0], [1.5, 1047.0], [1.6, 1048.0], [1.7, 1061.0], [1.8, 1063.0], [1.9, 1064.0], [2.0, 1089.0], [2.1, 1090.0], [2.2, 1093.0], [2.3, 1098.0], [2.4, 1127.0], [2.5, 1132.0], [2.6, 1149.0], [2.7, 1154.0], [2.8, 1160.0], [2.9, 1160.0], [3.0, 1176.0], [3.1, 1188.0], [3.2, 1208.0], [3.3, 1218.0], [3.4, 1220.0], [3.5, 1240.0], [3.6, 1248.0], [3.7, 1275.0], [3.8, 1285.0], [3.9, 1358.0], [4.0, 1391.0], [4.1, 1392.0], [4.2, 1465.0], [4.3, 1478.0], [4.4, 1478.0], [4.5, 1478.0], [4.6, 1487.0], [4.7, 1492.0], [4.8, 1499.0], [4.9, 1504.0], [5.0, 1574.0], [5.1, 1596.0], [5.2, 1618.0], [5.3, 1625.0], [5.4, 1684.0], [5.5, 1695.0], [5.6, 1725.0], [5.7, 1728.0], [5.8, 1873.0], [5.9, 1880.0], [6.0, 1917.0], [6.1, 1922.0], [6.2, 1970.0], [6.3, 1973.0], [6.4, 2029.0], [6.5, 2069.0], [6.6, 2098.0], [6.7, 2117.0], [6.8, 2148.0], [6.9, 2150.0], [7.0, 2154.0], [7.1, 2165.0], [7.2, 2208.0], [7.3, 2215.0], [7.4, 2217.0], [7.5, 2226.0], [7.6, 2233.0], [7.7, 2249.0], [7.8, 2258.0], [7.9, 2268.0], [8.0, 2280.0], [8.1, 2291.0], [8.2, 2296.0], [8.3, 2386.0], [8.4, 2388.0], [8.5, 2392.0], [8.6, 2413.0], [8.7, 2415.0], [8.8, 2440.0], [8.9, 2445.0], [9.0, 2490.0], [9.1, 2510.0], [9.2, 2517.0], [9.3, 2525.0], [9.4, 2570.0], [9.5, 2571.0], [9.6, 2579.0], [9.7, 2614.0], [9.8, 2633.0], [9.9, 2646.0], [10.0, 2649.0], [10.1, 2676.0], [10.2, 2691.0], [10.3, 2781.0], [10.4, 2813.0], [10.5, 2854.0], [10.6, 2860.0], [10.7, 2876.0], [10.8, 2877.0], [10.9, 2879.0], [11.0, 2892.0], [11.1, 2928.0], [11.2, 2983.0], [11.3, 2992.0], [11.4, 3044.0], [11.5, 3047.0], [11.6, 3053.0], [11.7, 3062.0], [11.8, 3070.0], [11.9, 3129.0], [12.0, 3162.0], [12.1, 3170.0], [12.2, 3235.0], [12.3, 3296.0], [12.4, 3299.0], [12.5, 3393.0], [12.6, 3405.0], [12.7, 3442.0], [12.8, 3444.0], [12.9, 3499.0], [13.0, 3506.0], [13.1, 3519.0], [13.2, 3535.0], [13.3, 3565.0], [13.4, 3574.0], [13.5, 3597.0], [13.6, 3618.0], [13.7, 3682.0], [13.8, 3709.0], [13.9, 3727.0], [14.0, 3730.0], [14.1, 3783.0], [14.2, 3814.0], [14.3, 3819.0], [14.4, 3827.0], [14.5, 3841.0], [14.6, 3847.0], [14.7, 3852.0], [14.8, 3865.0], [14.9, 3868.0], [15.0, 3869.0], [15.1, 3882.0], [15.2, 3893.0], [15.3, 3899.0], [15.4, 3915.0], [15.5, 3950.0], [15.6, 3953.0], [15.7, 3960.0], [15.8, 3990.0], [15.9, 4030.0], [16.0, 4056.0], [16.1, 4092.0], [16.2, 4097.0], [16.3, 4106.0], [16.4, 4107.0], [16.5, 4119.0], [16.6, 4147.0], [16.7, 4206.0], [16.8, 4254.0], [16.9, 4257.0], [17.0, 4261.0], [17.1, 4262.0], [17.2, 4269.0], [17.3, 4359.0], [17.4, 4395.0], [17.5, 4414.0], [17.6, 4419.0], [17.7, 4436.0], [17.8, 4456.0], [17.9, 4467.0], [18.0, 4485.0], [18.1, 4487.0], [18.2, 4492.0], [18.3, 4511.0], [18.4, 4518.0], [18.5, 4570.0], [18.6, 4602.0], [18.7, 4627.0], [18.8, 4639.0], [18.9, 4645.0], [19.0, 4653.0], [19.1, 4667.0], [19.2, 4713.0], [19.3, 4758.0], [19.4, 4773.0], [19.5, 4786.0], [19.6, 4809.0], [19.7, 4826.0], [19.8, 4852.0], [19.9, 4868.0], [20.0, 4917.0], [20.1, 4928.0], [20.2, 4957.0], [20.3, 5009.0], [20.4, 5010.0], [20.5, 5023.0], [20.6, 5072.0], [20.7, 5093.0], [20.8, 5144.0], [20.9, 5187.0], [21.0, 5192.0], [21.1, 5207.0], [21.2, 5229.0], [21.3, 5231.0], [21.4, 5234.0], [21.5, 5256.0], [21.6, 5294.0], [21.7, 5297.0], [21.8, 5338.0], [21.9, 5394.0], [22.0, 5420.0], [22.1, 5457.0], [22.2, 5458.0], [22.3, 5483.0], [22.4, 5488.0], [22.5, 5514.0], [22.6, 5537.0], [22.7, 5544.0], [22.8, 5554.0], [22.9, 5570.0], [23.0, 5575.0], [23.1, 5630.0], [23.2, 5639.0], [23.3, 5665.0], [23.4, 5708.0], [23.5, 5719.0], [23.6, 5754.0], [23.7, 5766.0], [23.8, 5766.0], [23.9, 5797.0], [24.0, 5859.0], [24.1, 5898.0], [24.2, 5972.0], [24.3, 6010.0], [24.4, 6036.0], [24.5, 6059.0], [24.6, 6062.0], [24.7, 6065.0], [24.8, 6109.0], [24.9, 6129.0], [25.0, 6158.0], [25.1, 6238.0], [25.2, 6242.0], [25.3, 6255.0], [25.4, 6296.0], [25.5, 6312.0], [25.6, 6324.0], [25.7, 6331.0], [25.8, 6381.0], [25.9, 6420.0], [26.0, 6444.0], [26.1, 6448.0], [26.2, 6498.0], [26.3, 6552.0], [26.4, 6573.0], [26.5, 6577.0], [26.6, 6581.0], [26.7, 6608.0], [26.8, 6624.0], [26.9, 6633.0], [27.0, 6656.0], [27.1, 6672.0], [27.2, 6681.0], [27.3, 6765.0], [27.4, 6771.0], [27.5, 6772.0], [27.6, 6782.0], [27.7, 6837.0], [27.8, 6850.0], [27.9, 6893.0], [28.0, 6895.0], [28.1, 6898.0], [28.2, 6905.0], [28.3, 7037.0], [28.4, 7042.0], [28.5, 7117.0], [28.6, 7153.0], [28.7, 7159.0], [28.8, 7184.0], [28.9, 7202.0], [29.0, 7206.0], [29.1, 7256.0], [29.2, 7311.0], [29.3, 7332.0], [29.4, 7381.0], [29.5, 7449.0], [29.6, 7528.0], [29.7, 7537.0], [29.8, 7599.0], [29.9, 7616.0], [30.0, 7617.0], [30.1, 7642.0], [30.2, 7654.0], [30.3, 7673.0], [30.4, 7706.0], [30.5, 7749.0], [30.6, 7758.0], [30.7, 7766.0], [30.8, 7794.0], [30.9, 7844.0], [31.0, 7901.0], [31.1, 7942.0], [31.2, 7959.0], [31.3, 7984.0], [31.4, 7989.0], [31.5, 7995.0], [31.6, 8002.0], [31.7, 8059.0], [31.8, 8060.0], [31.9, 8127.0], [32.0, 8174.0], [32.1, 8271.0], [32.2, 8275.0], [32.3, 8337.0], [32.4, 8385.0], [32.5, 8458.0], [32.6, 8487.0], [32.7, 8598.0], [32.8, 8636.0], [32.9, 8677.0], [33.0, 8689.0], [33.1, 8693.0], [33.2, 8714.0], [33.3, 8744.0], [33.4, 8819.0], [33.5, 8833.0], [33.6, 8835.0], [33.7, 8848.0], [33.8, 8849.0], [33.9, 8849.0], [34.0, 8879.0], [34.1, 8965.0], [34.2, 8977.0], [34.3, 8982.0], [34.4, 8990.0], [34.5, 8997.0], [34.6, 9048.0], [34.7, 9081.0], [34.8, 9089.0], [34.9, 9119.0], [35.0, 9143.0], [35.1, 9169.0], [35.2, 9231.0], [35.3, 9254.0], [35.4, 9298.0], [35.5, 9309.0], [35.6, 9320.0], [35.7, 9452.0], [35.8, 9476.0], [35.9, 9488.0], [36.0, 9564.0], [36.1, 9572.0], [36.2, 9582.0], [36.3, 9608.0], [36.4, 9616.0], [36.5, 9638.0], [36.6, 9670.0], [36.7, 9673.0], [36.8, 9740.0], [36.9, 9747.0], [37.0, 9834.0], [37.1, 9870.0], [37.2, 9994.0], [37.3, 10019.0], [37.4, 10071.0], [37.5, 10101.0], [37.6, 10146.0], [37.7, 10167.0], [37.8, 10207.0], [37.9, 10232.0], [38.0, 10327.0], [38.1, 10367.0], [38.2, 10382.0], [38.3, 10399.0], [38.4, 10405.0], [38.5, 10483.0], [38.6, 10484.0], [38.7, 10507.0], [38.8, 10564.0], [38.9, 10572.0], [39.0, 10583.0], [39.1, 10648.0], [39.2, 10668.0], [39.3, 10672.0], [39.4, 10678.0], [39.5, 10729.0], [39.6, 10780.0], [39.7, 10799.0], [39.8, 10847.0], [39.9, 10950.0], [40.0, 10964.0], [40.1, 10984.0], [40.2, 11054.0], [40.3, 11054.0], [40.4, 11123.0], [40.5, 11164.0], [40.6, 11176.0], [40.7, 11197.0], [40.8, 11226.0], [40.9, 11353.0], [41.0, 11419.0], [41.1, 11540.0], [41.2, 11541.0], [41.3, 11578.0], [41.4, 11582.0], [41.5, 11599.0], [41.6, 11599.0], [41.7, 11625.0], [41.8, 11691.0], [41.9, 11698.0], [42.0, 11741.0], [42.1, 11745.0], [42.2, 11758.0], [42.3, 11804.0], [42.4, 11904.0], [42.5, 11936.0], [42.6, 11936.0], [42.7, 11937.0], [42.8, 11972.0], [42.9, 12047.0], [43.0, 12092.0], [43.1, 12093.0], [43.2, 12098.0], [43.3, 12153.0], [43.4, 12190.0], [43.5, 12198.0], [43.6, 12253.0], [43.7, 12345.0], [43.8, 12550.0], [43.9, 12552.0], [44.0, 12586.0], [44.1, 12586.0], [44.2, 12613.0], [44.3, 12680.0], [44.4, 12722.0], [44.5, 12747.0], [44.6, 12788.0], [44.7, 12809.0], [44.8, 12840.0], [44.9, 12956.0], [45.0, 12969.0], [45.1, 13005.0], [45.2, 13050.0], [45.3, 13091.0], [45.4, 13105.0], [45.5, 13134.0], [45.6, 13196.0], [45.7, 13203.0], [45.8, 13274.0], [45.9, 13290.0], [46.0, 13329.0], [46.1, 13365.0], [46.2, 13413.0], [46.3, 13508.0], [46.4, 13509.0], [46.5, 13547.0], [46.6, 13561.0], [46.7, 13608.0], [46.8, 13619.0], [46.9, 13637.0], [47.0, 13673.0], [47.1, 13712.0], [47.2, 13734.0], [47.3, 13740.0], [47.4, 13758.0], [47.5, 13832.0], [47.6, 13872.0], [47.7, 13891.0], [47.8, 13973.0], [47.9, 14031.0], [48.0, 14031.0], [48.1, 14050.0], [48.2, 14094.0], [48.3, 14127.0], [48.4, 14166.0], [48.5, 14176.0], [48.6, 14230.0], [48.7, 14310.0], [48.8, 14483.0], [48.9, 14492.0], [49.0, 14539.0], [49.1, 14560.0], [49.2, 14564.0], [49.3, 14570.0], [49.4, 14619.0], [49.5, 14649.0], [49.6, 14653.0], [49.7, 14681.0], [49.8, 14730.0], [49.9, 14742.0], [50.0, 14878.0], [50.1, 14970.0], [50.2, 15013.0], [50.3, 15022.0], [50.4, 15026.0], [50.5, 15055.0], [50.6, 15059.0], [50.7, 15089.0], [50.8, 15093.0], [50.9, 15159.0], [51.0, 15172.0], [51.1, 15279.0], [51.2, 15289.0], [51.3, 15462.0], [51.4, 15642.0], [51.5, 15646.0], [51.6, 15666.0], [51.7, 15714.0], [51.8, 15724.0], [51.9, 15728.0], [52.0, 15729.0], [52.1, 15870.0], [52.2, 15884.0], [52.3, 15897.0], [52.4, 15906.0], [52.5, 15923.0], [52.6, 15970.0], [52.7, 15994.0], [52.8, 16039.0], [52.9, 16117.0], [53.0, 16202.0], [53.1, 16215.0], [53.2, 16260.0], [53.3, 16287.0], [53.4, 16347.0], [53.5, 16410.0], [53.6, 16502.0], [53.7, 16548.0], [53.8, 16621.0], [53.9, 16714.0], [54.0, 16741.0], [54.1, 16831.0], [54.2, 16855.0], [54.3, 16860.0], [54.4, 16925.0], [54.5, 16937.0], [54.6, 16945.0], [54.7, 16963.0], [54.8, 16985.0], [54.9, 17013.0], [55.0, 17023.0], [55.1, 17069.0], [55.2, 17148.0], [55.3, 17233.0], [55.4, 17248.0], [55.5, 17372.0], [55.6, 17433.0], [55.7, 17460.0], [55.8, 17480.0], [55.9, 17488.0], [56.0, 17658.0], [56.1, 17660.0], [56.2, 17662.0], [56.3, 17663.0], [56.4, 17709.0], [56.5, 17835.0], [56.6, 17852.0], [56.7, 18062.0], [56.8, 18106.0], [56.9, 18111.0], [57.0, 18134.0], [57.1, 18143.0], [57.2, 18213.0], [57.3, 18239.0], [57.4, 18309.0], [57.5, 18310.0], [57.6, 18384.0], [57.7, 18535.0], [57.8, 18536.0], [57.9, 18594.0], [58.0, 18612.0], [58.1, 18649.0], [58.2, 18652.0], [58.3, 18654.0], [58.4, 18658.0], [58.5, 18697.0], [58.6, 18739.0], [58.7, 18792.0], [58.8, 18865.0], [58.9, 18932.0], [59.0, 19005.0], [59.1, 19044.0], [59.2, 19054.0], [59.3, 19154.0], [59.4, 19159.0], [59.5, 19209.0], [59.6, 19241.0], [59.7, 19356.0], [59.8, 19374.0], [59.9, 19568.0], [60.0, 19709.0], [60.1, 19712.0], [60.2, 19755.0], [60.3, 19846.0], [60.4, 19862.0], [60.5, 19864.0], [60.6, 19934.0], [60.7, 19940.0], [60.8, 19941.0], [60.9, 20060.0], [61.0, 20074.0], [61.1, 20112.0], [61.2, 20131.0], [61.3, 20193.0], [61.4, 20373.0], [61.5, 20374.0], [61.6, 20494.0], [61.7, 20518.0], [61.8, 20535.0], [61.9, 20536.0], [62.0, 20588.0], [62.1, 20604.0], [62.2, 20713.0], [62.3, 20732.0], [62.4, 20794.0], [62.5, 20799.0], [62.6, 20964.0], [62.7, 20989.0], [62.8, 21006.0], [62.9, 21254.0], [63.0, 21257.0], [63.1, 21416.0], [63.2, 21486.0], [63.3, 21488.0], [63.4, 21505.0], [63.5, 21520.0], [63.6, 21568.0], [63.7, 21597.0], [63.8, 21603.0], [63.9, 21612.0], [64.0, 21643.0], [64.1, 21772.0], [64.2, 22033.0], [64.3, 22042.0], [64.4, 22065.0], [64.5, 22104.0], [64.6, 22234.0], [64.7, 22304.0], [64.8, 22333.0], [64.9, 22385.0], [65.0, 22391.0], [65.1, 22533.0], [65.2, 22546.0], [65.3, 22561.0], [65.4, 22598.0], [65.5, 22722.0], [65.6, 22727.0], [65.7, 22728.0], [65.8, 22781.0], [65.9, 22842.0], [66.0, 22933.0], [66.1, 23145.0], [66.2, 23215.0], [66.3, 23215.0], [66.4, 23218.0], [66.5, 23291.0], [66.6, 23378.0], [66.7, 23439.0], [66.8, 23443.0], [66.9, 23502.0], [67.0, 23538.0], [67.1, 23654.0], [67.2, 23683.0], [67.3, 23707.0], [67.4, 23769.0], [67.5, 23805.0], [67.6, 23859.0], [67.7, 23873.0], [67.8, 23907.0], [67.9, 24029.0], [68.0, 24102.0], [68.1, 24105.0], [68.2, 24128.0], [68.3, 24386.0], [68.4, 24397.0], [68.5, 24471.0], [68.6, 24488.0], [68.7, 24530.0], [68.8, 24565.0], [68.9, 24634.0], [69.0, 24706.0], [69.1, 24718.0], [69.2, 24751.0], [69.3, 24788.0], [69.4, 24833.0], [69.5, 24925.0], [69.6, 24991.0], [69.7, 24996.0], [69.8, 25056.0], [69.9, 25057.0], [70.0, 25079.0], [70.1, 25173.0], [70.2, 25173.0], [70.3, 25176.0], [70.4, 25428.0], [70.5, 25561.0], [70.6, 25769.0], [70.7, 25778.0], [70.8, 25873.0], [70.9, 25923.0], [71.0, 26069.0], [71.1, 26083.0], [71.2, 26100.0], [71.3, 26132.0], [71.4, 26144.0], [71.5, 26146.0], [71.6, 26186.0], [71.7, 26190.0], [71.8, 26295.0], [71.9, 26309.0], [72.0, 26318.0], [72.1, 26567.0], [72.2, 26619.0], [72.3, 26746.0], [72.4, 26902.0], [72.5, 26910.0], [72.6, 27001.0], [72.7, 27107.0], [72.8, 27280.0], [72.9, 27322.0], [73.0, 27326.0], [73.1, 27359.0], [73.2, 27388.0], [73.3, 27574.0], [73.4, 27614.0], [73.5, 27624.0], [73.6, 27766.0], [73.7, 27789.0], [73.8, 27810.0], [73.9, 27888.0], [74.0, 27965.0], [74.1, 27983.0], [74.2, 28080.0], [74.3, 28128.0], [74.4, 28312.0], [74.5, 28375.0], [74.6, 28447.0], [74.7, 28540.0], [74.8, 28592.0], [74.9, 28641.0], [75.0, 28808.0], [75.1, 28815.0], [75.2, 29092.0], [75.3, 29114.0], [75.4, 29211.0], [75.5, 29230.0], [75.6, 29257.0], [75.7, 29431.0], [75.8, 29450.0], [75.9, 29502.0], [76.0, 29530.0], [76.1, 29606.0], [76.2, 29640.0], [76.3, 29676.0], [76.4, 29706.0], [76.5, 29888.0], [76.6, 29918.0], [76.7, 29985.0], [76.8, 30021.0], [76.9, 30038.0], [77.0, 30148.0], [77.1, 30155.0], [77.2, 30348.0], [77.3, 30381.0], [77.4, 30551.0], [77.5, 30616.0], [77.6, 30788.0], [77.7, 30798.0], [77.8, 30850.0], [77.9, 30922.0], [78.0, 31024.0], [78.1, 31099.0], [78.2, 31162.0], [78.3, 31205.0], [78.4, 31238.0], [78.5, 31268.0], [78.6, 31312.0], [78.7, 31420.0], [78.8, 31434.0], [78.9, 31565.0], [79.0, 31683.0], [79.1, 31746.0], [79.2, 31750.0], [79.3, 31798.0], [79.4, 31805.0], [79.5, 32088.0], [79.6, 32625.0], [79.7, 32638.0], [79.8, 32694.0], [79.9, 32876.0], [80.0, 32883.0], [80.1, 32890.0], [80.2, 32921.0], [80.3, 32924.0], [80.4, 32927.0], [80.5, 32958.0], [80.6, 32972.0], [80.7, 33163.0], [80.8, 33212.0], [80.9, 33577.0], [81.0, 33596.0], [81.1, 33616.0], [81.2, 33669.0], [81.3, 33898.0], [81.4, 33949.0], [81.5, 34049.0], [81.6, 34059.0], [81.7, 34083.0], [81.8, 34103.0], [81.9, 34123.0], [82.0, 34316.0], [82.1, 34423.0], [82.2, 34532.0], [82.3, 34593.0], [82.4, 34783.0], [82.5, 34927.0], [82.6, 34947.0], [82.7, 34999.0], [82.8, 35011.0], [82.9, 35103.0], [83.0, 35160.0], [83.1, 35333.0], [83.2, 35508.0], [83.3, 35515.0], [83.4, 35619.0], [83.5, 35775.0], [83.6, 35846.0], [83.7, 35968.0], [83.8, 36013.0], [83.9, 36050.0], [84.0, 36065.0], [84.1, 36117.0], [84.2, 36142.0], [84.3, 36242.0], [84.4, 36416.0], [84.5, 36532.0], [84.6, 36571.0], [84.7, 37146.0], [84.8, 37179.0], [84.9, 37296.0], [85.0, 37320.0], [85.1, 37422.0], [85.2, 37422.0], [85.3, 37467.0], [85.4, 37608.0], [85.5, 37728.0], [85.6, 37796.0], [85.7, 37834.0], [85.8, 37845.0], [85.9, 38213.0], [86.0, 38289.0], [86.1, 38295.0], [86.2, 38304.0], [86.3, 38645.0], [86.4, 38681.0], [86.5, 38694.0], [86.6, 38927.0], [86.7, 38943.0], [86.8, 38995.0], [86.9, 39182.0], [87.0, 39308.0], [87.1, 39345.0], [87.2, 39546.0], [87.3, 39579.0], [87.4, 39580.0], [87.5, 39808.0], [87.6, 39850.0], [87.7, 39935.0], [87.8, 40355.0], [87.9, 40421.0], [88.0, 40487.0], [88.1, 40642.0], [88.2, 40806.0], [88.3, 40992.0], [88.4, 41075.0], [88.5, 41202.0], [88.6, 41218.0], [88.7, 41354.0], [88.8, 41537.0], [88.9, 41638.0], [89.0, 41776.0], [89.1, 41788.0], [89.2, 42001.0], [89.3, 42132.0], [89.4, 42132.0], [89.5, 42296.0], [89.6, 42340.0], [89.7, 42847.0], [89.8, 42952.0], [89.9, 43009.0], [90.0, 43072.0], [90.1, 43167.0], [90.2, 43192.0], [90.3, 43300.0], [90.4, 43370.0], [90.5, 43414.0], [90.6, 43501.0], [90.7, 43540.0], [90.8, 43659.0], [90.9, 43908.0], [91.0, 44156.0], [91.1, 44275.0], [91.2, 44297.0], [91.3, 44388.0], [91.4, 44644.0], [91.5, 44670.0], [91.6, 44851.0], [91.7, 45167.0], [91.8, 45293.0], [91.9, 45393.0], [92.0, 45443.0], [92.1, 45491.0], [92.2, 45657.0], [92.3, 45908.0], [92.4, 46008.0], [92.5, 46040.0], [92.6, 46087.0], [92.7, 46348.0], [92.8, 46590.0], [92.9, 46777.0], [93.0, 47030.0], [93.1, 47259.0], [93.2, 47277.0], [93.3, 47300.0], [93.4, 47391.0], [93.5, 47621.0], [93.6, 47868.0], [93.7, 48110.0], [93.8, 48273.0], [93.9, 48551.0], [94.0, 48570.0], [94.1, 48584.0], [94.2, 48847.0], [94.3, 48952.0], [94.4, 49042.0], [94.5, 49361.0], [94.6, 49507.0], [94.7, 49821.0], [94.8, 49936.0], [94.9, 50291.0], [95.0, 50342.0], [95.1, 50647.0], [95.2, 50703.0], [95.3, 51065.0], [95.4, 51361.0], [95.5, 51802.0], [95.6, 51846.0], [95.7, 52018.0], [95.8, 52019.0], [95.9, 52128.0], [96.0, 52796.0], [96.1, 52963.0], [96.2, 53212.0], [96.3, 53376.0], [96.4, 53628.0], [96.5, 54072.0], [96.6, 54233.0], [96.7, 54326.0], [96.8, 54705.0], [96.9, 54772.0], [97.0, 54797.0], [97.1, 55498.0], [97.2, 55533.0], [97.3, 55604.0], [97.4, 55758.0], [97.5, 56153.0], [97.6, 57212.0], [97.7, 57324.0], [97.8, 57441.0], [97.9, 57837.0], [98.0, 57874.0], [98.1, 58335.0], [98.2, 58661.0], [98.3, 58763.0], [98.4, 59349.0], [98.5, 59756.0], [98.6, 60012.0], [98.7, 60064.0], [98.8, 60172.0], [98.9, 60190.0], [99.0, 60190.0], [99.1, 60196.0], [99.2, 60203.0], [99.3, 60209.0], [99.4, 60211.0], [99.5, 60218.0], [99.6, 60220.0], [99.7, 60225.0], [99.8, 60237.0], [99.9, 60272.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 15.0, "series": [{"data": [[32900.0, 5.0], [34500.0, 2.0], [35300.0, 1.0], [36100.0, 2.0], [37700.0, 2.0], [39300.0, 2.0], [40900.0, 1.0], [41700.0, 2.0], [44100.0, 1.0], [43300.0, 2.0], [46500.0, 1.0], [47300.0, 2.0], [48100.0, 1.0], [48900.0, 1.0], [52900.0, 1.0], [52100.0, 1.0], [51300.0, 1.0], [56100.0, 1.0], [59300.0, 1.0], [60100.0, 5.0], [700.0, 1.0], [800.0, 3.0], [900.0, 6.0], [1000.0, 15.0], [1100.0, 9.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 7.0], [1500.0, 3.0], [1600.0, 5.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 5.0], [2200.0, 12.0], [2300.0, 3.0], [2400.0, 6.0], [2500.0, 6.0], [2600.0, 6.0], [2800.0, 7.0], [2700.0, 2.0], [2900.0, 3.0], [3000.0, 6.0], [3100.0, 3.0], [3200.0, 3.0], [3300.0, 1.0], [3400.0, 5.0], [3500.0, 6.0], [3600.0, 2.0], [3700.0, 4.0], [3800.0, 13.0], [3900.0, 6.0], [4000.0, 4.0], [4100.0, 5.0], [4200.0, 6.0], [4300.0, 2.0], [4500.0, 3.0], [4600.0, 6.0], [4400.0, 9.0], [4800.0, 4.0], [4700.0, 5.0], [5000.0, 6.0], [4900.0, 3.0], [5100.0, 3.0], [5200.0, 7.0], [5300.0, 3.0], [5400.0, 5.0], [5600.0, 4.0], [5500.0, 6.0], [5800.0, 2.0], [5700.0, 6.0], [5900.0, 1.0], [6100.0, 3.0], [6000.0, 6.0], [6300.0, 5.0], [6200.0, 4.0], [6600.0, 7.0], [6400.0, 4.0], [6500.0, 4.0], [6800.0, 5.0], [6700.0, 4.0], [6900.0, 1.0], [7100.0, 4.0], [7000.0, 3.0], [7200.0, 3.0], [7300.0, 3.0], [7400.0, 2.0], [7500.0, 3.0], [7600.0, 5.0], [7700.0, 6.0], [7900.0, 6.0], [7800.0, 1.0], [8100.0, 2.0], [8000.0, 3.0], [8600.0, 4.0], [8400.0, 2.0], [8200.0, 3.0], [9000.0, 4.0], [8800.0, 7.0], [9200.0, 3.0], [9400.0, 4.0], [9600.0, 5.0], [9800.0, 2.0], [10200.0, 2.0], [10000.0, 2.0], [10600.0, 4.0], [10400.0, 4.0], [10800.0, 2.0], [11000.0, 2.0], [11200.0, 1.0], [11400.0, 2.0], [11600.0, 3.0], [11800.0, 2.0], [12000.0, 4.0], [12200.0, 2.0], [12600.0, 2.0], [12800.0, 3.0], [13000.0, 3.0], [13200.0, 3.0], [13600.0, 4.0], [13400.0, 1.0], [13800.0, 3.0], [14000.0, 4.0], [14200.0, 1.0], [14600.0, 4.0], [14400.0, 2.0], [14800.0, 1.0], [15000.0, 7.0], [15200.0, 2.0], [15800.0, 3.0], [15400.0, 2.0], [15600.0, 3.0], [16200.0, 4.0], [16000.0, 1.0], [16800.0, 3.0], [17200.0, 2.0], [16400.0, 1.0], [17600.0, 4.0], [18000.0, 1.0], [18400.0, 1.0], [18800.0, 1.0], [19200.0, 2.0], [20000.0, 2.0], [20400.0, 2.0], [21200.0, 2.0], [21600.0, 3.0], [22000.0, 4.0], [23200.0, 4.0], [22800.0, 1.0], [23600.0, 2.0], [24400.0, 2.0], [24000.0, 2.0], [24800.0, 1.0], [26000.0, 2.0], [27600.0, 2.0], [27200.0, 1.0], [28400.0, 1.0], [28000.0, 1.0], [29200.0, 4.0], [28800.0, 2.0], [29600.0, 3.0], [30000.0, 3.0], [31200.0, 3.0], [30800.0, 1.0], [31600.0, 1.0], [32000.0, 1.0], [32800.0, 3.0], [33600.0, 2.0], [34400.0, 1.0], [36000.0, 3.0], [37600.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [47200.0, 2.0], [48800.0, 1.0], [52000.0, 2.0], [53600.0, 1.0], [60000.0, 2.0], [33100.0, 2.0], [33900.0, 1.0], [34700.0, 1.0], [35500.0, 3.0], [37100.0, 2.0], [37900.0, 1.0], [39500.0, 3.0], [40300.0, 1.0], [41100.0, 1.0], [43500.0, 2.0], [44300.0, 1.0], [45100.0, 1.0], [45900.0, 2.0], [46700.0, 1.0], [50700.0, 1.0], [49900.0, 2.0], [54700.0, 3.0], [55500.0, 1.0], [58700.0, 1.0], [16900.0, 5.0], [17300.0, 1.0], [16500.0, 2.0], [17700.0, 2.0], [18100.0, 4.0], [18500.0, 3.0], [18900.0, 2.0], [19300.0, 2.0], [20100.0, 3.0], [19700.0, 4.0], [20500.0, 4.0], [20900.0, 2.0], [22500.0, 5.0], [21700.0, 1.0], [22100.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [24100.0, 3.0], [24500.0, 2.0], [23700.0, 2.0], [24900.0, 3.0], [26100.0, 6.0], [26500.0, 1.0], [25700.0, 3.0], [27300.0, 5.0], [26900.0, 2.0], [27700.0, 2.0], [28500.0, 2.0], [28100.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [30100.0, 2.0], [30900.0, 1.0], [31700.0, 3.0], [31300.0, 1.0], [33800.0, 1.0], [36200.0, 1.0], [38600.0, 3.0], [37800.0, 2.0], [37000.0, 1.0], [39400.0, 1.0], [41000.0, 1.0], [44200.0, 3.0], [43400.0, 1.0], [48200.0, 1.0], [49000.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [53000.0, 1.0], [55400.0, 1.0], [57800.0, 2.0], [58600.0, 1.0], [60200.0, 8.0], [34100.0, 2.0], [36500.0, 2.0], [34900.0, 3.0], [35700.0, 1.0], [38900.0, 3.0], [37300.0, 1.0], [42900.0, 1.0], [42100.0, 2.0], [41300.0, 1.0], [45300.0, 1.0], [48500.0, 3.0], [47700.0, 1.0], [49300.0, 1.0], [53300.0, 1.0], [55700.0, 1.0], [57300.0, 1.0], [59700.0, 1.0], [8500.0, 1.0], [8700.0, 3.0], [8300.0, 2.0], [9100.0, 3.0], [8900.0, 5.0], [9300.0, 2.0], [9700.0, 2.0], [9500.0, 3.0], [10100.0, 3.0], [9900.0, 2.0], [10300.0, 4.0], [10500.0, 4.0], [10700.0, 3.0], [10900.0, 3.0], [11100.0, 4.0], [11500.0, 6.0], [11300.0, 1.0], [11700.0, 3.0], [11900.0, 5.0], [12100.0, 3.0], [12500.0, 4.0], [12700.0, 3.0], [12300.0, 1.0], [13100.0, 3.0], [13300.0, 3.0], [12900.0, 2.0], [13500.0, 4.0], [13700.0, 5.0], [13900.0, 1.0], [14100.0, 3.0], [14300.0, 2.0], [14700.0, 3.0], [14500.0, 4.0], [15100.0, 2.0], [14900.0, 1.0], [15700.0, 4.0], [15900.0, 5.0], [16300.0, 1.0], [16100.0, 1.0], [16600.0, 2.0], [17400.0, 4.0], [17000.0, 3.0], [17800.0, 2.0], [18200.0, 2.0], [18600.0, 6.0], [19000.0, 3.0], [19800.0, 3.0], [21000.0, 1.0], [21400.0, 3.0], [20600.0, 1.0], [22200.0, 1.0], [23400.0, 3.0], [23800.0, 3.0], [25000.0, 3.0], [25400.0, 1.0], [24600.0, 1.0], [26200.0, 2.0], [26600.0, 1.0], [25800.0, 1.0], [27000.0, 1.0], [28600.0, 1.0], [27800.0, 2.0], [29000.0, 1.0], [29400.0, 2.0], [29800.0, 1.0], [30600.0, 1.0], [31400.0, 2.0], [31000.0, 2.0], [32600.0, 3.0], [31800.0, 2.0], [34000.0, 3.0], [33200.0, 1.0], [35600.0, 1.0], [36400.0, 1.0], [37200.0, 1.0], [40400.0, 2.0], [41200.0, 2.0], [42800.0, 2.0], [42000.0, 1.0], [43600.0, 1.0], [46000.0, 3.0], [45200.0, 1.0], [47600.0, 1.0], [53200.0, 1.0], [54000.0, 1.0], [55600.0, 1.0], [57200.0, 1.0], [60400.0, 1.0], [33500.0, 2.0], [34300.0, 2.0], [35100.0, 2.0], [35900.0, 1.0], [38300.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [41500.0, 1.0], [42300.0, 1.0], [43100.0, 2.0], [43900.0, 1.0], [46300.0, 1.0], [50300.0, 1.0], [49500.0, 1.0], [52700.0, 1.0], [54300.0, 1.0], [58300.0, 1.0], [16700.0, 2.0], [17100.0, 2.0], [18300.0, 3.0], [19100.0, 2.0], [18700.0, 2.0], [19900.0, 3.0], [19500.0, 1.0], [20300.0, 2.0], [21500.0, 4.0], [20700.0, 4.0], [21100.0, 1.0], [22300.0, 4.0], [22700.0, 4.0], [23500.0, 2.0], [23100.0, 1.0], [23900.0, 1.0], [24300.0, 2.0], [24700.0, 5.0], [25500.0, 1.0], [25100.0, 3.0], [26300.0, 2.0], [25900.0, 1.0], [27100.0, 1.0], [26700.0, 1.0], [27500.0, 1.0], [28300.0, 3.0], [27900.0, 2.0], [29100.0, 1.0], [29500.0, 2.0], [29900.0, 2.0], [30700.0, 2.0], [30300.0, 2.0], [31100.0, 2.0], [31500.0, 1.0], [35800.0, 1.0], [35000.0, 1.0], [38200.0, 3.0], [37400.0, 3.0], [39800.0, 2.0], [40600.0, 1.0], [43000.0, 2.0], [42200.0, 1.0], [44600.0, 2.0], [45400.0, 2.0], [47000.0, 1.0], [47800.0, 1.0], [50200.0, 1.0], [51000.0, 1.0], [51800.0, 2.0], [54200.0, 1.0], [55800.0, 1.0], [57400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1011.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 52.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1011.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 15.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.073170731707314, "minX": 1.65124416E12, "maxY": 85.60714285714282, "series": [{"data": [[1.65124452E12, 79.8109756097561], [1.65124422E12, 16.976331360946755], [1.65124416E12, 9.073170731707314], [1.65124434E12, 52.05263157894738], [1.65124428E12, 34.70059880239519], [1.65124446E12, 85.60714285714282], [1.6512444E12, 68.70909090909089], [1.65124458E12, 17.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124458E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4081.1839080459777, "minX": 1.0, "maxY": 55533.0, "series": [{"data": [[2.0, 31683.0], [3.0, 15436.0], [4.0, 18280.0], [5.0, 11792.666666666666], [6.0, 11064.0], [7.0, 15075.5], [8.0, 13275.5], [9.0, 20796.333333333332], [10.0, 4081.1839080459777], [11.0, 30851.5], [12.0, 21321.666666666668], [13.0, 21669.666666666668], [14.0, 32066.0], [15.0, 21857.333333333332], [16.0, 55533.0], [17.0, 22400.666666666668], [18.0, 28010.0], [19.0, 31847.0], [20.0, 7271.9534883720935], [21.0, 27043.333333333332], [22.0, 30392.5], [23.0, 23371.0], [24.0, 28580.5], [25.0, 35580.0], [26.0, 22603.0], [27.0, 29374.5], [28.0, 19250.666666666664], [29.0, 26463.5], [30.0, 9775.402298850575], [31.0, 29262.0], [32.0, 24063.0], [33.0, 31872.0], [34.0, 24795.0], [35.0, 30030.0], [36.0, 26099.0], [37.0, 32431.5], [38.0, 19976.0], [39.0, 30755.5], [40.0, 13023.470588235297], [41.0, 26940.5], [42.0, 18705.333333333336], [43.0, 22566.0], [44.0, 26257.5], [45.0, 20298.333333333336], [46.0, 20232.666666666668], [47.0, 27728.0], [48.0, 22201.5], [49.0, 22139.0], [50.0, 15592.522727272722], [51.0, 29199.0], [52.0, 22305.0], [53.0, 29328.0], [54.0, 23638.666666666668], [55.0, 22905.0], [56.0, 29123.0], [57.0, 25424.333333333332], [58.0, 25307.0], [59.0, 23665.5], [60.0, 18442.574712643673], [61.0, 17637.666666666668], [62.0, 24138.0], [63.0, 18547.666666666668], [64.0, 15424.5], [65.0, 19718.0], [66.0, 24507.0], [67.0, 20093.0], [68.0, 15509.5], [69.0, 21269.666666666668], [70.0, 23625.37037037036], [71.0, 17632.333333333332], [72.0, 24460.5], [73.0, 18395.0], [74.0, 10768.0], [75.0, 19136.666666666668], [76.0, 19132.0], [77.0, 16632.166666666664], [78.0, 24710.5], [79.0, 10536.5], [80.0, 24547.662790697672], [81.0, 26748.0], [82.0, 28037.5], [83.0, 27787.333333333336], [84.0, 19097.5], [85.0, 20101.4], [86.0, 20392.666666666668], [87.0, 18511.0], [88.0, 37056.28571428572], [89.0, 54072.0625], [90.0, 29368.05813953488], [1.0, 36142.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[53.15955473098329, 19086.121521335786]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 90.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 85.25, "minX": 1.65124416E12, "maxY": 531.75, "series": [{"data": [[1.65124452E12, 531.75], [1.65124422E12, 493.26666666666665], [1.65124416E12, 119.46666666666667], [1.65124434E12, 500.6666666666667], [1.65124428E12, 488.6], [1.65124446E12, 492.28333333333336], [1.6512444E12, 483.48333333333335], [1.65124458E12, 141.48333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124452E12, 423.6666666666667], [1.65124422E12, 436.5833333333333], [1.65124416E12, 105.91666666666667], [1.65124434E12, 441.75], [1.65124428E12, 431.4166666666667], [1.65124446E12, 434.0], [1.6512444E12, 426.25], [1.65124458E12, 85.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124458E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2695.878048780487, "minX": 1.65124416E12, "maxY": 49526.878787878784, "series": [{"data": [[1.65124452E12, 30916.689024390234], [1.65124422E12, 5411.834319526629], [1.65124416E12, 2695.878048780487], [1.65124434E12, 15734.362573099417], [1.65124428E12, 11112.999999999995], [1.65124446E12, 27010.02976190477], [1.6512444E12, 22793.042424242434], [1.65124458E12, 49526.878787878784]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124458E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2695.5853658536585, "minX": 1.65124416E12, "maxY": 49526.878787878784, "series": [{"data": [[1.65124452E12, 30916.66463414634], [1.65124422E12, 5411.781065088758], [1.65124416E12, 2695.5853658536585], [1.65124434E12, 15734.333333333338], [1.65124428E12, 11112.946107784432], [1.65124446E12, 27010.005952380954], [1.6512444E12, 22793.03030303031], [1.65124458E12, 49526.878787878784]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124458E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.65124416E12, "maxY": 25.1951219512195, "series": [{"data": [[1.65124452E12, 8.256097560975604], [1.65124422E12, 9.76923076923077], [1.65124416E12, 25.1951219512195], [1.65124434E12, 8.198830409356727], [1.65124428E12, 8.652694610778445], [1.65124446E12, 7.172619047619048], [1.6512444E12, 7.684848484848486], [1.65124458E12, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124458E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 724.0, "minX": 1.65124416E12, "maxY": 60064.0, "series": [{"data": [[1.65124452E12, 60064.0], [1.65124422E12, 14793.0], [1.65124416E12, 6381.0], [1.65124434E12, 34316.0], [1.65124428E12, 26100.0], [1.65124446E12, 57212.0], [1.6512444E12, 47259.0], [1.65124458E12, 59756.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124452E12, 51350.90000000001], [1.65124422E12, 10964.0], [1.65124416E12, 5478.0], [1.65124434E12, 27756.000000000004], [1.65124428E12, 19755.400000000005], [1.65124446E12, 47279.3], [1.6512444E12, 39403.200000000004], [1.65124458E12, 58938.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124452E12, 59264.29000000001], [1.65124422E12, 14055.900000000012], [1.65124416E12, 6381.0], [1.65124434E12, 33797.6], [1.65124428E12, 25182.67999999999], [1.65124446E12, 56102.48], [1.6512444E12, 46433.340000000004], [1.65124458E12, 59756.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124452E12, 55546.9], [1.65124422E12, 12352.5], [1.65124416E12, 5960.7], [1.65124434E12, 29739.2], [1.65124428E12, 22044.599999999995], [1.65124446E12, 51144.99999999998], [1.6512444E12, 42705.99999999999], [1.65124458E12, 59613.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124452E12, 1695.0], [1.65124422E12, 810.0], [1.65124416E12, 724.0], [1.65124434E12, 823.0], [1.65124428E12, 1033.0], [1.65124446E12, 914.0], [1.6512444E12, 1275.0], [1.65124458E12, 24634.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124452E12, 29770.0], [1.65124422E12, 4653.0], [1.65124416E12, 2268.0], [1.65124434E12, 15159.0], [1.65124428E12, 10847.0], [1.65124446E12, 27357.0], [1.6512444E12, 22587.0], [1.65124458E12, 50234.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13726.0, "minX": 1.0, "maxY": 60220.0, "series": [{"data": [[2.0, 14653.0], [4.0, 16741.0], [1.0, 34947.0], [5.0, 52078.5], [3.0, 13726.0], [7.0, 53926.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60220.0], [2.0, 60190.0], [5.0, 60206.0], [7.0, 60218.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13726.0, "minX": 1.0, "maxY": 60220.0, "series": [{"data": [[2.0, 14653.0], [4.0, 16741.0], [1.0, 34947.0], [5.0, 52078.5], [3.0, 13726.0], [7.0, 53926.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60220.0], [2.0, 60190.0], [5.0, 60206.0], [7.0, 60218.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.65124416E12, "maxY": 3.183333333333333, "series": [{"data": [[1.65124452E12, 1.7833333333333334], [1.65124422E12, 3.15], [1.65124416E12, 0.85], [1.65124434E12, 3.183333333333333], [1.65124428E12, 2.95], [1.65124446E12, 2.966666666666667], [1.6512444E12, 3.0833333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124452E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124416E12, "maxY": 2.85, "series": [{"data": [[1.65124452E12, 2.6], [1.65124422E12, 2.816666666666667], [1.65124416E12, 0.6833333333333333], [1.65124434E12, 2.85], [1.65124428E12, 2.783333333333333], [1.65124446E12, 2.8], [1.6512444E12, 2.75], [1.65124458E12, 0.43333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65124452E12, 0.13333333333333333], [1.65124458E12, 0.11666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124458E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124416E12, "maxY": 2.85, "series": [{"data": [[1.65124452E12, 2.6], [1.65124422E12, 2.816666666666667], [1.65124416E12, 0.6833333333333333], [1.65124434E12, 2.85], [1.65124428E12, 2.783333333333333], [1.65124446E12, 2.8], [1.6512444E12, 2.75], [1.65124458E12, 0.43333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65124452E12, 0.13333333333333333], [1.65124458E12, 0.11666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124458E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124416E12, "maxY": 2.85, "series": [{"data": [[1.65124452E12, 2.6], [1.65124422E12, 2.816666666666667], [1.65124416E12, 0.6833333333333333], [1.65124434E12, 2.85], [1.65124428E12, 2.783333333333333], [1.65124446E12, 2.8], [1.6512444E12, 2.75], [1.65124458E12, 0.43333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65124452E12, 0.13333333333333333], [1.65124458E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124458E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


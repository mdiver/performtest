/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 645.0, "minX": 0.0, "maxY": 60013.0, "series": [{"data": [[0.0, 645.0], [0.1, 645.0], [0.2, 822.0], [0.3, 831.0], [0.4, 848.0], [0.5, 882.0], [0.6, 885.0], [0.7, 910.0], [0.8, 917.0], [0.9, 918.0], [1.0, 920.0], [1.1, 940.0], [1.2, 951.0], [1.3, 965.0], [1.4, 1017.0], [1.5, 1026.0], [1.6, 1053.0], [1.7, 1063.0], [1.8, 1065.0], [1.9, 1069.0], [2.0, 1128.0], [2.1, 1153.0], [2.2, 1157.0], [2.3, 1158.0], [2.4, 1163.0], [2.5, 1188.0], [2.6, 1213.0], [2.7, 1213.0], [2.8, 1216.0], [2.9, 1216.0], [3.0, 1246.0], [3.1, 1277.0], [3.2, 1281.0], [3.3, 1299.0], [3.4, 1307.0], [3.5, 1311.0], [3.6, 1320.0], [3.7, 1324.0], [3.8, 1324.0], [3.9, 1338.0], [4.0, 1345.0], [4.1, 1346.0], [4.2, 1363.0], [4.3, 1375.0], [4.4, 1383.0], [4.5, 1401.0], [4.6, 1404.0], [4.7, 1404.0], [4.8, 1422.0], [4.9, 1475.0], [5.0, 1492.0], [5.1, 1505.0], [5.2, 1509.0], [5.3, 1514.0], [5.4, 1516.0], [5.5, 1544.0], [5.6, 1545.0], [5.7, 1546.0], [5.8, 1546.0], [5.9, 1555.0], [6.0, 1587.0], [6.1, 1634.0], [6.2, 1667.0], [6.3, 1672.0], [6.4, 1721.0], [6.5, 1721.0], [6.6, 1728.0], [6.7, 1783.0], [6.8, 1815.0], [6.9, 1822.0], [7.0, 1838.0], [7.1, 1864.0], [7.2, 1865.0], [7.3, 1895.0], [7.4, 1913.0], [7.5, 1915.0], [7.6, 1933.0], [7.7, 1972.0], [7.8, 1992.0], [7.9, 2007.0], [8.0, 2019.0], [8.1, 2034.0], [8.2, 2055.0], [8.3, 2086.0], [8.4, 2113.0], [8.5, 2116.0], [8.6, 2116.0], [8.7, 2128.0], [8.8, 2133.0], [8.9, 2194.0], [9.0, 2256.0], [9.1, 2263.0], [9.2, 2267.0], [9.3, 2299.0], [9.4, 2324.0], [9.5, 2335.0], [9.6, 2345.0], [9.7, 2366.0], [9.8, 2404.0], [9.9, 2425.0], [10.0, 2468.0], [10.1, 2476.0], [10.2, 2506.0], [10.3, 2524.0], [10.4, 2539.0], [10.5, 2638.0], [10.6, 2650.0], [10.7, 2673.0], [10.8, 2674.0], [10.9, 2674.0], [11.0, 2681.0], [11.1, 2690.0], [11.2, 2696.0], [11.3, 2700.0], [11.4, 2701.0], [11.5, 2701.0], [11.6, 2714.0], [11.7, 2726.0], [11.8, 2727.0], [11.9, 2743.0], [12.0, 2769.0], [12.1, 2778.0], [12.2, 2783.0], [12.3, 2787.0], [12.4, 2791.0], [12.5, 2811.0], [12.6, 2822.0], [12.7, 2824.0], [12.8, 2831.0], [12.9, 2851.0], [13.0, 2889.0], [13.1, 2896.0], [13.2, 2911.0], [13.3, 2924.0], [13.4, 2954.0], [13.5, 2985.0], [13.6, 3004.0], [13.7, 3026.0], [13.8, 3038.0], [13.9, 3038.0], [14.0, 3053.0], [14.1, 3061.0], [14.2, 3097.0], [14.3, 3097.0], [14.4, 3143.0], [14.5, 3173.0], [14.6, 3194.0], [14.7, 3198.0], [14.8, 3200.0], [14.9, 3254.0], [15.0, 3267.0], [15.1, 3268.0], [15.2, 3270.0], [15.3, 3286.0], [15.4, 3303.0], [15.5, 3332.0], [15.6, 3387.0], [15.7, 3395.0], [15.8, 3455.0], [15.9, 3487.0], [16.0, 3501.0], [16.1, 3508.0], [16.2, 3538.0], [16.3, 3560.0], [16.4, 3586.0], [16.5, 3599.0], [16.6, 3635.0], [16.7, 3648.0], [16.8, 3672.0], [16.9, 3720.0], [17.0, 3737.0], [17.1, 3805.0], [17.2, 3805.0], [17.3, 3817.0], [17.4, 3823.0], [17.5, 3838.0], [17.6, 3893.0], [17.7, 3905.0], [17.8, 3920.0], [17.9, 3937.0], [18.0, 3972.0], [18.1, 3989.0], [18.2, 4027.0], [18.3, 4030.0], [18.4, 4044.0], [18.5, 4084.0], [18.6, 4087.0], [18.7, 4087.0], [18.8, 4096.0], [18.9, 4108.0], [19.0, 4113.0], [19.1, 4130.0], [19.2, 4138.0], [19.3, 4160.0], [19.4, 4167.0], [19.5, 4176.0], [19.6, 4204.0], [19.7, 4207.0], [19.8, 4219.0], [19.9, 4226.0], [20.0, 4226.0], [20.1, 4226.0], [20.2, 4245.0], [20.3, 4263.0], [20.4, 4313.0], [20.5, 4332.0], [20.6, 4376.0], [20.7, 4418.0], [20.8, 4439.0], [20.9, 4461.0], [21.0, 4507.0], [21.1, 4523.0], [21.2, 4532.0], [21.3, 4545.0], [21.4, 4556.0], [21.5, 4563.0], [21.6, 4565.0], [21.7, 4567.0], [21.8, 4577.0], [21.9, 4581.0], [22.0, 4629.0], [22.1, 4655.0], [22.2, 4701.0], [22.3, 4742.0], [22.4, 4751.0], [22.5, 4778.0], [22.6, 4796.0], [22.7, 4809.0], [22.8, 4810.0], [22.9, 4810.0], [23.0, 4826.0], [23.1, 4828.0], [23.2, 4870.0], [23.3, 4939.0], [23.4, 4988.0], [23.5, 5008.0], [23.6, 5026.0], [23.7, 5029.0], [23.8, 5070.0], [23.9, 5080.0], [24.0, 5095.0], [24.1, 5125.0], [24.2, 5154.0], [24.3, 5181.0], [24.4, 5204.0], [24.5, 5207.0], [24.6, 5216.0], [24.7, 5246.0], [24.8, 5263.0], [24.9, 5316.0], [25.0, 5328.0], [25.1, 5341.0], [25.2, 5358.0], [25.3, 5366.0], [25.4, 5367.0], [25.5, 5367.0], [25.6, 5368.0], [25.7, 5375.0], [25.8, 5375.0], [25.9, 5409.0], [26.0, 5482.0], [26.1, 5483.0], [26.2, 5518.0], [26.3, 5553.0], [26.4, 5557.0], [26.5, 5568.0], [26.6, 5604.0], [26.7, 5609.0], [26.8, 5619.0], [26.9, 5623.0], [27.0, 5652.0], [27.1, 5706.0], [27.2, 5735.0], [27.3, 5735.0], [27.4, 5736.0], [27.5, 5896.0], [27.6, 5915.0], [27.7, 5941.0], [27.8, 5943.0], [27.9, 5964.0], [28.0, 5968.0], [28.1, 5976.0], [28.2, 6001.0], [28.3, 6027.0], [28.4, 6138.0], [28.5, 6161.0], [28.6, 6161.0], [28.7, 6251.0], [28.8, 6273.0], [28.9, 6273.0], [29.0, 6292.0], [29.1, 6298.0], [29.2, 6339.0], [29.3, 6373.0], [29.4, 6396.0], [29.5, 6444.0], [29.6, 6446.0], [29.7, 6462.0], [29.8, 6462.0], [29.9, 6470.0], [30.0, 6503.0], [30.1, 6514.0], [30.2, 6532.0], [30.3, 6554.0], [30.4, 6571.0], [30.5, 6576.0], [30.6, 6610.0], [30.7, 6663.0], [30.8, 6672.0], [30.9, 6690.0], [31.0, 6693.0], [31.1, 6706.0], [31.2, 6707.0], [31.3, 6760.0], [31.4, 6767.0], [31.5, 6767.0], [31.6, 6849.0], [31.7, 6857.0], [31.8, 6895.0], [31.9, 6926.0], [32.0, 6976.0], [32.1, 6978.0], [32.2, 6978.0], [32.3, 6983.0], [32.4, 7097.0], [32.5, 7116.0], [32.6, 7218.0], [32.7, 7247.0], [32.8, 7405.0], [32.9, 7422.0], [33.0, 7432.0], [33.1, 7459.0], [33.2, 7502.0], [33.3, 7504.0], [33.4, 7535.0], [33.5, 7561.0], [33.6, 7597.0], [33.7, 7597.0], [33.8, 7618.0], [33.9, 7650.0], [34.0, 7707.0], [34.1, 7735.0], [34.2, 7761.0], [34.3, 7761.0], [34.4, 7767.0], [34.5, 7790.0], [34.6, 7810.0], [34.7, 7850.0], [34.8, 7860.0], [34.9, 7890.0], [35.0, 7920.0], [35.1, 7945.0], [35.2, 8020.0], [35.3, 8044.0], [35.4, 8069.0], [35.5, 8078.0], [35.6, 8111.0], [35.7, 8133.0], [35.8, 8152.0], [35.9, 8164.0], [36.0, 8170.0], [36.1, 8196.0], [36.2, 8216.0], [36.3, 8326.0], [36.4, 8337.0], [36.5, 8364.0], [36.6, 8411.0], [36.7, 8455.0], [36.8, 8474.0], [36.9, 8488.0], [37.0, 8501.0], [37.1, 8635.0], [37.2, 8635.0], [37.3, 8644.0], [37.4, 8706.0], [37.5, 8716.0], [37.6, 8745.0], [37.7, 8747.0], [37.8, 8772.0], [37.9, 8776.0], [38.0, 8777.0], [38.1, 8779.0], [38.2, 8919.0], [38.3, 8930.0], [38.4, 8951.0], [38.5, 9003.0], [38.6, 9042.0], [38.7, 9056.0], [38.8, 9060.0], [38.9, 9067.0], [39.0, 9073.0], [39.1, 9099.0], [39.2, 9099.0], [39.3, 9115.0], [39.4, 9143.0], [39.5, 9149.0], [39.6, 9151.0], [39.7, 9182.0], [39.8, 9204.0], [39.9, 9235.0], [40.0, 9235.0], [40.1, 9276.0], [40.2, 9378.0], [40.3, 9424.0], [40.4, 9507.0], [40.5, 9566.0], [40.6, 9658.0], [40.7, 9688.0], [40.8, 9731.0], [40.9, 9764.0], [41.0, 9775.0], [41.1, 9835.0], [41.2, 9839.0], [41.3, 9852.0], [41.4, 9853.0], [41.5, 9860.0], [41.6, 9890.0], [41.7, 9923.0], [41.8, 9928.0], [41.9, 9941.0], [42.0, 9968.0], [42.1, 10022.0], [42.2, 10072.0], [42.3, 10074.0], [42.4, 10133.0], [42.5, 10134.0], [42.6, 10168.0], [42.7, 10181.0], [42.8, 10231.0], [42.9, 10231.0], [43.0, 10277.0], [43.1, 10309.0], [43.2, 10351.0], [43.3, 10378.0], [43.4, 10400.0], [43.5, 10407.0], [43.6, 10419.0], [43.7, 10443.0], [43.8, 10538.0], [43.9, 10593.0], [44.0, 10663.0], [44.1, 10707.0], [44.2, 10749.0], [44.3, 10755.0], [44.4, 10775.0], [44.5, 10811.0], [44.6, 10958.0], [44.7, 10983.0], [44.8, 11030.0], [44.9, 11033.0], [45.0, 11035.0], [45.1, 11067.0], [45.2, 11189.0], [45.3, 11209.0], [45.4, 11247.0], [45.5, 11271.0], [45.6, 11277.0], [45.7, 11280.0], [45.8, 11280.0], [45.9, 11290.0], [46.0, 11296.0], [46.1, 11341.0], [46.2, 11360.0], [46.3, 11393.0], [46.4, 11397.0], [46.5, 11449.0], [46.6, 11474.0], [46.7, 11480.0], [46.8, 11515.0], [46.9, 11538.0], [47.0, 11745.0], [47.1, 11775.0], [47.2, 11777.0], [47.3, 11780.0], [47.4, 11968.0], [47.5, 12031.0], [47.6, 12053.0], [47.7, 12087.0], [47.8, 12087.0], [47.9, 12113.0], [48.0, 12176.0], [48.1, 12231.0], [48.2, 12293.0], [48.3, 12329.0], [48.4, 12331.0], [48.5, 12338.0], [48.6, 12338.0], [48.7, 12348.0], [48.8, 12415.0], [48.9, 12416.0], [49.0, 12421.0], [49.1, 12431.0], [49.2, 12451.0], [49.3, 12539.0], [49.4, 12596.0], [49.5, 12656.0], [49.6, 12678.0], [49.7, 12680.0], [49.8, 12750.0], [49.9, 12766.0], [50.0, 12851.0], [50.1, 12926.0], [50.2, 12929.0], [50.3, 13138.0], [50.4, 13163.0], [50.5, 13173.0], [50.6, 13251.0], [50.7, 13308.0], [50.8, 13375.0], [50.9, 13401.0], [51.0, 13435.0], [51.1, 13443.0], [51.2, 13466.0], [51.3, 13523.0], [51.4, 13545.0], [51.5, 13545.0], [51.6, 13570.0], [51.7, 13645.0], [51.8, 13674.0], [51.9, 13684.0], [52.0, 13774.0], [52.1, 13780.0], [52.2, 13781.0], [52.3, 13781.0], [52.4, 13789.0], [52.5, 13800.0], [52.6, 13815.0], [52.7, 13841.0], [52.8, 13842.0], [52.9, 13881.0], [53.0, 13883.0], [53.1, 13886.0], [53.2, 14048.0], [53.3, 14302.0], [53.4, 14340.0], [53.5, 14368.0], [53.6, 14385.0], [53.7, 14435.0], [53.8, 14465.0], [53.9, 14488.0], [54.0, 14516.0], [54.1, 14538.0], [54.2, 14613.0], [54.3, 14613.0], [54.4, 14717.0], [54.5, 14721.0], [54.6, 14724.0], [54.7, 14731.0], [54.8, 14751.0], [54.9, 14780.0], [55.0, 14781.0], [55.1, 14788.0], [55.2, 14821.0], [55.3, 14865.0], [55.4, 14879.0], [55.5, 14927.0], [55.6, 15125.0], [55.7, 15137.0], [55.8, 15143.0], [55.9, 15185.0], [56.0, 15194.0], [56.1, 15210.0], [56.2, 15242.0], [56.3, 15264.0], [56.4, 15341.0], [56.5, 15374.0], [56.6, 15446.0], [56.7, 15472.0], [56.8, 15502.0], [56.9, 15510.0], [57.0, 15539.0], [57.1, 15586.0], [57.2, 15586.0], [57.3, 15655.0], [57.4, 15694.0], [57.5, 15713.0], [57.6, 15763.0], [57.7, 15790.0], [57.8, 15804.0], [57.9, 15898.0], [58.0, 15906.0], [58.1, 16145.0], [58.2, 16155.0], [58.3, 16179.0], [58.4, 16182.0], [58.5, 16208.0], [58.6, 16286.0], [58.7, 16306.0], [58.8, 16365.0], [58.9, 16382.0], [59.0, 16424.0], [59.1, 16445.0], [59.2, 16451.0], [59.3, 16548.0], [59.4, 16593.0], [59.5, 16771.0], [59.6, 16781.0], [59.7, 16829.0], [59.8, 16906.0], [59.9, 16945.0], [60.0, 16945.0], [60.1, 16967.0], [60.2, 17114.0], [60.3, 17205.0], [60.4, 17291.0], [60.5, 17293.0], [60.6, 17308.0], [60.7, 17321.0], [60.8, 17388.0], [60.9, 17395.0], [61.0, 17496.0], [61.1, 17515.0], [61.2, 17558.0], [61.3, 17584.0], [61.4, 17691.0], [61.5, 17718.0], [61.6, 17819.0], [61.7, 17996.0], [61.8, 17997.0], [61.9, 18022.0], [62.0, 18037.0], [62.1, 18103.0], [62.2, 18143.0], [62.3, 18170.0], [62.4, 18176.0], [62.5, 18229.0], [62.6, 18378.0], [62.7, 18411.0], [62.8, 18460.0], [62.9, 18460.0], [63.0, 18479.0], [63.1, 18581.0], [63.2, 18626.0], [63.3, 18682.0], [63.4, 18718.0], [63.5, 18732.0], [63.6, 18803.0], [63.7, 18856.0], [63.8, 18921.0], [63.9, 19002.0], [64.0, 19030.0], [64.1, 19032.0], [64.2, 19043.0], [64.3, 19078.0], [64.4, 19081.0], [64.5, 19149.0], [64.6, 19187.0], [64.7, 19290.0], [64.8, 19338.0], [64.9, 19427.0], [65.0, 19514.0], [65.1, 19541.0], [65.2, 19577.0], [65.3, 19584.0], [65.4, 19820.0], [65.5, 19863.0], [65.6, 19870.0], [65.7, 19887.0], [65.8, 19887.0], [65.9, 19924.0], [66.0, 20050.0], [66.1, 20106.0], [66.2, 20207.0], [66.3, 20227.0], [66.4, 20232.0], [66.5, 20291.0], [66.6, 20363.0], [66.7, 20368.0], [66.8, 20372.0], [66.9, 20398.0], [67.0, 20452.0], [67.1, 20457.0], [67.2, 20588.0], [67.3, 20598.0], [67.4, 20617.0], [67.5, 20860.0], [67.6, 20865.0], [67.7, 20893.0], [67.8, 21122.0], [67.9, 21211.0], [68.0, 21267.0], [68.1, 21268.0], [68.2, 21270.0], [68.3, 21385.0], [68.4, 21388.0], [68.5, 21441.0], [68.6, 21441.0], [68.7, 21475.0], [68.8, 21501.0], [68.9, 21516.0], [69.0, 21602.0], [69.1, 21633.0], [69.2, 21685.0], [69.3, 21690.0], [69.4, 21735.0], [69.5, 21778.0], [69.6, 21817.0], [69.7, 21952.0], [69.8, 21972.0], [69.9, 22033.0], [70.0, 22066.0], [70.1, 22081.0], [70.2, 22143.0], [70.3, 22171.0], [70.4, 22245.0], [70.5, 22252.0], [70.6, 22277.0], [70.7, 22295.0], [70.8, 22494.0], [70.9, 22514.0], [71.0, 22578.0], [71.1, 22683.0], [71.2, 22778.0], [71.3, 22780.0], [71.4, 22832.0], [71.5, 22832.0], [71.6, 23034.0], [71.7, 23141.0], [71.8, 23160.0], [71.9, 23178.0], [72.0, 23214.0], [72.1, 23216.0], [72.2, 23413.0], [72.3, 23417.0], [72.4, 23432.0], [72.5, 23537.0], [72.6, 23581.0], [72.7, 23631.0], [72.8, 23646.0], [72.9, 23650.0], [73.0, 23685.0], [73.1, 23946.0], [73.2, 24108.0], [73.3, 24144.0], [73.4, 24159.0], [73.5, 24300.0], [73.6, 24357.0], [73.7, 24390.0], [73.8, 24466.0], [73.9, 24521.0], [74.0, 24641.0], [74.1, 24697.0], [74.2, 24727.0], [74.3, 24727.0], [74.4, 24848.0], [74.5, 24929.0], [74.6, 24954.0], [74.7, 24969.0], [74.8, 24972.0], [74.9, 24994.0], [75.0, 25077.0], [75.1, 25119.0], [75.2, 25204.0], [75.3, 25346.0], [75.4, 25491.0], [75.5, 25522.0], [75.6, 25559.0], [75.7, 25582.0], [75.8, 25771.0], [75.9, 25772.0], [76.0, 25881.0], [76.1, 25887.0], [76.2, 25945.0], [76.3, 26054.0], [76.4, 26125.0], [76.5, 26128.0], [76.6, 26219.0], [76.7, 26235.0], [76.8, 26470.0], [76.9, 26520.0], [77.0, 26524.0], [77.1, 26526.0], [77.2, 26526.0], [77.3, 26581.0], [77.4, 26811.0], [77.5, 26840.0], [77.6, 26908.0], [77.7, 26974.0], [77.8, 26991.0], [77.9, 27066.0], [78.0, 27136.0], [78.1, 27149.0], [78.2, 27333.0], [78.3, 27384.0], [78.4, 27444.0], [78.5, 27458.0], [78.6, 27483.0], [78.7, 27491.0], [78.8, 27542.0], [78.9, 27620.0], [79.0, 27729.0], [79.1, 27737.0], [79.2, 27768.0], [79.3, 27818.0], [79.4, 27960.0], [79.5, 28023.0], [79.6, 28070.0], [79.7, 28223.0], [79.8, 28338.0], [79.9, 28347.0], [80.0, 28347.0], [80.1, 28400.0], [80.2, 28478.0], [80.3, 28539.0], [80.4, 28578.0], [80.5, 28639.0], [80.6, 28697.0], [80.7, 28722.0], [80.8, 28776.0], [80.9, 28796.0], [81.0, 28862.0], [81.1, 29143.0], [81.2, 29223.0], [81.3, 29237.0], [81.4, 29347.0], [81.5, 29368.0], [81.6, 29481.0], [81.7, 29659.0], [81.8, 29797.0], [81.9, 29861.0], [82.0, 29947.0], [82.1, 30102.0], [82.2, 30272.0], [82.3, 30277.0], [82.4, 30292.0], [82.5, 30297.0], [82.6, 30383.0], [82.7, 30403.0], [82.8, 30478.0], [82.9, 30478.0], [83.0, 30489.0], [83.1, 30499.0], [83.2, 30613.0], [83.3, 30669.0], [83.4, 30918.0], [83.5, 30927.0], [83.6, 31005.0], [83.7, 31032.0], [83.8, 31098.0], [83.9, 31247.0], [84.0, 31266.0], [84.1, 31285.0], [84.2, 31346.0], [84.3, 31400.0], [84.4, 31491.0], [84.5, 31628.0], [84.6, 31654.0], [84.7, 31699.0], [84.8, 31952.0], [84.9, 31980.0], [85.0, 32072.0], [85.1, 32077.0], [85.2, 32203.0], [85.3, 32289.0], [85.4, 32406.0], [85.5, 32471.0], [85.6, 32573.0], [85.7, 32697.0], [85.8, 32697.0], [85.9, 32756.0], [86.0, 32845.0], [86.1, 32849.0], [86.2, 32852.0], [86.3, 32880.0], [86.4, 33050.0], [86.5, 33147.0], [86.6, 33192.0], [86.7, 33247.0], [86.8, 33460.0], [86.9, 33463.0], [87.0, 33656.0], [87.1, 33744.0], [87.2, 33880.0], [87.3, 34138.0], [87.4, 34218.0], [87.5, 34255.0], [87.6, 34287.0], [87.7, 34289.0], [87.8, 34364.0], [87.9, 34499.0], [88.0, 34508.0], [88.1, 34617.0], [88.2, 34702.0], [88.3, 34706.0], [88.4, 34882.0], [88.5, 34906.0], [88.6, 34906.0], [88.7, 35019.0], [88.8, 35225.0], [88.9, 35561.0], [89.0, 35590.0], [89.1, 35657.0], [89.2, 35789.0], [89.3, 35833.0], [89.4, 35852.0], [89.5, 35860.0], [89.6, 36099.0], [89.7, 36168.0], [89.8, 36189.0], [89.9, 36196.0], [90.0, 36303.0], [90.1, 36756.0], [90.2, 36819.0], [90.3, 36823.0], [90.4, 36894.0], [90.5, 36996.0], [90.6, 37157.0], [90.7, 37177.0], [90.8, 37196.0], [90.9, 37218.0], [91.0, 37785.0], [91.1, 37792.0], [91.2, 37807.0], [91.3, 37849.0], [91.4, 37927.0], [91.5, 37927.0], [91.6, 37999.0], [91.7, 38202.0], [91.8, 38261.0], [91.9, 38375.0], [92.0, 38375.0], [92.1, 38681.0], [92.2, 38856.0], [92.3, 38956.0], [92.4, 39040.0], [92.5, 39166.0], [92.6, 39311.0], [92.7, 39486.0], [92.8, 39500.0], [92.9, 39689.0], [93.0, 39834.0], [93.1, 39843.0], [93.2, 40071.0], [93.3, 40160.0], [93.4, 40251.0], [93.5, 40378.0], [93.6, 40472.0], [93.7, 40711.0], [93.8, 40818.0], [93.9, 41017.0], [94.0, 41052.0], [94.1, 41150.0], [94.2, 41416.0], [94.3, 41416.0], [94.4, 41736.0], [94.5, 41887.0], [94.6, 41892.0], [94.7, 41892.0], [94.8, 42303.0], [94.9, 42339.0], [95.0, 42557.0], [95.1, 42658.0], [95.2, 42680.0], [95.3, 43032.0], [95.4, 43138.0], [95.5, 43174.0], [95.6, 43390.0], [95.7, 43688.0], [95.8, 43854.0], [95.9, 43943.0], [96.0, 44247.0], [96.1, 44272.0], [96.2, 44383.0], [96.3, 44676.0], [96.4, 44817.0], [96.5, 45221.0], [96.6, 45665.0], [96.7, 45731.0], [96.8, 45849.0], [96.9, 45871.0], [97.0, 46442.0], [97.1, 46748.0], [97.2, 46748.0], [97.3, 47462.0], [97.4, 47705.0], [97.5, 47770.0], [97.6, 48003.0], [97.7, 48806.0], [97.8, 48922.0], [97.9, 48989.0], [98.0, 49619.0], [98.1, 50042.0], [98.2, 50450.0], [98.3, 51340.0], [98.4, 51733.0], [98.5, 51943.0], [98.6, 52624.0], [98.7, 52994.0], [98.8, 53388.0], [98.9, 53958.0], [99.0, 54000.0], [99.1, 55202.0], [99.2, 55301.0], [99.3, 56564.0], [99.4, 56602.0], [99.5, 57403.0], [99.6, 58211.0], [99.7, 58756.0], [99.8, 60013.0], [99.9, 60013.0], [100.0, 60013.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 11.0, "series": [{"data": [[34100.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [36100.0, 3.0], [34900.0, 1.0], [35700.0, 1.0], [36900.0, 1.0], [37700.0, 2.0], [38900.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [47700.0, 2.0], [48900.0, 2.0], [51300.0, 1.0], [52900.0, 1.0], [51700.0, 1.0], [53300.0, 1.0], [56500.0, 1.0], [55300.0, 1.0], [600.0, 1.0], [800.0, 5.0], [900.0, 7.0], [1000.0, 6.0], [1100.0, 6.0], [1200.0, 7.0], [1300.0, 11.0], [1400.0, 6.0], [1500.0, 9.0], [1600.0, 3.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 5.0], [2000.0, 5.0], [2100.0, 5.0], [2300.0, 4.0], [2200.0, 4.0], [2400.0, 4.0], [2500.0, 3.0], [2600.0, 8.0], [2700.0, 11.0], [2800.0, 7.0], [2900.0, 4.0], [3000.0, 7.0], [3100.0, 4.0], [3200.0, 6.0], [3300.0, 4.0], [3400.0, 2.0], [3500.0, 6.0], [3600.0, 3.0], [3700.0, 2.0], [3800.0, 5.0], [3900.0, 5.0], [4000.0, 7.0], [4100.0, 7.0], [4300.0, 3.0], [4200.0, 7.0], [4500.0, 10.0], [4400.0, 3.0], [4600.0, 2.0], [4700.0, 5.0], [4800.0, 5.0], [5000.0, 6.0], [5100.0, 3.0], [4900.0, 2.0], [5300.0, 9.0], [5200.0, 5.0], [5500.0, 4.0], [5400.0, 3.0], [5600.0, 5.0], [5700.0, 4.0], [5800.0, 1.0], [5900.0, 6.0], [6000.0, 2.0], [6100.0, 2.0], [6200.0, 5.0], [6300.0, 3.0], [6500.0, 6.0], [6400.0, 5.0], [6600.0, 5.0], [6700.0, 4.0], [6900.0, 5.0], [6800.0, 3.0], [7000.0, 1.0], [7100.0, 1.0], [7400.0, 4.0], [7200.0, 2.0], [7500.0, 6.0], [7600.0, 2.0], [7700.0, 5.0], [7900.0, 2.0], [7800.0, 4.0], [8000.0, 4.0], [8100.0, 6.0], [8400.0, 4.0], [8200.0, 1.0], [8700.0, 8.0], [8600.0, 2.0], [8500.0, 1.0], [8300.0, 3.0], [9100.0, 5.0], [9200.0, 3.0], [8900.0, 3.0], [9000.0, 8.0], [9500.0, 2.0], [9600.0, 2.0], [9400.0, 1.0], [9700.0, 3.0], [9300.0, 1.0], [9800.0, 6.0], [10100.0, 4.0], [9900.0, 4.0], [10000.0, 3.0], [10200.0, 2.0], [10300.0, 3.0], [10700.0, 4.0], [10600.0, 1.0], [10400.0, 4.0], [10500.0, 2.0], [10800.0, 1.0], [10900.0, 2.0], [11100.0, 1.0], [11200.0, 7.0], [11000.0, 4.0], [11700.0, 4.0], [11500.0, 2.0], [11300.0, 4.0], [11400.0, 3.0], [11900.0, 1.0], [12200.0, 2.0], [12000.0, 4.0], [12100.0, 2.0], [12700.0, 2.0], [12600.0, 3.0], [12300.0, 4.0], [12400.0, 5.0], [12500.0, 2.0], [12800.0, 1.0], [13300.0, 2.0], [13100.0, 3.0], [13200.0, 1.0], [12900.0, 2.0], [13400.0, 4.0], [13700.0, 5.0], [13800.0, 7.0], [13500.0, 3.0], [13600.0, 3.0], [14300.0, 4.0], [14000.0, 1.0], [14400.0, 3.0], [14800.0, 3.0], [14700.0, 8.0], [14500.0, 2.0], [14600.0, 1.0], [14900.0, 1.0], [15100.0, 5.0], [15200.0, 3.0], [15300.0, 2.0], [15500.0, 4.0], [15800.0, 2.0], [15400.0, 2.0], [15700.0, 3.0], [15600.0, 2.0], [16200.0, 2.0], [16100.0, 4.0], [15900.0, 1.0], [16300.0, 3.0], [17200.0, 3.0], [16400.0, 3.0], [16800.0, 1.0], [17400.0, 1.0], [17800.0, 1.0], [18400.0, 3.0], [18000.0, 2.0], [18200.0, 1.0], [17600.0, 1.0], [18800.0, 2.0], [19000.0, 6.0], [18600.0, 2.0], [19400.0, 1.0], [19200.0, 1.0], [20200.0, 4.0], [19800.0, 4.0], [20000.0, 1.0], [20400.0, 2.0], [21200.0, 4.0], [21400.0, 2.0], [20800.0, 3.0], [20600.0, 1.0], [22000.0, 3.0], [21600.0, 4.0], [22200.0, 4.0], [22400.0, 1.0], [21800.0, 1.0], [22600.0, 1.0], [22800.0, 1.0], [23200.0, 2.0], [23000.0, 1.0], [23400.0, 3.0], [23600.0, 4.0], [24400.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [25000.0, 1.0], [24600.0, 2.0], [25400.0, 1.0], [25800.0, 2.0], [26000.0, 1.0], [26200.0, 2.0], [26400.0, 1.0], [27400.0, 4.0], [27000.0, 1.0], [26800.0, 2.0], [27600.0, 1.0], [28200.0, 1.0], [28600.0, 2.0], [28400.0, 2.0], [27800.0, 1.0], [28000.0, 2.0], [29600.0, 1.0], [29200.0, 2.0], [29400.0, 1.0], [28800.0, 1.0], [30400.0, 4.0], [30200.0, 4.0], [30600.0, 2.0], [29800.0, 1.0], [31400.0, 2.0], [31600.0, 3.0], [31000.0, 3.0], [31200.0, 3.0], [32600.0, 1.0], [32400.0, 2.0], [32000.0, 2.0], [32200.0, 2.0], [32800.0, 4.0], [33600.0, 1.0], [34800.0, 1.0], [34400.0, 1.0], [33200.0, 1.0], [36000.0, 1.0], [35600.0, 1.0], [36800.0, 3.0], [35200.0, 1.0], [38800.0, 1.0], [37200.0, 1.0], [40400.0, 1.0], [39600.0, 1.0], [40000.0, 1.0], [40800.0, 1.0], [44800.0, 1.0], [43600.0, 1.0], [46400.0, 1.0], [45600.0, 1.0], [45200.0, 1.0], [48800.0, 1.0], [48000.0, 1.0], [49600.0, 1.0], [50000.0, 1.0], [50400.0, 1.0], [54000.0, 1.0], [55200.0, 1.0], [60000.0, 2.0], [34700.0, 2.0], [34300.0, 1.0], [33100.0, 2.0], [35500.0, 2.0], [36700.0, 1.0], [36300.0, 1.0], [37900.0, 2.0], [37100.0, 3.0], [38300.0, 2.0], [39100.0, 1.0], [40700.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [41100.0, 1.0], [42300.0, 2.0], [43100.0, 2.0], [44300.0, 1.0], [43900.0, 1.0], [46700.0, 1.0], [51900.0, 1.0], [53900.0, 1.0], [58700.0, 1.0], [17300.0, 4.0], [16500.0, 2.0], [16700.0, 2.0], [16900.0, 3.0], [17100.0, 1.0], [18300.0, 1.0], [17900.0, 2.0], [17500.0, 3.0], [17700.0, 1.0], [18100.0, 4.0], [19300.0, 1.0], [19100.0, 2.0], [18900.0, 1.0], [18700.0, 2.0], [18500.0, 1.0], [19500.0, 4.0], [20100.0, 1.0], [20300.0, 4.0], [19900.0, 1.0], [20500.0, 2.0], [21500.0, 2.0], [21300.0, 2.0], [21100.0, 1.0], [21700.0, 2.0], [22100.0, 2.0], [22500.0, 2.0], [21900.0, 2.0], [22700.0, 2.0], [23100.0, 3.0], [23500.0, 2.0], [24300.0, 3.0], [24100.0, 3.0], [24500.0, 1.0], [23900.0, 1.0], [24900.0, 5.0], [25500.0, 3.0], [25300.0, 1.0], [24700.0, 1.0], [25100.0, 1.0], [25700.0, 2.0], [26500.0, 4.0], [26100.0, 2.0], [25900.0, 1.0], [26900.0, 3.0], [27100.0, 2.0], [27300.0, 2.0], [27500.0, 1.0], [27700.0, 3.0], [28500.0, 2.0], [27900.0, 1.0], [28300.0, 2.0], [28700.0, 3.0], [29300.0, 2.0], [29100.0, 1.0], [29900.0, 1.0], [30300.0, 1.0], [30100.0, 1.0], [29700.0, 1.0], [31300.0, 1.0], [30900.0, 2.0], [32700.0, 1.0], [31900.0, 2.0], [32500.0, 1.0], [34200.0, 4.0], [33000.0, 1.0], [33400.0, 2.0], [33800.0, 1.0], [34600.0, 1.0], [35800.0, 3.0], [35000.0, 1.0], [38600.0, 1.0], [37800.0, 2.0], [38200.0, 2.0], [39800.0, 2.0], [40200.0, 1.0], [39400.0, 1.0], [39000.0, 1.0], [41400.0, 1.0], [41000.0, 2.0], [41800.0, 3.0], [42600.0, 2.0], [43000.0, 1.0], [44200.0, 2.0], [43800.0, 1.0], [44600.0, 1.0], [45800.0, 2.0], [47400.0, 1.0], [52600.0, 1.0], [56600.0, 1.0], [57400.0, 1.0], [58200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 914.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 914.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.215686274509803, "minX": 1.65124182E12, "maxY": 74.25308641975309, "series": [{"data": [[1.65124194E12, 35.26162790697678], [1.65124182E12, 9.215686274509803], [1.65124212E12, 74.25308641975309], [1.65124218E12, 32.0], [1.651242E12, 53.09883720930233], [1.65124206E12, 69.05780346820809], [1.65124188E12, 18.046511627906984]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124218E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3693.91011235955, "minX": 1.0, "maxY": 43174.0, "series": [{"data": [[2.0, 41887.0], [3.0, 20731.5], [4.0, 13889.0], [5.0, 19319.0], [6.0, 12837.333333333334], [7.0, 17791.0], [8.0, 12389.0], [9.0, 16616.5], [10.0, 3693.91011235955], [11.0, 28862.0], [12.0, 11675.0], [13.0, 13502.333333333334], [14.0, 13470.0], [15.0, 19741.5], [16.0, 9259.666666666668], [17.0, 13634.0], [18.0, 13703.0], [19.0, 12072.333333333334], [20.0, 6600.586206896551], [21.0, 18033.5], [22.0, 10018.0], [23.0, 18610.5], [24.0, 14854.0], [25.0, 15052.333333333332], [26.0, 35384.0], [27.0, 29755.0], [28.0, 13185.333333333332], [29.0, 25530.333333333332], [30.0, 9747.977272727278], [31.0, 18668.5], [32.0, 24590.0], [33.0, 12805.5], [34.0, 25365.666666666664], [35.0, 18589.0], [36.0, 25998.0], [37.0, 13603.5], [38.0, 26876.666666666664], [39.0, 19573.5], [40.0, 12868.712643678158], [41.0, 18037.0], [42.0, 28797.5], [43.0, 19075.666666666668], [44.0, 19567.333333333336], [45.0, 6600.5], [46.0, 20281.0], [47.0, 12234.0], [48.0, 20769.0], [49.0, 25313.5], [50.0, 16374.818181818182], [51.0, 34025.5], [52.0, 32762.666666666668], [53.0, 23484.0], [55.0, 23517.333333333336], [54.0, 37785.0], [56.0, 22908.666666666668], [57.0, 35151.0], [58.0, 19654.0], [59.0, 15190.0], [60.0, 17449.72093023256], [61.0, 32358.0], [62.0, 30112.0], [63.0, 32295.666666666668], [64.0, 31205.333333333332], [65.0, 31713.0], [66.0, 31612.75], [67.0, 32957.0], [68.0, 30615.0], [69.0, 31619.0], [70.0, 21357.510869565216], [71.0, 25119.0], [72.0, 17390.75], [73.0, 17349.4], [74.0, 16023.272727272726], [75.0, 25823.905882352945], [1.0, 43174.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[46.38756476683943, 16510.352331606213]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 75.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 131.75, "minX": 1.65124182E12, "maxY": 506.8, "series": [{"data": [[1.65124194E12, 503.1666666666667], [1.65124182E12, 148.66666666666666], [1.65124212E12, 474.8], [1.65124218E12, 197.55], [1.651242E12, 503.55], [1.65124206E12, 506.8], [1.65124188E12, 501.9166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124194E12, 444.3333333333333], [1.65124182E12, 131.75], [1.65124212E12, 418.5], [1.65124218E12, 162.75], [1.651242E12, 444.3333333333333], [1.65124206E12, 446.9166666666667], [1.65124188E12, 444.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124218E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2762.705882352942, "minX": 1.65124182E12, "maxY": 35073.30158730158, "series": [{"data": [[1.65124194E12, 11205.686046511632], [1.65124182E12, 2762.705882352942], [1.65124212E12, 26534.524691358023], [1.65124218E12, 35073.30158730158], [1.651242E12, 16146.343023255817], [1.65124206E12, 21009.196531791917], [1.65124188E12, 5489.773255813953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124218E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2762.5882352941176, "minX": 1.65124182E12, "maxY": 35073.28571428569, "series": [{"data": [[1.65124194E12, 11205.633720930233], [1.65124182E12, 2762.5882352941176], [1.65124212E12, 26534.48148148149], [1.65124218E12, 35073.28571428569], [1.651242E12, 16146.296511627896], [1.65124206E12, 21009.184971098268], [1.65124188E12, 5489.715116279071]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124218E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.365079365079363, "minX": 1.65124182E12, "maxY": 20.333333333333336, "series": [{"data": [[1.65124194E12, 8.8139534883721], [1.65124182E12, 20.333333333333336], [1.65124212E12, 7.839506172839505], [1.65124218E12, 7.365079365079363], [1.651242E12, 7.924418604651163], [1.65124206E12, 7.705202312138731], [1.65124188E12, 10.156976744186048]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124218E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 645.0, "minX": 1.65124182E12, "maxY": 58756.0, "series": [{"data": [[1.65124194E12, 27491.0], [1.65124182E12, 6926.0], [1.65124212E12, 58756.0], [1.65124218E12, 58211.0], [1.651242E12, 37999.0], [1.65124206E12, 48806.0], [1.65124188E12, 14927.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124194E12, 21063.30000000001], [1.65124182E12, 5343.200000000001], [1.65124212E12, 46484.900000000016], [1.65124218E12, 50157.8], [1.651242E12, 30275.5], [1.65124206E12, 38195.799999999996], [1.65124188E12, 10587.600000000008]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124194E12, 27065.410000000007], [1.65124182E12, 6926.0], [1.65124212E12, 57903.61000000001], [1.65124218E12, 58211.0], [1.651242E12, 37266.81000000001], [1.65124206E12, 47811.43999999999], [1.65124188E12, 14891.960000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124194E12, 22798.2], [1.65124182E12, 6144.999999999998], [1.65124212E12, 52521.85], [1.65124218E12, 55109.7], [1.651242E12, 31917.199999999997], [1.65124206E12, 40755.19999999998], [1.65124188E12, 12119.499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124194E12, 882.0], [1.65124182E12, 645.0], [1.65124212E12, 1401.0], [1.65124218E12, 9688.0], [1.651242E12, 918.0], [1.65124206E12, 1188.0], [1.65124188E12, 848.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124194E12, 10995.5], [1.65124182E12, 2476.0], [1.65124212E12, 26352.5], [1.65124218E12, 34906.0], [1.651242E12, 15855.0], [1.65124206E12, 20050.0], [1.65124188E12, 4818.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124218E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11247.0, "minX": 1.0, "maxY": 60013.0, "series": [{"data": [[2.0, 15357.5], [4.0, 15510.0], [1.0, 33247.0], [3.0, 11247.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60013.0], [3.0, 60013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11247.0, "minX": 1.0, "maxY": 60013.0, "series": [{"data": [[2.0, 15357.5], [4.0, 15510.0], [1.0, 33247.0], [3.0, 11247.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60013.0], [3.0, 60013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.65124182E12, "maxY": 3.2, "series": [{"data": [[1.65124194E12, 3.033333333333333], [1.65124182E12, 1.0166666666666666], [1.65124212E12, 2.5], [1.651242E12, 3.2], [1.65124206E12, 3.1333333333333333], [1.65124188E12, 3.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124212E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124182E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124194E12, 2.8666666666666667], [1.65124182E12, 0.85], [1.65124212E12, 2.7], [1.65124218E12, 1.0166666666666666], [1.651242E12, 2.8666666666666667], [1.65124206E12, 2.8833333333333333], [1.65124188E12, 2.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65124218E12, 0.03333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124218E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124182E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124194E12, 2.8666666666666667], [1.65124182E12, 0.85], [1.65124212E12, 2.7], [1.65124218E12, 1.0166666666666666], [1.651242E12, 2.8666666666666667], [1.65124206E12, 2.8833333333333333], [1.65124188E12, 2.8666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65124218E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124218E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124182E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124194E12, 2.8666666666666667], [1.65124182E12, 0.85], [1.65124212E12, 2.7], [1.65124218E12, 1.0166666666666666], [1.651242E12, 2.8666666666666667], [1.65124206E12, 2.8833333333333333], [1.65124188E12, 2.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65124218E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124218E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


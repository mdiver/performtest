/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 687.0, "minX": 0.0, "maxY": 55056.0, "series": [{"data": [[0.0, 687.0], [0.1, 687.0], [0.2, 735.0], [0.3, 808.0], [0.4, 864.0], [0.5, 891.0], [0.6, 950.0], [0.7, 964.0], [0.8, 987.0], [0.9, 1001.0], [1.0, 1029.0], [1.1, 1034.0], [1.2, 1053.0], [1.3, 1066.0], [1.4, 1070.0], [1.5, 1076.0], [1.6, 1102.0], [1.7, 1102.0], [1.8, 1103.0], [1.9, 1111.0], [2.0, 1115.0], [2.1, 1122.0], [2.2, 1123.0], [2.3, 1135.0], [2.4, 1141.0], [2.5, 1152.0], [2.6, 1156.0], [2.7, 1158.0], [2.8, 1191.0], [2.9, 1194.0], [3.0, 1206.0], [3.1, 1285.0], [3.2, 1292.0], [3.3, 1308.0], [3.4, 1308.0], [3.5, 1314.0], [3.6, 1330.0], [3.7, 1347.0], [3.8, 1349.0], [3.9, 1355.0], [4.0, 1365.0], [4.1, 1380.0], [4.2, 1391.0], [4.3, 1395.0], [4.4, 1404.0], [4.5, 1406.0], [4.6, 1427.0], [4.7, 1438.0], [4.8, 1443.0], [4.9, 1456.0], [5.0, 1458.0], [5.1, 1458.0], [5.2, 1466.0], [5.3, 1523.0], [5.4, 1543.0], [5.5, 1604.0], [5.6, 1619.0], [5.7, 1667.0], [5.8, 1677.0], [5.9, 1682.0], [6.0, 1732.0], [6.1, 1749.0], [6.2, 1789.0], [6.3, 1823.0], [6.4, 1827.0], [6.5, 1829.0], [6.6, 1836.0], [6.7, 1854.0], [6.8, 1854.0], [6.9, 1880.0], [7.0, 1909.0], [7.1, 1957.0], [7.2, 1988.0], [7.3, 1995.0], [7.4, 1995.0], [7.5, 2003.0], [7.6, 2018.0], [7.7, 2040.0], [7.8, 2071.0], [7.9, 2107.0], [8.0, 2131.0], [8.1, 2143.0], [8.2, 2155.0], [8.3, 2204.0], [8.4, 2228.0], [8.5, 2228.0], [8.6, 2266.0], [8.7, 2272.0], [8.8, 2283.0], [8.9, 2290.0], [9.0, 2313.0], [9.1, 2314.0], [9.2, 2316.0], [9.3, 2317.0], [9.4, 2348.0], [9.5, 2361.0], [9.6, 2364.0], [9.7, 2428.0], [9.8, 2435.0], [9.9, 2443.0], [10.0, 2445.0], [10.1, 2483.0], [10.2, 2483.0], [10.3, 2502.0], [10.4, 2522.0], [10.5, 2544.0], [10.6, 2587.0], [10.7, 2615.0], [10.8, 2630.0], [10.9, 2671.0], [11.0, 2678.0], [11.1, 2681.0], [11.2, 2689.0], [11.3, 2694.0], [11.4, 2706.0], [11.5, 2733.0], [11.6, 2735.0], [11.7, 2737.0], [11.8, 2809.0], [11.9, 2809.0], [12.0, 2834.0], [12.1, 2846.0], [12.2, 2859.0], [12.3, 2930.0], [12.4, 2938.0], [12.5, 2961.0], [12.6, 3007.0], [12.7, 3022.0], [12.8, 3034.0], [12.9, 3035.0], [13.0, 3059.0], [13.1, 3116.0], [13.2, 3147.0], [13.3, 3163.0], [13.4, 3165.0], [13.5, 3171.0], [13.6, 3171.0], [13.7, 3172.0], [13.8, 3197.0], [13.9, 3255.0], [14.0, 3292.0], [14.1, 3330.0], [14.2, 3344.0], [14.3, 3348.0], [14.4, 3348.0], [14.5, 3385.0], [14.6, 3392.0], [14.7, 3394.0], [14.8, 3416.0], [14.9, 3420.0], [15.0, 3457.0], [15.1, 3461.0], [15.2, 3501.0], [15.3, 3501.0], [15.4, 3529.0], [15.5, 3541.0], [15.6, 3542.0], [15.7, 3561.0], [15.8, 3660.0], [15.9, 3685.0], [16.0, 3688.0], [16.1, 3716.0], [16.2, 3757.0], [16.3, 3759.0], [16.4, 3783.0], [16.5, 3802.0], [16.6, 3839.0], [16.7, 3849.0], [16.8, 3874.0], [16.9, 3876.0], [17.0, 3876.0], [17.1, 3880.0], [17.2, 3913.0], [17.3, 3962.0], [17.4, 3987.0], [17.5, 3995.0], [17.6, 4003.0], [17.7, 4005.0], [17.8, 4017.0], [17.9, 4036.0], [18.0, 4053.0], [18.1, 4075.0], [18.2, 4102.0], [18.3, 4157.0], [18.4, 4166.0], [18.5, 4170.0], [18.6, 4172.0], [18.7, 4172.0], [18.8, 4179.0], [18.9, 4184.0], [19.0, 4209.0], [19.1, 4239.0], [19.2, 4242.0], [19.3, 4312.0], [19.4, 4388.0], [19.5, 4479.0], [19.6, 4511.0], [19.7, 4524.0], [19.8, 4532.0], [19.9, 4553.0], [20.0, 4554.0], [20.1, 4569.0], [20.2, 4580.0], [20.3, 4617.0], [20.4, 4617.0], [20.5, 4619.0], [20.6, 4627.0], [20.7, 4638.0], [20.8, 4647.0], [20.9, 4653.0], [21.0, 4658.0], [21.1, 4698.0], [21.2, 4713.0], [21.3, 4716.0], [21.4, 4723.0], [21.5, 4724.0], [21.6, 4727.0], [21.7, 4744.0], [21.8, 4757.0], [21.9, 4804.0], [22.0, 4853.0], [22.1, 4853.0], [22.2, 4860.0], [22.3, 4908.0], [22.4, 4924.0], [22.5, 4941.0], [22.6, 4954.0], [22.7, 4979.0], [22.8, 4983.0], [22.9, 5000.0], [23.0, 5004.0], [23.1, 5043.0], [23.2, 5067.0], [23.3, 5130.0], [23.4, 5180.0], [23.5, 5182.0], [23.6, 5211.0], [23.7, 5215.0], [23.8, 5215.0], [23.9, 5300.0], [24.0, 5322.0], [24.1, 5434.0], [24.2, 5447.0], [24.3, 5448.0], [24.4, 5469.0], [24.5, 5557.0], [24.6, 5559.0], [24.7, 5594.0], [24.8, 5600.0], [24.9, 5635.0], [25.0, 5639.0], [25.1, 5657.0], [25.2, 5661.0], [25.3, 5672.0], [25.4, 5683.0], [25.5, 5683.0], [25.6, 5699.0], [25.7, 5754.0], [25.8, 5776.0], [25.9, 5799.0], [26.0, 5810.0], [26.1, 5813.0], [26.2, 5839.0], [26.3, 5850.0], [26.4, 5868.0], [26.5, 5957.0], [26.6, 5960.0], [26.7, 5969.0], [26.8, 5990.0], [26.9, 6019.0], [27.0, 6060.0], [27.1, 6084.0], [27.2, 6084.0], [27.3, 6087.0], [27.4, 6114.0], [27.5, 6226.0], [27.6, 6278.0], [27.7, 6306.0], [27.8, 6318.0], [27.9, 6327.0], [28.0, 6348.0], [28.1, 6408.0], [28.2, 6468.0], [28.3, 6504.0], [28.4, 6507.0], [28.5, 6529.0], [28.6, 6562.0], [28.7, 6566.0], [28.8, 6567.0], [28.9, 6567.0], [29.0, 6588.0], [29.1, 6621.0], [29.2, 6638.0], [29.3, 6661.0], [29.4, 6663.0], [29.5, 6671.0], [29.6, 6732.0], [29.7, 6756.0], [29.8, 6820.0], [29.9, 6839.0], [30.0, 6855.0], [30.1, 6937.0], [30.2, 6966.0], [30.3, 6995.0], [30.4, 7011.0], [30.5, 7037.0], [30.6, 7037.0], [30.7, 7086.0], [30.8, 7094.0], [30.9, 7140.0], [31.0, 7151.0], [31.1, 7235.0], [31.2, 7267.0], [31.3, 7289.0], [31.4, 7332.0], [31.5, 7339.0], [31.6, 7354.0], [31.7, 7368.0], [31.8, 7375.0], [31.9, 7385.0], [32.0, 7491.0], [32.1, 7538.0], [32.2, 7550.0], [32.3, 7550.0], [32.4, 7600.0], [32.5, 7620.0], [32.6, 7676.0], [32.7, 7683.0], [32.8, 7737.0], [32.9, 7770.0], [33.0, 7794.0], [33.1, 7832.0], [33.2, 7843.0], [33.3, 7874.0], [33.4, 7917.0], [33.5, 7923.0], [33.6, 8021.0], [33.7, 8024.0], [33.8, 8058.0], [33.9, 8058.0], [34.0, 8109.0], [34.1, 8133.0], [34.2, 8158.0], [34.3, 8171.0], [34.4, 8253.0], [34.5, 8353.0], [34.6, 8358.0], [34.7, 8396.0], [34.8, 8407.0], [34.9, 8435.0], [35.0, 8568.0], [35.1, 8602.0], [35.2, 8631.0], [35.3, 8633.0], [35.4, 8651.0], [35.5, 8666.0], [35.6, 8666.0], [35.7, 8704.0], [35.8, 8710.0], [35.9, 8742.0], [36.0, 8777.0], [36.1, 8806.0], [36.2, 8899.0], [36.3, 8901.0], [36.4, 8910.0], [36.5, 8911.0], [36.6, 9094.0], [36.7, 9106.0], [36.8, 9112.0], [36.9, 9199.0], [37.0, 9237.0], [37.1, 9255.0], [37.2, 9275.0], [37.3, 9275.0], [37.4, 9300.0], [37.5, 9308.0], [37.6, 9379.0], [37.7, 9380.0], [37.8, 9400.0], [37.9, 9442.0], [38.0, 9446.0], [38.1, 9488.0], [38.2, 9500.0], [38.3, 9558.0], [38.4, 9590.0], [38.5, 9627.0], [38.6, 9629.0], [38.7, 9636.0], [38.8, 9645.0], [38.9, 9747.0], [39.0, 9747.0], [39.1, 9775.0], [39.2, 9831.0], [39.3, 9836.0], [39.4, 9864.0], [39.5, 9878.0], [39.6, 9897.0], [39.7, 9957.0], [39.8, 10005.0], [39.9, 10008.0], [40.0, 10010.0], [40.1, 10069.0], [40.2, 10184.0], [40.3, 10227.0], [40.4, 10231.0], [40.5, 10245.0], [40.6, 10290.0], [40.7, 10290.0], [40.8, 10294.0], [40.9, 10382.0], [41.0, 10430.0], [41.1, 10465.0], [41.2, 10486.0], [41.3, 10502.0], [41.4, 10508.0], [41.5, 10520.0], [41.6, 10617.0], [41.7, 10699.0], [41.8, 10703.0], [41.9, 10804.0], [42.0, 10814.0], [42.1, 10830.0], [42.2, 10842.0], [42.3, 10966.0], [42.4, 10966.0], [42.5, 11001.0], [42.6, 11007.0], [42.7, 11068.0], [42.8, 11107.0], [42.9, 11109.0], [43.0, 11117.0], [43.1, 11122.0], [43.2, 11134.0], [43.3, 11151.0], [43.4, 11162.0], [43.5, 11229.0], [43.6, 11253.0], [43.7, 11290.0], [43.8, 11350.0], [43.9, 11357.0], [44.0, 11400.0], [44.1, 11400.0], [44.2, 11459.0], [44.3, 11472.0], [44.4, 11472.0], [44.5, 11525.0], [44.6, 11577.0], [44.7, 11582.0], [44.8, 11703.0], [44.9, 11736.0], [45.0, 11745.0], [45.1, 11754.0], [45.2, 11819.0], [45.3, 11838.0], [45.4, 11851.0], [45.5, 11859.0], [45.6, 11859.0], [45.7, 12017.0], [45.8, 12017.0], [45.9, 12022.0], [46.0, 12061.0], [46.1, 12113.0], [46.2, 12146.0], [46.3, 12156.0], [46.4, 12159.0], [46.5, 12163.0], [46.6, 12200.0], [46.7, 12218.0], [46.8, 12230.0], [46.9, 12235.0], [47.0, 12486.0], [47.1, 12518.0], [47.2, 12559.0], [47.3, 12645.0], [47.4, 12674.0], [47.5, 12674.0], [47.6, 12726.0], [47.7, 12728.0], [47.8, 12845.0], [47.9, 12854.0], [48.0, 12941.0], [48.1, 13013.0], [48.2, 13038.0], [48.3, 13043.0], [48.4, 13155.0], [48.5, 13178.0], [48.6, 13191.0], [48.7, 13207.0], [48.8, 13222.0], [48.9, 13256.0], [49.0, 13278.0], [49.1, 13282.0], [49.2, 13282.0], [49.3, 13330.0], [49.4, 13366.0], [49.5, 13366.0], [49.6, 13417.0], [49.7, 13463.0], [49.8, 13486.0], [49.9, 13511.0], [50.0, 13568.0], [50.1, 13574.0], [50.2, 13667.0], [50.3, 13706.0], [50.4, 13808.0], [50.5, 13837.0], [50.6, 13860.0], [50.7, 13885.0], [50.8, 13890.0], [50.9, 13890.0], [51.0, 13918.0], [51.1, 13947.0], [51.2, 13949.0], [51.3, 13980.0], [51.4, 14048.0], [51.5, 14175.0], [51.6, 14191.0], [51.7, 14204.0], [51.8, 14233.0], [51.9, 14237.0], [52.0, 14247.0], [52.1, 14255.0], [52.2, 14275.0], [52.3, 14380.0], [52.4, 14418.0], [52.5, 14455.0], [52.6, 14455.0], [52.7, 14507.0], [52.8, 14632.0], [52.9, 14665.0], [53.0, 14682.0], [53.1, 14682.0], [53.2, 14699.0], [53.3, 14784.0], [53.4, 14792.0], [53.5, 14815.0], [53.6, 14877.0], [53.7, 14881.0], [53.8, 14881.0], [53.9, 14905.0], [54.0, 14944.0], [54.1, 14970.0], [54.2, 14998.0], [54.3, 14998.0], [54.4, 15106.0], [54.5, 15143.0], [54.6, 15154.0], [54.7, 15216.0], [54.8, 15236.0], [54.9, 15250.0], [55.0, 15350.0], [55.1, 15375.0], [55.2, 15417.0], [55.3, 15437.0], [55.4, 15491.0], [55.5, 15628.0], [55.6, 15636.0], [55.7, 15657.0], [55.8, 15722.0], [55.9, 15736.0], [56.0, 15736.0], [56.1, 15774.0], [56.2, 15785.0], [56.3, 15794.0], [56.4, 15798.0], [56.5, 15801.0], [56.6, 15802.0], [56.7, 15809.0], [56.8, 15848.0], [56.9, 15939.0], [57.0, 15950.0], [57.1, 16078.0], [57.2, 16092.0], [57.3, 16129.0], [57.4, 16153.0], [57.5, 16201.0], [57.6, 16261.0], [57.7, 16261.0], [57.8, 16324.0], [57.9, 16338.0], [58.0, 16364.0], [58.1, 16612.0], [58.2, 16683.0], [58.3, 16685.0], [58.4, 16694.0], [58.5, 16723.0], [58.6, 16734.0], [58.7, 16745.0], [58.8, 16751.0], [58.9, 16755.0], [59.0, 16806.0], [59.1, 16834.0], [59.2, 16885.0], [59.3, 16889.0], [59.4, 16889.0], [59.5, 16906.0], [59.6, 17002.0], [59.7, 17035.0], [59.8, 17188.0], [59.9, 17276.0], [60.0, 17448.0], [60.1, 17490.0], [60.2, 17565.0], [60.3, 17582.0], [60.4, 17662.0], [60.5, 17729.0], [60.6, 17743.0], [60.7, 17758.0], [60.8, 17845.0], [60.9, 17910.0], [61.0, 17946.0], [61.1, 17946.0], [61.2, 17983.0], [61.3, 18024.0], [61.4, 18044.0], [61.5, 18064.0], [61.6, 18123.0], [61.7, 18256.0], [61.8, 18328.0], [61.9, 18352.0], [62.0, 18413.0], [62.1, 18413.0], [62.2, 18426.0], [62.3, 18500.0], [62.4, 18608.0], [62.5, 18661.0], [62.6, 18793.0], [62.7, 18942.0], [62.8, 18942.0], [62.9, 18953.0], [63.0, 18960.0], [63.1, 19009.0], [63.2, 19011.0], [63.3, 19030.0], [63.4, 19166.0], [63.5, 19203.0], [63.6, 19366.0], [63.7, 19374.0], [63.8, 19408.0], [63.9, 19419.0], [64.0, 19445.0], [64.1, 19463.0], [64.2, 19468.0], [64.3, 19557.0], [64.4, 19655.0], [64.5, 19655.0], [64.6, 19666.0], [64.7, 19759.0], [64.8, 19768.0], [64.9, 19786.0], [65.0, 19859.0], [65.1, 19925.0], [65.2, 19955.0], [65.3, 19995.0], [65.4, 20006.0], [65.5, 20100.0], [65.6, 20195.0], [65.7, 20226.0], [65.8, 20236.0], [65.9, 20510.0], [66.0, 20518.0], [66.1, 20547.0], [66.2, 20547.0], [66.3, 20550.0], [66.4, 20598.0], [66.5, 20615.0], [66.6, 20671.0], [66.7, 20755.0], [66.8, 20864.0], [66.9, 20870.0], [67.0, 20925.0], [67.1, 21033.0], [67.2, 21043.0], [67.3, 21123.0], [67.4, 21258.0], [67.5, 21268.0], [67.6, 21500.0], [67.7, 21519.0], [67.8, 21519.0], [67.9, 21603.0], [68.0, 21613.0], [68.1, 21628.0], [68.2, 21735.0], [68.3, 21740.0], [68.4, 21745.0], [68.5, 21929.0], [68.6, 21969.0], [68.7, 22006.0], [68.8, 22075.0], [68.9, 22106.0], [69.0, 22128.0], [69.1, 22142.0], [69.2, 22215.0], [69.3, 22234.0], [69.4, 22242.0], [69.5, 22242.0], [69.6, 22254.0], [69.7, 22374.0], [69.8, 22396.0], [69.9, 22434.0], [70.0, 22460.0], [70.1, 22487.0], [70.2, 22662.0], [70.3, 22781.0], [70.4, 22792.0], [70.5, 22944.0], [70.6, 23045.0], [70.7, 23071.0], [70.8, 23072.0], [70.9, 23110.0], [71.0, 23209.0], [71.1, 23215.0], [71.2, 23215.0], [71.3, 23278.0], [71.4, 23287.0], [71.5, 23363.0], [71.6, 23368.0], [71.7, 23418.0], [71.8, 23446.0], [71.9, 23468.0], [72.0, 23616.0], [72.1, 23642.0], [72.2, 23704.0], [72.3, 23764.0], [72.4, 23895.0], [72.5, 23929.0], [72.6, 24028.0], [72.7, 24185.0], [72.8, 24261.0], [72.9, 24261.0], [73.0, 24267.0], [73.1, 24366.0], [73.2, 24385.0], [73.3, 24390.0], [73.4, 24423.0], [73.5, 24491.0], [73.6, 24542.0], [73.7, 24846.0], [73.8, 24993.0], [73.9, 24995.0], [74.0, 25040.0], [74.1, 25147.0], [74.2, 25227.0], [74.3, 25283.0], [74.4, 25292.0], [74.5, 25366.0], [74.6, 25366.0], [74.7, 25370.0], [74.8, 25376.0], [74.9, 25459.0], [75.0, 25481.0], [75.1, 25506.0], [75.2, 25510.0], [75.3, 25576.0], [75.4, 25646.0], [75.5, 25767.0], [75.6, 26038.0], [75.7, 26065.0], [75.8, 26213.0], [75.9, 26214.0], [76.0, 26327.0], [76.1, 26517.0], [76.2, 26556.0], [76.3, 26556.0], [76.4, 26602.0], [76.5, 26621.0], [76.6, 26634.0], [76.7, 26768.0], [76.8, 26798.0], [76.9, 26817.0], [77.0, 26832.0], [77.1, 26842.0], [77.2, 27008.0], [77.3, 27105.0], [77.4, 27128.0], [77.5, 27171.0], [77.6, 27224.0], [77.7, 27236.0], [77.8, 27265.0], [77.9, 27479.0], [78.0, 27479.0], [78.1, 27528.0], [78.2, 27578.0], [78.3, 27615.0], [78.4, 27666.0], [78.5, 27706.0], [78.6, 27752.0], [78.7, 27948.0], [78.8, 28103.0], [78.9, 28137.0], [79.0, 28265.0], [79.1, 28386.0], [79.2, 28390.0], [79.3, 28436.0], [79.4, 28534.0], [79.5, 28584.0], [79.6, 28591.0], [79.7, 28591.0], [79.8, 28628.0], [79.9, 28702.0], [80.0, 28749.0], [80.1, 28814.0], [80.2, 28919.0], [80.3, 29045.0], [80.4, 29343.0], [80.5, 29353.0], [80.6, 29367.0], [80.7, 29487.0], [80.8, 29545.0], [80.9, 29731.0], [81.0, 29800.0], [81.1, 29813.0], [81.2, 29913.0], [81.3, 29946.0], [81.4, 29946.0], [81.5, 29962.0], [81.6, 29968.0], [81.7, 30232.0], [81.8, 30259.0], [81.9, 30272.0], [82.0, 30328.0], [82.1, 30340.0], [82.2, 30608.0], [82.3, 30640.0], [82.4, 30680.0], [82.5, 30789.0], [82.6, 30943.0], [82.7, 31064.0], [82.8, 31180.0], [82.9, 31311.0], [83.0, 31341.0], [83.1, 31341.0], [83.2, 31412.0], [83.3, 31461.0], [83.4, 31550.0], [83.5, 31562.0], [83.6, 31599.0], [83.7, 31606.0], [83.8, 31680.0], [83.9, 31681.0], [84.0, 31742.0], [84.1, 31928.0], [84.2, 32047.0], [84.3, 32204.0], [84.4, 32386.0], [84.5, 32517.0], [84.6, 32649.0], [84.7, 32660.0], [84.8, 32660.0], [84.9, 32685.0], [85.0, 32781.0], [85.1, 32834.0], [85.2, 32850.0], [85.3, 32860.0], [85.4, 33059.0], [85.5, 33099.0], [85.6, 33134.0], [85.7, 33584.0], [85.8, 33699.0], [85.9, 33793.0], [86.0, 33798.0], [86.1, 33870.0], [86.2, 33875.0], [86.3, 33884.0], [86.4, 34070.0], [86.5, 34070.0], [86.6, 34116.0], [86.7, 34134.0], [86.8, 34180.0], [86.9, 34242.0], [87.0, 34316.0], [87.1, 34464.0], [87.2, 34482.0], [87.3, 34626.0], [87.4, 34796.0], [87.5, 34798.0], [87.6, 35030.0], [87.7, 35074.0], [87.8, 35151.0], [87.9, 35161.0], [88.0, 35164.0], [88.1, 35188.0], [88.2, 35188.0], [88.3, 35562.0], [88.4, 35592.0], [88.5, 35610.0], [88.6, 35725.0], [88.7, 35839.0], [88.8, 35869.0], [88.9, 36215.0], [89.0, 36230.0], [89.1, 36252.0], [89.2, 36493.0], [89.3, 36580.0], [89.4, 36666.0], [89.5, 36789.0], [89.6, 36818.0], [89.7, 36911.0], [89.8, 36921.0], [89.9, 36921.0], [90.0, 37111.0], [90.1, 37198.0], [90.2, 37211.0], [90.3, 37452.0], [90.4, 37558.0], [90.5, 37747.0], [90.6, 37985.0], [90.7, 37995.0], [90.8, 38113.0], [90.9, 38537.0], [91.0, 38550.0], [91.1, 38781.0], [91.2, 38860.0], [91.3, 38892.0], [91.4, 38946.0], [91.5, 39057.0], [91.6, 39057.0], [91.7, 39420.0], [91.8, 39464.0], [91.9, 39678.0], [92.0, 39757.0], [92.1, 39793.0], [92.2, 39848.0], [92.3, 39857.0], [92.4, 40134.0], [92.5, 40278.0], [92.6, 40381.0], [92.7, 40433.0], [92.8, 40799.0], [92.9, 40839.0], [93.0, 41054.0], [93.1, 41101.0], [93.2, 41292.0], [93.3, 41292.0], [93.4, 41326.0], [93.5, 41447.0], [93.6, 41750.0], [93.7, 41868.0], [93.8, 42007.0], [93.9, 42248.0], [94.0, 42271.0], [94.1, 42309.0], [94.2, 42343.0], [94.3, 42376.0], [94.4, 42842.0], [94.5, 42874.0], [94.6, 43041.0], [94.7, 43073.0], [94.8, 43100.0], [94.9, 43212.0], [95.0, 43212.0], [95.1, 43324.0], [95.2, 43331.0], [95.3, 43475.0], [95.4, 44164.0], [95.5, 44306.0], [95.6, 44457.0], [95.7, 44813.0], [95.8, 44851.0], [95.9, 45000.0], [96.0, 45002.0], [96.1, 45167.0], [96.2, 45255.0], [96.3, 45692.0], [96.4, 45878.0], [96.5, 45883.0], [96.6, 46018.0], [96.7, 46018.0], [96.8, 46188.0], [96.9, 46318.0], [97.0, 46661.0], [97.1, 46807.0], [97.2, 47203.0], [97.3, 47507.0], [97.4, 47662.0], [97.5, 47753.0], [97.6, 48012.0], [97.7, 48302.0], [97.8, 48455.0], [97.9, 48740.0], [98.0, 48754.0], [98.1, 49032.0], [98.2, 49206.0], [98.3, 49384.0], [98.4, 49384.0], [98.5, 49721.0], [98.6, 50012.0], [98.7, 50471.0], [98.8, 50745.0], [98.9, 51055.0], [99.0, 51130.0], [99.1, 51506.0], [99.2, 51821.0], [99.3, 52250.0], [99.4, 52324.0], [99.5, 52922.0], [99.6, 52950.0], [99.7, 53253.0], [99.8, 53939.0], [99.9, 55056.0], [100.0, 55056.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 13.0, "series": [{"data": [[33700.0, 2.0], [38500.0, 2.0], [36900.0, 2.0], [37700.0, 1.0], [40100.0, 1.0], [41700.0, 1.0], [43300.0, 2.0], [44100.0, 1.0], [49700.0, 1.0], [52900.0, 2.0], [600.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 7.0], [1100.0, 13.0], [1200.0, 3.0], [1300.0, 10.0], [1400.0, 8.0], [1500.0, 2.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 6.0], [1900.0, 5.0], [2000.0, 4.0], [2100.0, 4.0], [2300.0, 7.0], [2200.0, 6.0], [2400.0, 5.0], [2500.0, 4.0], [2600.0, 7.0], [2700.0, 4.0], [2800.0, 4.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 7.0], [3300.0, 7.0], [3200.0, 2.0], [3400.0, 4.0], [3500.0, 5.0], [3700.0, 4.0], [3600.0, 3.0], [3800.0, 6.0], [3900.0, 4.0], [4000.0, 6.0], [4100.0, 7.0], [4300.0, 2.0], [4200.0, 3.0], [4600.0, 8.0], [4500.0, 7.0], [4400.0, 1.0], [4800.0, 3.0], [4700.0, 7.0], [5000.0, 4.0], [5100.0, 3.0], [4900.0, 6.0], [5300.0, 2.0], [5200.0, 2.0], [5600.0, 8.0], [5400.0, 4.0], [5500.0, 3.0], [5700.0, 3.0], [5800.0, 5.0], [6000.0, 4.0], [5900.0, 4.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 4.0], [6500.0, 7.0], [6600.0, 5.0], [6400.0, 2.0], [6800.0, 3.0], [6700.0, 2.0], [6900.0, 3.0], [7000.0, 4.0], [7100.0, 2.0], [7300.0, 6.0], [7400.0, 1.0], [7200.0, 3.0], [7600.0, 4.0], [7500.0, 2.0], [7900.0, 2.0], [7700.0, 3.0], [7800.0, 3.0], [8100.0, 4.0], [8000.0, 3.0], [8600.0, 5.0], [8400.0, 2.0], [8200.0, 1.0], [9000.0, 1.0], [9200.0, 3.0], [8800.0, 2.0], [9600.0, 4.0], [9400.0, 4.0], [10000.0, 4.0], [9800.0, 5.0], [10200.0, 5.0], [10600.0, 2.0], [10400.0, 3.0], [10800.0, 4.0], [11200.0, 3.0], [11000.0, 3.0], [11400.0, 4.0], [11800.0, 5.0], [12000.0, 3.0], [12200.0, 4.0], [12600.0, 2.0], [12400.0, 1.0], [13200.0, 5.0], [12800.0, 2.0], [13000.0, 3.0], [13600.0, 1.0], [13800.0, 5.0], [13400.0, 3.0], [14000.0, 1.0], [14200.0, 6.0], [14400.0, 2.0], [14600.0, 5.0], [14800.0, 4.0], [15200.0, 3.0], [15600.0, 3.0], [15400.0, 3.0], [15800.0, 4.0], [16200.0, 2.0], [16000.0, 2.0], [16800.0, 4.0], [17200.0, 1.0], [17600.0, 1.0], [18400.0, 3.0], [18000.0, 3.0], [19200.0, 1.0], [19600.0, 2.0], [20000.0, 1.0], [20800.0, 2.0], [21200.0, 2.0], [22400.0, 3.0], [21600.0, 3.0], [22000.0, 2.0], [23200.0, 4.0], [24000.0, 1.0], [23600.0, 2.0], [24400.0, 2.0], [24800.0, 1.0], [25200.0, 3.0], [26000.0, 2.0], [25600.0, 1.0], [27200.0, 3.0], [27600.0, 2.0], [26800.0, 3.0], [28400.0, 1.0], [28800.0, 1.0], [31600.0, 3.0], [32000.0, 1.0], [32800.0, 3.0], [33600.0, 1.0], [34400.0, 2.0], [36800.0, 1.0], [40800.0, 1.0], [43200.0, 1.0], [44800.0, 2.0], [45600.0, 1.0], [47200.0, 1.0], [48000.0, 1.0], [50400.0, 1.0], [34700.0, 2.0], [33100.0, 1.0], [35500.0, 2.0], [37900.0, 2.0], [37100.0, 2.0], [38700.0, 1.0], [40300.0, 1.0], [41100.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [48300.0, 1.0], [47500.0, 1.0], [50700.0, 1.0], [51500.0, 1.0], [52300.0, 1.0], [53900.0, 1.0], [16900.0, 1.0], [17700.0, 3.0], [18100.0, 1.0], [19300.0, 2.0], [18500.0, 1.0], [18900.0, 3.0], [19700.0, 3.0], [20100.0, 2.0], [20500.0, 5.0], [20900.0, 1.0], [22100.0, 3.0], [21700.0, 3.0], [22900.0, 1.0], [23300.0, 2.0], [24100.0, 1.0], [23700.0, 2.0], [24500.0, 1.0], [24900.0, 2.0], [25300.0, 3.0], [26500.0, 2.0], [25700.0, 1.0], [28100.0, 2.0], [28500.0, 3.0], [27700.0, 2.0], [29300.0, 3.0], [28900.0, 1.0], [29700.0, 1.0], [31700.0, 1.0], [31300.0, 2.0], [30900.0, 1.0], [32500.0, 1.0], [33800.0, 3.0], [33000.0, 2.0], [34600.0, 1.0], [36200.0, 3.0], [39400.0, 2.0], [40200.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [45000.0, 2.0], [43400.0, 1.0], [45800.0, 2.0], [46600.0, 1.0], [49000.0, 1.0], [52200.0, 1.0], [34100.0, 3.0], [35700.0, 1.0], [36500.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 2.0], [41300.0, 1.0], [46100.0, 1.0], [47700.0, 1.0], [49300.0, 1.0], [8700.0, 4.0], [8300.0, 3.0], [8500.0, 1.0], [8900.0, 3.0], [9100.0, 3.0], [9300.0, 4.0], [9500.0, 3.0], [9700.0, 2.0], [10100.0, 1.0], [9900.0, 1.0], [10500.0, 3.0], [10700.0, 1.0], [10300.0, 1.0], [11100.0, 7.0], [10900.0, 1.0], [11500.0, 3.0], [11700.0, 4.0], [11300.0, 2.0], [12100.0, 5.0], [12700.0, 2.0], [12500.0, 2.0], [13100.0, 3.0], [12900.0, 1.0], [13300.0, 3.0], [13700.0, 1.0], [13500.0, 3.0], [14100.0, 2.0], [13900.0, 4.0], [14300.0, 1.0], [14700.0, 2.0], [14500.0, 1.0], [14900.0, 4.0], [15100.0, 3.0], [15300.0, 2.0], [15700.0, 6.0], [15900.0, 2.0], [16300.0, 3.0], [16100.0, 2.0], [16600.0, 4.0], [17000.0, 2.0], [17400.0, 2.0], [18200.0, 1.0], [17800.0, 1.0], [19400.0, 5.0], [18600.0, 2.0], [19000.0, 3.0], [20200.0, 2.0], [19800.0, 1.0], [20600.0, 2.0], [21000.0, 2.0], [22200.0, 4.0], [23000.0, 3.0], [22600.0, 1.0], [23400.0, 3.0], [23800.0, 1.0], [24200.0, 2.0], [25000.0, 1.0], [25400.0, 2.0], [26200.0, 2.0], [26600.0, 3.0], [27400.0, 1.0], [27000.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [30200.0, 3.0], [30600.0, 3.0], [29800.0, 2.0], [31400.0, 2.0], [31000.0, 1.0], [32600.0, 3.0], [32200.0, 1.0], [34000.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [38800.0, 2.0], [40400.0, 1.0], [39600.0, 1.0], [42800.0, 2.0], [42000.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [46000.0, 1.0], [46800.0, 1.0], [45200.0, 1.0], [48400.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [50000.0, 1.0], [53200.0, 1.0], [34300.0, 1.0], [33500.0, 1.0], [35100.0, 4.0], [36700.0, 1.0], [37500.0, 1.0], [40700.0, 1.0], [42300.0, 3.0], [43100.0, 1.0], [46300.0, 1.0], [48700.0, 2.0], [51100.0, 1.0], [17100.0, 1.0], [16700.0, 5.0], [17900.0, 3.0], [17500.0, 2.0], [18300.0, 2.0], [19100.0, 1.0], [18700.0, 1.0], [19900.0, 3.0], [19500.0, 1.0], [20700.0, 1.0], [21100.0, 1.0], [21500.0, 2.0], [22300.0, 2.0], [21900.0, 2.0], [22700.0, 2.0], [23100.0, 1.0], [23900.0, 1.0], [24300.0, 3.0], [25100.0, 1.0], [25500.0, 3.0], [26300.0, 1.0], [27100.0, 3.0], [27500.0, 2.0], [26700.0, 2.0], [28300.0, 2.0], [27900.0, 1.0], [28700.0, 2.0], [29500.0, 1.0], [29900.0, 4.0], [30300.0, 2.0], [30700.0, 1.0], [31500.0, 3.0], [31100.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [34200.0, 1.0], [35800.0, 2.0], [35000.0, 2.0], [36600.0, 1.0], [37400.0, 1.0], [39800.0, 2.0], [39000.0, 1.0], [41400.0, 1.0], [43000.0, 2.0], [42200.0, 2.0], [51000.0, 1.0], [51800.0, 1.0], [55000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 55000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 892.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 892.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.5, "minX": 1.65124344E12, "maxY": 72.8562874251497, "series": [{"data": [[1.65124356E12, 41.90476190476192], [1.65124374E12, 60.61874999999998], [1.65124368E12, 72.8562874251497], [1.6512438E12, 4.5], [1.6512435E12, 24.795031055900612], [1.65124344E12, 10.522935779816516], [1.65124362E12, 58.5535714285714]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512438E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3789.3953488372103, "minX": 1.0, "maxY": 45000.0, "series": [{"data": [[2.0, 28814.0], [3.0, 27171.0], [4.0, 8401.666666666668], [5.0, 11738.0], [6.0, 12814.333333333334], [7.0, 28193.0], [8.0, 18658.0], [9.0, 18917.0], [10.0, 3789.3953488372103], [11.0, 29831.5], [12.0, 18185.0], [13.0, 17838.0], [14.0, 11888.333333333334], [15.0, 26121.5], [16.0, 16147.0], [17.0, 18250.0], [18.0, 16771.5], [19.0, 24230.0], [20.0, 7199.621951219514], [21.0, 45000.0], [22.0, 16345.333333333334], [23.0, 23660.0], [24.0, 11084.0], [25.0, 14960.0], [26.0, 10933.0], [27.0, 21552.5], [28.0, 8842.333333333332], [29.0, 22247.5], [30.0, 10010.800000000003], [31.0, 15185.0], [32.0, 28848.5], [33.0, 20968.5], [34.0, 29017.0], [35.0, 17094.333333333336], [36.0, 29448.0], [37.0, 17779.0], [38.0, 28978.0], [39.0, 18734.666666666668], [40.0, 12785.376470588237], [41.0, 19476.0], [42.0, 27461.0], [43.0, 23737.0], [44.0, 25900.333333333336], [45.0, 20434.0], [46.0, 27050.666666666668], [47.0, 25178.0], [48.0, 27409.0], [49.0, 22842.0], [50.0, 15475.058823529413], [51.0, 22155.333333333332], [52.0, 27471.0], [53.0, 22918.666666666668], [54.0, 33082.5], [55.0, 13989.0], [56.0, 27995.0], [57.0, 14524.0], [58.0, 18225.5], [59.0, 19272.75], [60.0, 21282.534883720935], [61.0, 14744.333333333332], [62.0, 30674.5], [63.0, 5116.0], [64.0, 10986.333333333332], [65.0, 7719.5], [66.0, 11957.0], [67.0, 6890.5], [68.0, 13091.8], [69.0, 9593.5], [70.0, 20491.277777777777], [71.0, 37470.75], [72.0, 20139.5], [73.0, 36537.0], [74.0, 29524.0], [75.0, 26860.917159763325], [1.0, 31599.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[46.671625929861804, 16892.424017003206]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 75.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20.666666666666668, "minX": 1.65124344E12, "maxY": 492.01666666666665, "series": [{"data": [[1.65124356E12, 491.76666666666665], [1.65124374E12, 468.9166666666667], [1.65124368E12, 489.3833333333333], [1.6512438E12, 23.466666666666665], [1.6512435E12, 470.46666666666664], [1.65124344E12, 317.81666666666666], [1.65124362E12, 492.01666666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124356E12, 434.0], [1.65124374E12, 413.3333333333333], [1.65124368E12, 431.4166666666667], [1.6512438E12, 20.666666666666668], [1.6512435E12, 415.9166666666667], [1.65124344E12, 281.5833333333333], [1.65124362E12, 434.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512438E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3292.2568807339444, "minX": 1.65124344E12, "maxY": 32362.250000000004, "series": [{"data": [[1.65124356E12, 12979.434523809525], [1.65124374E12, 28332.262499999997], [1.65124368E12, 25310.419161676644], [1.6512438E12, 32362.250000000004], [1.6512435E12, 8126.89440993789], [1.65124344E12, 3292.2568807339444], [1.65124362E12, 18030.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512438E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3291.94495412844, "minX": 1.65124344E12, "maxY": 32362.250000000004, "series": [{"data": [[1.65124356E12, 12979.398809523811], [1.65124374E12, 28332.231250000004], [1.65124368E12, 25310.383233532928], [1.6512438E12, 32362.250000000004], [1.6512435E12, 8126.857142857141], [1.65124344E12, 3291.94495412844], [1.65124362E12, 18029.952380952374]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512438E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.318750000000002, "minX": 1.65124344E12, "maxY": 17.220183486238533, "series": [{"data": [[1.65124356E12, 8.36904761904762], [1.65124374E12, 7.318750000000002], [1.65124368E12, 7.383233532934131], [1.6512438E12, 7.375], [1.6512435E12, 9.26708074534162], [1.65124344E12, 17.220183486238533], [1.65124362E12, 8.01785714285714]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512438E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 687.0, "minX": 1.65124344E12, "maxY": 55056.0, "series": [{"data": [[1.65124356E12, 31742.0], [1.65124374E12, 53939.0], [1.65124368E12, 49206.0], [1.6512438E12, 55056.0], [1.6512435E12, 19925.0], [1.65124344E12, 7923.0], [1.65124362E12, 42842.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124356E12, 22673.899999999998], [1.65124374E12, 49004.200000000004], [1.65124368E12, 42285.4], [1.6512438E12, 55056.0], [1.6512435E12, 14678.6], [1.65124344E12, 5776.0], [1.65124362E12, 32835.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124356E12, 30700.100000000002], [1.65124374E12, 53520.53999999999], [1.65124368E12, 48591.27999999999], [1.6512438E12, 55056.0], [1.6512435E12, 19477.359999999997], [1.65124344E12, 7864.600000000003], [1.65124362E12, 41879.450000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124356E12, 25664.89999999998], [1.65124374E12, 51487.2], [1.65124368E12, 44941.6], [1.6512438E12, 55056.0], [1.6512435E12, 15923.6], [1.65124344E12, 6196.0], [1.65124362E12, 35787.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124356E12, 1053.0], [1.65124374E12, 735.0], [1.65124368E12, 687.0], [1.6512438E12, 21519.0], [1.6512435E12, 864.0], [1.65124344E12, 808.0], [1.65124362E12, 1285.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124356E12, 12785.5], [1.65124374E12, 27876.0], [1.65124368E12, 26327.0], [1.6512438E12, 30206.5], [1.6512435E12, 7832.0], [1.65124344E12, 3116.0], [1.65124362E12, 16897.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512438E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12138.0, "minX": 1.0, "maxY": 28814.0, "series": [{"data": [[2.0, 12623.0], [4.0, 12138.0], [1.0, 28814.0], [3.0, 14085.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12138.0, "minX": 1.0, "maxY": 28814.0, "series": [{"data": [[2.0, 12623.0], [4.0, 12138.0], [1.0, 28814.0], [3.0, 14085.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.55, "minX": 1.65124344E12, "maxY": 3.1333333333333333, "series": [{"data": [[1.65124356E12, 3.1333333333333333], [1.65124374E12, 1.55], [1.65124368E12, 2.8666666666666667], [1.6512435E12, 2.85], [1.65124344E12, 2.15], [1.65124362E12, 3.1333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124374E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65124344E12, "maxY": 2.8, "series": [{"data": [[1.65124356E12, 2.8], [1.65124374E12, 2.6666666666666665], [1.65124368E12, 2.783333333333333], [1.6512438E12, 0.13333333333333333], [1.6512435E12, 2.683333333333333], [1.65124344E12, 1.8166666666666667], [1.65124362E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512438E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65124344E12, "maxY": 2.8, "series": [{"data": [[1.65124356E12, 2.8], [1.65124374E12, 2.6666666666666665], [1.65124368E12, 2.783333333333333], [1.6512438E12, 0.13333333333333333], [1.6512435E12, 2.683333333333333], [1.65124344E12, 1.8166666666666667], [1.65124362E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512438E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65124344E12, "maxY": 2.8, "series": [{"data": [[1.65124356E12, 2.8], [1.65124374E12, 2.6666666666666665], [1.65124368E12, 2.783333333333333], [1.6512438E12, 0.13333333333333333], [1.6512435E12, 2.683333333333333], [1.65124344E12, 1.8166666666666667], [1.65124362E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512438E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


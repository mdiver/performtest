/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 424.0, "minX": 0.0, "maxY": 60244.0, "series": [{"data": [[0.0, 424.0], [0.1, 424.0], [0.2, 796.0], [0.3, 843.0], [0.4, 874.0], [0.5, 891.0], [0.6, 913.0], [0.7, 923.0], [0.8, 981.0], [0.9, 983.0], [1.0, 987.0], [1.1, 998.0], [1.2, 1012.0], [1.3, 1021.0], [1.4, 1045.0], [1.5, 1054.0], [1.6, 1056.0], [1.7, 1059.0], [1.8, 1094.0], [1.9, 1102.0], [2.0, 1114.0], [2.1, 1143.0], [2.2, 1152.0], [2.3, 1172.0], [2.4, 1187.0], [2.5, 1194.0], [2.6, 1204.0], [2.7, 1212.0], [2.8, 1213.0], [2.9, 1217.0], [3.0, 1225.0], [3.1, 1225.0], [3.2, 1232.0], [3.3, 1240.0], [3.4, 1260.0], [3.5, 1285.0], [3.6, 1303.0], [3.7, 1308.0], [3.8, 1309.0], [3.9, 1328.0], [4.0, 1338.0], [4.1, 1342.0], [4.2, 1351.0], [4.3, 1352.0], [4.4, 1380.0], [4.5, 1443.0], [4.6, 1452.0], [4.7, 1467.0], [4.8, 1468.0], [4.9, 1477.0], [5.0, 1505.0], [5.1, 1509.0], [5.2, 1559.0], [5.3, 1560.0], [5.4, 1567.0], [5.5, 1604.0], [5.6, 1606.0], [5.7, 1621.0], [5.8, 1642.0], [5.9, 1647.0], [6.0, 1661.0], [6.1, 1661.0], [6.2, 1673.0], [6.3, 1697.0], [6.4, 1718.0], [6.5, 1729.0], [6.6, 1776.0], [6.7, 1810.0], [6.8, 1896.0], [6.9, 1917.0], [7.0, 1920.0], [7.1, 1926.0], [7.2, 1933.0], [7.3, 2031.0], [7.4, 2057.0], [7.5, 2088.0], [7.6, 2096.0], [7.7, 2100.0], [7.8, 2106.0], [7.9, 2127.0], [8.0, 2141.0], [8.1, 2146.0], [8.2, 2164.0], [8.3, 2176.0], [8.4, 2182.0], [8.5, 2225.0], [8.6, 2256.0], [8.7, 2261.0], [8.8, 2265.0], [8.9, 2307.0], [9.0, 2318.0], [9.1, 2318.0], [9.2, 2329.0], [9.3, 2348.0], [9.4, 2357.0], [9.5, 2361.0], [9.6, 2459.0], [9.7, 2479.0], [9.8, 2516.0], [9.9, 2531.0], [10.0, 2545.0], [10.1, 2591.0], [10.2, 2605.0], [10.3, 2628.0], [10.4, 2644.0], [10.5, 2648.0], [10.6, 2657.0], [10.7, 2669.0], [10.8, 2721.0], [10.9, 2738.0], [11.0, 2752.0], [11.1, 2800.0], [11.2, 2801.0], [11.3, 2820.0], [11.4, 2825.0], [11.5, 2830.0], [11.6, 2844.0], [11.7, 2864.0], [11.8, 2877.0], [11.9, 2910.0], [12.0, 2925.0], [12.1, 2930.0], [12.2, 2930.0], [12.3, 2933.0], [12.4, 2937.0], [12.5, 2957.0], [12.6, 2977.0], [12.7, 2986.0], [12.8, 2991.0], [12.9, 2995.0], [13.0, 3056.0], [13.1, 3058.0], [13.2, 3072.0], [13.3, 3074.0], [13.4, 3086.0], [13.5, 3090.0], [13.6, 3091.0], [13.7, 3120.0], [13.8, 3127.0], [13.9, 3129.0], [14.0, 3130.0], [14.1, 3157.0], [14.2, 3174.0], [14.3, 3209.0], [14.4, 3222.0], [14.5, 3234.0], [14.6, 3269.0], [14.7, 3285.0], [14.8, 3292.0], [14.9, 3309.0], [15.0, 3361.0], [15.1, 3376.0], [15.2, 3376.0], [15.3, 3378.0], [15.4, 3412.0], [15.5, 3419.0], [15.6, 3426.0], [15.7, 3435.0], [15.8, 3435.0], [15.9, 3484.0], [16.0, 3505.0], [16.1, 3600.0], [16.2, 3607.0], [16.3, 3627.0], [16.4, 3675.0], [16.5, 3675.0], [16.6, 3688.0], [16.7, 3732.0], [16.8, 3870.0], [16.9, 3896.0], [17.0, 3905.0], [17.1, 3909.0], [17.2, 3910.0], [17.3, 3920.0], [17.4, 3954.0], [17.5, 3955.0], [17.6, 3966.0], [17.7, 3977.0], [17.8, 4022.0], [17.9, 4029.0], [18.0, 4036.0], [18.1, 4063.0], [18.2, 4063.0], [18.3, 4180.0], [18.4, 4185.0], [18.5, 4199.0], [18.6, 4212.0], [18.7, 4225.0], [18.8, 4231.0], [18.9, 4232.0], [19.0, 4234.0], [19.1, 4255.0], [19.2, 4333.0], [19.3, 4349.0], [19.4, 4360.0], [19.5, 4360.0], [19.6, 4362.0], [19.7, 4418.0], [19.8, 4431.0], [19.9, 4470.0], [20.0, 4472.0], [20.1, 4498.0], [20.2, 4503.0], [20.3, 4512.0], [20.4, 4530.0], [20.5, 4535.0], [20.6, 4558.0], [20.7, 4572.0], [20.8, 4593.0], [20.9, 4596.0], [21.0, 4605.0], [21.1, 4608.0], [21.2, 4611.0], [21.3, 4611.0], [21.4, 4649.0], [21.5, 4688.0], [21.6, 4707.0], [21.7, 4744.0], [21.8, 4798.0], [21.9, 4859.0], [22.0, 4974.0], [22.1, 4979.0], [22.2, 4980.0], [22.3, 5006.0], [22.4, 5031.0], [22.5, 5045.0], [22.6, 5067.0], [22.7, 5095.0], [22.8, 5145.0], [22.9, 5148.0], [23.0, 5151.0], [23.1, 5185.0], [23.2, 5192.0], [23.3, 5213.0], [23.4, 5247.0], [23.5, 5315.0], [23.6, 5320.0], [23.7, 5344.0], [23.8, 5346.0], [23.9, 5390.0], [24.0, 5406.0], [24.1, 5407.0], [24.2, 5407.0], [24.3, 5407.0], [24.4, 5422.0], [24.5, 5432.0], [24.6, 5437.0], [24.7, 5452.0], [24.8, 5520.0], [24.9, 5551.0], [25.0, 5576.0], [25.1, 5582.0], [25.2, 5583.0], [25.3, 5597.0], [25.4, 5612.0], [25.5, 5620.0], [25.6, 5625.0], [25.7, 5655.0], [25.8, 5668.0], [25.9, 5677.0], [26.0, 5693.0], [26.1, 5720.0], [26.2, 5722.0], [26.3, 5733.0], [26.4, 5737.0], [26.5, 5757.0], [26.6, 5762.0], [26.7, 5813.0], [26.8, 5827.0], [26.9, 5841.0], [27.0, 5850.0], [27.1, 5856.0], [27.2, 5870.0], [27.3, 5870.0], [27.4, 5893.0], [27.5, 5914.0], [27.6, 5925.0], [27.7, 5936.0], [27.8, 5974.0], [27.9, 5980.0], [28.0, 6037.0], [28.1, 6177.0], [28.2, 6196.0], [28.3, 6215.0], [28.4, 6218.0], [28.5, 6266.0], [28.6, 6275.0], [28.7, 6378.0], [28.8, 6378.0], [28.9, 6392.0], [29.0, 6401.0], [29.1, 6413.0], [29.2, 6443.0], [29.3, 6446.0], [29.4, 6451.0], [29.5, 6464.0], [29.6, 6521.0], [29.7, 6557.0], [29.8, 6564.0], [29.9, 6627.0], [30.0, 6663.0], [30.1, 6670.0], [30.2, 6700.0], [30.3, 6708.0], [30.4, 6708.0], [30.5, 6712.0], [30.6, 6747.0], [30.7, 6779.0], [30.8, 6829.0], [30.9, 6839.0], [31.0, 6840.0], [31.1, 6852.0], [31.2, 6897.0], [31.3, 6911.0], [31.4, 6940.0], [31.5, 6953.0], [31.6, 6993.0], [31.7, 7004.0], [31.8, 7023.0], [31.9, 7066.0], [32.0, 7109.0], [32.1, 7124.0], [32.2, 7142.0], [32.3, 7183.0], [32.4, 7186.0], [32.5, 7203.0], [32.6, 7239.0], [32.7, 7375.0], [32.8, 7438.0], [32.9, 7532.0], [33.0, 7550.0], [33.1, 7560.0], [33.2, 7567.0], [33.3, 7573.0], [33.4, 7573.0], [33.5, 7588.0], [33.6, 7603.0], [33.7, 7635.0], [33.8, 7681.0], [33.9, 7698.0], [34.0, 7800.0], [34.1, 7814.0], [34.2, 7815.0], [34.3, 7879.0], [34.4, 7889.0], [34.5, 7967.0], [34.6, 7968.0], [34.7, 7977.0], [34.8, 7991.0], [34.9, 8009.0], [35.0, 8159.0], [35.1, 8172.0], [35.2, 8177.0], [35.3, 8188.0], [35.4, 8201.0], [35.5, 8209.0], [35.6, 8220.0], [35.7, 8286.0], [35.8, 8323.0], [35.9, 8343.0], [36.0, 8452.0], [36.1, 8474.0], [36.2, 8553.0], [36.3, 8591.0], [36.4, 8591.0], [36.5, 8722.0], [36.6, 8723.0], [36.7, 8742.0], [36.8, 8766.0], [36.9, 8805.0], [37.0, 8808.0], [37.1, 8856.0], [37.2, 8937.0], [37.3, 8954.0], [37.4, 9089.0], [37.5, 9100.0], [37.6, 9117.0], [37.7, 9221.0], [37.8, 9290.0], [37.9, 9324.0], [38.0, 9328.0], [38.1, 9379.0], [38.2, 9393.0], [38.3, 9404.0], [38.4, 9441.0], [38.5, 9459.0], [38.6, 9474.0], [38.7, 9500.0], [38.8, 9536.0], [38.9, 9647.0], [39.0, 9660.0], [39.1, 9668.0], [39.2, 9694.0], [39.3, 9711.0], [39.4, 9711.0], [39.5, 9714.0], [39.6, 9715.0], [39.7, 9716.0], [39.8, 9719.0], [39.9, 9727.0], [40.0, 9739.0], [40.1, 9774.0], [40.2, 9823.0], [40.3, 9871.0], [40.4, 9881.0], [40.5, 9902.0], [40.6, 9909.0], [40.7, 9942.0], [40.8, 9952.0], [40.9, 9997.0], [41.0, 10058.0], [41.1, 10074.0], [41.2, 10089.0], [41.3, 10190.0], [41.4, 10200.0], [41.5, 10245.0], [41.6, 10246.0], [41.7, 10295.0], [41.8, 10392.0], [41.9, 10410.0], [42.0, 10421.0], [42.1, 10535.0], [42.2, 10556.0], [42.3, 10566.0], [42.4, 10598.0], [42.5, 10598.0], [42.6, 10623.0], [42.7, 10646.0], [42.8, 10664.0], [42.9, 10686.0], [43.0, 10745.0], [43.1, 10763.0], [43.2, 10812.0], [43.3, 10814.0], [43.4, 10852.0], [43.5, 10854.0], [43.6, 10889.0], [43.7, 10908.0], [43.8, 10911.0], [43.9, 10958.0], [44.0, 10967.0], [44.1, 11010.0], [44.2, 11024.0], [44.3, 11035.0], [44.4, 11095.0], [44.5, 11213.0], [44.6, 11236.0], [44.7, 11266.0], [44.8, 11320.0], [44.9, 11367.0], [45.0, 11454.0], [45.1, 11512.0], [45.2, 11513.0], [45.3, 11532.0], [45.4, 11533.0], [45.5, 11533.0], [45.6, 11580.0], [45.7, 11603.0], [45.8, 11647.0], [45.9, 11685.0], [46.0, 11709.0], [46.1, 11777.0], [46.2, 11796.0], [46.3, 11829.0], [46.4, 11847.0], [46.5, 11923.0], [46.6, 11942.0], [46.7, 12017.0], [46.8, 12035.0], [46.9, 12047.0], [47.0, 12049.0], [47.1, 12084.0], [47.2, 12085.0], [47.3, 12141.0], [47.4, 12141.0], [47.5, 12160.0], [47.6, 12189.0], [47.7, 12261.0], [47.8, 12300.0], [47.9, 12356.0], [48.0, 12417.0], [48.1, 12523.0], [48.2, 12554.0], [48.3, 12602.0], [48.4, 12643.0], [48.5, 12643.0], [48.6, 12656.0], [48.7, 12673.0], [48.8, 12702.0], [48.9, 12713.0], [49.0, 12754.0], [49.1, 12823.0], [49.2, 12825.0], [49.3, 12862.0], [49.4, 12869.0], [49.5, 12905.0], [49.6, 12922.0], [49.7, 12934.0], [49.8, 12959.0], [49.9, 13124.0], [50.0, 13131.0], [50.1, 13174.0], [50.2, 13396.0], [50.3, 13416.0], [50.4, 13431.0], [50.5, 13443.0], [50.6, 13489.0], [50.7, 13517.0], [50.8, 13573.0], [50.9, 13605.0], [51.0, 13687.0], [51.1, 13754.0], [51.2, 13788.0], [51.3, 13805.0], [51.4, 13841.0], [51.5, 13894.0], [51.6, 13894.0], [51.7, 13937.0], [51.8, 13943.0], [51.9, 13973.0], [52.0, 14184.0], [52.1, 14272.0], [52.2, 14294.0], [52.3, 14308.0], [52.4, 14311.0], [52.5, 14342.0], [52.6, 14352.0], [52.7, 14383.0], [52.8, 14433.0], [52.9, 14522.0], [53.0, 14549.0], [53.1, 14599.0], [53.2, 14601.0], [53.3, 14663.0], [53.4, 14760.0], [53.5, 14772.0], [53.6, 14786.0], [53.7, 14830.0], [53.8, 14900.0], [53.9, 14943.0], [54.0, 15014.0], [54.1, 15058.0], [54.2, 15080.0], [54.3, 15121.0], [54.4, 15262.0], [54.5, 15289.0], [54.6, 15289.0], [54.7, 15309.0], [54.8, 15355.0], [54.9, 15367.0], [55.0, 15371.0], [55.1, 15478.0], [55.2, 15584.0], [55.3, 15621.0], [55.4, 15632.0], [55.5, 15678.0], [55.6, 15728.0], [55.7, 15752.0], [55.8, 15807.0], [55.9, 15814.0], [56.0, 15946.0], [56.1, 16025.0], [56.2, 16031.0], [56.3, 16114.0], [56.4, 16177.0], [56.5, 16182.0], [56.6, 16208.0], [56.7, 16238.0], [56.8, 16300.0], [56.9, 16348.0], [57.0, 16380.0], [57.1, 16496.0], [57.2, 16539.0], [57.3, 16601.0], [57.4, 16621.0], [57.5, 16650.0], [57.6, 16650.0], [57.7, 16667.0], [57.8, 16726.0], [57.9, 16793.0], [58.0, 16886.0], [58.1, 16889.0], [58.2, 16957.0], [58.3, 16993.0], [58.4, 17037.0], [58.5, 17096.0], [58.6, 17247.0], [58.7, 17278.0], [58.8, 17302.0], [58.9, 17303.0], [59.0, 17310.0], [59.1, 17346.0], [59.2, 17365.0], [59.3, 17374.0], [59.4, 17424.0], [59.5, 17459.0], [59.6, 17526.0], [59.7, 17571.0], [59.8, 17712.0], [59.9, 17732.0], [60.0, 17753.0], [60.1, 17782.0], [60.2, 18015.0], [60.3, 18054.0], [60.4, 18107.0], [60.5, 18200.0], [60.6, 18259.0], [60.7, 18259.0], [60.8, 18301.0], [60.9, 18387.0], [61.0, 18395.0], [61.1, 18400.0], [61.2, 18404.0], [61.3, 18523.0], [61.4, 18524.0], [61.5, 18525.0], [61.6, 18642.0], [61.7, 18661.0], [61.8, 18678.0], [61.9, 18731.0], [62.0, 18739.0], [62.1, 18760.0], [62.2, 18807.0], [62.3, 18848.0], [62.4, 18881.0], [62.5, 18988.0], [62.6, 19091.0], [62.7, 19150.0], [62.8, 19225.0], [62.9, 19372.0], [63.0, 19476.0], [63.1, 19484.0], [63.2, 19538.0], [63.3, 19550.0], [63.4, 19694.0], [63.5, 19763.0], [63.6, 19790.0], [63.7, 19790.0], [63.8, 19807.0], [63.9, 19812.0], [64.0, 19849.0], [64.1, 19888.0], [64.2, 19891.0], [64.3, 19945.0], [64.4, 19955.0], [64.5, 19957.0], [64.6, 19966.0], [64.7, 20021.0], [64.8, 20124.0], [64.9, 20144.0], [65.0, 20176.0], [65.1, 20246.0], [65.2, 20318.0], [65.3, 20382.0], [65.4, 20418.0], [65.5, 20450.0], [65.6, 20549.0], [65.7, 20611.0], [65.8, 20749.0], [65.9, 20901.0], [66.0, 20911.0], [66.1, 20913.0], [66.2, 21004.0], [66.3, 21029.0], [66.4, 21041.0], [66.5, 21081.0], [66.6, 21085.0], [66.7, 21085.0], [66.8, 21087.0], [66.9, 21150.0], [67.0, 21179.0], [67.1, 21279.0], [67.2, 21351.0], [67.3, 21388.0], [67.4, 21433.0], [67.5, 21513.0], [67.6, 21522.0], [67.7, 21553.0], [67.8, 21572.0], [67.9, 21689.0], [68.0, 21784.0], [68.1, 21896.0], [68.2, 21974.0], [68.3, 22025.0], [68.4, 22278.0], [68.5, 22296.0], [68.6, 22343.0], [68.7, 22373.0], [68.8, 22460.0], [68.9, 22470.0], [69.0, 22474.0], [69.1, 22515.0], [69.2, 22551.0], [69.3, 22766.0], [69.4, 22783.0], [69.5, 22887.0], [69.6, 22930.0], [69.7, 22930.0], [69.8, 22933.0], [69.9, 22981.0], [70.0, 23005.0], [70.1, 23071.0], [70.2, 23116.0], [70.3, 23174.0], [70.4, 23199.0], [70.5, 23221.0], [70.6, 23222.0], [70.7, 23261.0], [70.8, 23371.0], [70.9, 23439.0], [71.0, 23456.0], [71.1, 23566.0], [71.2, 23622.0], [71.3, 23882.0], [71.4, 23898.0], [71.5, 23907.0], [71.6, 23966.0], [71.7, 24025.0], [71.8, 24031.0], [71.9, 24091.0], [72.0, 24129.0], [72.1, 24138.0], [72.2, 24237.0], [72.3, 24255.0], [72.4, 24267.0], [72.5, 24338.0], [72.6, 24386.0], [72.7, 24515.0], [72.8, 24515.0], [72.9, 24541.0], [73.0, 24558.0], [73.1, 24569.0], [73.2, 24631.0], [73.3, 24709.0], [73.4, 24787.0], [73.5, 24871.0], [73.6, 24917.0], [73.7, 25113.0], [73.8, 25121.0], [73.9, 25255.0], [74.0, 25370.0], [74.1, 25373.0], [74.2, 25411.0], [74.3, 25444.0], [74.4, 25465.0], [74.5, 25519.0], [74.6, 25522.0], [74.7, 25554.0], [74.8, 25574.0], [74.9, 25603.0], [75.0, 25807.0], [75.1, 25894.0], [75.2, 25984.0], [75.3, 25998.0], [75.4, 26009.0], [75.5, 26075.0], [75.6, 26269.0], [75.7, 26301.0], [75.8, 26301.0], [75.9, 26306.0], [76.0, 26328.0], [76.1, 26388.0], [76.2, 26516.0], [76.3, 26560.0], [76.4, 26586.0], [76.5, 26595.0], [76.6, 26751.0], [76.7, 26797.0], [76.8, 27036.0], [76.9, 27182.0], [77.0, 27240.0], [77.1, 27316.0], [77.2, 27352.0], [77.3, 27385.0], [77.4, 27409.0], [77.5, 27429.0], [77.6, 27494.0], [77.7, 27521.0], [77.8, 27545.0], [77.9, 27558.0], [78.0, 27717.0], [78.1, 27751.0], [78.2, 27774.0], [78.3, 27875.0], [78.4, 27894.0], [78.5, 27894.0], [78.6, 27912.0], [78.7, 27973.0], [78.8, 27973.0], [78.9, 27984.0], [79.0, 28389.0], [79.1, 28495.0], [79.2, 28630.0], [79.3, 28655.0], [79.4, 28701.0], [79.5, 28746.0], [79.6, 28797.0], [79.7, 28907.0], [79.8, 28909.0], [79.9, 28993.0], [80.0, 28995.0], [80.1, 29092.0], [80.2, 29131.0], [80.3, 29202.0], [80.4, 29308.0], [80.5, 29394.0], [80.6, 29443.0], [80.7, 29585.0], [80.8, 29706.0], [80.9, 29805.0], [81.0, 29825.0], [81.1, 29887.0], [81.2, 29890.0], [81.3, 29904.0], [81.4, 29911.0], [81.5, 30095.0], [81.6, 30119.0], [81.7, 30257.0], [81.8, 30574.0], [81.9, 30574.0], [82.0, 30578.0], [82.1, 30623.0], [82.2, 30714.0], [82.3, 30727.0], [82.4, 30784.0], [82.5, 30928.0], [82.6, 30947.0], [82.7, 31063.0], [82.8, 31155.0], [82.9, 31179.0], [83.0, 31195.0], [83.1, 31516.0], [83.2, 31578.0], [83.3, 31688.0], [83.4, 31699.0], [83.5, 31711.0], [83.6, 31830.0], [83.7, 31955.0], [83.8, 32113.0], [83.9, 32167.0], [84.0, 32208.0], [84.1, 32407.0], [84.2, 32484.0], [84.3, 32562.0], [84.4, 32571.0], [84.5, 32619.0], [84.6, 32644.0], [84.7, 32841.0], [84.8, 32875.0], [84.9, 32875.0], [85.0, 32991.0], [85.1, 33171.0], [85.2, 33272.0], [85.3, 33378.0], [85.4, 33389.0], [85.5, 33549.0], [85.6, 33577.0], [85.7, 33822.0], [85.8, 33967.0], [85.9, 33972.0], [86.0, 33997.0], [86.1, 34002.0], [86.2, 34425.0], [86.3, 34455.0], [86.4, 34958.0], [86.5, 34965.0], [86.6, 35011.0], [86.7, 35086.0], [86.8, 35121.0], [86.9, 35258.0], [87.0, 35322.0], [87.1, 35338.0], [87.2, 35445.0], [87.3, 35532.0], [87.4, 35542.0], [87.5, 35550.0], [87.6, 35598.0], [87.7, 35681.0], [87.8, 36009.0], [87.9, 36009.0], [88.0, 36038.0], [88.1, 36082.0], [88.2, 36176.0], [88.3, 36235.0], [88.4, 36354.0], [88.5, 36462.0], [88.6, 36481.0], [88.7, 36564.0], [88.8, 36694.0], [88.9, 37198.0], [89.0, 37263.0], [89.1, 37345.0], [89.2, 37594.0], [89.3, 37643.0], [89.4, 37757.0], [89.5, 37787.0], [89.6, 37877.0], [89.7, 38199.0], [89.8, 38469.0], [89.9, 38523.0], [90.0, 38551.0], [90.1, 38562.0], [90.2, 38614.0], [90.3, 38940.0], [90.4, 39043.0], [90.5, 39225.0], [90.6, 39450.0], [90.7, 39499.0], [90.8, 39620.0], [90.9, 39644.0], [91.0, 39644.0], [91.1, 39708.0], [91.2, 39750.0], [91.3, 39806.0], [91.4, 39846.0], [91.5, 40037.0], [91.6, 40330.0], [91.7, 40587.0], [91.8, 40651.0], [91.9, 40957.0], [92.0, 41002.0], [92.1, 41036.0], [92.2, 41222.0], [92.3, 41369.0], [92.4, 41505.0], [92.5, 41568.0], [92.6, 41800.0], [92.7, 41973.0], [92.8, 42079.0], [92.9, 42082.0], [93.0, 42132.0], [93.1, 42219.0], [93.2, 42498.0], [93.3, 42516.0], [93.4, 42960.0], [93.5, 42969.0], [93.6, 42976.0], [93.7, 43648.0], [93.8, 43653.0], [93.9, 43714.0], [94.0, 43714.0], [94.1, 43737.0], [94.2, 43916.0], [94.3, 43965.0], [94.4, 44068.0], [94.5, 44311.0], [94.6, 44339.0], [94.7, 45024.0], [94.8, 45050.0], [94.9, 45051.0], [95.0, 45120.0], [95.1, 45127.0], [95.2, 45451.0], [95.3, 45688.0], [95.4, 46086.0], [95.5, 46240.0], [95.6, 46245.0], [95.7, 46407.0], [95.8, 46680.0], [95.9, 46689.0], [96.0, 46754.0], [96.1, 46821.0], [96.2, 47117.0], [96.3, 47271.0], [96.4, 47461.0], [96.5, 47463.0], [96.6, 47869.0], [96.7, 47936.0], [96.8, 48120.0], [96.9, 48749.0], [97.0, 48749.0], [97.1, 48754.0], [97.2, 48934.0], [97.3, 48972.0], [97.4, 49532.0], [97.5, 49819.0], [97.6, 49844.0], [97.7, 50395.0], [97.8, 50820.0], [97.9, 50823.0], [98.0, 51133.0], [98.1, 51845.0], [98.2, 51993.0], [98.3, 52558.0], [98.4, 52585.0], [98.5, 53203.0], [98.6, 53931.0], [98.7, 54310.0], [98.8, 54375.0], [98.9, 55305.0], [99.0, 55317.0], [99.1, 55597.0], [99.2, 56844.0], [99.3, 56920.0], [99.4, 57514.0], [99.5, 58181.0], [99.6, 60169.0], [99.7, 60202.0], [99.8, 60223.0], [99.9, 60244.0], [100.0, 60244.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 10.0, "series": [{"data": [[32900.0, 1.0], [35300.0, 2.0], [36100.0, 1.0], [38500.0, 3.0], [37700.0, 2.0], [40900.0, 1.0], [42500.0, 1.0], [48100.0, 1.0], [48900.0, 2.0], [55300.0, 2.0], [56900.0, 1.0], [60100.0, 1.0], [400.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 6.0], [1000.0, 7.0], [1100.0, 7.0], [1200.0, 9.0], [1300.0, 9.0], [1400.0, 5.0], [1500.0, 5.0], [1600.0, 8.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 8.0], [2200.0, 4.0], [2300.0, 6.0], [2400.0, 2.0], [2500.0, 4.0], [2600.0, 6.0], [2700.0, 3.0], [2800.0, 8.0], [2900.0, 10.0], [3000.0, 7.0], [3100.0, 6.0], [3300.0, 4.0], [3200.0, 6.0], [3400.0, 6.0], [3500.0, 1.0], [3600.0, 6.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 8.0], [4000.0, 4.0], [4300.0, 5.0], [4200.0, 6.0], [4100.0, 3.0], [4400.0, 5.0], [4500.0, 8.0], [4600.0, 5.0], [4700.0, 3.0], [4800.0, 1.0], [5100.0, 5.0], [4900.0, 3.0], [5000.0, 5.0], [5200.0, 2.0], [5300.0, 5.0], [5400.0, 7.0], [5600.0, 7.0], [5500.0, 6.0], [5700.0, 6.0], [5800.0, 7.0], [5900.0, 5.0], [6000.0, 1.0], [6100.0, 2.0], [6200.0, 4.0], [6300.0, 3.0], [6400.0, 6.0], [6500.0, 3.0], [6600.0, 3.0], [6900.0, 4.0], [6800.0, 5.0], [6700.0, 5.0], [7100.0, 5.0], [7000.0, 3.0], [7200.0, 2.0], [7400.0, 1.0], [7300.0, 1.0], [7600.0, 4.0], [7500.0, 6.0], [7900.0, 4.0], [7800.0, 5.0], [8100.0, 4.0], [8000.0, 1.0], [8400.0, 2.0], [8200.0, 4.0], [9200.0, 2.0], [8800.0, 3.0], [9000.0, 1.0], [9400.0, 4.0], [9600.0, 4.0], [9800.0, 3.0], [10200.0, 4.0], [10000.0, 3.0], [10400.0, 2.0], [10600.0, 4.0], [11000.0, 4.0], [11200.0, 3.0], [10800.0, 5.0], [11600.0, 3.0], [11400.0, 1.0], [12200.0, 1.0], [12000.0, 6.0], [11800.0, 2.0], [12600.0, 4.0], [12400.0, 1.0], [12800.0, 4.0], [13600.0, 2.0], [13400.0, 4.0], [13800.0, 3.0], [14200.0, 2.0], [14600.0, 2.0], [14800.0, 1.0], [14400.0, 1.0], [15200.0, 2.0], [15000.0, 3.0], [15600.0, 3.0], [15800.0, 2.0], [15400.0, 1.0], [16200.0, 2.0], [16000.0, 2.0], [16800.0, 2.0], [16400.0, 1.0], [17200.0, 2.0], [18400.0, 2.0], [18000.0, 2.0], [19200.0, 1.0], [18800.0, 3.0], [19600.0, 1.0], [20400.0, 2.0], [20000.0, 1.0], [21200.0, 1.0], [22000.0, 1.0], [22400.0, 3.0], [21600.0, 1.0], [23200.0, 3.0], [22800.0, 1.0], [24000.0, 3.0], [23600.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [25600.0, 1.0], [26000.0, 2.0], [27200.0, 1.0], [28400.0, 1.0], [29200.0, 1.0], [30000.0, 1.0], [31600.0, 2.0], [32400.0, 2.0], [34400.0, 2.0], [32800.0, 2.0], [35200.0, 1.0], [36000.0, 3.0], [37600.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [39200.0, 1.0], [42400.0, 1.0], [44000.0, 1.0], [45600.0, 1.0], [46400.0, 1.0], [47200.0, 1.0], [56800.0, 1.0], [33900.0, 3.0], [33100.0, 1.0], [35500.0, 4.0], [36300.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [41900.0, 1.0], [44300.0, 2.0], [45100.0, 2.0], [46700.0, 1.0], [53900.0, 1.0], [55500.0, 1.0], [16500.0, 1.0], [17300.0, 6.0], [16900.0, 2.0], [17700.0, 4.0], [18100.0, 1.0], [18900.0, 1.0], [18500.0, 3.0], [19300.0, 1.0], [20100.0, 3.0], [19700.0, 2.0], [21300.0, 2.0], [20500.0, 1.0], [20900.0, 3.0], [21700.0, 1.0], [22500.0, 2.0], [22900.0, 3.0], [23300.0, 1.0], [24500.0, 4.0], [24100.0, 2.0], [25300.0, 2.0], [24900.0, 1.0], [26500.0, 4.0], [27300.0, 3.0], [27700.0, 3.0], [28900.0, 4.0], [29300.0, 2.0], [30500.0, 2.0], [30100.0, 1.0], [29700.0, 1.0], [30900.0, 2.0], [31700.0, 1.0], [32100.0, 2.0], [32500.0, 2.0], [33800.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [37800.0, 1.0], [38600.0, 1.0], [39400.0, 2.0], [41000.0, 2.0], [41800.0, 1.0], [45000.0, 3.0], [46600.0, 2.0], [47400.0, 2.0], [49800.0, 2.0], [60200.0, 3.0], [33300.0, 2.0], [34900.0, 2.0], [36500.0, 1.0], [37300.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [39700.0, 2.0], [40500.0, 1.0], [42100.0, 1.0], [42900.0, 3.0], [41300.0, 1.0], [43700.0, 2.0], [52500.0, 2.0], [58100.0, 1.0], [8500.0, 2.0], [8300.0, 2.0], [8700.0, 4.0], [9100.0, 2.0], [8900.0, 2.0], [9500.0, 2.0], [9700.0, 8.0], [9300.0, 4.0], [9900.0, 5.0], [10100.0, 1.0], [10500.0, 4.0], [10700.0, 2.0], [10300.0, 1.0], [10900.0, 4.0], [11500.0, 5.0], [11700.0, 3.0], [11300.0, 2.0], [12100.0, 4.0], [11900.0, 2.0], [12500.0, 2.0], [12700.0, 3.0], [12300.0, 2.0], [13100.0, 3.0], [12900.0, 4.0], [13300.0, 1.0], [13700.0, 2.0], [13500.0, 2.0], [14300.0, 5.0], [13900.0, 3.0], [14100.0, 1.0], [14500.0, 3.0], [14700.0, 3.0], [15100.0, 1.0], [15300.0, 4.0], [14900.0, 2.0], [15700.0, 2.0], [15500.0, 1.0], [16300.0, 3.0], [16100.0, 3.0], [15900.0, 1.0], [16600.0, 4.0], [17400.0, 2.0], [17000.0, 2.0], [18200.0, 2.0], [19400.0, 2.0], [18600.0, 3.0], [19000.0, 1.0], [19800.0, 5.0], [20200.0, 1.0], [21000.0, 6.0], [21400.0, 1.0], [20600.0, 1.0], [22200.0, 2.0], [21800.0, 1.0], [23000.0, 2.0], [23400.0, 2.0], [24200.0, 3.0], [23800.0, 2.0], [25400.0, 3.0], [24600.0, 1.0], [25800.0, 2.0], [26200.0, 1.0], [27400.0, 3.0], [27000.0, 1.0], [27800.0, 3.0], [28600.0, 2.0], [29400.0, 1.0], [29000.0, 1.0], [29800.0, 4.0], [30600.0, 1.0], [30200.0, 1.0], [31000.0, 1.0], [32600.0, 2.0], [31800.0, 1.0], [32200.0, 1.0], [33200.0, 1.0], [34000.0, 1.0], [36400.0, 2.0], [35600.0, 1.0], [37200.0, 1.0], [39600.0, 2.0], [42000.0, 2.0], [41200.0, 1.0], [43600.0, 2.0], [46800.0, 1.0], [46000.0, 1.0], [50800.0, 2.0], [53200.0, 1.0], [33500.0, 2.0], [35100.0, 1.0], [37500.0, 1.0], [41500.0, 2.0], [43900.0, 2.0], [47100.0, 1.0], [48700.0, 2.0], [47900.0, 1.0], [51100.0, 1.0], [49500.0, 1.0], [50300.0, 1.0], [51900.0, 1.0], [54300.0, 2.0], [57500.0, 1.0], [16700.0, 2.0], [18300.0, 3.0], [17500.0, 2.0], [19100.0, 1.0], [18700.0, 3.0], [20300.0, 2.0], [19900.0, 4.0], [19500.0, 2.0], [21100.0, 2.0], [21500.0, 4.0], [20700.0, 1.0], [22300.0, 2.0], [21900.0, 1.0], [23100.0, 3.0], [22700.0, 2.0], [23500.0, 1.0], [23900.0, 2.0], [24300.0, 2.0], [25100.0, 2.0], [25500.0, 4.0], [24700.0, 2.0], [26300.0, 4.0], [25900.0, 2.0], [27500.0, 3.0], [27100.0, 1.0], [26700.0, 2.0], [27900.0, 3.0], [28300.0, 1.0], [28700.0, 3.0], [29100.0, 1.0], [29500.0, 1.0], [30700.0, 3.0], [29900.0, 2.0], [31500.0, 2.0], [31100.0, 3.0], [31900.0, 1.0], [35000.0, 2.0], [36600.0, 1.0], [40600.0, 1.0], [39800.0, 2.0], [39000.0, 1.0], [42200.0, 1.0], [45400.0, 1.0], [46200.0, 2.0], [47800.0, 1.0], [51800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 915.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 915.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.222222222222222, "minX": 1.65124092E12, "maxY": 79.47590361445782, "series": [{"data": [[1.65124098E12, 14.499999999999996], [1.65124128E12, 51.48245614035085], [1.65124116E12, 65.36470588235296], [1.65124122E12, 79.47590361445782], [1.65124104E12, 31.51176470588233], [1.6512411E12, 48.130952380952394], [1.65124092E12, 6.222222222222222]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124128E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3881.264367816091, "minX": 1.0, "maxY": 57514.0, "series": [{"data": [[2.0, 55317.0], [3.0, 27741.0], [4.0, 26394.5], [5.0, 17497.333333333332], [6.0, 48934.0], [7.0, 16714.0], [8.0, 16678.333333333336], [9.0, 16846.333333333336], [10.0, 3881.264367816091], [11.0, 25076.0], [12.0, 15988.333333333334], [13.0, 22758.5], [14.0, 16524.333333333336], [15.0, 22314.5], [16.0, 17233.666666666664], [17.0, 20543.0], [18.0, 20015.0], [19.0, 14314.666666666666], [20.0, 6990.170454545454], [21.0, 18683.5], [22.0, 22361.5], [23.0, 15918.0], [24.0, 16894.0], [25.0, 19614.5], [26.0, 13515.666666666666], [27.0, 16985.5], [28.0, 13862.0], [29.0, 14569.0], [30.0, 9665.952941176469], [31.0, 21302.0], [32.0, 19839.0], [33.0, 26516.0], [34.0, 20187.666666666668], [35.0, 20979.0], [37.0, 21466.666666666668], [36.0, 24025.0], [38.0, 15337.0], [39.0, 12579.5], [40.0, 11966.340909090908], [41.0, 15554.0], [42.0, 14306.5], [43.0, 16584.0], [44.0, 20222.5], [45.0, 14434.0], [46.0, 17420.0], [47.0, 17574.333333333332], [48.0, 20418.0], [49.0, 9372.333333333334], [50.0, 16427.05882352941], [51.0, 5995.5], [52.0, 8533.666666666666], [53.0, 9358.0], [54.0, 9031.666666666666], [55.0, 5631.0], [56.0, 8249.666666666666], [57.0, 9036.5], [58.0, 26284.0], [59.0, 30265.5], [60.0, 20739.069767441866], [61.0, 49006.0], [62.0, 37537.75], [63.0, 35735.0], [64.0, 31971.5], [65.0, 51001.0], [66.0, 19101.0], [67.0, 22757.333333333332], [68.0, 38869.75], [69.0, 19884.666666666664], [70.0, 21471.540229885068], [71.0, 30410.5], [72.0, 35288.0], [73.0, 34211.5], [74.0, 41078.333333333336], [75.0, 36288.333333333336], [76.0, 36948.8], [77.0, 38211.333333333336], [78.0, 24859.75], [79.0, 33278.5], [80.0, 25553.92000000001], [1.0, 57514.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[47.712512926577084, 17148.48603929679]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23.25, "minX": 1.65124092E12, "maxY": 497.98333333333335, "series": [{"data": [[1.65124098E12, 495.93333333333334], [1.65124128E12, 359.85], [1.65124116E12, 497.98333333333335], [1.65124122E12, 486.35], [1.65124104E12, 497.03333333333336], [1.6512411E12, 491.9], [1.65124092E12, 26.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124098E12, 439.1666666666667], [1.65124128E12, 294.5], [1.65124116E12, 439.1666666666667], [1.65124122E12, 428.8333333333333], [1.65124104E12, 439.1666666666667], [1.6512411E12, 434.0], [1.65124092E12, 23.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124128E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1382.7777777777778, "minX": 1.65124092E12, "maxY": 34283.421052631566, "series": [{"data": [[1.65124098E12, 4586.799999999998], [1.65124128E12, 34283.421052631566], [1.65124116E12, 20352.041176470593], [1.65124122E12, 25531.367469879526], [1.65124104E12, 9581.699999999995], [1.6512411E12, 15209.119047619048], [1.65124092E12, 1382.7777777777778]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124128E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1382.2222222222222, "minX": 1.65124092E12, "maxY": 34283.36842105262, "series": [{"data": [[1.65124098E12, 4586.717647058821], [1.65124128E12, 34283.36842105262], [1.65124116E12, 20352.01176470589], [1.65124122E12, 25531.349397590355], [1.65124104E12, 9581.67647058823], [1.6512411E12, 15209.077380952387], [1.65124092E12, 1382.2222222222222]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124128E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.526315789473683, "minX": 1.65124092E12, "maxY": 64.44444444444444, "series": [{"data": [[1.65124098E12, 10.735294117647063], [1.65124128E12, 7.526315789473683], [1.65124116E12, 7.941176470588237], [1.65124122E12, 7.680722891566261], [1.65124104E12, 8.952941176470594], [1.6512411E12, 8.232142857142852], [1.65124092E12, 64.44444444444444]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124128E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 424.0, "minX": 1.65124092E12, "maxY": 58181.0, "series": [{"data": [[1.65124098E12, 13174.0], [1.65124128E12, 58181.0], [1.65124116E12, 46821.0], [1.65124122E12, 56844.0], [1.65124104E12, 23907.0], [1.6512411E12, 33389.0], [1.65124092E12, 2752.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124098E12, 9246.600000000002], [1.65124128E12, 51742.8], [1.65124116E12, 35523.3], [1.65124122E12, 45853.600000000006], [1.65124104E12, 17697.9], [1.6512411E12, 26405.2], [1.65124092E12, 2752.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124098E12, 12995.079999999998], [1.65124128E12, 58107.63], [1.65124116E12, 45848.29999999999], [1.65124122E12, 55812.87000000002], [1.65124104E12, 23386.569999999992], [1.6512411E12, 32508.56], [1.65124092E12, 2752.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124098E12, 10930.499999999998], [1.65124128E12, 54798.89999999999], [1.65124116E12, 39879.149999999994], [1.65124122E12, 49257.950000000004], [1.65124104E12, 19948.849999999995], [1.6512411E12, 28370.699999999986], [1.65124092E12, 2752.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124098E12, 891.0], [1.65124128E12, 2127.0], [1.65124116E12, 1114.0], [1.65124122E12, 1021.0], [1.65124104E12, 843.0], [1.6512411E12, 874.0], [1.65124092E12, 424.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124098E12, 4006.5], [1.65124128E12, 33912.0], [1.65124116E12, 20952.5], [1.65124122E12, 25685.5], [1.65124104E12, 9351.5], [1.6512411E12, 14957.0], [1.65124092E12, 1172.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124128E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10488.0, "minX": 1.0, "maxY": 60223.0, "series": [{"data": [[2.0, 14851.5], [4.0, 10488.0], [1.0, 47869.0], [5.0, 50820.0], [3.0, 13443.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60223.0], [5.0, 60196.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10488.0, "minX": 1.0, "maxY": 60223.0, "series": [{"data": [[2.0, 14851.5], [4.0, 10488.0], [1.0, 47868.0], [5.0, 50819.0], [3.0, 13443.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60223.0], [5.0, 60195.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.65124092E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.65124098E12, 3.0166666666666666], [1.65124128E12, 0.5666666666666667], [1.65124116E12, 3.0], [1.65124122E12, 2.933333333333333], [1.65124104E12, 3.1666666666666665], [1.6512411E12, 3.1333333333333333], [1.65124092E12, 0.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124128E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124092E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124098E12, 2.8333333333333335], [1.65124128E12, 1.8333333333333333], [1.65124116E12, 2.8333333333333335], [1.65124122E12, 2.7666666666666666], [1.65124104E12, 2.8333333333333335], [1.6512411E12, 2.8], [1.65124092E12, 0.15]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65124128E12, 0.06666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124128E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124092E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124098E12, 2.8333333333333335], [1.65124128E12, 1.8333333333333333], [1.65124116E12, 2.8333333333333335], [1.65124122E12, 2.7666666666666666], [1.65124104E12, 2.8333333333333335], [1.6512411E12, 2.8], [1.65124092E12, 0.15]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65124128E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124128E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124092E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124098E12, 2.8333333333333335], [1.65124128E12, 1.8333333333333333], [1.65124116E12, 2.8333333333333335], [1.65124122E12, 2.7666666666666666], [1.65124104E12, 2.8333333333333335], [1.6512411E12, 2.8], [1.65124092E12, 0.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65124128E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124128E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 799.0, "minX": 0.0, "maxY": 58621.0, "series": [{"data": [[0.0, 799.0], [0.1, 799.0], [0.2, 903.0], [0.3, 963.0], [0.4, 1006.0], [0.5, 1019.0], [0.6, 1026.0], [0.7, 1039.0], [0.8, 1043.0], [0.9, 1068.0], [1.0, 1075.0], [1.1, 1080.0], [1.2, 1090.0], [1.3, 1114.0], [1.4, 1123.0], [1.5, 1132.0], [1.6, 1137.0], [1.7, 1160.0], [1.8, 1163.0], [1.9, 1167.0], [2.0, 1170.0], [2.1, 1174.0], [2.2, 1174.0], [2.3, 1176.0], [2.4, 1194.0], [2.5, 1198.0], [2.6, 1198.0], [2.7, 1208.0], [2.8, 1214.0], [2.9, 1231.0], [3.0, 1240.0], [3.1, 1251.0], [3.2, 1261.0], [3.3, 1267.0], [3.4, 1276.0], [3.5, 1293.0], [3.6, 1301.0], [3.7, 1301.0], [3.8, 1310.0], [3.9, 1340.0], [4.0, 1355.0], [4.1, 1359.0], [4.2, 1362.0], [4.3, 1365.0], [4.4, 1365.0], [4.5, 1366.0], [4.6, 1381.0], [4.7, 1382.0], [4.8, 1414.0], [4.9, 1415.0], [5.0, 1445.0], [5.1, 1448.0], [5.2, 1472.0], [5.3, 1473.0], [5.4, 1477.0], [5.5, 1512.0], [5.6, 1515.0], [5.7, 1525.0], [5.8, 1574.0], [5.9, 1585.0], [6.0, 1600.0], [6.1, 1603.0], [6.2, 1611.0], [6.3, 1613.0], [6.4, 1626.0], [6.5, 1693.0], [6.6, 1693.0], [6.7, 1728.0], [6.8, 1766.0], [6.9, 1823.0], [7.0, 1876.0], [7.1, 1885.0], [7.2, 1901.0], [7.3, 1935.0], [7.4, 1971.0], [7.5, 1995.0], [7.6, 2010.0], [7.7, 2047.0], [7.8, 2052.0], [7.9, 2071.0], [8.0, 2098.0], [8.1, 2110.0], [8.2, 2129.0], [8.3, 2248.0], [8.4, 2261.0], [8.5, 2261.0], [8.6, 2295.0], [8.7, 2295.0], [8.8, 2311.0], [8.9, 2311.0], [9.0, 2319.0], [9.1, 2328.0], [9.2, 2376.0], [9.3, 2378.0], [9.4, 2392.0], [9.5, 2422.0], [9.6, 2433.0], [9.7, 2442.0], [9.8, 2450.0], [9.9, 2498.0], [10.0, 2508.0], [10.1, 2522.0], [10.2, 2554.0], [10.3, 2574.0], [10.4, 2576.0], [10.5, 2583.0], [10.6, 2586.0], [10.7, 2597.0], [10.8, 2616.0], [10.9, 2616.0], [11.0, 2618.0], [11.1, 2625.0], [11.2, 2648.0], [11.3, 2650.0], [11.4, 2659.0], [11.5, 2676.0], [11.6, 2708.0], [11.7, 2726.0], [11.8, 2726.0], [11.9, 2743.0], [12.0, 2773.0], [12.1, 2791.0], [12.2, 2821.0], [12.3, 2830.0], [12.4, 2841.0], [12.5, 2845.0], [12.6, 2905.0], [12.7, 2916.0], [12.8, 2920.0], [12.9, 2923.0], [13.0, 2951.0], [13.1, 2951.0], [13.2, 2982.0], [13.3, 2994.0], [13.4, 3016.0], [13.5, 3042.0], [13.6, 3051.0], [13.7, 3052.0], [13.8, 3090.0], [13.9, 3099.0], [14.0, 3103.0], [14.1, 3164.0], [14.2, 3188.0], [14.3, 3223.0], [14.4, 3225.0], [14.5, 3339.0], [14.6, 3379.0], [14.7, 3383.0], [14.8, 3395.0], [14.9, 3429.0], [15.0, 3443.0], [15.1, 3490.0], [15.2, 3506.0], [15.3, 3506.0], [15.4, 3534.0], [15.5, 3536.0], [15.6, 3542.0], [15.7, 3573.0], [15.8, 3585.0], [15.9, 3589.0], [16.0, 3600.0], [16.1, 3661.0], [16.2, 3683.0], [16.3, 3686.0], [16.4, 3696.0], [16.5, 3763.0], [16.6, 3777.0], [16.7, 3781.0], [16.8, 3784.0], [16.9, 3821.0], [17.0, 3824.0], [17.1, 3834.0], [17.2, 3850.0], [17.3, 3852.0], [17.4, 3852.0], [17.5, 3857.0], [17.6, 3863.0], [17.7, 3866.0], [17.8, 3915.0], [17.9, 3953.0], [18.0, 3955.0], [18.1, 3970.0], [18.2, 3974.0], [18.3, 3978.0], [18.4, 3993.0], [18.5, 4011.0], [18.6, 4028.0], [18.7, 4074.0], [18.8, 4085.0], [18.9, 4103.0], [19.0, 4126.0], [19.1, 4169.0], [19.2, 4172.0], [19.3, 4175.0], [19.4, 4176.0], [19.5, 4190.0], [19.6, 4190.0], [19.7, 4209.0], [19.8, 4233.0], [19.9, 4298.0], [20.0, 4337.0], [20.1, 4337.0], [20.2, 4337.0], [20.3, 4342.0], [20.4, 4360.0], [20.5, 4376.0], [20.6, 4377.0], [20.7, 4381.0], [20.8, 4383.0], [20.9, 4445.0], [21.0, 4540.0], [21.1, 4559.0], [21.2, 4631.0], [21.3, 4657.0], [21.4, 4671.0], [21.5, 4704.0], [21.6, 4732.0], [21.7, 4732.0], [21.8, 4732.0], [21.9, 4757.0], [22.0, 4790.0], [22.1, 4805.0], [22.2, 4812.0], [22.3, 4887.0], [22.4, 4921.0], [22.5, 4928.0], [22.6, 4971.0], [22.7, 5008.0], [22.8, 5031.0], [22.9, 5037.0], [23.0, 5069.0], [23.1, 5079.0], [23.2, 5099.0], [23.3, 5136.0], [23.4, 5140.0], [23.5, 5140.0], [23.6, 5204.0], [23.7, 5235.0], [23.8, 5247.0], [23.9, 5317.0], [24.0, 5317.0], [24.1, 5357.0], [24.2, 5383.0], [24.3, 5395.0], [24.4, 5399.0], [24.5, 5438.0], [24.6, 5468.0], [24.7, 5473.0], [24.8, 5480.0], [24.9, 5517.0], [25.0, 5520.0], [25.1, 5537.0], [25.2, 5565.0], [25.3, 5604.0], [25.4, 5684.0], [25.5, 5687.0], [25.6, 5702.0], [25.7, 5709.0], [25.8, 5728.0], [25.9, 5778.0], [26.0, 5835.0], [26.1, 5835.0], [26.2, 5854.0], [26.3, 5894.0], [26.4, 5905.0], [26.5, 5930.0], [26.6, 5932.0], [26.7, 5960.0], [26.8, 5981.0], [26.9, 6007.0], [27.0, 6072.0], [27.1, 6079.0], [27.2, 6115.0], [27.3, 6127.0], [27.4, 6149.0], [27.5, 6171.0], [27.6, 6186.0], [27.7, 6190.0], [27.8, 6191.0], [27.9, 6261.0], [28.0, 6325.0], [28.1, 6368.0], [28.2, 6393.0], [28.3, 6393.0], [28.4, 6423.0], [28.5, 6435.0], [28.6, 6481.0], [28.7, 6517.0], [28.8, 6523.0], [28.9, 6527.0], [29.0, 6559.0], [29.1, 6564.0], [29.2, 6571.0], [29.3, 6606.0], [29.4, 6738.0], [29.5, 6738.0], [29.6, 6754.0], [29.7, 6771.0], [29.8, 6799.0], [29.9, 6821.0], [30.0, 6835.0], [30.1, 6842.0], [30.2, 6931.0], [30.3, 6941.0], [30.4, 6945.0], [30.5, 6945.0], [30.6, 7014.0], [30.7, 7026.0], [30.8, 7028.0], [30.9, 7178.0], [31.0, 7240.0], [31.1, 7248.0], [31.2, 7265.0], [31.3, 7362.0], [31.4, 7408.0], [31.5, 7417.0], [31.6, 7458.0], [31.7, 7461.0], [31.8, 7488.0], [31.9, 7489.0], [32.0, 7506.0], [32.1, 7525.0], [32.2, 7534.0], [32.3, 7574.0], [32.4, 7578.0], [32.5, 7596.0], [32.6, 7686.0], [32.7, 7686.0], [32.8, 7703.0], [32.9, 7721.0], [33.0, 7764.0], [33.1, 7765.0], [33.2, 7846.0], [33.3, 7893.0], [33.4, 7894.0], [33.5, 7907.0], [33.6, 7928.0], [33.7, 7936.0], [33.8, 7967.0], [33.9, 7996.0], [34.0, 8046.0], [34.1, 8103.0], [34.2, 8137.0], [34.3, 8157.0], [34.4, 8158.0], [34.5, 8193.0], [34.6, 8212.0], [34.7, 8286.0], [34.8, 8286.0], [34.9, 8290.0], [35.0, 8304.0], [35.1, 8387.0], [35.2, 8481.0], [35.3, 8486.0], [35.4, 8497.0], [35.5, 8547.0], [35.6, 8565.0], [35.7, 8625.0], [35.8, 8647.0], [35.9, 8653.0], [36.0, 8682.0], [36.1, 8684.0], [36.2, 8809.0], [36.3, 8812.0], [36.4, 8831.0], [36.5, 8833.0], [36.6, 8848.0], [36.7, 8881.0], [36.8, 8906.0], [36.9, 8922.0], [37.0, 8922.0], [37.1, 8965.0], [37.2, 9010.0], [37.3, 9028.0], [37.4, 9029.0], [37.5, 9055.0], [37.6, 9117.0], [37.7, 9119.0], [37.8, 9126.0], [37.9, 9156.0], [38.0, 9171.0], [38.1, 9213.0], [38.2, 9226.0], [38.3, 9250.0], [38.4, 9265.0], [38.5, 9335.0], [38.6, 9340.0], [38.7, 9352.0], [38.8, 9427.0], [38.9, 9432.0], [39.0, 9433.0], [39.1, 9450.0], [39.2, 9450.0], [39.3, 9460.0], [39.4, 9581.0], [39.5, 9671.0], [39.6, 9683.0], [39.7, 9730.0], [39.8, 9837.0], [39.9, 9866.0], [40.0, 9888.0], [40.1, 9920.0], [40.2, 9960.0], [40.3, 9993.0], [40.4, 10011.0], [40.5, 10019.0], [40.6, 10023.0], [40.7, 10032.0], [40.8, 10082.0], [40.9, 10112.0], [41.0, 10219.0], [41.1, 10232.0], [41.2, 10293.0], [41.3, 10346.0], [41.4, 10346.0], [41.5, 10395.0], [41.6, 10530.0], [41.7, 10569.0], [41.8, 10570.0], [41.9, 10601.0], [42.0, 10606.0], [42.1, 10661.0], [42.2, 10684.0], [42.3, 10685.0], [42.4, 10711.0], [42.5, 10722.0], [42.6, 10783.0], [42.7, 10784.0], [42.8, 10841.0], [42.9, 10868.0], [43.0, 10944.0], [43.1, 11014.0], [43.2, 11019.0], [43.3, 11105.0], [43.4, 11145.0], [43.5, 11145.0], [43.6, 11173.0], [43.7, 11221.0], [43.8, 11229.0], [43.9, 11255.0], [44.0, 11322.0], [44.1, 11363.0], [44.2, 11385.0], [44.3, 11462.0], [44.4, 11500.0], [44.5, 11555.0], [44.6, 11581.0], [44.7, 11594.0], [44.8, 11609.0], [44.9, 11629.0], [45.0, 11667.0], [45.1, 11680.0], [45.2, 11754.0], [45.3, 11799.0], [45.4, 11826.0], [45.5, 11872.0], [45.6, 11936.0], [45.7, 11936.0], [45.8, 12009.0], [45.9, 12061.0], [46.0, 12065.0], [46.1, 12088.0], [46.2, 12089.0], [46.3, 12183.0], [46.4, 12230.0], [46.5, 12330.0], [46.6, 12459.0], [46.7, 12494.0], [46.8, 12541.0], [46.9, 12610.0], [47.0, 12771.0], [47.1, 12776.0], [47.2, 12801.0], [47.3, 12806.0], [47.4, 12885.0], [47.5, 12895.0], [47.6, 12899.0], [47.7, 12940.0], [47.8, 12981.0], [47.9, 12981.0], [48.0, 12989.0], [48.1, 13007.0], [48.2, 13024.0], [48.3, 13080.0], [48.4, 13093.0], [48.5, 13132.0], [48.6, 13139.0], [48.7, 13140.0], [48.8, 13142.0], [48.9, 13212.0], [49.0, 13365.0], [49.1, 13397.0], [49.2, 13421.0], [49.3, 13431.0], [49.4, 13483.0], [49.5, 13489.0], [49.6, 13493.0], [49.7, 13512.0], [49.8, 13545.0], [49.9, 13558.0], [50.0, 13558.0], [50.1, 13586.0], [50.2, 13692.0], [50.3, 13751.0], [50.4, 13904.0], [50.5, 13921.0], [50.6, 13998.0], [50.7, 14032.0], [50.8, 14096.0], [50.9, 14102.0], [51.0, 14169.0], [51.1, 14194.0], [51.2, 14345.0], [51.3, 14394.0], [51.4, 14410.0], [51.5, 14412.0], [51.6, 14416.0], [51.7, 14424.0], [51.8, 14519.0], [51.9, 14519.0], [52.0, 14521.0], [52.1, 14522.0], [52.2, 14522.0], [52.3, 14533.0], [52.4, 14612.0], [52.5, 14679.0], [52.6, 14844.0], [52.7, 14875.0], [52.8, 14914.0], [52.9, 14985.0], [53.0, 15058.0], [53.1, 15092.0], [53.2, 15135.0], [53.3, 15156.0], [53.4, 15194.0], [53.5, 15197.0], [53.6, 15209.0], [53.7, 15212.0], [53.8, 15238.0], [53.9, 15241.0], [54.0, 15251.0], [54.1, 15300.0], [54.2, 15347.0], [54.3, 15427.0], [54.4, 15427.0], [54.5, 15429.0], [54.6, 15535.0], [54.7, 15599.0], [54.8, 15616.0], [54.9, 15737.0], [55.0, 15797.0], [55.1, 15801.0], [55.2, 15828.0], [55.3, 15832.0], [55.4, 15883.0], [55.5, 15916.0], [55.6, 15968.0], [55.7, 16064.0], [55.8, 16104.0], [55.9, 16204.0], [56.0, 16228.0], [56.1, 16231.0], [56.2, 16352.0], [56.3, 16431.0], [56.4, 16447.0], [56.5, 16572.0], [56.6, 16572.0], [56.7, 16604.0], [56.8, 16609.0], [56.9, 16619.0], [57.0, 16797.0], [57.1, 16813.0], [57.2, 16884.0], [57.3, 16895.0], [57.4, 16915.0], [57.5, 16932.0], [57.6, 16936.0], [57.7, 16963.0], [57.8, 17088.0], [57.9, 17132.0], [58.0, 17133.0], [58.1, 17286.0], [58.2, 17314.0], [58.3, 17322.0], [58.4, 17334.0], [58.5, 17448.0], [58.6, 17548.0], [58.7, 17548.0], [58.8, 17623.0], [58.9, 17674.0], [59.0, 17841.0], [59.1, 17868.0], [59.2, 17901.0], [59.3, 17903.0], [59.4, 17917.0], [59.5, 17925.0], [59.6, 18031.0], [59.7, 18084.0], [59.8, 18111.0], [59.9, 18170.0], [60.0, 18184.0], [60.1, 18229.0], [60.2, 18300.0], [60.3, 18377.0], [60.4, 18409.0], [60.5, 18517.0], [60.6, 18588.0], [60.7, 18617.0], [60.8, 18649.0], [60.9, 18649.0], [61.0, 18688.0], [61.1, 18706.0], [61.2, 18807.0], [61.3, 18920.0], [61.4, 19074.0], [61.5, 19104.0], [61.6, 19183.0], [61.7, 19211.0], [61.8, 19314.0], [61.9, 19351.0], [62.0, 19366.0], [62.1, 19395.0], [62.2, 19395.0], [62.3, 19436.0], [62.4, 19459.0], [62.5, 19460.0], [62.6, 19610.0], [62.7, 19703.0], [62.8, 19755.0], [62.9, 19788.0], [63.0, 19829.0], [63.1, 19829.0], [63.2, 19855.0], [63.3, 19910.0], [63.4, 19976.0], [63.5, 20056.0], [63.6, 20143.0], [63.7, 20163.0], [63.8, 20219.0], [63.9, 20236.0], [64.0, 20270.0], [64.1, 20286.0], [64.2, 20417.0], [64.3, 20419.0], [64.4, 20430.0], [64.5, 20485.0], [64.6, 20662.0], [64.7, 20706.0], [64.8, 20788.0], [64.9, 20837.0], [65.0, 20917.0], [65.1, 21014.0], [65.2, 21026.0], [65.3, 21026.0], [65.4, 21056.0], [65.5, 21071.0], [65.6, 21196.0], [65.7, 21200.0], [65.8, 21368.0], [65.9, 21378.0], [66.0, 21399.0], [66.1, 21402.0], [66.2, 21556.0], [66.3, 21563.0], [66.4, 21583.0], [66.5, 21603.0], [66.6, 21662.0], [66.7, 21818.0], [66.8, 21875.0], [66.9, 21963.0], [67.0, 22038.0], [67.1, 22074.0], [67.2, 22096.0], [67.3, 22180.0], [67.4, 22180.0], [67.5, 22213.0], [67.6, 22218.0], [67.7, 22227.0], [67.8, 22255.0], [67.9, 22260.0], [68.0, 22359.0], [68.1, 22547.0], [68.2, 22572.0], [68.3, 22589.0], [68.4, 22598.0], [68.5, 22611.0], [68.6, 22667.0], [68.7, 22684.0], [68.8, 22686.0], [68.9, 22875.0], [69.0, 22946.0], [69.1, 22971.0], [69.2, 23068.0], [69.3, 23169.0], [69.4, 23186.0], [69.5, 23333.0], [69.6, 23333.0], [69.7, 23426.0], [69.8, 23573.0], [69.9, 23701.0], [70.0, 23727.0], [70.1, 23819.0], [70.2, 23853.0], [70.3, 23952.0], [70.4, 23969.0], [70.5, 24004.0], [70.6, 24015.0], [70.7, 24041.0], [70.8, 24175.0], [70.9, 24185.0], [71.0, 24189.0], [71.1, 24196.0], [71.2, 24201.0], [71.3, 24207.0], [71.4, 24236.0], [71.5, 24272.0], [71.6, 24484.0], [71.7, 24618.0], [71.8, 24618.0], [71.9, 24621.0], [72.0, 24635.0], [72.1, 24897.0], [72.2, 24924.0], [72.3, 25027.0], [72.4, 25119.0], [72.5, 25131.0], [72.6, 25160.0], [72.7, 25164.0], [72.8, 25208.0], [72.9, 25391.0], [73.0, 25410.0], [73.1, 25609.0], [73.2, 25664.0], [73.3, 25704.0], [73.4, 25731.0], [73.5, 25740.0], [73.6, 25748.0], [73.7, 25762.0], [73.8, 25821.0], [73.9, 25860.0], [74.0, 25860.0], [74.1, 25945.0], [74.2, 25993.0], [74.3, 26213.0], [74.4, 26265.0], [74.5, 26299.0], [74.6, 26335.0], [74.7, 26352.0], [74.8, 26546.0], [74.9, 26575.0], [75.0, 26724.0], [75.1, 26752.0], [75.2, 26763.0], [75.3, 26773.0], [75.4, 26973.0], [75.5, 27011.0], [75.6, 27044.0], [75.7, 27045.0], [75.8, 27057.0], [75.9, 27066.0], [76.0, 27082.0], [76.1, 27082.0], [76.2, 27180.0], [76.3, 27182.0], [76.4, 27292.0], [76.5, 27695.0], [76.6, 27720.0], [76.7, 27736.0], [76.8, 27833.0], [76.9, 27854.0], [77.0, 27907.0], [77.1, 27956.0], [77.2, 28002.0], [77.3, 28156.0], [77.4, 28190.0], [77.5, 28221.0], [77.6, 28257.0], [77.7, 28308.0], [77.8, 28390.0], [77.9, 28593.0], [78.0, 28604.0], [78.1, 28699.0], [78.2, 28700.0], [78.3, 28700.0], [78.4, 28756.0], [78.5, 28861.0], [78.6, 28983.0], [78.7, 28989.0], [78.8, 29014.0], [78.9, 29046.0], [79.0, 29076.0], [79.1, 29086.0], [79.2, 29202.0], [79.3, 29236.0], [79.4, 29715.0], [79.5, 29726.0], [79.6, 29743.0], [79.7, 29765.0], [79.8, 29814.0], [79.9, 29914.0], [80.0, 29977.0], [80.1, 30146.0], [80.2, 30175.0], [80.3, 30181.0], [80.4, 30183.0], [80.5, 30183.0], [80.6, 30209.0], [80.7, 30524.0], [80.8, 30552.0], [80.9, 30569.0], [81.0, 30661.0], [81.1, 30786.0], [81.2, 30834.0], [81.3, 30863.0], [81.4, 31163.0], [81.5, 31260.0], [81.6, 31330.0], [81.7, 31343.0], [81.8, 31344.0], [81.9, 31414.0], [82.0, 31522.0], [82.1, 31581.0], [82.2, 31626.0], [82.3, 31737.0], [82.4, 31800.0], [82.5, 31809.0], [82.6, 31862.0], [82.7, 31862.0], [82.8, 31880.0], [82.9, 31902.0], [83.0, 31919.0], [83.1, 31955.0], [83.2, 31957.0], [83.3, 32164.0], [83.4, 32471.0], [83.5, 32493.0], [83.6, 32569.0], [83.7, 32737.0], [83.8, 32739.0], [83.9, 32988.0], [84.0, 33087.0], [84.1, 33118.0], [84.2, 33203.0], [84.3, 33253.0], [84.4, 33256.0], [84.5, 33296.0], [84.6, 33514.0], [84.7, 33514.0], [84.8, 33514.0], [84.9, 33712.0], [85.0, 33745.0], [85.1, 33793.0], [85.2, 33795.0], [85.3, 34012.0], [85.4, 34253.0], [85.5, 34281.0], [85.6, 34282.0], [85.7, 34343.0], [85.8, 34396.0], [85.9, 34485.0], [86.0, 34487.0], [86.1, 34643.0], [86.2, 34979.0], [86.3, 35015.0], [86.4, 35068.0], [86.5, 35173.0], [86.6, 35375.0], [86.7, 35434.0], [86.8, 35474.0], [86.9, 35502.0], [87.0, 35502.0], [87.1, 35585.0], [87.2, 35600.0], [87.3, 35721.0], [87.4, 35771.0], [87.5, 35934.0], [87.6, 36287.0], [87.7, 36297.0], [87.8, 36355.0], [87.9, 36355.0], [88.0, 36586.0], [88.1, 36724.0], [88.2, 36775.0], [88.3, 36824.0], [88.4, 36832.0], [88.5, 36963.0], [88.6, 37164.0], [88.7, 37314.0], [88.8, 37593.0], [88.9, 37634.0], [89.0, 37697.0], [89.1, 37704.0], [89.2, 37704.0], [89.3, 37784.0], [89.4, 37947.0], [89.5, 38192.0], [89.6, 38224.0], [89.7, 38243.0], [89.8, 38244.0], [89.9, 38523.0], [90.0, 38555.0], [90.1, 38610.0], [90.2, 38906.0], [90.3, 39042.0], [90.4, 39071.0], [90.5, 39252.0], [90.6, 39315.0], [90.7, 39343.0], [90.8, 39663.0], [90.9, 39700.0], [91.0, 39732.0], [91.1, 39878.0], [91.2, 40021.0], [91.3, 40093.0], [91.4, 40093.0], [91.5, 40184.0], [91.6, 40246.0], [91.7, 40458.0], [91.8, 40473.0], [91.9, 40757.0], [92.0, 40971.0], [92.1, 41044.0], [92.2, 41096.0], [92.3, 41115.0], [92.4, 41353.0], [92.5, 41365.0], [92.6, 41551.0], [92.7, 41808.0], [92.8, 41979.0], [92.9, 41997.0], [93.0, 42199.0], [93.1, 42213.0], [93.2, 42534.0], [93.3, 42540.0], [93.4, 42574.0], [93.5, 42574.0], [93.6, 42640.0], [93.7, 43092.0], [93.8, 43516.0], [93.9, 43601.0], [94.0, 43630.0], [94.1, 43849.0], [94.2, 43869.0], [94.3, 43984.0], [94.4, 44132.0], [94.5, 44194.0], [94.6, 44344.0], [94.7, 44607.0], [94.8, 44865.0], [94.9, 44980.0], [95.0, 45144.0], [95.1, 45145.0], [95.2, 45285.0], [95.3, 45386.0], [95.4, 45843.0], [95.5, 45959.0], [95.6, 46025.0], [95.7, 46025.0], [95.8, 46289.0], [95.9, 46385.0], [96.0, 46520.0], [96.1, 46548.0], [96.2, 46597.0], [96.3, 46627.0], [96.4, 47094.0], [96.5, 47205.0], [96.6, 47606.0], [96.7, 47699.0], [96.8, 48135.0], [96.9, 48208.0], [97.0, 48289.0], [97.1, 48635.0], [97.2, 48933.0], [97.3, 48940.0], [97.4, 48981.0], [97.5, 49348.0], [97.6, 49574.0], [97.7, 49802.0], [97.8, 49948.0], [97.9, 49948.0], [98.0, 50202.0], [98.1, 50217.0], [98.2, 50502.0], [98.3, 51144.0], [98.4, 51299.0], [98.5, 51539.0], [98.6, 51725.0], [98.7, 51742.0], [98.8, 51995.0], [98.9, 52082.0], [99.0, 52838.0], [99.1, 52864.0], [99.2, 53163.0], [99.3, 54329.0], [99.4, 54370.0], [99.5, 54579.0], [99.6, 55926.0], [99.7, 56472.0], [99.8, 57632.0], [99.9, 58621.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 13.0, "series": [{"data": [[33700.0, 4.0], [32900.0, 1.0], [35300.0, 1.0], [38500.0, 2.0], [36900.0, 1.0], [37700.0, 2.0], [39300.0, 2.0], [40100.0, 1.0], [40900.0, 1.0], [42500.0, 3.0], [44900.0, 1.0], [44100.0, 2.0], [46500.0, 3.0], [48900.0, 3.0], [48100.0, 1.0], [50500.0, 1.0], [54500.0, 1.0], [700.0, 1.0], [900.0, 2.0], [1000.0, 9.0], [1100.0, 13.0], [1200.0, 9.0], [1300.0, 11.0], [1400.0, 7.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 7.0], [2400.0, 5.0], [2500.0, 8.0], [2600.0, 7.0], [2700.0, 6.0], [2800.0, 4.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 3.0], [3200.0, 2.0], [3300.0, 4.0], [3400.0, 3.0], [3500.0, 7.0], [3700.0, 4.0], [3600.0, 5.0], [3800.0, 8.0], [3900.0, 7.0], [4000.0, 4.0], [4300.0, 9.0], [4100.0, 7.0], [4200.0, 3.0], [4500.0, 2.0], [4600.0, 3.0], [4400.0, 1.0], [4700.0, 5.0], [4800.0, 3.0], [5000.0, 6.0], [5100.0, 3.0], [4900.0, 3.0], [5300.0, 5.0], [5200.0, 3.0], [5400.0, 4.0], [5500.0, 4.0], [5600.0, 3.0], [5800.0, 3.0], [5700.0, 4.0], [6100.0, 7.0], [6000.0, 3.0], [5900.0, 5.0], [6300.0, 3.0], [6200.0, 1.0], [6500.0, 6.0], [6600.0, 1.0], [6400.0, 3.0], [6900.0, 3.0], [6700.0, 5.0], [6800.0, 3.0], [7000.0, 3.0], [7100.0, 1.0], [7400.0, 6.0], [7200.0, 3.0], [7300.0, 1.0], [7500.0, 6.0], [7600.0, 1.0], [7800.0, 3.0], [7700.0, 4.0], [7900.0, 5.0], [8100.0, 5.0], [8000.0, 1.0], [8200.0, 3.0], [8600.0, 5.0], [8400.0, 3.0], [9000.0, 4.0], [9200.0, 4.0], [8800.0, 6.0], [9600.0, 2.0], [9400.0, 5.0], [10200.0, 3.0], [10000.0, 5.0], [9800.0, 3.0], [10600.0, 5.0], [11200.0, 3.0], [11000.0, 2.0], [10800.0, 2.0], [11600.0, 4.0], [11400.0, 1.0], [12000.0, 5.0], [11800.0, 2.0], [12200.0, 1.0], [12400.0, 2.0], [12600.0, 1.0], [12800.0, 5.0], [13000.0, 4.0], [13200.0, 1.0], [13400.0, 5.0], [13600.0, 1.0], [14000.0, 2.0], [14800.0, 2.0], [14400.0, 4.0], [14600.0, 2.0], [15200.0, 5.0], [15000.0, 2.0], [15400.0, 2.0], [15600.0, 1.0], [15800.0, 4.0], [16200.0, 3.0], [16000.0, 1.0], [16800.0, 3.0], [16400.0, 2.0], [17200.0, 1.0], [17600.0, 2.0], [18400.0, 1.0], [18000.0, 2.0], [18800.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [20400.0, 4.0], [19600.0, 1.0], [21200.0, 1.0], [20800.0, 1.0], [21600.0, 2.0], [22000.0, 3.0], [22800.0, 1.0], [24000.0, 3.0], [24400.0, 1.0], [25200.0, 1.0], [24800.0, 1.0], [25600.0, 2.0], [27200.0, 1.0], [27600.0, 1.0], [28000.0, 1.0], [28800.0, 1.0], [29200.0, 2.0], [30800.0, 2.0], [31200.0, 1.0], [31600.0, 1.0], [32400.0, 2.0], [34400.0, 2.0], [36800.0, 2.0], [37600.0, 2.0], [40000.0, 2.0], [39200.0, 1.0], [44800.0, 1.0], [47200.0, 1.0], [51200.0, 1.0], [52800.0, 2.0], [52000.0, 1.0], [57600.0, 1.0], [33100.0, 1.0], [35500.0, 2.0], [36300.0, 2.0], [37900.0, 1.0], [37100.0, 1.0], [41100.0, 1.0], [41900.0, 2.0], [43500.0, 1.0], [44300.0, 1.0], [45900.0, 1.0], [45100.0, 2.0], [49900.0, 1.0], [53100.0, 1.0], [51500.0, 1.0], [16900.0, 4.0], [16500.0, 1.0], [17300.0, 3.0], [18100.0, 3.0], [19300.0, 5.0], [18500.0, 2.0], [18900.0, 1.0], [19700.0, 3.0], [20100.0, 2.0], [20900.0, 1.0], [21300.0, 3.0], [22100.0, 1.0], [22500.0, 4.0], [22900.0, 2.0], [23300.0, 1.0], [24100.0, 4.0], [23700.0, 2.0], [25300.0, 1.0], [24900.0, 1.0], [25700.0, 5.0], [26500.0, 2.0], [26900.0, 1.0], [28500.0, 1.0], [27700.0, 2.0], [28100.0, 2.0], [28900.0, 2.0], [29700.0, 4.0], [30100.0, 4.0], [30500.0, 3.0], [31300.0, 3.0], [31700.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [33000.0, 1.0], [34600.0, 1.0], [36200.0, 2.0], [35400.0, 2.0], [38600.0, 1.0], [40200.0, 1.0], [41800.0, 1.0], [41000.0, 2.0], [42600.0, 1.0], [45800.0, 1.0], [46600.0, 1.0], [48200.0, 2.0], [49800.0, 1.0], [58600.0, 1.0], [35700.0, 2.0], [34900.0, 1.0], [36500.0, 1.0], [37300.0, 1.0], [38900.0, 1.0], [38100.0, 1.0], [39700.0, 2.0], [41300.0, 2.0], [42100.0, 1.0], [45300.0, 1.0], [49300.0, 1.0], [51700.0, 2.0], [8300.0, 2.0], [8500.0, 2.0], [9100.0, 5.0], [8900.0, 3.0], [9700.0, 1.0], [9500.0, 1.0], [9300.0, 3.0], [9900.0, 3.0], [10100.0, 1.0], [10300.0, 2.0], [10700.0, 4.0], [10500.0, 3.0], [11100.0, 3.0], [10900.0, 1.0], [11500.0, 4.0], [11300.0, 3.0], [11700.0, 2.0], [11900.0, 1.0], [12100.0, 1.0], [12500.0, 1.0], [12700.0, 2.0], [12300.0, 1.0], [13100.0, 4.0], [12900.0, 3.0], [13300.0, 2.0], [13500.0, 4.0], [13700.0, 1.0], [14100.0, 3.0], [13900.0, 3.0], [14300.0, 2.0], [14500.0, 5.0], [14900.0, 2.0], [15100.0, 4.0], [15300.0, 2.0], [15500.0, 2.0], [15700.0, 2.0], [15900.0, 2.0], [16300.0, 1.0], [16100.0, 1.0], [17000.0, 1.0], [16600.0, 3.0], [17400.0, 1.0], [17800.0, 2.0], [18200.0, 1.0], [18600.0, 3.0], [19000.0, 1.0], [19400.0, 3.0], [20200.0, 4.0], [19800.0, 2.0], [20600.0, 1.0], [21400.0, 1.0], [21000.0, 4.0], [22200.0, 5.0], [21800.0, 2.0], [22600.0, 4.0], [23000.0, 1.0], [23400.0, 1.0], [24200.0, 4.0], [23800.0, 2.0], [24600.0, 3.0], [25400.0, 1.0], [25000.0, 1.0], [25800.0, 2.0], [26200.0, 3.0], [27000.0, 6.0], [28200.0, 2.0], [27800.0, 2.0], [28600.0, 2.0], [29000.0, 4.0], [30600.0, 1.0], [30200.0, 1.0], [29800.0, 1.0], [31400.0, 1.0], [31800.0, 4.0], [33200.0, 4.0], [34000.0, 1.0], [35600.0, 1.0], [39600.0, 1.0], [40400.0, 2.0], [43600.0, 2.0], [45200.0, 1.0], [46000.0, 1.0], [47600.0, 2.0], [56400.0, 1.0], [33500.0, 2.0], [34300.0, 2.0], [36700.0, 2.0], [35100.0, 1.0], [35900.0, 1.0], [37500.0, 1.0], [40700.0, 1.0], [41500.0, 1.0], [43900.0, 1.0], [46300.0, 1.0], [49500.0, 1.0], [51100.0, 1.0], [51900.0, 1.0], [54300.0, 2.0], [55900.0, 1.0], [17100.0, 2.0], [16700.0, 1.0], [17900.0, 4.0], [17500.0, 1.0], [18300.0, 2.0], [19100.0, 2.0], [18700.0, 1.0], [19900.0, 2.0], [21100.0, 1.0], [21500.0, 3.0], [20700.0, 2.0], [22300.0, 1.0], [21900.0, 1.0], [23100.0, 2.0], [23500.0, 1.0], [23900.0, 2.0], [25100.0, 4.0], [25900.0, 2.0], [26300.0, 2.0], [26700.0, 4.0], [27100.0, 2.0], [27900.0, 2.0], [28300.0, 2.0], [28700.0, 2.0], [29900.0, 2.0], [30700.0, 1.0], [31500.0, 2.0], [31100.0, 1.0], [32700.0, 2.0], [31900.0, 4.0], [34200.0, 3.0], [35000.0, 2.0], [38200.0, 3.0], [39800.0, 1.0], [39000.0, 2.0], [42200.0, 1.0], [43000.0, 1.0], [43800.0, 2.0], [44600.0, 1.0], [46200.0, 1.0], [47000.0, 1.0], [48600.0, 1.0], [50200.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 58600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 52.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 902.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 52.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 902.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.63953488372093, "minX": 1.6512438E12, "maxY": 74.65644171779142, "series": [{"data": [[1.65124404E12, 74.20238095238102], [1.65124416E12, 20.0], [1.65124386E12, 22.585798816568033], [1.6512438E12, 9.63953488372093], [1.65124398E12, 55.98802395209583], [1.65124392E12, 39.08641975308646], [1.6512441E12, 74.65644171779142]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124416E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3929.797619047619, "minX": 1.0, "maxY": 51742.0, "series": [{"data": [[2.0, 50202.0], [3.0, 36355.0], [4.0, 17080.333333333336], [5.0, 17829.5], [6.0, 24142.5], [7.0, 11655.666666666666], [8.0, 23726.5], [9.0, 11286.666666666666], [10.0, 3929.797619047619], [11.0, 11544.666666666666], [12.0, 17406.0], [13.0, 14113.0], [14.0, 24147.0], [15.0, 12028.666666666668], [16.0, 21564.5], [17.0, 11898.5], [18.0, 21630.5], [19.0, 7607.0], [20.0, 6665.125000000002], [21.0, 30134.0], [22.0, 16344.333333333334], [23.0, 32005.5], [24.0, 17142.666666666668], [25.0, 31108.0], [26.0, 17968.666666666668], [27.0, 32511.0], [28.0, 15571.0], [29.0, 25496.0], [30.0, 9584.670588235294], [31.0, 25201.333333333336], [33.0, 25924.666666666664], [32.0, 26724.0], [34.0, 19998.0], [35.0, 31467.0], [36.0, 14613.666666666668], [37.0, 23036.0], [38.0, 21727.5], [39.0, 22640.333333333336], [40.0, 12781.29411764706], [41.0, 30594.0], [42.0, 24826.5], [43.0, 31647.5], [44.0, 9613.0], [45.0, 31824.5], [46.0, 9579.0], [47.0, 18536.0], [48.0, 9237.5], [49.0, 18918.0], [50.0, 17243.392857142862], [51.0, 23126.0], [52.0, 22159.0], [53.0, 18035.5], [54.0, 33242.333333333336], [55.0, 12558.0], [56.0, 29880.5], [57.0, 13477.666666666668], [58.0, 33247.5], [59.0, 14282.333333333332], [60.0, 19767.37209302325], [61.0, 27364.5], [62.0, 44874.5], [63.0, 27338.0], [64.0, 28508.666666666664], [65.0, 25109.666666666668], [66.0, 19508.333333333332], [67.0, 29404.0], [69.0, 29701.333333333336], [70.0, 21833.1294117647], [71.0, 30624.5], [68.0, 19395.0], [72.0, 25099.666666666664], [73.0, 16169.0], [74.0, 35778.5], [75.0, 26413.4], [76.0, 18449.666666666668], [77.0, 18806.0], [78.0, 23187.285714285714], [79.0, 18645.75], [80.0, 26939.514124293793], [1.0, 51742.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[47.948637316561836, 17368.829140461203]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 100.75, "minX": 1.6512438E12, "maxY": 493.5, "series": [{"data": [[1.65124404E12, 492.15], [1.65124416E12, 114.4], [1.65124386E12, 493.5], [1.6512438E12, 250.81666666666666], [1.65124398E12, 489.18333333333334], [1.65124392E12, 474.06666666666666], [1.6512441E12, 477.78333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124404E12, 434.0], [1.65124416E12, 100.75], [1.65124386E12, 436.5833333333333], [1.6512438E12, 222.16666666666666], [1.65124398E12, 431.4166666666667], [1.65124392E12, 418.5], [1.6512441E12, 421.0833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124416E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3246.348837209302, "minX": 1.6512438E12, "maxY": 38144.794871794875, "series": [{"data": [[1.65124404E12, 22774.63690476191], [1.65124416E12, 38144.794871794875], [1.65124386E12, 6710.094674556209], [1.6512438E12, 3246.348837209302], [1.65124398E12, 18699.52095808383], [1.65124392E12, 12474.166666666668], [1.6512441E12, 28829.75460122698]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124416E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3246.255813953488, "minX": 1.6512438E12, "maxY": 38144.76923076924, "series": [{"data": [[1.65124404E12, 22774.59523809523], [1.65124416E12, 38144.76923076924], [1.65124386E12, 6710.047337278104], [1.6512438E12, 3246.255813953488], [1.65124398E12, 18699.46706586826], [1.65124392E12, 12474.129629629633], [1.6512441E12, 28829.723926380375]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124416E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.1282051282051295, "minX": 1.6512438E12, "maxY": 19.046511627906984, "series": [{"data": [[1.65124404E12, 8.124999999999995], [1.65124416E12, 7.1282051282051295], [1.65124386E12, 9.461538461538463], [1.6512438E12, 19.046511627906984], [1.65124398E12, 7.4610778443113785], [1.65124392E12, 8.771604938271608], [1.6512441E12, 7.5337423312883445]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124416E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 799.0, "minX": 1.6512438E12, "maxY": 58621.0, "series": [{"data": [[1.65124404E12, 49574.0], [1.65124416E12, 55926.0], [1.65124386E12, 19104.0], [1.6512438E12, 7534.0], [1.65124398E12, 36775.0], [1.65124392E12, 29743.0], [1.6512441E12, 58621.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124404E12, 41158.6], [1.65124416E12, 51742.0], [1.65124386E12, 12885.0], [1.6512438E12, 5760.099999999999], [1.65124398E12, 31801.8], [1.65124392E12, 22206.600000000002], [1.6512441E12, 49620.399999999994]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124404E12, 49164.83], [1.65124416E12, 55926.0], [1.65124386E12, 18450.20000000001], [1.6512438E12, 7534.0], [1.65124398E12, 36646.479999999996], [1.65124392E12, 29018.500000000004], [1.6512441E12, 57988.039999999986]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124404E12, 44468.54999999999], [1.65124416E12, 54579.0], [1.65124386E12, 14914.5], [1.6512438E12, 6430.199999999997], [1.65124398E12, 33760.6], [1.65124392E12, 24612.35], [1.6512441E12, 52064.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124404E12, 1006.0], [1.65124416E12, 18688.0], [1.65124386E12, 799.0], [1.6512438E12, 1019.0], [1.65124398E12, 1123.0], [1.65124392E12, 903.0], [1.6512441E12, 1366.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124404E12, 22178.0], [1.65124416E12, 38224.0], [1.65124386E12, 6079.0], [1.6512438E12, 2921.5], [1.65124398E12, 19855.0], [1.65124392E12, 12303.0], [1.6512441E12, 29236.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124416E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12895.0, "minX": 1.0, "maxY": 51742.0, "series": [{"data": [[2.0, 16036.0], [4.0, 13539.5], [1.0, 51742.0], [3.0, 12895.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12895.0, "minX": 1.0, "maxY": 51742.0, "series": [{"data": [[2.0, 16035.5], [4.0, 13539.5], [1.0, 51742.0], [3.0, 12895.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6, "minX": 1.6512438E12, "maxY": 3.15, "series": [{"data": [[1.65124404E12, 3.05], [1.65124386E12, 3.15], [1.6512438E12, 1.6], [1.65124398E12, 3.033333333333333], [1.65124392E12, 3.033333333333333], [1.6512441E12, 2.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512441E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.6512438E12, "maxY": 2.816666666666667, "series": [{"data": [[1.65124404E12, 2.8], [1.65124416E12, 0.65], [1.65124386E12, 2.816666666666667], [1.6512438E12, 1.4333333333333333], [1.65124398E12, 2.783333333333333], [1.65124392E12, 2.7], [1.6512441E12, 2.716666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124416E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.6512438E12, "maxY": 2.816666666666667, "series": [{"data": [[1.65124404E12, 2.8], [1.65124416E12, 0.65], [1.65124386E12, 2.816666666666667], [1.6512438E12, 1.4333333333333333], [1.65124398E12, 2.783333333333333], [1.65124392E12, 2.7], [1.6512441E12, 2.716666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124416E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.6512438E12, "maxY": 2.816666666666667, "series": [{"data": [[1.65124404E12, 2.8], [1.65124416E12, 0.65], [1.65124386E12, 2.816666666666667], [1.6512438E12, 1.4333333333333333], [1.65124398E12, 2.783333333333333], [1.65124392E12, 2.7], [1.6512441E12, 2.716666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124416E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 872.0, "minX": 0.0, "maxY": 51822.0, "series": [{"data": [[0.0, 872.0], [0.1, 872.0], [0.2, 879.0], [0.3, 911.0], [0.4, 927.0], [0.5, 930.0], [0.6, 942.0], [0.7, 947.0], [0.8, 947.0], [0.9, 948.0], [1.0, 959.0], [1.1, 970.0], [1.2, 970.0], [1.3, 973.0], [1.4, 974.0], [1.5, 992.0], [1.6, 992.0], [1.7, 993.0], [1.8, 994.0], [1.9, 994.0], [2.0, 1011.0], [2.1, 1055.0], [2.2, 1066.0], [2.3, 1066.0], [2.4, 1085.0], [2.5, 1087.0], [2.6, 1088.0], [2.7, 1137.0], [2.8, 1163.0], [2.9, 1186.0], [3.0, 1207.0], [3.1, 1207.0], [3.2, 1211.0], [3.3, 1223.0], [3.4, 1243.0], [3.5, 1250.0], [3.6, 1288.0], [3.7, 1304.0], [3.8, 1304.0], [3.9, 1321.0], [4.0, 1322.0], [4.1, 1324.0], [4.2, 1330.0], [4.3, 1347.0], [4.4, 1367.0], [4.5, 1367.0], [4.6, 1367.0], [4.7, 1372.0], [4.8, 1388.0], [4.9, 1398.0], [5.0, 1400.0], [5.1, 1403.0], [5.2, 1429.0], [5.3, 1429.0], [5.4, 1431.0], [5.5, 1447.0], [5.6, 1465.0], [5.7, 1503.0], [5.8, 1510.0], [5.9, 1521.0], [6.0, 1549.0], [6.1, 1549.0], [6.2, 1555.0], [6.3, 1567.0], [6.4, 1607.0], [6.5, 1616.0], [6.6, 1620.0], [6.7, 1664.0], [6.8, 1664.0], [6.9, 1701.0], [7.0, 1740.0], [7.1, 1786.0], [7.2, 1833.0], [7.3, 1837.0], [7.4, 1848.0], [7.5, 1875.0], [7.6, 1875.0], [7.7, 1916.0], [7.8, 1920.0], [7.9, 1921.0], [8.0, 1946.0], [8.1, 1959.0], [8.2, 1971.0], [8.3, 1971.0], [8.4, 1981.0], [8.5, 1981.0], [8.6, 1985.0], [8.7, 1994.0], [8.8, 2042.0], [8.9, 2046.0], [9.0, 2080.0], [9.1, 2080.0], [9.2, 2125.0], [9.3, 2156.0], [9.4, 2172.0], [9.5, 2175.0], [9.6, 2205.0], [9.7, 2211.0], [9.8, 2211.0], [9.9, 2236.0], [10.0, 2268.0], [10.1, 2312.0], [10.2, 2337.0], [10.3, 2342.0], [10.4, 2354.0], [10.5, 2368.0], [10.6, 2368.0], [10.7, 2380.0], [10.8, 2383.0], [10.9, 2392.0], [11.0, 2412.0], [11.1, 2421.0], [11.2, 2447.0], [11.3, 2447.0], [11.4, 2453.0], [11.5, 2455.0], [11.6, 2474.0], [11.7, 2535.0], [11.8, 2558.0], [11.9, 2575.0], [12.0, 2580.0], [12.1, 2580.0], [12.2, 2591.0], [12.3, 2639.0], [12.4, 2738.0], [12.5, 2740.0], [12.6, 2748.0], [12.7, 2768.0], [12.8, 2768.0], [12.9, 2778.0], [13.0, 2798.0], [13.1, 2851.0], [13.2, 2875.0], [13.3, 2877.0], [13.4, 2904.0], [13.5, 2910.0], [13.6, 2910.0], [13.7, 2935.0], [13.8, 2936.0], [13.9, 2952.0], [14.0, 2962.0], [14.1, 2989.0], [14.2, 3034.0], [14.3, 3034.0], [14.4, 3036.0], [14.5, 3053.0], [14.6, 3065.0], [14.7, 3075.0], [14.8, 3091.0], [14.9, 3101.0], [15.0, 3111.0], [15.1, 3111.0], [15.2, 3125.0], [15.3, 3151.0], [15.4, 3157.0], [15.5, 3170.0], [15.6, 3201.0], [15.7, 3218.0], [15.8, 3218.0], [15.9, 3243.0], [16.0, 3275.0], [16.1, 3278.0], [16.2, 3288.0], [16.3, 3307.0], [16.4, 3379.0], [16.5, 3398.0], [16.6, 3398.0], [16.7, 3402.0], [16.8, 3419.0], [16.9, 3467.0], [17.0, 3479.0], [17.1, 3514.0], [17.2, 3517.0], [17.3, 3517.0], [17.4, 3518.0], [17.5, 3528.0], [17.6, 3572.0], [17.7, 3580.0], [17.8, 3582.0], [17.9, 3658.0], [18.0, 3669.0], [18.1, 3669.0], [18.2, 3737.0], [18.3, 3739.0], [18.4, 3764.0], [18.5, 3765.0], [18.6, 3768.0], [18.7, 3785.0], [18.8, 3785.0], [18.9, 3786.0], [19.0, 3789.0], [19.1, 3824.0], [19.2, 3837.0], [19.3, 3850.0], [19.4, 3886.0], [19.5, 3898.0], [19.6, 3898.0], [19.7, 3950.0], [19.8, 3986.0], [19.9, 3989.0], [20.0, 4007.0], [20.1, 4033.0], [20.2, 4047.0], [20.3, 4051.0], [20.4, 4051.0], [20.5, 4098.0], [20.6, 4138.0], [20.7, 4158.0], [20.8, 4180.0], [20.9, 4187.0], [21.0, 4196.0], [21.1, 4196.0], [21.2, 4196.0], [21.3, 4196.0], [21.4, 4198.0], [21.5, 4318.0], [21.6, 4321.0], [21.7, 4324.0], [21.8, 4332.0], [21.9, 4332.0], [22.0, 4348.0], [22.1, 4382.0], [22.2, 4412.0], [22.3, 4415.0], [22.4, 4426.0], [22.5, 4427.0], [22.6, 4427.0], [22.7, 4528.0], [22.8, 4595.0], [22.9, 4611.0], [23.0, 4611.0], [23.1, 4617.0], [23.2, 4634.0], [23.3, 4648.0], [23.4, 4648.0], [23.5, 4676.0], [23.6, 4711.0], [23.7, 4724.0], [23.8, 4744.0], [23.9, 4773.0], [24.0, 4790.0], [24.1, 4790.0], [24.2, 4817.0], [24.3, 4828.0], [24.4, 4896.0], [24.5, 4907.0], [24.6, 4920.0], [24.7, 4932.0], [24.8, 4936.0], [24.9, 4936.0], [25.0, 4941.0], [25.1, 4946.0], [25.2, 4956.0], [25.3, 5066.0], [25.4, 5092.0], [25.5, 5153.0], [25.6, 5153.0], [25.7, 5157.0], [25.8, 5160.0], [25.9, 5173.0], [26.0, 5199.0], [26.1, 5226.0], [26.2, 5236.0], [26.3, 5247.0], [26.4, 5247.0], [26.5, 5260.0], [26.6, 5266.0], [26.7, 5275.0], [26.8, 5339.0], [26.9, 5342.0], [27.0, 5363.0], [27.1, 5363.0], [27.2, 5401.0], [27.3, 5424.0], [27.4, 5451.0], [27.5, 5456.0], [27.6, 5477.0], [27.7, 5485.0], [27.8, 5488.0], [27.9, 5488.0], [28.0, 5494.0], [28.1, 5524.0], [28.2, 5535.0], [28.3, 5554.0], [28.4, 5557.0], [28.5, 5560.0], [28.6, 5560.0], [28.7, 5564.0], [28.8, 5565.0], [28.9, 5587.0], [29.0, 5596.0], [29.1, 5649.0], [29.2, 5769.0], [29.3, 5840.0], [29.4, 5840.0], [29.5, 5851.0], [29.6, 5851.0], [29.7, 5870.0], [29.8, 5891.0], [29.9, 5905.0], [30.0, 5938.0], [30.1, 5938.0], [30.2, 5980.0], [30.3, 5989.0], [30.4, 6007.0], [30.5, 6032.0], [30.6, 6154.0], [30.7, 6161.0], [30.8, 6165.0], [30.9, 6165.0], [31.0, 6225.0], [31.1, 6252.0], [31.2, 6263.0], [31.3, 6280.0], [31.4, 6312.0], [31.5, 6322.0], [31.6, 6322.0], [31.7, 6330.0], [31.8, 6348.0], [31.9, 6391.0], [32.0, 6436.0], [32.1, 6453.0], [32.2, 6481.0], [32.3, 6502.0], [32.4, 6502.0], [32.5, 6559.0], [32.6, 6595.0], [32.7, 6685.0], [32.8, 6741.0], [32.9, 6775.0], [33.0, 6784.0], [33.1, 6784.0], [33.2, 6787.0], [33.3, 6826.0], [33.4, 6835.0], [33.5, 6837.0], [33.6, 6865.0], [33.7, 6878.0], [33.8, 6885.0], [33.9, 6885.0], [34.0, 6952.0], [34.1, 6952.0], [34.2, 6967.0], [34.3, 6986.0], [34.4, 6995.0], [34.5, 6997.0], [34.6, 6997.0], [34.7, 7008.0], [34.8, 7012.0], [34.9, 7089.0], [35.0, 7174.0], [35.1, 7194.0], [35.2, 7273.0], [35.3, 7275.0], [35.4, 7275.0], [35.5, 7402.0], [35.6, 7410.0], [35.7, 7412.0], [35.8, 7459.0], [35.9, 7473.0], [36.0, 7512.0], [36.1, 7512.0], [36.2, 7534.0], [36.3, 7560.0], [36.4, 7581.0], [36.5, 7582.0], [36.6, 7613.0], [36.7, 7690.0], [36.8, 7716.0], [36.9, 7716.0], [37.0, 7717.0], [37.1, 7721.0], [37.2, 7730.0], [37.3, 7737.0], [37.4, 7778.0], [37.5, 7778.0], [37.6, 7778.0], [37.7, 7810.0], [37.8, 7848.0], [37.9, 7892.0], [38.0, 7956.0], [38.1, 8008.0], [38.2, 8031.0], [38.3, 8118.0], [38.4, 8118.0], [38.5, 8185.0], [38.6, 8192.0], [38.7, 8195.0], [38.8, 8226.0], [38.9, 8264.0], [39.0, 8306.0], [39.1, 8306.0], [39.2, 8312.0], [39.3, 8316.0], [39.4, 8355.0], [39.5, 8357.0], [39.6, 8372.0], [39.7, 8539.0], [39.8, 8579.0], [39.9, 8579.0], [40.0, 8595.0], [40.1, 8639.0], [40.2, 8650.0], [40.3, 8664.0], [40.4, 8674.0], [40.5, 8755.0], [40.6, 8818.0], [40.7, 8818.0], [40.8, 8860.0], [40.9, 8985.0], [41.0, 8987.0], [41.1, 8988.0], [41.2, 9021.0], [41.3, 9039.0], [41.4, 9039.0], [41.5, 9063.0], [41.6, 9063.0], [41.7, 9084.0], [41.8, 9130.0], [41.9, 9170.0], [42.0, 9177.0], [42.1, 9190.0], [42.2, 9190.0], [42.3, 9238.0], [42.4, 9263.0], [42.5, 9275.0], [42.6, 9318.0], [42.7, 9383.0], [42.8, 9400.0], [42.9, 9400.0], [43.0, 9430.0], [43.1, 9490.0], [43.2, 9494.0], [43.3, 9536.0], [43.4, 9561.0], [43.5, 9582.0], [43.6, 9585.0], [43.7, 9585.0], [43.8, 9586.0], [43.9, 9588.0], [44.0, 9590.0], [44.1, 9626.0], [44.2, 9631.0], [44.3, 9634.0], [44.4, 9634.0], [44.5, 9736.0], [44.6, 9820.0], [44.7, 9899.0], [44.8, 9902.0], [44.9, 9920.0], [45.0, 9995.0], [45.1, 10025.0], [45.2, 10025.0], [45.3, 10034.0], [45.4, 10083.0], [45.5, 10172.0], [45.6, 10313.0], [45.7, 10410.0], [45.8, 10450.0], [45.9, 10450.0], [46.0, 10468.0], [46.1, 10499.0], [46.2, 10519.0], [46.3, 10527.0], [46.4, 10545.0], [46.5, 10597.0], [46.6, 10629.0], [46.7, 10629.0], [46.8, 10641.0], [46.9, 10650.0], [47.0, 10715.0], [47.1, 10745.0], [47.2, 10775.0], [47.3, 10788.0], [47.4, 10788.0], [47.5, 10891.0], [47.6, 10897.0], [47.7, 10902.0], [47.8, 10929.0], [47.9, 10948.0], [48.0, 10963.0], [48.1, 10995.0], [48.2, 10995.0], [48.3, 11029.0], [48.4, 11082.0], [48.5, 11114.0], [48.6, 11182.0], [48.7, 11275.0], [48.8, 11278.0], [48.9, 11278.0], [49.0, 11298.0], [49.1, 11305.0], [49.2, 11387.0], [49.3, 11454.0], [49.4, 11458.0], [49.5, 11485.0], [49.6, 11614.0], [49.7, 11614.0], [49.8, 11649.0], [49.9, 11694.0], [50.0, 11705.0], [50.1, 11788.0], [50.2, 11790.0], [50.3, 11829.0], [50.4, 11829.0], [50.5, 11845.0], [50.6, 11859.0], [50.7, 11882.0], [50.8, 11891.0], [50.9, 12001.0], [51.0, 12065.0], [51.1, 12125.0], [51.2, 12125.0], [51.3, 12126.0], [51.4, 12161.0], [51.5, 12238.0], [51.6, 12317.0], [51.7, 12358.0], [51.8, 12371.0], [51.9, 12371.0], [52.0, 12489.0], [52.1, 12540.0], [52.2, 12556.0], [52.3, 12608.0], [52.4, 12613.0], [52.5, 12660.0], [52.6, 12662.0], [52.7, 12662.0], [52.8, 12702.0], [52.9, 12749.0], [53.0, 12802.0], [53.1, 12804.0], [53.2, 12807.0], [53.3, 12841.0], [53.4, 12841.0], [53.5, 12849.0], [53.6, 12891.0], [53.7, 12899.0], [53.8, 12964.0], [53.9, 13067.0], [54.0, 13083.0], [54.1, 13152.0], [54.2, 13152.0], [54.3, 13169.0], [54.4, 13199.0], [54.5, 13234.0], [54.6, 13268.0], [54.7, 13353.0], [54.8, 13395.0], [54.9, 13395.0], [55.0, 13427.0], [55.1, 13460.0], [55.2, 13486.0], [55.3, 13535.0], [55.4, 13537.0], [55.5, 13550.0], [55.6, 13633.0], [55.7, 13633.0], [55.8, 13640.0], [55.9, 13667.0], [56.0, 13755.0], [56.1, 13766.0], [56.2, 13919.0], [56.3, 14007.0], [56.4, 14007.0], [56.5, 14062.0], [56.6, 14089.0], [56.7, 14218.0], [56.8, 14223.0], [56.9, 14313.0], [57.0, 14320.0], [57.1, 14340.0], [57.2, 14340.0], [57.3, 14348.0], [57.4, 14355.0], [57.5, 14355.0], [57.6, 14370.0], [57.7, 14479.0], [57.8, 14538.0], [57.9, 14538.0], [58.0, 14557.0], [58.1, 14584.0], [58.2, 14608.0], [58.3, 14696.0], [58.4, 14735.0], [58.5, 14753.0], [58.6, 14866.0], [58.7, 14866.0], [58.8, 14909.0], [58.9, 14936.0], [59.0, 14956.0], [59.1, 15120.0], [59.2, 15159.0], [59.3, 15177.0], [59.4, 15177.0], [59.5, 15293.0], [59.6, 15323.0], [59.7, 15383.0], [59.8, 15442.0], [59.9, 15456.0], [60.0, 15489.0], [60.1, 15500.0], [60.2, 15500.0], [60.3, 15538.0], [60.4, 15589.0], [60.5, 15620.0], [60.6, 15628.0], [60.7, 15631.0], [60.8, 15711.0], [60.9, 15763.0], [61.0, 15763.0], [61.1, 15793.0], [61.2, 15813.0], [61.3, 15898.0], [61.4, 15986.0], [61.5, 15993.0], [61.6, 16038.0], [61.7, 16038.0], [61.8, 16047.0], [61.9, 16283.0], [62.0, 16348.0], [62.1, 16369.0], [62.2, 16375.0], [62.3, 16427.0], [62.4, 16430.0], [62.5, 16430.0], [62.6, 16431.0], [62.7, 16539.0], [62.8, 16549.0], [62.9, 16622.0], [63.0, 16624.0], [63.1, 16746.0], [63.2, 16746.0], [63.3, 16800.0], [63.4, 16874.0], [63.5, 17017.0], [63.6, 17105.0], [63.7, 17123.0], [63.8, 17143.0], [63.9, 17145.0], [64.0, 17145.0], [64.1, 17247.0], [64.2, 17277.0], [64.3, 17316.0], [64.4, 17424.0], [64.5, 17442.0], [64.6, 17471.0], [64.7, 17471.0], [64.8, 17526.0], [64.9, 17544.0], [65.0, 17583.0], [65.1, 17599.0], [65.2, 17610.0], [65.3, 17787.0], [65.4, 17811.0], [65.5, 17811.0], [65.6, 17845.0], [65.7, 17871.0], [65.8, 17916.0], [65.9, 18007.0], [66.0, 18049.0], [66.1, 18200.0], [66.2, 18200.0], [66.3, 18207.0], [66.4, 18216.0], [66.5, 18220.0], [66.6, 18266.0], [66.7, 18337.0], [66.8, 18431.0], [66.9, 18436.0], [67.0, 18436.0], [67.1, 18508.0], [67.2, 18657.0], [67.3, 18694.0], [67.4, 18726.0], [67.5, 18751.0], [67.6, 18766.0], [67.7, 18766.0], [67.8, 18869.0], [67.9, 18909.0], [68.0, 18912.0], [68.1, 19023.0], [68.2, 19044.0], [68.3, 19119.0], [68.4, 19216.0], [68.5, 19216.0], [68.6, 19278.0], [68.7, 19307.0], [68.8, 19327.0], [68.9, 19345.0], [69.0, 19416.0], [69.1, 19515.0], [69.2, 19515.0], [69.3, 19527.0], [69.4, 19577.0], [69.5, 19629.0], [69.6, 19641.0], [69.7, 19703.0], [69.8, 19741.0], [69.9, 19768.0], [70.0, 19768.0], [70.1, 19857.0], [70.2, 20013.0], [70.3, 20095.0], [70.4, 20262.0], [70.5, 20283.0], [70.6, 20405.0], [70.7, 20405.0], [70.8, 20414.0], [70.9, 20468.0], [71.0, 20474.0], [71.1, 20523.0], [71.2, 20546.0], [71.3, 20596.0], [71.4, 20763.0], [71.5, 20763.0], [71.6, 20848.0], [71.7, 20890.0], [71.8, 20892.0], [71.9, 21010.0], [72.0, 21029.0], [72.1, 21129.0], [72.2, 21129.0], [72.3, 21141.0], [72.4, 21156.0], [72.5, 21159.0], [72.6, 21222.0], [72.7, 21229.0], [72.8, 21332.0], [72.9, 21340.0], [73.0, 21340.0], [73.1, 21454.0], [73.2, 21473.0], [73.3, 21612.0], [73.4, 21640.0], [73.5, 21672.0], [73.6, 21685.0], [73.7, 21685.0], [73.8, 21761.0], [73.9, 21801.0], [74.0, 21944.0], [74.1, 22113.0], [74.2, 22216.0], [74.3, 22321.0], [74.4, 22471.0], [74.5, 22471.0], [74.6, 22490.0], [74.7, 22519.0], [74.8, 22657.0], [74.9, 22712.0], [75.0, 22819.0], [75.1, 22912.0], [75.2, 22912.0], [75.3, 22915.0], [75.4, 22940.0], [75.5, 22979.0], [75.6, 23086.0], [75.7, 23094.0], [75.8, 23095.0], [75.9, 23111.0], [76.0, 23111.0], [76.1, 23314.0], [76.2, 23466.0], [76.3, 23563.0], [76.4, 23760.0], [76.5, 23762.0], [76.6, 23804.0], [76.7, 23804.0], [76.8, 23851.0], [76.9, 23857.0], [77.0, 23977.0], [77.1, 23979.0], [77.2, 24086.0], [77.3, 24392.0], [77.4, 24416.0], [77.5, 24416.0], [77.6, 24601.0], [77.7, 24646.0], [77.8, 24763.0], [77.9, 24794.0], [78.0, 24849.0], [78.1, 24955.0], [78.2, 24955.0], [78.3, 24965.0], [78.4, 25025.0], [78.5, 25025.0], [78.6, 25149.0], [78.7, 25285.0], [78.8, 25287.0], [78.9, 25300.0], [79.0, 25300.0], [79.1, 25339.0], [79.2, 25497.0], [79.3, 25574.0], [79.4, 25714.0], [79.5, 25779.0], [79.6, 25813.0], [79.7, 25813.0], [79.8, 25912.0], [79.9, 25967.0], [80.0, 26065.0], [80.1, 26106.0], [80.2, 26118.0], [80.3, 26138.0], [80.4, 26207.0], [80.5, 26207.0], [80.6, 26257.0], [80.7, 26471.0], [80.8, 26559.0], [80.9, 26687.0], [81.0, 26780.0], [81.1, 26829.0], [81.2, 26882.0], [81.3, 26882.0], [81.4, 26896.0], [81.5, 27058.0], [81.6, 27119.0], [81.7, 27188.0], [81.8, 27205.0], [81.9, 27255.0], [82.0, 27255.0], [82.1, 27256.0], [82.2, 27340.0], [82.3, 27373.0], [82.4, 27578.0], [82.5, 27588.0], [82.6, 27763.0], [82.7, 27815.0], [82.8, 27815.0], [82.9, 28160.0], [83.0, 28294.0], [83.1, 28370.0], [83.2, 28382.0], [83.3, 28421.0], [83.4, 28440.0], [83.5, 28440.0], [83.6, 28505.0], [83.7, 28571.0], [83.8, 28726.0], [83.9, 28751.0], [84.0, 28773.0], [84.1, 28824.0], [84.2, 28860.0], [84.3, 28860.0], [84.4, 28956.0], [84.5, 28966.0], [84.6, 29147.0], [84.7, 29402.0], [84.8, 29566.0], [84.9, 29745.0], [85.0, 29745.0], [85.1, 29809.0], [85.2, 29812.0], [85.3, 29825.0], [85.4, 29906.0], [85.5, 30052.0], [85.6, 30052.0], [85.7, 30272.0], [85.8, 30272.0], [85.9, 30274.0], [86.0, 30578.0], [86.1, 30702.0], [86.2, 30836.0], [86.3, 30868.0], [86.4, 30870.0], [86.5, 30870.0], [86.6, 30999.0], [86.7, 30999.0], [86.8, 31113.0], [86.9, 31402.0], [87.0, 31593.0], [87.1, 31698.0], [87.2, 31767.0], [87.3, 31767.0], [87.4, 31781.0], [87.5, 31905.0], [87.6, 31956.0], [87.7, 31957.0], [87.8, 32183.0], [87.9, 32417.0], [88.0, 32417.0], [88.1, 32475.0], [88.2, 32516.0], [88.3, 32521.0], [88.4, 32829.0], [88.5, 32965.0], [88.6, 32993.0], [88.7, 33088.0], [88.8, 33088.0], [88.9, 33201.0], [89.0, 33321.0], [89.1, 33433.0], [89.2, 33745.0], [89.3, 33849.0], [89.4, 33861.0], [89.5, 33861.0], [89.6, 33892.0], [89.7, 34056.0], [89.8, 34111.0], [89.9, 34288.0], [90.0, 34324.0], [90.1, 34454.0], [90.2, 34633.0], [90.3, 34633.0], [90.4, 34663.0], [90.5, 34712.0], [90.6, 34993.0], [90.7, 35031.0], [90.8, 35269.0], [90.9, 35272.0], [91.0, 35272.0], [91.1, 35290.0], [91.2, 35357.0], [91.3, 35460.0], [91.4, 35477.0], [91.5, 35923.0], [91.6, 35955.0], [91.7, 36029.0], [91.8, 36029.0], [91.9, 36303.0], [92.0, 36358.0], [92.1, 36454.0], [92.2, 36489.0], [92.3, 36626.0], [92.4, 36823.0], [92.5, 36823.0], [92.6, 36925.0], [92.7, 37076.0], [92.8, 37284.0], [92.9, 37477.0], [93.0, 37643.0], [93.1, 38001.0], [93.2, 38075.0], [93.3, 38075.0], [93.4, 38148.0], [93.5, 38328.0], [93.6, 38344.0], [93.7, 38521.0], [93.8, 38604.0], [93.9, 38653.0], [94.0, 38653.0], [94.1, 38759.0], [94.2, 38830.0], [94.3, 39126.0], [94.4, 39236.0], [94.5, 39620.0], [94.6, 39830.0], [94.7, 39994.0], [94.8, 39994.0], [94.9, 40040.0], [95.0, 40092.0], [95.1, 40101.0], [95.2, 40208.0], [95.3, 40341.0], [95.4, 40922.0], [95.5, 40922.0], [95.6, 41145.0], [95.7, 41172.0], [95.8, 41225.0], [95.9, 41322.0], [96.0, 41433.0], [96.1, 41522.0], [96.2, 41573.0], [96.3, 41573.0], [96.4, 42130.0], [96.5, 42274.0], [96.6, 42583.0], [96.7, 42756.0], [96.8, 42798.0], [96.9, 42950.0], [97.0, 42950.0], [97.1, 43500.0], [97.2, 43589.0], [97.3, 43601.0], [97.4, 43957.0], [97.5, 43964.0], [97.6, 44190.0], [97.7, 44251.0], [97.8, 44251.0], [97.9, 44342.0], [98.0, 45091.0], [98.1, 45257.0], [98.2, 45478.0], [98.3, 45829.0], [98.4, 45871.0], [98.5, 45871.0], [98.6, 45953.0], [98.7, 46129.0], [98.8, 46796.0], [98.9, 46809.0], [99.0, 47175.0], [99.1, 47802.0], [99.2, 48600.0], [99.3, 48600.0], [99.4, 48780.0], [99.5, 49567.0], [99.6, 50369.0], [99.7, 50864.0], [99.8, 51465.0], [99.9, 51822.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 15.0, "series": [{"data": [[32900.0, 2.0], [33700.0, 1.0], [34100.0, 1.0], [33300.0, 1.0], [34900.0, 1.0], [35300.0, 1.0], [36900.0, 1.0], [38100.0, 1.0], [38500.0, 1.0], [40100.0, 1.0], [40900.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [42500.0, 1.0], [42100.0, 1.0], [44100.0, 1.0], [46100.0, 1.0], [800.0, 2.0], [900.0, 15.0], [1000.0, 6.0], [1100.0, 3.0], [1200.0, 6.0], [1300.0, 11.0], [1400.0, 6.0], [1500.0, 6.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 10.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 4.0], [2300.0, 8.0], [2400.0, 6.0], [2500.0, 5.0], [2600.0, 1.0], [2800.0, 3.0], [2700.0, 6.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 6.0], [3300.0, 3.0], [3200.0, 6.0], [3400.0, 4.0], [3500.0, 7.0], [3700.0, 8.0], [3600.0, 2.0], [3800.0, 5.0], [3900.0, 3.0], [4000.0, 5.0], [4300.0, 6.0], [4100.0, 8.0], [4400.0, 4.0], [4500.0, 2.0], [4600.0, 6.0], [4700.0, 5.0], [4800.0, 3.0], [4900.0, 7.0], [5100.0, 5.0], [5000.0, 2.0], [5300.0, 3.0], [5200.0, 6.0], [5500.0, 9.0], [5400.0, 8.0], [5600.0, 1.0], [5800.0, 5.0], [5700.0, 1.0], [5900.0, 4.0], [6000.0, 2.0], [6100.0, 3.0], [6200.0, 4.0], [6300.0, 5.0], [6400.0, 3.0], [6500.0, 3.0], [6600.0, 1.0], [6700.0, 4.0], [6900.0, 6.0], [6800.0, 6.0], [7000.0, 3.0], [7100.0, 2.0], [7400.0, 5.0], [7200.0, 2.0], [7500.0, 5.0], [7600.0, 2.0], [7800.0, 3.0], [7700.0, 7.0], [7900.0, 1.0], [8100.0, 4.0], [8000.0, 2.0], [8600.0, 4.0], [8300.0, 6.0], [8200.0, 2.0], [8500.0, 3.0], [8700.0, 1.0], [8800.0, 2.0], [9000.0, 5.0], [8900.0, 3.0], [9100.0, 4.0], [9200.0, 3.0], [9400.0, 4.0], [9500.0, 7.0], [9300.0, 2.0], [9600.0, 3.0], [9700.0, 1.0], [9900.0, 3.0], [9800.0, 2.0], [10000.0, 3.0], [10100.0, 1.0], [10400.0, 4.0], [10700.0, 4.0], [10500.0, 4.0], [10600.0, 3.0], [10300.0, 1.0], [11000.0, 2.0], [10800.0, 2.0], [11200.0, 3.0], [11100.0, 2.0], [10900.0, 5.0], [11700.0, 3.0], [11400.0, 3.0], [11600.0, 3.0], [11300.0, 2.0], [12000.0, 2.0], [11800.0, 5.0], [12100.0, 3.0], [12200.0, 1.0], [12600.0, 4.0], [12300.0, 3.0], [12500.0, 2.0], [12700.0, 2.0], [12400.0, 1.0], [12800.0, 7.0], [13300.0, 2.0], [13100.0, 3.0], [13000.0, 2.0], [12900.0, 1.0], [13200.0, 2.0], [13500.0, 3.0], [13700.0, 2.0], [13400.0, 3.0], [13600.0, 3.0], [14300.0, 7.0], [13900.0, 1.0], [14200.0, 2.0], [14000.0, 3.0], [14500.0, 3.0], [14600.0, 2.0], [14400.0, 1.0], [14700.0, 2.0], [14800.0, 1.0], [14900.0, 3.0], [15300.0, 2.0], [15100.0, 3.0], [15200.0, 1.0], [15700.0, 3.0], [15500.0, 3.0], [15400.0, 3.0], [15800.0, 2.0], [15600.0, 3.0], [16000.0, 2.0], [15900.0, 2.0], [16300.0, 3.0], [16200.0, 1.0], [16800.0, 2.0], [17200.0, 2.0], [17400.0, 3.0], [16400.0, 3.0], [17000.0, 1.0], [16600.0, 2.0], [18400.0, 2.0], [17800.0, 3.0], [18200.0, 5.0], [18000.0, 2.0], [17600.0, 1.0], [19000.0, 2.0], [18800.0, 1.0], [18600.0, 2.0], [19400.0, 1.0], [19200.0, 2.0], [19600.0, 2.0], [19800.0, 1.0], [20200.0, 2.0], [20400.0, 4.0], [20000.0, 2.0], [20800.0, 3.0], [21400.0, 2.0], [21200.0, 2.0], [21000.0, 2.0], [22400.0, 2.0], [22200.0, 1.0], [21600.0, 4.0], [21800.0, 1.0], [23000.0, 3.0], [22600.0, 1.0], [23400.0, 1.0], [22800.0, 1.0], [23800.0, 3.0], [24000.0, 1.0], [24400.0, 1.0], [24600.0, 2.0], [25200.0, 2.0], [25000.0, 2.0], [24800.0, 1.0], [25400.0, 1.0], [26600.0, 1.0], [25800.0, 1.0], [26400.0, 1.0], [26000.0, 1.0], [26200.0, 2.0], [27000.0, 1.0], [26800.0, 3.0], [27200.0, 3.0], [28400.0, 2.0], [27800.0, 1.0], [28200.0, 1.0], [28800.0, 2.0], [29400.0, 1.0], [29800.0, 3.0], [30200.0, 2.0], [30000.0, 2.0], [30800.0, 3.0], [31600.0, 1.0], [31400.0, 1.0], [32400.0, 2.0], [32800.0, 1.0], [33200.0, 1.0], [34400.0, 1.0], [34000.0, 1.0], [35200.0, 3.0], [36000.0, 1.0], [36400.0, 2.0], [36800.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [37600.0, 1.0], [38000.0, 2.0], [39600.0, 1.0], [39200.0, 1.0], [40000.0, 2.0], [41200.0, 1.0], [43600.0, 1.0], [46800.0, 1.0], [45200.0, 1.0], [50800.0, 1.0], [34700.0, 1.0], [34300.0, 1.0], [36300.0, 2.0], [35900.0, 2.0], [38300.0, 2.0], [38700.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [40300.0, 1.0], [41100.0, 2.0], [41500.0, 2.0], [42700.0, 2.0], [44300.0, 1.0], [43900.0, 2.0], [43500.0, 2.0], [47100.0, 1.0], [45900.0, 1.0], [46700.0, 1.0], [48700.0, 1.0], [49500.0, 1.0], [50300.0, 1.0], [17100.0, 4.0], [16500.0, 2.0], [17300.0, 1.0], [16700.0, 1.0], [17700.0, 1.0], [17500.0, 4.0], [18300.0, 1.0], [17900.0, 1.0], [19300.0, 3.0], [18500.0, 1.0], [18900.0, 2.0], [18700.0, 3.0], [19100.0, 1.0], [19700.0, 3.0], [19500.0, 3.0], [21100.0, 4.0], [20500.0, 3.0], [21300.0, 2.0], [20700.0, 1.0], [21900.0, 1.0], [22300.0, 1.0], [21700.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [23500.0, 1.0], [22900.0, 4.0], [23300.0, 1.0], [22700.0, 1.0], [23100.0, 1.0], [23700.0, 2.0], [23900.0, 2.0], [24300.0, 1.0], [24700.0, 2.0], [24900.0, 2.0], [25500.0, 1.0], [25100.0, 1.0], [25300.0, 2.0], [25700.0, 2.0], [26500.0, 1.0], [26100.0, 3.0], [25900.0, 2.0], [27500.0, 2.0], [27300.0, 2.0], [26700.0, 1.0], [27100.0, 2.0], [28300.0, 2.0], [28500.0, 2.0], [28100.0, 1.0], [27700.0, 1.0], [28700.0, 3.0], [28900.0, 2.0], [29100.0, 1.0], [29500.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [30700.0, 1.0], [29900.0, 1.0], [31700.0, 2.0], [31500.0, 1.0], [30900.0, 2.0], [31100.0, 1.0], [31900.0, 3.0], [32500.0, 2.0], [32100.0, 1.0], [33800.0, 3.0], [34600.0, 2.0], [34200.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [35000.0, 1.0], [35400.0, 2.0], [36600.0, 1.0], [37400.0, 1.0], [37000.0, 1.0], [38600.0, 2.0], [39800.0, 1.0], [40200.0, 1.0], [42200.0, 1.0], [41400.0, 1.0], [44200.0, 1.0], [45000.0, 1.0], [45400.0, 1.0], [45800.0, 2.0], [47800.0, 1.0], [48600.0, 1.0], [51800.0, 1.0], [51400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 51800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 818.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 818.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.025316455696204, "minX": 1.65124146E12, "maxY": 65.93209876543209, "series": [{"data": [[1.65124146E12, 13.025316455696204], [1.65124176E12, 18.0], [1.65124164E12, 63.37278106508874], [1.6512417E12, 65.93209876543209], [1.65124152E12, 28.450867052023128], [1.65124158E12, 45.38823529411765]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124176E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3779.0224719101125, "minX": 1.0, "maxY": 51465.0, "series": [{"data": [[2.0, 50369.0], [3.0, 24826.0], [4.0, 16417.666666666664], [5.0, 23099.5], [6.0, 15401.333333333334], [7.0, 22436.0], [8.0, 15103.666666666666], [9.0, 15235.0], [10.0, 3779.0224719101125], [11.0, 22808.0], [12.0, 14517.0], [13.0, 14769.0], [14.0, 21012.5], [15.0, 15432.0], [16.0, 14695.666666666666], [17.0, 18457.0], [18.0, 13143.0], [19.0, 18894.0], [20.0, 6610.662921348314], [21.0, 14498.666666666666], [22.0, 14777.0], [23.0, 19605.0], [24.0, 18920.0], [25.0, 19195.0], [26.0, 16232.333333333332], [27.0, 19202.0], [28.0, 13047.666666666668], [29.0, 14553.5], [30.0, 9574.874999999996], [31.0, 18566.333333333332], [32.0, 19362.5], [33.0, 19302.333333333332], [34.0, 10933.5], [35.0, 13973.666666666666], [36.0, 19443.5], [37.0, 14853.666666666666], [38.0, 11113.5], [39.0, 8089.0], [40.0, 12171.112359550561], [41.0, 10775.5], [42.0, 10555.0], [43.0, 10374.333333333334], [44.0, 9897.0], [45.0, 10488.5], [46.0, 10700.0], [47.0, 11945.666666666666], [49.0, 12024.666666666666], [48.0, 7613.0], [50.0, 15443.569767441859], [51.0, 11451.333333333334], [52.0, 33642.5], [53.0, 28594.666666666664], [54.0, 31676.5], [55.0, 27468.333333333336], [56.0, 39476.666666666664], [57.0, 27827.666666666668], [58.0, 31761.5], [59.0, 28939.0], [60.0, 19707.45348837208], [61.0, 34507.333333333336], [62.0, 37989.0], [63.0, 33634.333333333336], [64.0, 35434.166666666664], [65.0, 26721.0], [66.0, 23588.5], [67.0, 27922.5], [68.0, 15160.5], [69.0, 23325.0], [70.0, 22392.457142857136], [1.0, 51465.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[42.34948096885817, 15141.675893886955]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 70.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 90.41666666666667, "minX": 1.65124146E12, "maxY": 505.56666666666666, "series": [{"data": [[1.65124146E12, 460.71666666666664], [1.65124176E12, 102.66666666666667], [1.65124164E12, 495.1333333333333], [1.6512417E12, 474.6333333333333], [1.65124152E12, 505.56666666666666], [1.65124158E12, 497.68333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124146E12, 408.1666666666667], [1.65124176E12, 90.41666666666667], [1.65124164E12, 436.5833333333333], [1.6512417E12, 418.5], [1.65124152E12, 446.9166666666667], [1.65124158E12, 439.1666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124176E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3946.7848101265818, "minX": 1.65124146E12, "maxY": 35069.285714285725, "series": [{"data": [[1.65124146E12, 3946.7848101265818], [1.65124176E12, 35069.285714285725], [1.65124164E12, 20615.213017751477], [1.6512417E12, 24100.33333333335], [1.65124152E12, 8668.687861271676], [1.65124158E12, 14052.399999999998]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124176E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3946.683544303797, "minX": 1.65124146E12, "maxY": 35069.285714285725, "series": [{"data": [[1.65124146E12, 3946.683544303797], [1.65124176E12, 35069.285714285725], [1.65124164E12, 20615.18934911244], [1.6512417E12, 24100.30864197531], [1.65124152E12, 8668.647398843932], [1.65124158E12, 14052.370588235297]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124176E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.777777777777778, "minX": 1.65124146E12, "maxY": 14.284810126582279, "series": [{"data": [[1.65124146E12, 14.284810126582279], [1.65124176E12, 8.885714285714284], [1.65124164E12, 7.781065088757398], [1.6512417E12, 7.777777777777778], [1.65124152E12, 9.011560693641615], [1.65124158E12, 8.105882352941178]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124176E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 872.0, "minX": 1.65124146E12, "maxY": 51822.0, "series": [{"data": [[1.65124146E12, 12608.0], [1.65124176E12, 51465.0], [1.65124164E12, 45478.0], [1.6512417E12, 51822.0], [1.65124152E12, 22471.0], [1.65124158E12, 32993.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124146E12, 7581.799999999998], [1.65124176E12, 47589.6], [1.65124164E12, 35477.0], [1.6512417E12, 43597.4], [1.65124152E12, 15793.0], [1.65124158E12, 25253.800000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124146E12, 12249.869999999997], [1.65124176E12, 51465.0], [1.65124164E12, 44682.80000000001], [1.6512417E12, 51218.46000000001], [1.65124152E12, 21718.41999999999], [1.65124158E12, 32122.53999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124146E12, 9432.999999999998], [1.65124176E12, 50588.2], [1.65124164E12, 38675.5], [1.6512417E12, 46102.6], [1.65124152E12, 17998.49999999999], [1.65124158E12, 27934.39999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124146E12, 872.0], [1.65124176E12, 20546.0], [1.65124164E12, 1011.0], [1.6512417E12, 1250.0], [1.65124152E12, 911.0], [1.65124158E12, 1085.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124146E12, 3473.0], [1.65124176E12, 35357.0], [1.65124164E12, 20523.0], [1.6512417E12, 23276.0], [1.65124152E12, 8118.0], [1.65124158E12, 13864.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124176E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9817.5, "minX": 1.0, "maxY": 48780.0, "series": [{"data": [[2.0, 15579.0], [4.0, 14854.5], [1.0, 48780.0], [3.0, 9817.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9817.5, "minX": 1.0, "maxY": 48780.0, "series": [{"data": [[2.0, 15579.0], [4.0, 14854.5], [1.0, 48780.0], [3.0, 9817.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.1166666666666667, "minX": 1.65124146E12, "maxY": 3.216666666666667, "series": [{"data": [[1.65124146E12, 2.966666666666667], [1.65124164E12, 3.15], [1.6512417E12, 2.1166666666666667], [1.65124152E12, 3.216666666666667], [1.65124158E12, 3.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512417E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.65124146E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124146E12, 2.6333333333333333], [1.65124176E12, 0.5833333333333334], [1.65124164E12, 2.816666666666667], [1.6512417E12, 2.7], [1.65124152E12, 2.8833333333333333], [1.65124158E12, 2.8333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124176E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.65124146E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124146E12, 2.6333333333333333], [1.65124176E12, 0.5833333333333334], [1.65124164E12, 2.816666666666667], [1.6512417E12, 2.7], [1.65124152E12, 2.8833333333333333], [1.65124158E12, 2.8333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124176E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.65124146E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124146E12, 2.6333333333333333], [1.65124176E12, 0.5833333333333334], [1.65124164E12, 2.816666666666667], [1.6512417E12, 2.7], [1.65124152E12, 2.8833333333333333], [1.65124158E12, 2.8333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124176E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 810.0, "minX": 0.0, "maxY": 58007.0, "series": [{"data": [[0.0, 810.0], [0.1, 810.0], [0.2, 869.0], [0.3, 887.0], [0.4, 918.0], [0.5, 934.0], [0.6, 940.0], [0.7, 946.0], [0.8, 947.0], [0.9, 947.0], [1.0, 960.0], [1.1, 973.0], [1.2, 982.0], [1.3, 1007.0], [1.4, 1023.0], [1.5, 1055.0], [1.6, 1066.0], [1.7, 1075.0], [1.8, 1080.0], [1.9, 1081.0], [2.0, 1094.0], [2.1, 1094.0], [2.2, 1097.0], [2.3, 1119.0], [2.4, 1129.0], [2.5, 1142.0], [2.6, 1176.0], [2.7, 1176.0], [2.8, 1184.0], [2.9, 1193.0], [3.0, 1193.0], [3.1, 1195.0], [3.2, 1203.0], [3.3, 1204.0], [3.4, 1213.0], [3.5, 1227.0], [3.6, 1229.0], [3.7, 1242.0], [3.8, 1248.0], [3.9, 1258.0], [4.0, 1258.0], [4.1, 1258.0], [4.2, 1268.0], [4.3, 1279.0], [4.4, 1301.0], [4.5, 1331.0], [4.6, 1372.0], [4.7, 1378.0], [4.8, 1385.0], [4.9, 1396.0], [5.0, 1431.0], [5.1, 1432.0], [5.2, 1436.0], [5.3, 1451.0], [5.4, 1488.0], [5.5, 1502.0], [5.6, 1508.0], [5.7, 1508.0], [5.8, 1561.0], [5.9, 1571.0], [6.0, 1601.0], [6.1, 1608.0], [6.2, 1608.0], [6.3, 1647.0], [6.4, 1666.0], [6.5, 1671.0], [6.6, 1673.0], [6.7, 1770.0], [6.8, 1770.0], [6.9, 1774.0], [7.0, 1796.0], [7.1, 1818.0], [7.2, 1856.0], [7.3, 1860.0], [7.4, 1865.0], [7.5, 1883.0], [7.6, 1919.0], [7.7, 1940.0], [7.8, 1970.0], [7.9, 1998.0], [8.0, 2053.0], [8.1, 2097.0], [8.2, 2097.0], [8.3, 2139.0], [8.4, 2186.0], [8.5, 2225.0], [8.6, 2257.0], [8.7, 2269.0], [8.8, 2287.0], [8.9, 2303.0], [9.0, 2315.0], [9.1, 2360.0], [9.2, 2370.0], [9.3, 2379.0], [9.4, 2386.0], [9.5, 2388.0], [9.6, 2414.0], [9.7, 2422.0], [9.8, 2447.0], [9.9, 2500.0], [10.0, 2515.0], [10.1, 2516.0], [10.2, 2522.0], [10.3, 2522.0], [10.4, 2540.0], [10.5, 2625.0], [10.6, 2633.0], [10.7, 2699.0], [10.8, 2717.0], [10.9, 2768.0], [11.0, 2771.0], [11.1, 2803.0], [11.2, 2819.0], [11.3, 2822.0], [11.4, 2847.0], [11.5, 2872.0], [11.6, 2873.0], [11.7, 2889.0], [11.8, 2894.0], [11.9, 2899.0], [12.0, 2911.0], [12.1, 2925.0], [12.2, 2951.0], [12.3, 2951.0], [12.4, 2956.0], [12.5, 2961.0], [12.6, 2983.0], [12.7, 2996.0], [12.8, 3015.0], [12.9, 3045.0], [13.0, 3053.0], [13.1, 3083.0], [13.2, 3088.0], [13.3, 3093.0], [13.4, 3118.0], [13.5, 3122.0], [13.6, 3129.0], [13.7, 3144.0], [13.8, 3156.0], [13.9, 3157.0], [14.0, 3164.0], [14.1, 3220.0], [14.2, 3229.0], [14.3, 3229.0], [14.4, 3262.0], [14.5, 3276.0], [14.6, 3346.0], [14.7, 3351.0], [14.8, 3407.0], [14.9, 3414.0], [15.0, 3439.0], [15.1, 3443.0], [15.2, 3560.0], [15.3, 3575.0], [15.4, 3575.0], [15.5, 3602.0], [15.6, 3641.0], [15.7, 3679.0], [15.8, 3694.0], [15.9, 3718.0], [16.0, 3719.0], [16.1, 3775.0], [16.2, 3785.0], [16.3, 3790.0], [16.4, 3790.0], [16.5, 3799.0], [16.6, 3883.0], [16.7, 3896.0], [16.8, 3915.0], [16.9, 3928.0], [17.0, 3942.0], [17.1, 3961.0], [17.2, 3979.0], [17.3, 3983.0], [17.4, 4004.0], [17.5, 4103.0], [17.6, 4121.0], [17.7, 4134.0], [17.8, 4142.0], [17.9, 4186.0], [18.0, 4196.0], [18.1, 4202.0], [18.2, 4241.0], [18.3, 4242.0], [18.4, 4242.0], [18.5, 4249.0], [18.6, 4252.0], [18.7, 4297.0], [18.8, 4315.0], [18.9, 4332.0], [19.0, 4348.0], [19.1, 4403.0], [19.2, 4406.0], [19.3, 4410.0], [19.4, 4414.0], [19.5, 4482.0], [19.6, 4524.0], [19.7, 4530.0], [19.8, 4534.0], [19.9, 4546.0], [20.0, 4547.0], [20.1, 4555.0], [20.2, 4561.0], [20.3, 4568.0], [20.4, 4613.0], [20.5, 4613.0], [20.6, 4644.0], [20.7, 4654.0], [20.8, 4679.0], [20.9, 4694.0], [21.0, 4696.0], [21.1, 4705.0], [21.2, 4726.0], [21.3, 4743.0], [21.4, 4761.0], [21.5, 4775.0], [21.6, 4793.0], [21.7, 4806.0], [21.8, 4809.0], [21.9, 4813.0], [22.0, 4843.0], [22.1, 4921.0], [22.2, 4938.0], [22.3, 4949.0], [22.4, 5010.0], [22.5, 5010.0], [22.6, 5071.0], [22.7, 5091.0], [22.8, 5099.0], [22.9, 5139.0], [23.0, 5174.0], [23.1, 5175.0], [23.2, 5194.0], [23.3, 5264.0], [23.4, 5275.0], [23.5, 5292.0], [23.6, 5297.0], [23.7, 5353.0], [23.8, 5419.0], [23.9, 5458.0], [24.0, 5465.0], [24.1, 5467.0], [24.2, 5470.0], [24.3, 5494.0], [24.4, 5495.0], [24.5, 5495.0], [24.6, 5613.0], [24.7, 5627.0], [24.8, 5642.0], [24.9, 5679.0], [25.0, 5685.0], [25.1, 5693.0], [25.2, 5714.0], [25.3, 5724.0], [25.4, 5771.0], [25.5, 5814.0], [25.6, 5847.0], [25.7, 5848.0], [25.8, 5884.0], [25.9, 5897.0], [26.0, 5898.0], [26.1, 5901.0], [26.2, 5936.0], [26.3, 5971.0], [26.4, 5979.0], [26.5, 5985.0], [26.6, 5985.0], [26.7, 5988.0], [26.8, 5991.0], [26.9, 6010.0], [27.0, 6049.0], [27.1, 6069.0], [27.2, 6072.0], [27.3, 6073.0], [27.4, 6082.0], [27.5, 6087.0], [27.6, 6102.0], [27.7, 6205.0], [27.8, 6271.0], [27.9, 6278.0], [28.0, 6327.0], [28.1, 6347.0], [28.2, 6351.0], [28.3, 6360.0], [28.4, 6376.0], [28.5, 6377.0], [28.6, 6377.0], [28.7, 6447.0], [28.8, 6501.0], [28.9, 6501.0], [29.0, 6515.0], [29.1, 6516.0], [29.2, 6540.0], [29.3, 6670.0], [29.4, 6682.0], [29.5, 6702.0], [29.6, 6763.0], [29.7, 6777.0], [29.8, 6792.0], [29.9, 6806.0], [30.0, 6837.0], [30.1, 6851.0], [30.2, 6869.0], [30.3, 6996.0], [30.4, 7014.0], [30.5, 7015.0], [30.6, 7028.0], [30.7, 7028.0], [30.8, 7104.0], [30.9, 7112.0], [31.0, 7119.0], [31.1, 7186.0], [31.2, 7210.0], [31.3, 7212.0], [31.4, 7221.0], [31.5, 7255.0], [31.6, 7307.0], [31.7, 7307.0], [31.8, 7337.0], [31.9, 7338.0], [32.0, 7419.0], [32.1, 7424.0], [32.2, 7444.0], [32.3, 7453.0], [32.4, 7499.0], [32.5, 7539.0], [32.6, 7550.0], [32.7, 7550.0], [32.8, 7639.0], [32.9, 7666.0], [33.0, 7693.0], [33.1, 7697.0], [33.2, 7708.0], [33.3, 7851.0], [33.4, 7902.0], [33.5, 7925.0], [33.6, 7945.0], [33.7, 7995.0], [33.8, 8009.0], [33.9, 8012.0], [34.0, 8033.0], [34.1, 8040.0], [34.2, 8052.0], [34.3, 8069.0], [34.4, 8190.0], [34.5, 8221.0], [34.6, 8269.0], [34.7, 8269.0], [34.8, 8293.0], [34.9, 8445.0], [35.0, 8471.0], [35.1, 8497.0], [35.2, 8542.0], [35.3, 8559.0], [35.4, 8566.0], [35.5, 8629.0], [35.6, 8631.0], [35.7, 8684.0], [35.8, 8695.0], [35.9, 8705.0], [36.0, 8714.0], [36.1, 8810.0], [36.2, 8828.0], [36.3, 8840.0], [36.4, 8894.0], [36.5, 8903.0], [36.6, 8954.0], [36.7, 8965.0], [36.8, 8965.0], [36.9, 9142.0], [37.0, 9166.0], [37.1, 9189.0], [37.2, 9199.0], [37.3, 9286.0], [37.4, 9315.0], [37.5, 9317.0], [37.6, 9317.0], [37.7, 9363.0], [37.8, 9395.0], [37.9, 9449.0], [38.0, 9457.0], [38.1, 9503.0], [38.2, 9533.0], [38.3, 9567.0], [38.4, 9579.0], [38.5, 9587.0], [38.6, 9617.0], [38.7, 9645.0], [38.8, 9645.0], [38.9, 9685.0], [39.0, 9728.0], [39.1, 9789.0], [39.2, 9840.0], [39.3, 9848.0], [39.4, 9879.0], [39.5, 9889.0], [39.6, 9951.0], [39.7, 9965.0], [39.8, 9966.0], [39.9, 9974.0], [40.0, 9987.0], [40.1, 10035.0], [40.2, 10036.0], [40.3, 10078.0], [40.4, 10113.0], [40.5, 10136.0], [40.6, 10173.0], [40.7, 10179.0], [40.8, 10252.0], [40.9, 10252.0], [41.0, 10383.0], [41.1, 10395.0], [41.2, 10395.0], [41.3, 10508.0], [41.4, 10587.0], [41.5, 10663.0], [41.6, 10686.0], [41.7, 10717.0], [41.8, 10717.0], [41.9, 10780.0], [42.0, 10845.0], [42.1, 10904.0], [42.2, 10906.0], [42.3, 10951.0], [42.4, 10956.0], [42.5, 10974.0], [42.6, 10991.0], [42.7, 11063.0], [42.8, 11085.0], [42.9, 11085.0], [43.0, 11135.0], [43.1, 11163.0], [43.2, 11174.0], [43.3, 11214.0], [43.4, 11229.0], [43.5, 11250.0], [43.6, 11259.0], [43.7, 11265.0], [43.8, 11276.0], [43.9, 11347.0], [44.0, 11456.0], [44.1, 11530.0], [44.2, 11572.0], [44.3, 11609.0], [44.4, 11619.0], [44.5, 11638.0], [44.6, 11722.0], [44.7, 11913.0], [44.8, 11935.0], [44.9, 11935.0], [45.0, 11965.0], [45.1, 11969.0], [45.2, 11984.0], [45.3, 11995.0], [45.4, 12003.0], [45.5, 12011.0], [45.6, 12013.0], [45.7, 12082.0], [45.8, 12183.0], [45.9, 12186.0], [46.0, 12190.0], [46.1, 12257.0], [46.2, 12277.0], [46.3, 12279.0], [46.4, 12329.0], [46.5, 12330.0], [46.6, 12382.0], [46.7, 12436.0], [46.8, 12481.0], [46.9, 12495.0], [47.0, 12495.0], [47.1, 12501.0], [47.2, 12593.0], [47.3, 12622.0], [47.4, 12623.0], [47.5, 12677.0], [47.6, 12691.0], [47.7, 12831.0], [47.8, 12857.0], [47.9, 12864.0], [48.0, 12932.0], [48.1, 12987.0], [48.2, 12994.0], [48.3, 13027.0], [48.4, 13046.0], [48.5, 13092.0], [48.6, 13095.0], [48.7, 13133.0], [48.8, 13137.0], [48.9, 13146.0], [49.0, 13146.0], [49.1, 13150.0], [49.2, 13152.0], [49.3, 13286.0], [49.4, 13389.0], [49.5, 13407.0], [49.6, 13422.0], [49.7, 13601.0], [49.8, 13691.0], [49.9, 13719.0], [50.0, 13731.0], [50.1, 13776.0], [50.2, 13802.0], [50.3, 13802.0], [50.4, 13834.0], [50.5, 13856.0], [50.6, 13918.0], [50.7, 13964.0], [50.8, 13992.0], [50.9, 14032.0], [51.0, 14055.0], [51.1, 14055.0], [51.2, 14066.0], [51.3, 14101.0], [51.4, 14136.0], [51.5, 14182.0], [51.6, 14185.0], [51.7, 14201.0], [51.8, 14202.0], [51.9, 14229.0], [52.0, 14349.0], [52.1, 14531.0], [52.2, 14543.0], [52.3, 14585.0], [52.4, 14640.0], [52.5, 14726.0], [52.6, 14726.0], [52.7, 14737.0], [52.8, 14763.0], [52.9, 14783.0], [53.0, 14956.0], [53.1, 14956.0], [53.2, 14981.0], [53.3, 15015.0], [53.4, 15066.0], [53.5, 15094.0], [53.6, 15220.0], [53.7, 15302.0], [53.8, 15335.0], [53.9, 15345.0], [54.0, 15364.0], [54.1, 15386.0], [54.2, 15443.0], [54.3, 15537.0], [54.4, 15548.0], [54.5, 15597.0], [54.6, 15609.0], [54.7, 15729.0], [54.8, 15761.0], [54.9, 15793.0], [55.0, 15798.0], [55.1, 15887.0], [55.2, 15887.0], [55.3, 15971.0], [55.4, 15985.0], [55.5, 16014.0], [55.6, 16034.0], [55.7, 16071.0], [55.8, 16074.0], [55.9, 16074.0], [56.0, 16076.0], [56.1, 16077.0], [56.2, 16113.0], [56.3, 16135.0], [56.4, 16306.0], [56.5, 16425.0], [56.6, 16480.0], [56.7, 16498.0], [56.8, 16562.0], [56.9, 16641.0], [57.0, 16664.0], [57.1, 16676.0], [57.2, 16676.0], [57.3, 16739.0], [57.4, 16942.0], [57.5, 16968.0], [57.6, 17046.0], [57.7, 17078.0], [57.8, 17156.0], [57.9, 17176.0], [58.0, 17189.0], [58.1, 17198.0], [58.2, 17218.0], [58.3, 17265.0], [58.4, 17297.0], [58.5, 17307.0], [58.6, 17386.0], [58.7, 17479.0], [58.8, 17481.0], [58.9, 17483.0], [59.0, 17574.0], [59.1, 17635.0], [59.2, 17635.0], [59.3, 17702.0], [59.4, 17771.0], [59.5, 17930.0], [59.6, 17960.0], [59.7, 17970.0], [59.8, 18119.0], [59.9, 18169.0], [60.0, 18243.0], [60.1, 18272.0], [60.2, 18371.0], [60.3, 18393.0], [60.4, 18432.0], [60.5, 18469.0], [60.6, 18520.0], [60.7, 18577.0], [60.8, 18604.0], [60.9, 18611.0], [61.0, 18699.0], [61.1, 18711.0], [61.2, 18748.0], [61.3, 18748.0], [61.4, 18788.0], [61.5, 18848.0], [61.6, 18876.0], [61.7, 19125.0], [61.8, 19164.0], [61.9, 19231.0], [62.0, 19239.0], [62.1, 19303.0], [62.2, 19358.0], [62.3, 19424.0], [62.4, 19465.0], [62.5, 19486.0], [62.6, 19503.0], [62.7, 19509.0], [62.8, 19583.0], [62.9, 19636.0], [63.0, 19708.0], [63.1, 19756.0], [63.2, 19845.0], [63.3, 19845.0], [63.4, 19845.0], [63.5, 19943.0], [63.6, 19960.0], [63.7, 20039.0], [63.8, 20073.0], [63.9, 20188.0], [64.0, 20213.0], [64.1, 20228.0], [64.2, 20275.0], [64.3, 20298.0], [64.4, 20345.0], [64.5, 20361.0], [64.6, 20552.0], [64.7, 20683.0], [64.8, 20700.0], [64.9, 20753.0], [65.0, 20760.0], [65.1, 20798.0], [65.2, 20849.0], [65.3, 20922.0], [65.4, 20922.0], [65.5, 21055.0], [65.6, 21068.0], [65.7, 21088.0], [65.8, 21135.0], [65.9, 21165.0], [66.0, 21170.0], [66.1, 21195.0], [66.2, 21540.0], [66.3, 21547.0], [66.4, 21559.0], [66.5, 21561.0], [66.6, 21585.0], [66.7, 21690.0], [66.8, 21819.0], [66.9, 21885.0], [67.0, 21989.0], [67.1, 22035.0], [67.2, 22080.0], [67.3, 22103.0], [67.4, 22103.0], [67.5, 22130.0], [67.6, 22136.0], [67.7, 22141.0], [67.8, 22163.0], [67.9, 22364.0], [68.0, 22575.0], [68.1, 22599.0], [68.2, 22603.0], [68.3, 22647.0], [68.4, 22674.0], [68.5, 22838.0], [68.6, 22846.0], [68.7, 23026.0], [68.8, 23080.0], [68.9, 23095.0], [69.0, 23120.0], [69.1, 23134.0], [69.2, 23231.0], [69.3, 23267.0], [69.4, 23267.0], [69.5, 23268.0], [69.6, 23275.0], [69.7, 23454.0], [69.8, 23527.0], [69.9, 23551.0], [70.0, 23556.0], [70.1, 23637.0], [70.2, 23657.0], [70.3, 23689.0], [70.4, 23740.0], [70.5, 23788.0], [70.6, 23895.0], [70.7, 23905.0], [70.8, 24027.0], [70.9, 24127.0], [71.0, 24174.0], [71.1, 24214.0], [71.2, 24416.0], [71.3, 24482.0], [71.4, 24487.0], [71.5, 24487.0], [71.6, 24501.0], [71.7, 24549.0], [71.8, 24659.0], [71.9, 24823.0], [72.0, 24850.0], [72.1, 24902.0], [72.2, 25022.0], [72.3, 25056.0], [72.4, 25119.0], [72.5, 25120.0], [72.6, 25160.0], [72.7, 25262.0], [72.8, 25324.0], [72.9, 25420.0], [73.0, 25426.0], [73.1, 25441.0], [73.2, 25468.0], [73.3, 25519.0], [73.4, 25736.0], [73.5, 25736.0], [73.6, 25765.0], [73.7, 25916.0], [73.8, 26010.0], [73.9, 26164.0], [74.0, 26175.0], [74.1, 26191.0], [74.2, 26203.0], [74.3, 26391.0], [74.4, 26422.0], [74.5, 26452.0], [74.6, 26641.0], [74.7, 26651.0], [74.8, 26663.0], [74.9, 26714.0], [75.0, 26863.0], [75.1, 26930.0], [75.2, 26960.0], [75.3, 27067.0], [75.4, 27086.0], [75.5, 27174.0], [75.6, 27174.0], [75.7, 27211.0], [75.8, 27389.0], [75.9, 27392.0], [76.0, 27418.0], [76.1, 27453.0], [76.2, 27533.0], [76.3, 27543.0], [76.4, 27744.0], [76.5, 27787.0], [76.6, 27820.0], [76.7, 27912.0], [76.8, 27959.0], [76.9, 28032.0], [77.0, 28034.0], [77.1, 28207.0], [77.2, 28217.0], [77.3, 28222.0], [77.4, 28243.0], [77.5, 28555.0], [77.6, 28555.0], [77.7, 28765.0], [77.8, 28842.0], [77.9, 28886.0], [78.0, 28909.0], [78.1, 28943.0], [78.2, 29058.0], [78.3, 29058.0], [78.4, 29151.0], [78.5, 29214.0], [78.6, 29255.0], [78.7, 29311.0], [78.8, 29339.0], [78.9, 29368.0], [79.0, 29502.0], [79.1, 29569.0], [79.2, 29575.0], [79.3, 29660.0], [79.4, 29664.0], [79.5, 29702.0], [79.6, 29702.0], [79.7, 29749.0], [79.8, 29925.0], [79.9, 29940.0], [80.0, 30030.0], [80.1, 30164.0], [80.2, 30231.0], [80.3, 30585.0], [80.4, 30658.0], [80.5, 30727.0], [80.6, 30776.0], [80.7, 30813.0], [80.8, 30865.0], [80.9, 30902.0], [81.0, 30981.0], [81.1, 31119.0], [81.2, 31197.0], [81.3, 31358.0], [81.4, 31380.0], [81.5, 31422.0], [81.6, 31475.0], [81.7, 31475.0], [81.8, 31495.0], [81.9, 31610.0], [82.0, 31678.0], [82.1, 31745.0], [82.2, 31925.0], [82.3, 32019.0], [82.4, 32039.0], [82.5, 32072.0], [82.6, 32082.0], [82.7, 32281.0], [82.8, 32340.0], [82.9, 32352.0], [83.0, 32434.0], [83.1, 32474.0], [83.2, 32810.0], [83.3, 32858.0], [83.4, 32861.0], [83.5, 33015.0], [83.6, 33038.0], [83.7, 33038.0], [83.8, 33052.0], [83.9, 33136.0], [84.0, 33166.0], [84.1, 33449.0], [84.2, 33724.0], [84.3, 33958.0], [84.4, 34048.0], [84.5, 34090.0], [84.6, 34141.0], [84.7, 34297.0], [84.8, 34303.0], [84.9, 34338.0], [85.0, 34405.0], [85.1, 34435.0], [85.2, 34514.0], [85.3, 34526.0], [85.4, 34591.0], [85.5, 35085.0], [85.6, 35091.0], [85.7, 35283.0], [85.8, 35283.0], [85.9, 35461.0], [86.0, 35484.0], [86.1, 35585.0], [86.2, 35589.0], [86.3, 35727.0], [86.4, 35826.0], [86.5, 35874.0], [86.6, 35957.0], [86.7, 35962.0], [86.8, 36026.0], [86.9, 36029.0], [87.0, 36044.0], [87.1, 36107.0], [87.2, 36327.0], [87.3, 36377.0], [87.4, 36460.0], [87.5, 36704.0], [87.6, 36706.0], [87.7, 36946.0], [87.8, 36946.0], [87.9, 37103.0], [88.0, 37342.0], [88.1, 37349.0], [88.2, 37431.0], [88.3, 37453.0], [88.4, 37489.0], [88.5, 37498.0], [88.6, 37573.0], [88.7, 37625.0], [88.8, 37765.0], [88.9, 37887.0], [89.0, 38226.0], [89.1, 38328.0], [89.2, 38419.0], [89.3, 38429.0], [89.4, 38445.0], [89.5, 38447.0], [89.6, 38726.0], [89.7, 38758.0], [89.8, 38758.0], [89.9, 38826.0], [90.0, 38872.0], [90.1, 38881.0], [90.2, 38913.0], [90.3, 39141.0], [90.4, 39323.0], [90.5, 39449.0], [90.6, 39614.0], [90.7, 39631.0], [90.8, 39685.0], [90.9, 39770.0], [91.0, 39993.0], [91.1, 40249.0], [91.2, 40270.0], [91.3, 40386.0], [91.4, 40398.0], [91.5, 40412.0], [91.6, 40457.0], [91.7, 40653.0], [91.8, 40800.0], [91.9, 40800.0], [92.0, 41002.0], [92.1, 41338.0], [92.2, 41505.0], [92.3, 41615.0], [92.4, 41730.0], [92.5, 41772.0], [92.6, 41806.0], [92.7, 41821.0], [92.8, 42070.0], [92.9, 42093.0], [93.0, 42105.0], [93.1, 42114.0], [93.2, 42629.0], [93.3, 42663.0], [93.4, 42727.0], [93.5, 42995.0], [93.6, 43035.0], [93.7, 43391.0], [93.8, 43697.0], [93.9, 43697.0], [94.0, 43736.0], [94.1, 43764.0], [94.2, 44025.0], [94.3, 44217.0], [94.4, 44418.0], [94.5, 44767.0], [94.6, 45197.0], [94.7, 45317.0], [94.8, 45374.0], [94.9, 45616.0], [95.0, 45641.0], [95.1, 45643.0], [95.2, 46021.0], [95.3, 46235.0], [95.4, 46471.0], [95.5, 46563.0], [95.6, 46591.0], [95.7, 46752.0], [95.8, 46888.0], [95.9, 47181.0], [96.0, 47181.0], [96.1, 47282.0], [96.2, 47679.0], [96.3, 47802.0], [96.4, 47865.0], [96.5, 47930.0], [96.6, 48066.0], [96.7, 48480.0], [96.8, 48745.0], [96.9, 49551.0], [97.0, 49595.0], [97.1, 49792.0], [97.2, 49822.0], [97.3, 50109.0], [97.4, 50353.0], [97.5, 50356.0], [97.6, 50581.0], [97.7, 50650.0], [97.8, 50889.0], [97.9, 51329.0], [98.0, 51329.0], [98.1, 51459.0], [98.2, 51632.0], [98.3, 51662.0], [98.4, 51958.0], [98.5, 52132.0], [98.6, 52614.0], [98.7, 53140.0], [98.8, 53338.0], [98.9, 53461.0], [99.0, 53521.0], [99.1, 53728.0], [99.2, 54324.0], [99.3, 54435.0], [99.4, 54481.0], [99.5, 54587.0], [99.6, 55541.0], [99.7, 55693.0], [99.8, 56422.0], [99.9, 58007.0], [100.0, 58007.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 11.0, "series": [{"data": [[34500.0, 3.0], [34100.0, 1.0], [33700.0, 1.0], [35700.0, 1.0], [36100.0, 1.0], [37300.0, 2.0], [38900.0, 1.0], [37700.0, 1.0], [36900.0, 1.0], [39700.0, 1.0], [39300.0, 1.0], [41700.0, 2.0], [41300.0, 1.0], [42900.0, 1.0], [42100.0, 2.0], [43300.0, 1.0], [43700.0, 2.0], [45300.0, 2.0], [46500.0, 2.0], [50100.0, 1.0], [50500.0, 1.0], [49700.0, 1.0], [51300.0, 1.0], [52100.0, 1.0], [53300.0, 1.0], [54500.0, 1.0], [53700.0, 1.0], [800.0, 3.0], [900.0, 9.0], [1000.0, 9.0], [1100.0, 9.0], [1200.0, 11.0], [1300.0, 6.0], [1400.0, 5.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 5.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 2.0], [2300.0, 7.0], [2200.0, 4.0], [2400.0, 3.0], [2500.0, 5.0], [2600.0, 3.0], [2700.0, 3.0], [2800.0, 9.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 7.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 4.0], [3500.0, 3.0], [3600.0, 4.0], [3700.0, 6.0], [3800.0, 2.0], [3900.0, 6.0], [4000.0, 1.0], [4100.0, 6.0], [4300.0, 3.0], [4200.0, 6.0], [4400.0, 5.0], [4500.0, 8.0], [4600.0, 6.0], [4700.0, 6.0], [4800.0, 4.0], [5000.0, 4.0], [5100.0, 4.0], [4900.0, 3.0], [5200.0, 4.0], [5300.0, 1.0], [5400.0, 7.0], [5600.0, 6.0], [5700.0, 3.0], [5800.0, 6.0], [5900.0, 7.0], [6000.0, 7.0], [6100.0, 1.0], [6300.0, 6.0], [6200.0, 3.0], [6500.0, 5.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 4.0], [6700.0, 4.0], [6900.0, 1.0], [7100.0, 4.0], [7000.0, 3.0], [7200.0, 4.0], [7300.0, 4.0], [7400.0, 5.0], [7600.0, 4.0], [7500.0, 2.0], [7900.0, 4.0], [7700.0, 1.0], [7800.0, 1.0], [8000.0, 6.0], [8100.0, 1.0], [8400.0, 3.0], [8500.0, 3.0], [8600.0, 4.0], [8200.0, 3.0], [8700.0, 2.0], [8800.0, 4.0], [9100.0, 4.0], [8900.0, 3.0], [9200.0, 1.0], [9700.0, 2.0], [9500.0, 5.0], [9300.0, 5.0], [9600.0, 3.0], [9400.0, 2.0], [9900.0, 5.0], [10100.0, 4.0], [9800.0, 4.0], [10200.0, 1.0], [10000.0, 3.0], [10700.0, 3.0], [10600.0, 2.0], [10500.0, 2.0], [10300.0, 3.0], [10900.0, 6.0], [11200.0, 6.0], [11100.0, 3.0], [10800.0, 1.0], [11000.0, 2.0], [11300.0, 1.0], [11400.0, 1.0], [11600.0, 3.0], [11500.0, 2.0], [11700.0, 1.0], [11900.0, 6.0], [12100.0, 3.0], [12200.0, 3.0], [12000.0, 4.0], [12400.0, 3.0], [12500.0, 2.0], [12600.0, 4.0], [12300.0, 3.0], [13000.0, 4.0], [13100.0, 5.0], [13300.0, 1.0], [12900.0, 3.0], [13200.0, 1.0], [12800.0, 3.0], [13800.0, 4.0], [13700.0, 3.0], [13600.0, 2.0], [13400.0, 2.0], [14300.0, 1.0], [13900.0, 3.0], [14200.0, 3.0], [14000.0, 3.0], [14100.0, 4.0], [14700.0, 5.0], [14500.0, 3.0], [14600.0, 1.0], [15000.0, 3.0], [14900.0, 2.0], [15300.0, 5.0], [15200.0, 1.0], [15700.0, 4.0], [15500.0, 3.0], [15600.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [16000.0, 7.0], [16100.0, 2.0], [16300.0, 1.0], [15900.0, 2.0], [16600.0, 3.0], [16400.0, 3.0], [17000.0, 2.0], [17400.0, 3.0], [17200.0, 3.0], [18200.0, 2.0], [17600.0, 1.0], [18400.0, 2.0], [18800.0, 2.0], [18600.0, 3.0], [19400.0, 3.0], [19200.0, 2.0], [20200.0, 4.0], [20000.0, 2.0], [19600.0, 1.0], [19800.0, 2.0], [20800.0, 1.0], [21000.0, 3.0], [20600.0, 1.0], [22000.0, 2.0], [21800.0, 2.0], [21600.0, 1.0], [22600.0, 3.0], [23000.0, 3.0], [23400.0, 1.0], [23200.0, 4.0], [22800.0, 2.0], [24400.0, 3.0], [23600.0, 3.0], [23800.0, 1.0], [24200.0, 1.0], [24000.0, 1.0], [25400.0, 4.0], [25200.0, 1.0], [25000.0, 2.0], [24800.0, 2.0], [24600.0, 1.0], [26400.0, 2.0], [26600.0, 3.0], [26200.0, 1.0], [26000.0, 1.0], [27400.0, 2.0], [26800.0, 1.0], [27000.0, 2.0], [27200.0, 1.0], [28200.0, 4.0], [28000.0, 2.0], [27800.0, 1.0], [29200.0, 2.0], [29600.0, 2.0], [29000.0, 2.0], [28800.0, 2.0], [30600.0, 1.0], [30200.0, 1.0], [30000.0, 1.0], [31600.0, 2.0], [30800.0, 2.0], [31400.0, 3.0], [32200.0, 1.0], [32000.0, 4.0], [32400.0, 2.0], [32800.0, 3.0], [34000.0, 2.0], [34400.0, 2.0], [36000.0, 3.0], [36400.0, 1.0], [35200.0, 1.0], [38800.0, 3.0], [37600.0, 1.0], [38400.0, 4.0], [40400.0, 2.0], [39600.0, 3.0], [40800.0, 1.0], [42000.0, 2.0], [41600.0, 1.0], [43600.0, 1.0], [44000.0, 1.0], [44400.0, 1.0], [46800.0, 1.0], [45600.0, 3.0], [46000.0, 1.0], [46400.0, 1.0], [47600.0, 1.0], [47200.0, 1.0], [48400.0, 1.0], [48000.0, 1.0], [50800.0, 1.0], [51600.0, 2.0], [54400.0, 2.0], [56400.0, 1.0], [55600.0, 1.0], [58000.0, 1.0], [33900.0, 1.0], [34300.0, 2.0], [33100.0, 2.0], [35500.0, 2.0], [36700.0, 2.0], [35900.0, 2.0], [36300.0, 2.0], [38300.0, 1.0], [38700.0, 2.0], [37100.0, 1.0], [37500.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [40300.0, 2.0], [41500.0, 1.0], [42700.0, 1.0], [44700.0, 1.0], [47100.0, 1.0], [46700.0, 1.0], [45100.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [50300.0, 2.0], [49500.0, 2.0], [51900.0, 1.0], [53100.0, 1.0], [53500.0, 1.0], [54300.0, 1.0], [55500.0, 1.0], [16900.0, 2.0], [17100.0, 4.0], [17300.0, 2.0], [16500.0, 1.0], [16700.0, 1.0], [18100.0, 2.0], [17700.0, 2.0], [17500.0, 1.0], [18300.0, 2.0], [17900.0, 3.0], [18700.0, 3.0], [19300.0, 2.0], [19100.0, 2.0], [18500.0, 2.0], [20300.0, 2.0], [20100.0, 1.0], [19700.0, 2.0], [19900.0, 2.0], [19500.0, 3.0], [21100.0, 4.0], [20500.0, 1.0], [20700.0, 4.0], [21500.0, 5.0], [20900.0, 1.0], [22500.0, 2.0], [22100.0, 5.0], [22300.0, 1.0], [21900.0, 1.0], [23100.0, 2.0], [23500.0, 3.0], [24100.0, 2.0], [23700.0, 2.0], [24500.0, 2.0], [23900.0, 1.0], [25100.0, 3.0], [24900.0, 1.0], [25300.0, 1.0], [25500.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [26300.0, 1.0], [26100.0, 3.0], [26900.0, 2.0], [26700.0, 1.0], [27500.0, 2.0], [27100.0, 1.0], [27300.0, 2.0], [27900.0, 2.0], [28500.0, 1.0], [27700.0, 2.0], [29300.0, 3.0], [29500.0, 3.0], [29100.0, 1.0], [28900.0, 2.0], [28700.0, 1.0], [30100.0, 1.0], [29700.0, 2.0], [30700.0, 2.0], [29900.0, 2.0], [30500.0, 1.0], [31100.0, 2.0], [31300.0, 2.0], [30900.0, 2.0], [31700.0, 1.0], [31900.0, 1.0], [32300.0, 2.0], [33000.0, 3.0], [33400.0, 1.0], [34200.0, 1.0], [35000.0, 2.0], [35400.0, 2.0], [35800.0, 2.0], [37400.0, 4.0], [37800.0, 1.0], [38200.0, 1.0], [40200.0, 2.0], [39400.0, 1.0], [40600.0, 1.0], [41800.0, 2.0], [41000.0, 1.0], [42600.0, 2.0], [43000.0, 1.0], [44200.0, 1.0], [46200.0, 1.0], [47800.0, 2.0], [50600.0, 1.0], [49800.0, 1.0], [51400.0, 1.0], [52600.0, 1.0], [53400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 58000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 52.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 899.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 52.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 899.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.163398692810453, "minX": 1.6512168E12, "maxY": 78.12121212121214, "series": [{"data": [[1.65121704E12, 78.12121212121214], [1.6512171E12, 56.73049645390069], [1.65121692E12, 45.537037037037024], [1.65121698E12, 63.81481481481481], [1.6512168E12, 13.163398692810453], [1.65121686E12, 28.791666666666664]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512171E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3946.383720930232, "minX": 1.0, "maxY": 53728.0, "series": [{"data": [[2.0, 52614.0], [3.0, 20395.0], [4.0, 17710.0], [5.0, 19742.5], [6.0, 25459.5], [7.0, 13019.333333333334], [8.0, 24556.5], [9.0, 13298.666666666666], [10.0, 3946.383720930232], [11.0, 17556.0], [12.0, 25197.0], [13.0, 12228.333333333334], [14.0, 23738.0], [15.0, 12781.666666666666], [16.0, 22587.5], [17.0, 14669.5], [18.0, 22627.5], [19.0, 11563.333333333332], [20.0, 6836.199999999999], [21.0, 13263.333333333332], [22.0, 23069.5], [23.0, 14472.666666666666], [24.0, 24275.0], [25.0, 13687.333333333334], [26.0, 16122.333333333334], [27.0, 7990.5], [28.0, 12025.666666666666], [29.0, 29293.5], [30.0, 9805.599999999995], [31.0, 22781.0], [32.0, 15501.333333333332], [33.0, 32202.5], [34.0, 19360.5], [35.0, 24918.0], [36.0, 20029.0], [37.0, 25221.0], [38.0, 18905.0], [39.0, 26545.666666666664], [40.0, 13669.599999999997], [41.0, 37251.5], [42.0, 8531.0], [43.0, 24665.5], [44.0, 9446.0], [45.0, 23603.5], [46.0, 10515.333333333332], [47.0, 24025.0], [48.0, 13023.0], [49.0, 19367.666666666664], [50.0, 16638.36144578313], [51.0, 25051.5], [52.0, 8323.5], [53.0, 25263.5], [54.0, 8333.0], [55.0, 25281.0], [56.0, 7704.0], [57.0, 20027.666666666668], [59.0, 20718.333333333332], [58.0, 4348.0], [60.0, 21614.48780487804], [61.0, 31981.0], [62.0, 31204.0], [63.0, 16819.0], [64.0, 36122.2], [65.0, 42925.0], [66.0, 23170.0], [67.0, 29256.5], [68.0, 37911.666666666664], [69.0, 24206.0], [70.0, 20980.488095238095], [71.0, 20211.0], [72.0, 38992.5], [73.0, 28079.4], [74.0, 24140.6], [75.0, 29270.333333333332], [76.0, 23163.8], [77.0, 27986.0], [78.0, 20469.666666666668], [79.0, 24624.5], [80.0, 27049.235632183896], [1.0, 53728.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[47.79705573080964, 17501.110410094643]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 364.25, "minX": 1.6512168E12, "maxY": 491.1, "series": [{"data": [[1.65121704E12, 483.55], [1.6512171E12, 413.31666666666666], [1.65121692E12, 474.31666666666666], [1.65121698E12, 474.55], [1.6512168E12, 446.18333333333334], [1.65121686E12, 491.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65121704E12, 426.25], [1.6512171E12, 364.25], [1.65121692E12, 418.5], [1.65121698E12, 418.5], [1.6512168E12, 395.25], [1.65121686E12, 434.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512171E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4060.986928104577, "minX": 1.6512168E12, "maxY": 30949.269503546107, "series": [{"data": [[1.65121704E12, 26447.660606060606], [1.6512171E12, 30949.269503546107], [1.65121692E12, 15101.401234567898], [1.65121698E12, 20649.030864197524], [1.6512168E12, 4060.986928104577], [1.65121686E12, 8946.095238095235]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512171E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4060.9346405228775, "minX": 1.6512168E12, "maxY": 30949.219858156026, "series": [{"data": [[1.65121704E12, 26447.654545454534], [1.6512171E12, 30949.219858156026], [1.65121692E12, 15101.370370370369], [1.65121698E12, 20648.999999999993], [1.6512168E12, 4060.9346405228775], [1.65121686E12, 8946.029761904765]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512171E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.413580246913578, "minX": 1.6512168E12, "maxY": 13.522875816993468, "series": [{"data": [[1.65121704E12, 8.06666666666667], [1.6512171E12, 8.439716312056742], [1.65121692E12, 7.685185185185189], [1.65121698E12, 7.413580246913578], [1.6512168E12, 13.522875816993468], [1.65121686E12, 9.928571428571427]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512171E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 810.0, "minX": 1.6512168E12, "maxY": 58007.0, "series": [{"data": [[1.65121704E12, 54481.0], [1.6512171E12, 58007.0], [1.65121692E12, 32281.0], [1.65121698E12, 41772.0], [1.6512168E12, 12495.0], [1.65121686E12, 20361.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65121704E12, 46441.8], [1.6512171E12, 51656.0], [1.65121692E12, 26412.7], [1.65121698E12, 35993.0], [1.6512168E12, 7408.199999999998], [1.65121686E12, 16602.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65121704E12, 53807.8], [1.6512171E12, 57341.30000000002], [1.65121692E12, 31598.080000000005], [1.65121698E12, 41603.79], [1.6512168E12, 11803.26000000001], [1.65121686E12, 20258.88]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65121704E12, 49941.59999999999], [1.6512171E12, 54264.4], [1.65121692E12, 28239.85], [1.65121698E12, 38222.549999999996], [1.6512168E12, 9591.499999999996], [1.65121686E12, 18445.399999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65121704E12, 940.0], [1.6512171E12, 1193.0], [1.65121692E12, 947.0], [1.65121698E12, 947.0], [1.6512168E12, 810.0], [1.65121686E12, 887.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65121704E12, 25736.0], [1.6512171E12, 32019.0], [1.65121692E12, 15158.5], [1.65121698E12, 20910.5], [1.6512168E12, 3718.0], [1.65121686E12, 8393.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512171E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13044.5, "minX": 1.0, "maxY": 52614.0, "series": [{"data": [[1.0, 52614.0], [4.0, 13059.5], [2.0, 15414.5], [3.0, 13044.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13044.5, "minX": 1.0, "maxY": 52614.0, "series": [{"data": [[1.0, 52614.0], [4.0, 13059.5], [2.0, 15414.5], [3.0, 13044.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0166666666666666, "minX": 1.6512168E12, "maxY": 3.1333333333333333, "series": [{"data": [[1.65121704E12, 2.9166666666666665], [1.6512171E12, 1.0166666666666666], [1.65121692E12, 2.9], [1.65121698E12, 3.0], [1.6512168E12, 2.8833333333333333], [1.65121686E12, 3.1333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512171E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.35, "minX": 1.6512168E12, "maxY": 2.8, "series": [{"data": [[1.65121704E12, 2.75], [1.6512171E12, 2.35], [1.65121692E12, 2.7], [1.65121698E12, 2.7], [1.6512168E12, 2.55], [1.65121686E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512171E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.35, "minX": 1.6512168E12, "maxY": 2.8, "series": [{"data": [[1.65121704E12, 2.75], [1.6512171E12, 2.35], [1.65121692E12, 2.7], [1.65121698E12, 2.7], [1.6512168E12, 2.55], [1.65121686E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512171E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.35, "minX": 1.6512168E12, "maxY": 2.8, "series": [{"data": [[1.65121704E12, 2.75], [1.6512171E12, 2.35], [1.65121692E12, 2.7], [1.65121698E12, 2.7], [1.6512168E12, 2.55], [1.65121686E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512171E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


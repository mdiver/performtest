/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 588.0, "minX": 0.0, "maxY": 52191.0, "series": [{"data": [[0.0, 588.0], [0.1, 588.0], [0.2, 810.0], [0.3, 829.0], [0.4, 847.0], [0.5, 890.0], [0.6, 895.0], [0.7, 941.0], [0.8, 949.0], [0.9, 966.0], [1.0, 988.0], [1.1, 989.0], [1.2, 994.0], [1.3, 1004.0], [1.4, 1013.0], [1.5, 1015.0], [1.6, 1023.0], [1.7, 1027.0], [1.8, 1028.0], [1.9, 1032.0], [2.0, 1032.0], [2.1, 1034.0], [2.2, 1041.0], [2.3, 1046.0], [2.4, 1059.0], [2.5, 1062.0], [2.6, 1089.0], [2.7, 1164.0], [2.8, 1164.0], [2.9, 1168.0], [3.0, 1170.0], [3.1, 1186.0], [3.2, 1215.0], [3.3, 1217.0], [3.4, 1218.0], [3.5, 1220.0], [3.6, 1223.0], [3.7, 1237.0], [3.8, 1267.0], [3.9, 1272.0], [4.0, 1272.0], [4.1, 1286.0], [4.2, 1309.0], [4.3, 1315.0], [4.4, 1329.0], [4.5, 1345.0], [4.6, 1350.0], [4.7, 1372.0], [4.8, 1400.0], [4.9, 1403.0], [5.0, 1403.0], [5.1, 1457.0], [5.2, 1475.0], [5.3, 1528.0], [5.4, 1542.0], [5.5, 1543.0], [5.6, 1567.0], [5.7, 1569.0], [5.8, 1584.0], [5.9, 1584.0], [6.0, 1624.0], [6.1, 1650.0], [6.2, 1655.0], [6.3, 1666.0], [6.4, 1709.0], [6.5, 1742.0], [6.6, 1767.0], [6.7, 1814.0], [6.8, 1824.0], [6.9, 1833.0], [7.0, 1867.0], [7.1, 1920.0], [7.2, 1934.0], [7.3, 1952.0], [7.4, 1965.0], [7.5, 1985.0], [7.6, 1989.0], [7.7, 2048.0], [7.8, 2065.0], [7.9, 2065.0], [8.0, 2089.0], [8.1, 2097.0], [8.2, 2118.0], [8.3, 2151.0], [8.4, 2160.0], [8.5, 2165.0], [8.6, 2197.0], [8.7, 2198.0], [8.8, 2202.0], [8.9, 2204.0], [9.0, 2208.0], [9.1, 2222.0], [9.2, 2281.0], [9.3, 2338.0], [9.4, 2357.0], [9.5, 2358.0], [9.6, 2376.0], [9.7, 2409.0], [9.8, 2425.0], [9.9, 2425.0], [10.0, 2498.0], [10.1, 2505.0], [10.2, 2520.0], [10.3, 2542.0], [10.4, 2557.0], [10.5, 2560.0], [10.6, 2586.0], [10.7, 2588.0], [10.8, 2609.0], [10.9, 2613.0], [11.0, 2629.0], [11.1, 2634.0], [11.2, 2644.0], [11.3, 2695.0], [11.4, 2700.0], [11.5, 2713.0], [11.6, 2716.0], [11.7, 2724.0], [11.8, 2724.0], [11.9, 2753.0], [12.0, 2759.0], [12.1, 2780.0], [12.2, 2827.0], [12.3, 2870.0], [12.4, 2870.0], [12.5, 2886.0], [12.6, 2920.0], [12.7, 2926.0], [12.8, 2967.0], [12.9, 2972.0], [13.0, 2979.0], [13.1, 3085.0], [13.2, 3117.0], [13.3, 3123.0], [13.4, 3153.0], [13.5, 3215.0], [13.6, 3216.0], [13.7, 3240.0], [13.8, 3240.0], [13.9, 3240.0], [14.0, 3261.0], [14.1, 3267.0], [14.2, 3319.0], [14.3, 3347.0], [14.4, 3352.0], [14.5, 3368.0], [14.6, 3407.0], [14.7, 3434.0], [14.8, 3444.0], [14.9, 3453.0], [15.0, 3454.0], [15.1, 3486.0], [15.2, 3504.0], [15.3, 3507.0], [15.4, 3517.0], [15.5, 3580.0], [15.6, 3597.0], [15.7, 3597.0], [15.8, 3614.0], [15.9, 3693.0], [16.0, 3700.0], [16.1, 3704.0], [16.2, 3717.0], [16.3, 3788.0], [16.4, 3801.0], [16.5, 3806.0], [16.6, 3830.0], [16.7, 3877.0], [16.8, 3892.0], [16.9, 3899.0], [17.0, 3921.0], [17.1, 3928.0], [17.2, 3948.0], [17.3, 3970.0], [17.4, 3981.0], [17.5, 4013.0], [17.6, 4067.0], [17.7, 4067.0], [17.8, 4069.0], [17.9, 4092.0], [18.0, 4117.0], [18.1, 4122.0], [18.2, 4127.0], [18.3, 4133.0], [18.4, 4139.0], [18.5, 4154.0], [18.6, 4165.0], [18.7, 4168.0], [18.8, 4199.0], [18.9, 4217.0], [19.0, 4224.0], [19.1, 4232.0], [19.2, 4235.0], [19.3, 4334.0], [19.4, 4335.0], [19.5, 4356.0], [19.6, 4400.0], [19.7, 4400.0], [19.8, 4405.0], [19.9, 4420.0], [20.0, 4437.0], [20.1, 4462.0], [20.2, 4470.0], [20.3, 4499.0], [20.4, 4572.0], [20.5, 4617.0], [20.6, 4717.0], [20.7, 4722.0], [20.8, 4727.0], [20.9, 4728.0], [21.0, 4741.0], [21.1, 4756.0], [21.2, 4799.0], [21.3, 4801.0], [21.4, 4833.0], [21.5, 4843.0], [21.6, 4843.0], [21.7, 4870.0], [21.8, 4879.0], [21.9, 4880.0], [22.0, 4887.0], [22.1, 4911.0], [22.2, 4953.0], [22.3, 4960.0], [22.4, 4971.0], [22.5, 5036.0], [22.6, 5037.0], [22.7, 5043.0], [22.8, 5044.0], [22.9, 5058.0], [23.0, 5079.0], [23.1, 5084.0], [23.2, 5092.0], [23.3, 5099.0], [23.4, 5109.0], [23.5, 5138.0], [23.6, 5138.0], [23.7, 5148.0], [23.8, 5192.0], [23.9, 5202.0], [24.0, 5228.0], [24.1, 5233.0], [24.2, 5350.0], [24.3, 5357.0], [24.4, 5384.0], [24.5, 5392.0], [24.6, 5422.0], [24.7, 5423.0], [24.8, 5460.0], [24.9, 5490.0], [25.0, 5503.0], [25.1, 5515.0], [25.2, 5529.0], [25.3, 5531.0], [25.4, 5546.0], [25.5, 5546.0], [25.6, 5580.0], [25.7, 5593.0], [25.8, 5598.0], [25.9, 5629.0], [26.0, 5690.0], [26.1, 5730.0], [26.2, 5732.0], [26.3, 5737.0], [26.4, 5741.0], [26.5, 5761.0], [26.6, 5798.0], [26.7, 5826.0], [26.8, 5849.0], [26.9, 5909.0], [27.0, 5930.0], [27.1, 5954.0], [27.2, 5985.0], [27.3, 5993.0], [27.4, 6013.0], [27.5, 6013.0], [27.6, 6020.0], [27.7, 6054.0], [27.8, 6075.0], [27.9, 6100.0], [28.0, 6138.0], [28.1, 6223.0], [28.2, 6238.0], [28.3, 6345.0], [28.4, 6350.0], [28.5, 6395.0], [28.6, 6410.0], [28.7, 6411.0], [28.8, 6431.0], [28.9, 6463.0], [29.0, 6492.0], [29.1, 6532.0], [29.2, 6549.0], [29.3, 6609.0], [29.4, 6613.0], [29.5, 6613.0], [29.6, 6625.0], [29.7, 6645.0], [29.8, 6697.0], [29.9, 6706.0], [30.0, 6720.0], [30.1, 6725.0], [30.2, 6742.0], [30.3, 6750.0], [30.4, 6763.0], [30.5, 6777.0], [30.6, 6792.0], [30.7, 6796.0], [30.8, 6866.0], [30.9, 6867.0], [31.0, 6979.0], [31.1, 7064.0], [31.2, 7100.0], [31.3, 7100.0], [31.4, 7100.0], [31.5, 7129.0], [31.6, 7146.0], [31.7, 7175.0], [31.8, 7255.0], [31.9, 7279.0], [32.0, 7285.0], [32.1, 7360.0], [32.2, 7361.0], [32.3, 7393.0], [32.4, 7397.0], [32.5, 7487.0], [32.6, 7534.0], [32.7, 7571.0], [32.8, 7596.0], [32.9, 7602.0], [33.0, 7676.0], [33.1, 7688.0], [33.2, 7692.0], [33.3, 7731.0], [33.4, 7731.0], [33.5, 7741.0], [33.6, 7763.0], [33.7, 7810.0], [33.8, 7872.0], [33.9, 7882.0], [34.0, 7909.0], [34.1, 7945.0], [34.2, 7958.0], [34.3, 8015.0], [34.4, 8069.0], [34.5, 8085.0], [34.6, 8110.0], [34.7, 8120.0], [34.8, 8139.0], [34.9, 8257.0], [35.0, 8297.0], [35.1, 8305.0], [35.2, 8335.0], [35.3, 8335.0], [35.4, 8366.0], [35.5, 8379.0], [35.6, 8394.0], [35.7, 8405.0], [35.8, 8443.0], [35.9, 8446.0], [36.0, 8461.0], [36.1, 8481.0], [36.2, 8537.0], [36.3, 8542.0], [36.4, 8546.0], [36.5, 8547.0], [36.6, 8603.0], [36.7, 8612.0], [36.8, 8682.0], [36.9, 8693.0], [37.0, 8711.0], [37.1, 8735.0], [37.2, 8817.0], [37.3, 8817.0], [37.4, 8831.0], [37.5, 8941.0], [37.6, 9224.0], [37.7, 9261.0], [37.8, 9291.0], [37.9, 9321.0], [38.0, 9346.0], [38.1, 9346.0], [38.2, 9348.0], [38.3, 9377.0], [38.4, 9397.0], [38.5, 9443.0], [38.6, 9498.0], [38.7, 9518.0], [38.8, 9527.0], [38.9, 9560.0], [39.0, 9585.0], [39.1, 9589.0], [39.2, 9669.0], [39.3, 9669.0], [39.4, 9670.0], [39.5, 9678.0], [39.6, 9723.0], [39.7, 9732.0], [39.8, 9765.0], [39.9, 9791.0], [40.0, 9801.0], [40.1, 9883.0], [40.2, 9974.0], [40.3, 10031.0], [40.4, 10043.0], [40.5, 10073.0], [40.6, 10091.0], [40.7, 10137.0], [40.8, 10157.0], [40.9, 10179.0], [41.0, 10181.0], [41.1, 10219.0], [41.2, 10219.0], [41.3, 10220.0], [41.4, 10243.0], [41.5, 10304.0], [41.6, 10320.0], [41.7, 10321.0], [41.8, 10321.0], [41.9, 10398.0], [42.0, 10422.0], [42.1, 10440.0], [42.2, 10458.0], [42.3, 10485.0], [42.4, 10597.0], [42.5, 10618.0], [42.6, 10646.0], [42.7, 10656.0], [42.8, 10701.0], [42.9, 10716.0], [43.0, 10732.0], [43.1, 10767.0], [43.2, 10767.0], [43.3, 10777.0], [43.4, 10797.0], [43.5, 10960.0], [43.6, 11010.0], [43.7, 11027.0], [43.8, 11039.0], [43.9, 11066.0], [44.0, 11102.0], [44.1, 11160.0], [44.2, 11175.0], [44.3, 11281.0], [44.4, 11291.0], [44.5, 11304.0], [44.6, 11383.0], [44.7, 11493.0], [44.8, 11512.0], [44.9, 11536.0], [45.0, 11566.0], [45.1, 11566.0], [45.2, 11594.0], [45.3, 11600.0], [45.4, 11632.0], [45.5, 11747.0], [45.6, 11755.0], [45.7, 11756.0], [45.8, 11787.0], [45.9, 11860.0], [46.0, 11892.0], [46.1, 11893.0], [46.2, 11931.0], [46.3, 11947.0], [46.4, 11979.0], [46.5, 11993.0], [46.6, 11996.0], [46.7, 12033.0], [46.8, 12037.0], [46.9, 12097.0], [47.0, 12228.0], [47.1, 12228.0], [47.2, 12273.0], [47.3, 12286.0], [47.4, 12296.0], [47.5, 12393.0], [47.6, 12437.0], [47.7, 12447.0], [47.8, 12464.0], [47.9, 12483.0], [48.0, 12528.0], [48.1, 12535.0], [48.2, 12558.0], [48.3, 12561.0], [48.4, 12592.0], [48.5, 12601.0], [48.6, 12604.0], [48.7, 12622.0], [48.8, 12627.0], [48.9, 12638.0], [49.0, 12692.0], [49.1, 12692.0], [49.2, 12763.0], [49.3, 12810.0], [49.4, 12839.0], [49.5, 12844.0], [49.6, 12950.0], [49.7, 12977.0], [49.8, 13102.0], [49.9, 13151.0], [50.0, 13211.0], [50.1, 13254.0], [50.2, 13349.0], [50.3, 13375.0], [50.4, 13387.0], [50.5, 13413.0], [50.6, 13494.0], [50.7, 13507.0], [50.8, 13550.0], [50.9, 13591.0], [51.0, 13591.0], [51.1, 13615.0], [51.2, 13616.0], [51.3, 13673.0], [51.4, 13784.0], [51.5, 13799.0], [51.6, 13818.0], [51.7, 13868.0], [51.8, 13904.0], [51.9, 13908.0], [52.0, 13910.0], [52.1, 13922.0], [52.2, 13968.0], [52.3, 13991.0], [52.4, 14015.0], [52.5, 14015.0], [52.6, 14030.0], [52.7, 14056.0], [52.8, 14303.0], [52.9, 14315.0], [53.0, 14315.0], [53.1, 14321.0], [53.2, 14344.0], [53.3, 14493.0], [53.4, 14504.0], [53.5, 14539.0], [53.6, 14544.0], [53.7, 14596.0], [53.8, 14657.0], [53.9, 14673.0], [54.0, 14689.0], [54.1, 14708.0], [54.2, 14850.0], [54.3, 14870.0], [54.4, 14876.0], [54.5, 14956.0], [54.6, 15005.0], [54.7, 15026.0], [54.8, 15080.0], [54.9, 15150.0], [55.0, 15150.0], [55.1, 15164.0], [55.2, 15194.0], [55.3, 15206.0], [55.4, 15309.0], [55.5, 15332.0], [55.6, 15344.0], [55.7, 15390.0], [55.8, 15470.0], [55.9, 15489.0], [56.0, 15491.0], [56.1, 15505.0], [56.2, 15521.0], [56.3, 15592.0], [56.4, 15603.0], [56.5, 15676.0], [56.6, 15708.0], [56.7, 15735.0], [56.8, 15838.0], [56.9, 15838.0], [57.0, 15879.0], [57.1, 15896.0], [57.2, 15908.0], [57.3, 15971.0], [57.4, 15983.0], [57.5, 16000.0], [57.6, 16039.0], [57.7, 16075.0], [57.8, 16131.0], [57.9, 16193.0], [58.0, 16213.0], [58.1, 16242.0], [58.2, 16282.0], [58.3, 16395.0], [58.4, 16420.0], [58.5, 16460.0], [58.6, 16465.0], [58.7, 16598.0], [58.8, 16619.0], [58.9, 16619.0], [59.0, 16685.0], [59.1, 16886.0], [59.2, 16897.0], [59.3, 16909.0], [59.4, 16920.0], [59.5, 16969.0], [59.6, 16982.0], [59.7, 16987.0], [59.8, 16996.0], [59.9, 17018.0], [60.0, 17028.0], [60.1, 17096.0], [60.2, 17296.0], [60.3, 17362.0], [60.4, 17399.0], [60.5, 17414.0], [60.6, 17455.0], [60.7, 17489.0], [60.8, 17489.0], [60.9, 17538.0], [61.0, 17561.0], [61.1, 17604.0], [61.2, 17634.0], [61.3, 17711.0], [61.4, 17758.0], [61.5, 17775.0], [61.6, 17896.0], [61.7, 18007.0], [61.8, 18022.0], [61.9, 18081.0], [62.0, 18083.0], [62.1, 18098.0], [62.2, 18182.0], [62.3, 18195.0], [62.4, 18253.0], [62.5, 18350.0], [62.6, 18354.0], [62.7, 18363.0], [62.8, 18363.0], [62.9, 18470.0], [63.0, 18544.0], [63.1, 18547.0], [63.2, 18558.0], [63.3, 18567.0], [63.4, 18708.0], [63.5, 18849.0], [63.6, 18864.0], [63.7, 19030.0], [63.8, 19103.0], [63.9, 19132.0], [64.0, 19138.0], [64.1, 19163.0], [64.2, 19185.0], [64.3, 19190.0], [64.4, 19201.0], [64.5, 19348.0], [64.6, 19463.0], [64.7, 19472.0], [64.8, 19472.0], [64.9, 19481.0], [65.0, 19506.0], [65.1, 19520.0], [65.2, 19533.0], [65.3, 19676.0], [65.4, 19678.0], [65.5, 19706.0], [65.6, 19817.0], [65.7, 19855.0], [65.8, 19906.0], [65.9, 19930.0], [66.0, 19944.0], [66.1, 19971.0], [66.2, 20111.0], [66.3, 20179.0], [66.4, 20217.0], [66.5, 20306.0], [66.6, 20324.0], [66.7, 20324.0], [66.8, 20329.0], [66.9, 20350.0], [67.0, 20446.0], [67.1, 20605.0], [67.2, 20611.0], [67.3, 20651.0], [67.4, 20709.0], [67.5, 20828.0], [67.6, 20902.0], [67.7, 20952.0], [67.8, 21002.0], [67.9, 21031.0], [68.0, 21072.0], [68.1, 21109.0], [68.2, 21121.0], [68.3, 21165.0], [68.4, 21252.0], [68.5, 21314.0], [68.6, 21335.0], [68.7, 21335.0], [68.8, 21339.0], [68.9, 21374.0], [69.0, 21393.0], [69.1, 21470.0], [69.2, 21596.0], [69.3, 21737.0], [69.4, 21833.0], [69.5, 21918.0], [69.6, 21941.0], [69.7, 21978.0], [69.8, 21988.0], [69.9, 22011.0], [70.0, 22058.0], [70.1, 22091.0], [70.2, 22101.0], [70.3, 22269.0], [70.4, 22398.0], [70.5, 22433.0], [70.6, 22433.0], [70.7, 22436.0], [70.8, 22443.0], [70.9, 22538.0], [71.0, 22636.0], [71.1, 22680.0], [71.2, 22774.0], [71.3, 22890.0], [71.4, 23107.0], [71.5, 23147.0], [71.6, 23366.0], [71.7, 23373.0], [71.8, 23463.0], [71.9, 23473.0], [72.0, 23490.0], [72.1, 23577.0], [72.2, 23618.0], [72.3, 23659.0], [72.4, 23712.0], [72.5, 23839.0], [72.6, 23839.0], [72.7, 23875.0], [72.8, 23881.0], [72.9, 23984.0], [73.0, 24063.0], [73.1, 24122.0], [73.2, 24213.0], [73.3, 24263.0], [73.4, 24412.0], [73.5, 24424.0], [73.6, 24468.0], [73.7, 24482.0], [73.8, 24567.0], [73.9, 24578.0], [74.0, 24591.0], [74.1, 24680.0], [74.2, 24735.0], [74.3, 24799.0], [74.4, 24802.0], [74.5, 24809.0], [74.6, 24809.0], [74.7, 24875.0], [74.8, 24976.0], [74.9, 25114.0], [75.0, 25150.0], [75.1, 25159.0], [75.2, 25227.0], [75.3, 25280.0], [75.4, 25346.0], [75.5, 25440.0], [75.6, 25514.0], [75.7, 25532.0], [75.8, 25620.0], [75.9, 25655.0], [76.0, 25692.0], [76.1, 25972.0], [76.2, 25992.0], [76.3, 26036.0], [76.4, 26160.0], [76.5, 26160.0], [76.6, 26171.0], [76.7, 26228.0], [76.8, 26244.0], [76.9, 26340.0], [77.0, 26410.0], [77.1, 26472.0], [77.2, 26639.0], [77.3, 26655.0], [77.4, 26667.0], [77.5, 26791.0], [77.6, 26865.0], [77.7, 26881.0], [77.8, 26906.0], [77.9, 27152.0], [78.0, 27171.0], [78.1, 27250.0], [78.2, 27359.0], [78.3, 27552.0], [78.4, 27556.0], [78.5, 27556.0], [78.6, 27639.0], [78.7, 27714.0], [78.8, 27742.0], [78.9, 27785.0], [79.0, 27860.0], [79.1, 27930.0], [79.2, 27973.0], [79.3, 28017.0], [79.4, 28118.0], [79.5, 28124.0], [79.6, 28343.0], [79.7, 28361.0], [79.8, 28542.0], [79.9, 28585.0], [80.0, 28679.0], [80.1, 28704.0], [80.2, 28731.0], [80.3, 28809.0], [80.4, 28809.0], [80.5, 28944.0], [80.6, 29027.0], [80.7, 29098.0], [80.8, 29183.0], [80.9, 29263.0], [81.0, 29606.0], [81.1, 29639.0], [81.2, 29743.0], [81.3, 29762.0], [81.4, 29776.0], [81.5, 29782.0], [81.6, 29844.0], [81.7, 29858.0], [81.8, 29887.0], [81.9, 29917.0], [82.0, 29919.0], [82.1, 29959.0], [82.2, 30029.0], [82.3, 30065.0], [82.4, 30065.0], [82.5, 30447.0], [82.6, 30485.0], [82.7, 30525.0], [82.8, 30571.0], [82.9, 30718.0], [83.0, 30756.0], [83.1, 30781.0], [83.2, 31000.0], [83.3, 31078.0], [83.4, 31083.0], [83.5, 31269.0], [83.6, 31270.0], [83.7, 31412.0], [83.8, 31501.0], [83.9, 31534.0], [84.0, 31583.0], [84.1, 31602.0], [84.2, 31902.0], [84.3, 31908.0], [84.4, 31908.0], [84.5, 31928.0], [84.6, 31934.0], [84.7, 31963.0], [84.8, 32224.0], [84.9, 32295.0], [85.0, 32345.0], [85.1, 32356.0], [85.2, 32519.0], [85.3, 32558.0], [85.4, 32609.0], [85.5, 32784.0], [85.6, 32800.0], [85.7, 32879.0], [85.8, 32890.0], [85.9, 33048.0], [86.0, 33168.0], [86.1, 33221.0], [86.2, 33594.0], [86.3, 33594.0], [86.4, 33650.0], [86.5, 33651.0], [86.6, 33755.0], [86.7, 33772.0], [86.8, 33977.0], [86.9, 34093.0], [87.0, 34392.0], [87.1, 34429.0], [87.2, 34486.0], [87.3, 34497.0], [87.4, 34548.0], [87.5, 34560.0], [87.6, 34577.0], [87.7, 34605.0], [87.8, 34913.0], [87.9, 35199.0], [88.0, 35228.0], [88.1, 35411.0], [88.2, 35487.0], [88.3, 35487.0], [88.4, 35494.0], [88.5, 35543.0], [88.6, 35687.0], [88.7, 35713.0], [88.8, 35844.0], [88.9, 35850.0], [89.0, 35935.0], [89.1, 35943.0], [89.2, 35973.0], [89.3, 36125.0], [89.4, 36203.0], [89.5, 36234.0], [89.6, 36382.0], [89.7, 36828.0], [89.8, 36869.0], [89.9, 36885.0], [90.0, 37016.0], [90.1, 37048.0], [90.2, 37048.0], [90.3, 37102.0], [90.4, 37181.0], [90.5, 37197.0], [90.6, 37264.0], [90.7, 37610.0], [90.8, 37736.0], [90.9, 38169.0], [91.0, 38191.0], [91.1, 38278.0], [91.2, 38330.0], [91.3, 38396.0], [91.4, 38482.0], [91.5, 38506.0], [91.6, 38705.0], [91.7, 38708.0], [91.8, 38876.0], [91.9, 39009.0], [92.0, 39009.0], [92.1, 39161.0], [92.2, 39161.0], [92.3, 39306.0], [92.4, 39406.0], [92.5, 39567.0], [92.6, 39577.0], [92.7, 39870.0], [92.8, 39915.0], [92.9, 39930.0], [93.0, 39934.0], [93.1, 40062.0], [93.2, 40158.0], [93.3, 40211.0], [93.4, 40385.0], [93.5, 40767.0], [93.6, 40897.0], [93.7, 40900.0], [93.8, 40943.0], [93.9, 41021.0], [94.0, 41126.0], [94.1, 41154.0], [94.2, 41154.0], [94.3, 41286.0], [94.4, 41406.0], [94.5, 41441.0], [94.6, 41900.0], [94.7, 42166.0], [94.8, 42202.0], [94.9, 42597.0], [95.0, 42616.0], [95.1, 42673.0], [95.2, 42751.0], [95.3, 42760.0], [95.4, 42856.0], [95.5, 42884.0], [95.6, 43045.0], [95.7, 43299.0], [95.8, 43458.0], [95.9, 43716.0], [96.0, 43756.0], [96.1, 43756.0], [96.2, 43807.0], [96.3, 44092.0], [96.4, 44350.0], [96.5, 44510.0], [96.6, 44576.0], [96.7, 44701.0], [96.8, 44762.0], [96.9, 44852.0], [97.0, 45199.0], [97.1, 45479.0], [97.2, 45578.0], [97.3, 45801.0], [97.4, 45853.0], [97.5, 45887.0], [97.6, 46037.0], [97.7, 46935.0], [97.8, 46967.0], [97.9, 47021.0], [98.0, 47048.0], [98.1, 47048.0], [98.2, 47291.0], [98.3, 47390.0], [98.4, 47409.0], [98.5, 47650.0], [98.6, 48429.0], [98.7, 48513.0], [98.8, 48566.0], [98.9, 48662.0], [99.0, 48859.0], [99.1, 49163.0], [99.2, 49296.0], [99.3, 49950.0], [99.4, 49952.0], [99.5, 50429.0], [99.6, 50445.0], [99.7, 51040.0], [99.8, 51687.0], [99.9, 52191.0], [100.0, 52191.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 13.0, "series": [{"data": [[34500.0, 3.0], [33700.0, 2.0], [36100.0, 1.0], [35700.0, 1.0], [34900.0, 1.0], [38100.0, 2.0], [38500.0, 1.0], [37700.0, 1.0], [40900.0, 2.0], [39300.0, 1.0], [40100.0, 1.0], [42100.0, 1.0], [42500.0, 1.0], [43700.0, 2.0], [44500.0, 2.0], [46900.0, 2.0], [48500.0, 2.0], [47300.0, 1.0], [52100.0, 1.0], [500.0, 1.0], [800.0, 5.0], [900.0, 6.0], [1000.0, 13.0], [1100.0, 5.0], [1200.0, 9.0], [1300.0, 6.0], [1400.0, 5.0], [1500.0, 6.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 6.0], [2200.0, 5.0], [2300.0, 4.0], [2400.0, 3.0], [2500.0, 7.0], [2600.0, 6.0], [2800.0, 4.0], [2700.0, 7.0], [2900.0, 5.0], [3000.0, 1.0], [3100.0, 3.0], [3200.0, 6.0], [3300.0, 4.0], [3400.0, 6.0], [3500.0, 5.0], [3700.0, 4.0], [3600.0, 2.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 4.0], [4100.0, 9.0], [4200.0, 4.0], [4300.0, 3.0], [4400.0, 7.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 7.0], [4800.0, 7.0], [4900.0, 4.0], [5000.0, 9.0], [5100.0, 4.0], [5300.0, 4.0], [5200.0, 3.0], [5500.0, 8.0], [5400.0, 4.0], [5600.0, 2.0], [5800.0, 2.0], [5700.0, 6.0], [5900.0, 5.0], [6000.0, 4.0], [6100.0, 2.0], [6200.0, 2.0], [6300.0, 3.0], [6600.0, 5.0], [6400.0, 5.0], [6500.0, 2.0], [6700.0, 9.0], [6800.0, 2.0], [6900.0, 1.0], [7100.0, 5.0], [7000.0, 1.0], [7300.0, 4.0], [7200.0, 3.0], [7400.0, 1.0], [7500.0, 3.0], [7600.0, 4.0], [7800.0, 3.0], [7700.0, 3.0], [7900.0, 3.0], [8100.0, 3.0], [8000.0, 3.0], [8200.0, 2.0], [8500.0, 4.0], [8300.0, 5.0], [8600.0, 4.0], [8400.0, 5.0], [8700.0, 2.0], [8800.0, 2.0], [8900.0, 1.0], [9200.0, 3.0], [9400.0, 2.0], [9500.0, 5.0], [9700.0, 4.0], [9600.0, 3.0], [9300.0, 6.0], [10100.0, 4.0], [10000.0, 4.0], [10200.0, 3.0], [9800.0, 2.0], [9900.0, 1.0], [10700.0, 6.0], [10500.0, 1.0], [10300.0, 5.0], [10600.0, 3.0], [10400.0, 4.0], [10900.0, 1.0], [11000.0, 4.0], [11100.0, 3.0], [11200.0, 2.0], [11700.0, 4.0], [11500.0, 4.0], [11600.0, 2.0], [11300.0, 2.0], [11400.0, 1.0], [11900.0, 5.0], [11800.0, 3.0], [12200.0, 4.0], [12000.0, 3.0], [12500.0, 5.0], [12700.0, 1.0], [12300.0, 1.0], [12400.0, 4.0], [12600.0, 6.0], [13300.0, 3.0], [12800.0, 3.0], [13200.0, 2.0], [12900.0, 2.0], [13100.0, 2.0], [13400.0, 2.0], [13500.0, 3.0], [13700.0, 2.0], [13600.0, 3.0], [13800.0, 2.0], [14000.0, 4.0], [13900.0, 6.0], [14300.0, 4.0], [14600.0, 3.0], [14500.0, 4.0], [14400.0, 1.0], [14800.0, 3.0], [14700.0, 1.0], [15300.0, 4.0], [15100.0, 3.0], [14900.0, 1.0], [15000.0, 3.0], [15200.0, 1.0], [15500.0, 3.0], [15600.0, 2.0], [15400.0, 3.0], [15700.0, 2.0], [15800.0, 3.0], [16200.0, 3.0], [16000.0, 3.0], [16100.0, 2.0], [16300.0, 1.0], [15900.0, 3.0], [17000.0, 3.0], [17400.0, 3.0], [16600.0, 2.0], [16400.0, 3.0], [17200.0, 1.0], [16800.0, 2.0], [17800.0, 1.0], [18000.0, 5.0], [17600.0, 2.0], [18200.0, 1.0], [18400.0, 1.0], [19200.0, 1.0], [19400.0, 3.0], [18800.0, 2.0], [19000.0, 1.0], [19600.0, 2.0], [19800.0, 2.0], [20200.0, 1.0], [20400.0, 1.0], [21000.0, 3.0], [20600.0, 3.0], [21200.0, 1.0], [21400.0, 1.0], [20800.0, 1.0], [22000.0, 3.0], [22400.0, 3.0], [21800.0, 1.0], [22200.0, 1.0], [23400.0, 3.0], [22600.0, 2.0], [22800.0, 1.0], [24400.0, 4.0], [23600.0, 2.0], [23800.0, 3.0], [24200.0, 2.0], [24000.0, 1.0], [24800.0, 3.0], [25400.0, 1.0], [25200.0, 2.0], [24600.0, 1.0], [26600.0, 3.0], [25600.0, 3.0], [26200.0, 2.0], [26400.0, 2.0], [26000.0, 1.0], [26800.0, 2.0], [27200.0, 1.0], [27600.0, 1.0], [27800.0, 1.0], [28000.0, 1.0], [28600.0, 1.0], [29600.0, 2.0], [29000.0, 2.0], [28800.0, 1.0], [29200.0, 1.0], [30400.0, 2.0], [29800.0, 3.0], [30000.0, 2.0], [31000.0, 3.0], [31400.0, 1.0], [31600.0, 1.0], [31200.0, 2.0], [32200.0, 2.0], [32600.0, 1.0], [33600.0, 2.0], [34400.0, 3.0], [32800.0, 3.0], [33200.0, 1.0], [34000.0, 1.0], [35200.0, 1.0], [36800.0, 3.0], [35600.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [40800.0, 1.0], [42800.0, 2.0], [41200.0, 1.0], [44000.0, 1.0], [43200.0, 1.0], [44800.0, 1.0], [46000.0, 1.0], [48400.0, 1.0], [47200.0, 1.0], [48800.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [50400.0, 2.0], [51600.0, 1.0], [33900.0, 1.0], [34300.0, 1.0], [33500.0, 1.0], [33100.0, 1.0], [35900.0, 3.0], [35500.0, 1.0], [36300.0, 1.0], [35100.0, 1.0], [37100.0, 3.0], [38300.0, 2.0], [38700.0, 2.0], [39100.0, 1.0], [40300.0, 1.0], [39500.0, 2.0], [39900.0, 3.0], [40700.0, 1.0], [42700.0, 2.0], [41100.0, 2.0], [41900.0, 1.0], [44300.0, 1.0], [44700.0, 2.0], [45100.0, 1.0], [45500.0, 1.0], [49100.0, 1.0], [49900.0, 2.0], [16900.0, 6.0], [17300.0, 2.0], [16500.0, 1.0], [17700.0, 3.0], [17500.0, 2.0], [18100.0, 2.0], [18300.0, 3.0], [19100.0, 6.0], [18500.0, 4.0], [19300.0, 1.0], [18700.0, 1.0], [19500.0, 3.0], [19900.0, 4.0], [20300.0, 4.0], [20100.0, 2.0], [19700.0, 1.0], [20700.0, 1.0], [21300.0, 5.0], [21100.0, 3.0], [21500.0, 1.0], [20900.0, 2.0], [21900.0, 4.0], [22100.0, 1.0], [22500.0, 1.0], [22300.0, 1.0], [21700.0, 1.0], [23300.0, 2.0], [23100.0, 2.0], [23500.0, 1.0], [22700.0, 1.0], [24500.0, 3.0], [23900.0, 1.0], [23700.0, 1.0], [24100.0, 1.0], [25100.0, 3.0], [24700.0, 2.0], [24900.0, 1.0], [25500.0, 2.0], [25300.0, 1.0], [25900.0, 2.0], [26100.0, 2.0], [26300.0, 1.0], [26700.0, 1.0], [26900.0, 1.0], [27100.0, 2.0], [27500.0, 2.0], [27300.0, 1.0], [27700.0, 3.0], [27900.0, 2.0], [28100.0, 2.0], [28300.0, 2.0], [28500.0, 2.0], [29100.0, 1.0], [28700.0, 2.0], [28900.0, 1.0], [30700.0, 3.0], [29700.0, 4.0], [29900.0, 3.0], [30500.0, 2.0], [31500.0, 3.0], [31900.0, 5.0], [32700.0, 1.0], [32500.0, 2.0], [32300.0, 2.0], [34600.0, 1.0], [33000.0, 1.0], [35800.0, 2.0], [36200.0, 2.0], [35400.0, 3.0], [37000.0, 2.0], [38200.0, 1.0], [39000.0, 2.0], [39400.0, 1.0], [40200.0, 1.0], [39800.0, 1.0], [41400.0, 2.0], [42200.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [42600.0, 2.0], [43400.0, 1.0], [43800.0, 1.0], [45800.0, 3.0], [47000.0, 2.0], [45400.0, 1.0], [47400.0, 1.0], [48600.0, 1.0], [51000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 52100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 899.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 899.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.65124296E12, "maxY": 71.77380952380958, "series": [{"data": [[1.65124308E12, 41.89285714285713], [1.65124326E12, 59.41614906832295], [1.6512432E12, 71.77380952380958], [1.65124332E12, 4.0], [1.65124302E12, 24.79999999999999], [1.65124296E12, 10.535714285714285], [1.65124314E12, 58.57142857142856]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124332E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3835.613636363635, "minX": 1.0, "maxY": 49163.0, "series": [{"data": [[2.0, 49163.0], [3.0, 40767.0], [4.0, 16596.333333333336], [5.0, 20902.0], [6.0, 23539.0], [7.0, 13547.0], [8.0, 23537.0], [9.0, 13632.333333333334], [10.0, 3835.613636363635], [11.0, 19688.5], [12.0, 14896.0], [13.0, 12767.666666666666], [14.0, 22028.0], [15.0, 13713.333333333334], [16.0, 19919.0], [17.0, 13035.0], [18.0, 19569.5], [19.0, 11450.666666666666], [20.0, 7069.402439024389], [21.0, 14334.333333333332], [22.0, 23838.0], [23.0, 16392.0], [24.0, 18495.666666666668], [25.0, 20035.0], [26.0, 14121.333333333334], [27.0, 12254.0], [28.0, 21128.5], [29.0, 8344.0], [30.0, 9749.418604651162], [31.0, 13960.5], [32.0, 16982.5], [33.0, 12178.666666666666], [34.0, 18412.5], [35.0, 12662.666666666666], [36.0, 17600.5], [37.0, 13919.0], [38.0, 18865.0], [39.0, 13247.0], [40.0, 12387.011494252878], [41.0, 15589.0], [42.0, 15765.0], [43.0, 29217.0], [44.0, 21833.0], [45.0, 30445.666666666664], [46.0, 20065.333333333332], [47.0, 32472.0], [48.0, 22385.0], [49.0, 22249.333333333336], [50.0, 14710.488095238094], [51.0, 31265.0], [52.0, 21416.0], [53.0, 32764.333333333332], [54.0, 20394.5], [55.0, 33420.666666666664], [56.0, 17808.5], [57.0, 37402.0], [58.0, 22946.666666666664], [59.0, 35215.666666666664], [60.0, 15969.325581395346], [61.0, 20187.0], [62.0, 28893.5], [63.0, 35783.0], [64.0, 26785.333333333332], [65.0, 36238.5], [66.0, 28992.5], [67.0, 32560.666666666668], [68.0, 33808.5], [69.0, 36033.5], [70.0, 25295.616279069764], [71.0, 26737.8], [72.0, 25635.285714285714], [73.0, 24033.7182320442], [1.0, 42616.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[46.15595363540572, 16567.979978925167]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 73.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18.083333333333332, "minX": 1.65124296E12, "maxY": 492.1333333333333, "series": [{"data": [[1.65124308E12, 491.7], [1.65124326E12, 471.96666666666664], [1.6512432E12, 492.1333333333333], [1.65124332E12, 20.533333333333335], [1.65124302E12, 482.1666666666667], [1.65124296E12, 326.53333333333336], [1.65124314E12, 492.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124308E12, 434.0], [1.65124326E12, 415.9166666666667], [1.6512432E12, 434.0], [1.65124332E12, 18.083333333333332], [1.65124302E12, 426.25], [1.65124296E12, 289.3333333333333], [1.65124314E12, 434.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124332E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3189.2232142857165, "minX": 1.65124296E12, "maxY": 43512.142857142855, "series": [{"data": [[1.65124308E12, 13038.357142857147], [1.65124326E12, 28058.888198757755], [1.6512432E12, 22534.184523809516], [1.65124332E12, 43512.142857142855], [1.65124302E12, 8067.406060606064], [1.65124296E12, 3189.2232142857165], [1.65124314E12, 19264.553571428572]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124332E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3189.1517857142853, "minX": 1.65124296E12, "maxY": 43512.0, "series": [{"data": [[1.65124308E12, 13038.327380952383], [1.65124326E12, 28058.87577639752], [1.6512432E12, 22534.154761904763], [1.65124332E12, 43512.0], [1.65124302E12, 8067.327272727273], [1.65124296E12, 3189.1517857142853], [1.65124314E12, 19264.51785714287]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124332E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.428571428571429, "minX": 1.65124296E12, "maxY": 15.035714285714278, "series": [{"data": [[1.65124308E12, 8.136904761904763], [1.65124326E12, 7.832298136645964], [1.6512432E12, 8.089285714285717], [1.65124332E12, 6.428571428571429], [1.65124302E12, 9.58181818181818], [1.65124296E12, 15.035714285714278], [1.65124314E12, 8.113095238095244]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124332E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 588.0, "minX": 1.65124296E12, "maxY": 52191.0, "series": [{"data": [[1.65124308E12, 29606.0], [1.65124326E12, 52191.0], [1.6512432E12, 51687.0], [1.65124332E12, 49163.0], [1.65124302E12, 19190.0], [1.65124296E12, 6777.0], [1.65124314E12, 39161.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124308E12, 23382.0], [1.65124326E12, 45756.4], [1.6512432E12, 42751.9], [1.65124332E12, 49163.0], [1.65124302E12, 14511.4], [1.65124296E12, 5596.5], [1.65124314E12, 33683.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124308E12, 29314.13], [1.65124326E12, 51477.38], [1.6512432E12, 50488.47], [1.65124332E12, 49163.0], [1.65124302E12, 18335.960000000003], [1.65124296E12, 6759.84], [1.65124314E12, 39056.12]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124308E12, 24842.149999999998], [1.65124326E12, 48652.4], [1.6512432E12, 45352.99999999999], [1.65124332E12, 49163.0], [1.65124302E12, 15629.499999999998], [1.65124296E12, 6295.799999999999], [1.65124314E12, 36043.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124308E12, 890.0], [1.65124326E12, 1032.0], [1.6512432E12, 966.0], [1.65124332E12, 38482.0], [1.65124302E12, 949.0], [1.65124296E12, 588.0], [1.65124314E12, 1013.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124308E12, 12794.0], [1.65124326E12, 28731.0], [1.6512432E12, 21241.5], [1.65124332E12, 42616.0], [1.65124302E12, 7731.0], [1.65124296E12, 3045.0], [1.65124314E12, 19266.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124332E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11438.0, "minX": 1.0, "maxY": 42616.0, "series": [{"data": [[2.0, 13528.5], [4.0, 11438.0], [1.0, 42616.0], [3.0, 13368.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11438.0, "minX": 1.0, "maxY": 42616.0, "series": [{"data": [[2.0, 13528.5], [4.0, 11438.0], [1.0, 42616.0], [3.0, 13368.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.65124296E12, "maxY": 3.1333333333333333, "series": [{"data": [[1.65124308E12, 3.1333333333333333], [1.65124326E12, 1.5833333333333333], [1.6512432E12, 2.85], [1.65124302E12, 2.9166666666666665], [1.65124296E12, 2.2], [1.65124314E12, 3.1333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124326E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124296E12, "maxY": 2.8, "series": [{"data": [[1.65124308E12, 2.8], [1.65124326E12, 2.683333333333333], [1.6512432E12, 2.8], [1.65124332E12, 0.11666666666666667], [1.65124302E12, 2.75], [1.65124296E12, 1.8666666666666667], [1.65124314E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124332E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124296E12, "maxY": 2.8, "series": [{"data": [[1.65124308E12, 2.8], [1.65124326E12, 2.683333333333333], [1.6512432E12, 2.8], [1.65124332E12, 0.11666666666666667], [1.65124302E12, 2.75], [1.65124296E12, 1.8666666666666667], [1.65124314E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124332E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65124296E12, "maxY": 2.8, "series": [{"data": [[1.65124308E12, 2.8], [1.65124326E12, 2.683333333333333], [1.6512432E12, 2.8], [1.65124332E12, 0.11666666666666667], [1.65124302E12, 2.75], [1.65124296E12, 1.8666666666666667], [1.65124314E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124332E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


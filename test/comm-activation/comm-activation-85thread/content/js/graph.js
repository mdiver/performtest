/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 788.0, "minX": 0.0, "maxY": 60363.0, "series": [{"data": [[0.0, 788.0], [0.1, 843.0], [0.2, 871.0], [0.3, 879.0], [0.4, 890.0], [0.5, 914.0], [0.6, 930.0], [0.7, 963.0], [0.8, 966.0], [0.9, 989.0], [1.0, 990.0], [1.1, 993.0], [1.2, 1010.0], [1.3, 1016.0], [1.4, 1040.0], [1.5, 1042.0], [1.6, 1085.0], [1.7, 1109.0], [1.8, 1123.0], [1.9, 1124.0], [2.0, 1127.0], [2.1, 1178.0], [2.2, 1179.0], [2.3, 1194.0], [2.4, 1216.0], [2.5, 1222.0], [2.6, 1244.0], [2.7, 1269.0], [2.8, 1271.0], [2.9, 1289.0], [3.0, 1297.0], [3.1, 1343.0], [3.2, 1355.0], [3.3, 1370.0], [3.4, 1380.0], [3.5, 1384.0], [3.6, 1389.0], [3.7, 1404.0], [3.8, 1411.0], [3.9, 1414.0], [4.0, 1433.0], [4.1, 1443.0], [4.2, 1465.0], [4.3, 1469.0], [4.4, 1484.0], [4.5, 1495.0], [4.6, 1500.0], [4.7, 1505.0], [4.8, 1514.0], [4.9, 1527.0], [5.0, 1532.0], [5.1, 1539.0], [5.2, 1560.0], [5.3, 1577.0], [5.4, 1601.0], [5.5, 1635.0], [5.6, 1662.0], [5.7, 1669.0], [5.8, 1676.0], [5.9, 1691.0], [6.0, 1695.0], [6.1, 1771.0], [6.2, 1849.0], [6.3, 1850.0], [6.4, 1869.0], [6.5, 1884.0], [6.6, 1896.0], [6.7, 1897.0], [6.8, 1959.0], [6.9, 1967.0], [7.0, 1978.0], [7.1, 2031.0], [7.2, 2035.0], [7.3, 2067.0], [7.4, 2084.0], [7.5, 2090.0], [7.6, 2091.0], [7.7, 2114.0], [7.8, 2200.0], [7.9, 2204.0], [8.0, 2213.0], [8.1, 2219.0], [8.2, 2233.0], [8.3, 2245.0], [8.4, 2246.0], [8.5, 2261.0], [8.6, 2319.0], [8.7, 2323.0], [8.8, 2328.0], [8.9, 2333.0], [9.0, 2340.0], [9.1, 2350.0], [9.2, 2406.0], [9.3, 2411.0], [9.4, 2477.0], [9.5, 2488.0], [9.6, 2529.0], [9.7, 2550.0], [9.8, 2586.0], [9.9, 2640.0], [10.0, 2667.0], [10.1, 2689.0], [10.2, 2713.0], [10.3, 2721.0], [10.4, 2725.0], [10.5, 2733.0], [10.6, 2760.0], [10.7, 2765.0], [10.8, 2774.0], [10.9, 2786.0], [11.0, 2815.0], [11.1, 2825.0], [11.2, 2845.0], [11.3, 2860.0], [11.4, 2863.0], [11.5, 2872.0], [11.6, 2903.0], [11.7, 2953.0], [11.8, 2957.0], [11.9, 2978.0], [12.0, 2983.0], [12.1, 2987.0], [12.2, 3002.0], [12.3, 3002.0], [12.4, 3010.0], [12.5, 3021.0], [12.6, 3034.0], [12.7, 3073.0], [12.8, 3104.0], [12.9, 3119.0], [13.0, 3199.0], [13.1, 3199.0], [13.2, 3199.0], [13.3, 3201.0], [13.4, 3262.0], [13.5, 3265.0], [13.6, 3388.0], [13.7, 3407.0], [13.8, 3420.0], [13.9, 3440.0], [14.0, 3498.0], [14.1, 3501.0], [14.2, 3552.0], [14.3, 3558.0], [14.4, 3565.0], [14.5, 3566.0], [14.6, 3580.0], [14.7, 3598.0], [14.8, 3611.0], [14.9, 3650.0], [15.0, 3674.0], [15.1, 3697.0], [15.2, 3705.0], [15.3, 3752.0], [15.4, 3767.0], [15.5, 3793.0], [15.6, 3816.0], [15.7, 3827.0], [15.8, 3888.0], [15.9, 3898.0], [16.0, 3937.0], [16.1, 3999.0], [16.2, 4011.0], [16.3, 4012.0], [16.4, 4015.0], [16.5, 4028.0], [16.6, 4029.0], [16.7, 4047.0], [16.8, 4058.0], [16.9, 4068.0], [17.0, 4109.0], [17.1, 4147.0], [17.2, 4165.0], [17.3, 4169.0], [17.4, 4175.0], [17.5, 4191.0], [17.6, 4201.0], [17.7, 4238.0], [17.8, 4254.0], [17.9, 4283.0], [18.0, 4361.0], [18.1, 4365.0], [18.2, 4383.0], [18.3, 4386.0], [18.4, 4403.0], [18.5, 4415.0], [18.6, 4454.0], [18.7, 4465.0], [18.8, 4478.0], [18.9, 4489.0], [19.0, 4516.0], [19.1, 4526.0], [19.2, 4534.0], [19.3, 4542.0], [19.4, 4561.0], [19.5, 4570.0], [19.6, 4582.0], [19.7, 4640.0], [19.8, 4668.0], [19.9, 4673.0], [20.0, 4689.0], [20.1, 4690.0], [20.2, 4724.0], [20.3, 4737.0], [20.4, 4777.0], [20.5, 4827.0], [20.6, 4836.0], [20.7, 4880.0], [20.8, 4902.0], [20.9, 4931.0], [21.0, 4939.0], [21.1, 4958.0], [21.2, 5060.0], [21.3, 5063.0], [21.4, 5082.0], [21.5, 5136.0], [21.6, 5161.0], [21.7, 5172.0], [21.8, 5178.0], [21.9, 5191.0], [22.0, 5228.0], [22.1, 5273.0], [22.2, 5292.0], [22.3, 5302.0], [22.4, 5346.0], [22.5, 5374.0], [22.6, 5411.0], [22.7, 5431.0], [22.8, 5441.0], [22.9, 5547.0], [23.0, 5588.0], [23.1, 5589.0], [23.2, 5606.0], [23.3, 5635.0], [23.4, 5677.0], [23.5, 5679.0], [23.6, 5708.0], [23.7, 5714.0], [23.8, 5753.0], [23.9, 5811.0], [24.0, 5831.0], [24.1, 5837.0], [24.2, 5850.0], [24.3, 5874.0], [24.4, 5877.0], [24.5, 5887.0], [24.6, 5889.0], [24.7, 5896.0], [24.8, 5897.0], [24.9, 5972.0], [25.0, 5977.0], [25.1, 5980.0], [25.2, 5991.0], [25.3, 5996.0], [25.4, 6002.0], [25.5, 6050.0], [25.6, 6054.0], [25.7, 6060.0], [25.8, 6069.0], [25.9, 6107.0], [26.0, 6108.0], [26.1, 6196.0], [26.2, 6209.0], [26.3, 6237.0], [26.4, 6240.0], [26.5, 6324.0], [26.6, 6356.0], [26.7, 6366.0], [26.8, 6431.0], [26.9, 6433.0], [27.0, 6441.0], [27.1, 6460.0], [27.2, 6476.0], [27.3, 6569.0], [27.4, 6582.0], [27.5, 6615.0], [27.6, 6625.0], [27.7, 6648.0], [27.8, 6663.0], [27.9, 6663.0], [28.0, 6670.0], [28.1, 6714.0], [28.2, 6716.0], [28.3, 6735.0], [28.4, 6789.0], [28.5, 6873.0], [28.6, 6913.0], [28.7, 6918.0], [28.8, 6964.0], [28.9, 7003.0], [29.0, 7008.0], [29.1, 7078.0], [29.2, 7171.0], [29.3, 7214.0], [29.4, 7244.0], [29.5, 7280.0], [29.6, 7305.0], [29.7, 7314.0], [29.8, 7328.0], [29.9, 7444.0], [30.0, 7462.0], [30.1, 7468.0], [30.2, 7492.0], [30.3, 7540.0], [30.4, 7588.0], [30.5, 7623.0], [30.6, 7650.0], [30.7, 7662.0], [30.8, 7675.0], [30.9, 7686.0], [31.0, 7719.0], [31.1, 7791.0], [31.2, 7821.0], [31.3, 7902.0], [31.4, 7911.0], [31.5, 7913.0], [31.6, 7940.0], [31.7, 7953.0], [31.8, 7977.0], [31.9, 7981.0], [32.0, 7995.0], [32.1, 8033.0], [32.2, 8088.0], [32.3, 8162.0], [32.4, 8215.0], [32.5, 8230.0], [32.6, 8296.0], [32.7, 8345.0], [32.8, 8420.0], [32.9, 8434.0], [33.0, 8450.0], [33.1, 8520.0], [33.2, 8641.0], [33.3, 8642.0], [33.4, 8651.0], [33.5, 8697.0], [33.6, 8703.0], [33.7, 8732.0], [33.8, 8732.0], [33.9, 8810.0], [34.0, 8844.0], [34.1, 8858.0], [34.2, 8878.0], [34.3, 8911.0], [34.4, 8956.0], [34.5, 8964.0], [34.6, 8964.0], [34.7, 8984.0], [34.8, 9009.0], [34.9, 9057.0], [35.0, 9062.0], [35.1, 9111.0], [35.2, 9184.0], [35.3, 9206.0], [35.4, 9309.0], [35.5, 9396.0], [35.6, 9522.0], [35.7, 9538.0], [35.8, 9606.0], [35.9, 9613.0], [36.0, 9618.0], [36.1, 9625.0], [36.2, 9649.0], [36.3, 9746.0], [36.4, 9787.0], [36.5, 9814.0], [36.6, 9819.0], [36.7, 9881.0], [36.8, 9881.0], [36.9, 9889.0], [37.0, 9933.0], [37.1, 9944.0], [37.2, 9951.0], [37.3, 10027.0], [37.4, 10048.0], [37.5, 10166.0], [37.6, 10194.0], [37.7, 10278.0], [37.8, 10298.0], [37.9, 10316.0], [38.0, 10320.0], [38.1, 10321.0], [38.2, 10327.0], [38.3, 10371.0], [38.4, 10384.0], [38.5, 10453.0], [38.6, 10477.0], [38.7, 10496.0], [38.8, 10510.0], [38.9, 10549.0], [39.0, 10621.0], [39.1, 10655.0], [39.2, 10662.0], [39.3, 10674.0], [39.4, 10680.0], [39.5, 10700.0], [39.6, 10771.0], [39.7, 10787.0], [39.8, 10808.0], [39.9, 10850.0], [40.0, 10869.0], [40.1, 10974.0], [40.2, 10979.0], [40.3, 11016.0], [40.4, 11089.0], [40.5, 11165.0], [40.6, 11178.0], [40.7, 11221.0], [40.8, 11263.0], [40.9, 11297.0], [41.0, 11341.0], [41.1, 11351.0], [41.2, 11356.0], [41.3, 11448.0], [41.4, 11453.0], [41.5, 11464.0], [41.6, 11465.0], [41.7, 11485.0], [41.8, 11544.0], [41.9, 11563.0], [42.0, 11565.0], [42.1, 11565.0], [42.2, 11571.0], [42.3, 11582.0], [42.4, 11599.0], [42.5, 11764.0], [42.6, 11805.0], [42.7, 11818.0], [42.8, 11852.0], [42.9, 11911.0], [43.0, 12034.0], [43.1, 12052.0], [43.2, 12084.0], [43.3, 12161.0], [43.4, 12161.0], [43.5, 12178.0], [43.6, 12270.0], [43.7, 12308.0], [43.8, 12324.0], [43.9, 12383.0], [44.0, 12394.0], [44.1, 12428.0], [44.2, 12452.0], [44.3, 12476.0], [44.4, 12505.0], [44.5, 12509.0], [44.6, 12623.0], [44.7, 12635.0], [44.8, 12744.0], [44.9, 12803.0], [45.0, 12812.0], [45.1, 12839.0], [45.2, 12847.0], [45.3, 12874.0], [45.4, 12882.0], [45.5, 12898.0], [45.6, 12920.0], [45.7, 12923.0], [45.8, 13080.0], [45.9, 13205.0], [46.0, 13229.0], [46.1, 13408.0], [46.2, 13465.0], [46.3, 13483.0], [46.4, 13484.0], [46.5, 13494.0], [46.6, 13514.0], [46.7, 13561.0], [46.8, 13567.0], [46.9, 13666.0], [47.0, 13692.0], [47.1, 13717.0], [47.2, 13750.0], [47.3, 13795.0], [47.4, 13796.0], [47.5, 13815.0], [47.6, 13819.0], [47.7, 13867.0], [47.8, 13922.0], [47.9, 13933.0], [48.0, 13944.0], [48.1, 13984.0], [48.2, 13989.0], [48.3, 13990.0], [48.4, 14026.0], [48.5, 14035.0], [48.6, 14104.0], [48.7, 14219.0], [48.8, 14260.0], [48.9, 14313.0], [49.0, 14316.0], [49.1, 14317.0], [49.2, 14522.0], [49.3, 14537.0], [49.4, 14588.0], [49.5, 14599.0], [49.6, 14705.0], [49.7, 14715.0], [49.8, 14737.0], [49.9, 14747.0], [50.0, 14798.0], [50.1, 14829.0], [50.2, 14833.0], [50.3, 14851.0], [50.4, 14898.0], [50.5, 14935.0], [50.6, 14960.0], [50.7, 14982.0], [50.8, 15060.0], [50.9, 15123.0], [51.0, 15234.0], [51.1, 15249.0], [51.2, 15344.0], [51.3, 15529.0], [51.4, 15568.0], [51.5, 15571.0], [51.6, 15577.0], [51.7, 15616.0], [51.8, 15648.0], [51.9, 15666.0], [52.0, 15689.0], [52.1, 15706.0], [52.2, 15734.0], [52.3, 15744.0], [52.4, 15815.0], [52.5, 15895.0], [52.6, 15955.0], [52.7, 15983.0], [52.8, 16020.0], [52.9, 16098.0], [53.0, 16098.0], [53.1, 16106.0], [53.2, 16203.0], [53.3, 16216.0], [53.4, 16328.0], [53.5, 16383.0], [53.6, 16412.0], [53.7, 16491.0], [53.8, 16501.0], [53.9, 16552.0], [54.0, 16606.0], [54.1, 16636.0], [54.2, 16698.0], [54.3, 16744.0], [54.4, 16776.0], [54.5, 16815.0], [54.6, 16867.0], [54.7, 16929.0], [54.8, 17011.0], [54.9, 17045.0], [55.0, 17051.0], [55.1, 17068.0], [55.2, 17109.0], [55.3, 17293.0], [55.4, 17378.0], [55.5, 17378.0], [55.6, 17410.0], [55.7, 17491.0], [55.8, 17501.0], [55.9, 17504.0], [56.0, 17541.0], [56.1, 17552.0], [56.2, 17566.0], [56.3, 17627.0], [56.4, 17635.0], [56.5, 17713.0], [56.6, 17721.0], [56.7, 17735.0], [56.8, 17784.0], [56.9, 17876.0], [57.0, 17892.0], [57.1, 18032.0], [57.2, 18055.0], [57.3, 18060.0], [57.4, 18114.0], [57.5, 18120.0], [57.6, 18307.0], [57.7, 18451.0], [57.8, 18474.0], [57.9, 18510.0], [58.0, 18545.0], [58.1, 18548.0], [58.2, 18677.0], [58.3, 18699.0], [58.4, 18745.0], [58.5, 18773.0], [58.6, 18778.0], [58.7, 18801.0], [58.8, 18825.0], [58.9, 18971.0], [59.0, 18992.0], [59.1, 19030.0], [59.2, 19092.0], [59.3, 19123.0], [59.4, 19170.0], [59.5, 19262.0], [59.6, 19338.0], [59.7, 19341.0], [59.8, 19383.0], [59.9, 19405.0], [60.0, 19409.0], [60.1, 19455.0], [60.2, 19602.0], [60.3, 19674.0], [60.4, 19784.0], [60.5, 19807.0], [60.6, 19809.0], [60.7, 19856.0], [60.8, 19867.0], [60.9, 19928.0], [61.0, 19932.0], [61.1, 20078.0], [61.2, 20084.0], [61.3, 20167.0], [61.4, 20200.0], [61.5, 20247.0], [61.6, 20327.0], [61.7, 20410.0], [61.8, 20411.0], [61.9, 20522.0], [62.0, 20555.0], [62.1, 20558.0], [62.2, 20586.0], [62.3, 20684.0], [62.4, 20732.0], [62.5, 20844.0], [62.6, 20859.0], [62.7, 20899.0], [62.8, 21047.0], [62.9, 21120.0], [63.0, 21191.0], [63.1, 21212.0], [63.2, 21345.0], [63.3, 21437.0], [63.4, 21510.0], [63.5, 21518.0], [63.6, 21534.0], [63.7, 21586.0], [63.8, 21594.0], [63.9, 21717.0], [64.0, 21772.0], [64.1, 21778.0], [64.2, 21850.0], [64.3, 21872.0], [64.4, 21890.0], [64.5, 21960.0], [64.6, 22027.0], [64.7, 22072.0], [64.8, 22081.0], [64.9, 22135.0], [65.0, 22231.0], [65.1, 22240.0], [65.2, 22356.0], [65.3, 22371.0], [65.4, 22467.0], [65.5, 22569.0], [65.6, 22599.0], [65.7, 22613.0], [65.8, 22744.0], [65.9, 22750.0], [66.0, 22932.0], [66.1, 23075.0], [66.2, 23093.0], [66.3, 23096.0], [66.4, 23149.0], [66.5, 23279.0], [66.6, 23329.0], [66.7, 23364.0], [66.8, 23412.0], [66.9, 23494.0], [67.0, 23545.0], [67.1, 23571.0], [67.2, 23622.0], [67.3, 23704.0], [67.4, 23720.0], [67.5, 23770.0], [67.6, 23780.0], [67.7, 23866.0], [67.8, 23957.0], [67.9, 23988.0], [68.0, 23999.0], [68.1, 24070.0], [68.2, 24096.0], [68.3, 24163.0], [68.4, 24224.0], [68.5, 24313.0], [68.6, 24367.0], [68.7, 24433.0], [68.8, 24545.0], [68.9, 24640.0], [69.0, 24816.0], [69.1, 24889.0], [69.2, 24911.0], [69.3, 24957.0], [69.4, 24964.0], [69.5, 25114.0], [69.6, 25285.0], [69.7, 25321.0], [69.8, 25388.0], [69.9, 25399.0], [70.0, 25452.0], [70.1, 25468.0], [70.2, 25480.0], [70.3, 25538.0], [70.4, 25607.0], [70.5, 25639.0], [70.6, 25678.0], [70.7, 25705.0], [70.8, 25785.0], [70.9, 25919.0], [71.0, 26005.0], [71.1, 26048.0], [71.2, 26068.0], [71.3, 26088.0], [71.4, 26164.0], [71.5, 26249.0], [71.6, 26457.0], [71.7, 26545.0], [71.8, 26588.0], [71.9, 26616.0], [72.0, 26624.0], [72.1, 26625.0], [72.2, 26627.0], [72.3, 26749.0], [72.4, 26756.0], [72.5, 26798.0], [72.6, 26808.0], [72.7, 26964.0], [72.8, 27014.0], [72.9, 27264.0], [73.0, 27309.0], [73.1, 27320.0], [73.2, 27361.0], [73.3, 27410.0], [73.4, 27457.0], [73.5, 27469.0], [73.6, 27484.0], [73.7, 27508.0], [73.8, 27644.0], [73.9, 27740.0], [74.0, 27770.0], [74.1, 28008.0], [74.2, 28076.0], [74.3, 28148.0], [74.4, 28176.0], [74.5, 28235.0], [74.6, 28287.0], [74.7, 28414.0], [74.8, 28428.0], [74.9, 28624.0], [75.0, 28841.0], [75.1, 28968.0], [75.2, 28981.0], [75.3, 29002.0], [75.4, 29035.0], [75.5, 29094.0], [75.6, 29235.0], [75.7, 29244.0], [75.8, 29323.0], [75.9, 29351.0], [76.0, 29376.0], [76.1, 29450.0], [76.2, 29620.0], [76.3, 29725.0], [76.4, 29835.0], [76.5, 29915.0], [76.6, 29948.0], [76.7, 29979.0], [76.8, 30057.0], [76.9, 30276.0], [77.0, 30280.0], [77.1, 30296.0], [77.2, 30351.0], [77.3, 30410.0], [77.4, 30467.0], [77.5, 30480.0], [77.6, 30497.0], [77.7, 30678.0], [77.8, 30680.0], [77.9, 30689.0], [78.0, 30991.0], [78.1, 30998.0], [78.2, 31085.0], [78.3, 31152.0], [78.4, 31233.0], [78.5, 31277.0], [78.6, 31284.0], [78.7, 31386.0], [78.8, 31487.0], [78.9, 31614.0], [79.0, 31641.0], [79.1, 31906.0], [79.2, 31973.0], [79.3, 32085.0], [79.4, 32092.0], [79.5, 32142.0], [79.6, 32174.0], [79.7, 32211.0], [79.8, 32279.0], [79.9, 32288.0], [80.0, 32544.0], [80.1, 32569.0], [80.2, 32703.0], [80.3, 32763.0], [80.4, 32802.0], [80.5, 32880.0], [80.6, 32890.0], [80.7, 33024.0], [80.8, 33114.0], [80.9, 33197.0], [81.0, 33237.0], [81.1, 33351.0], [81.2, 33460.0], [81.3, 33548.0], [81.4, 33650.0], [81.5, 33740.0], [81.6, 33802.0], [81.7, 33864.0], [81.8, 33931.0], [81.9, 33961.0], [82.0, 34191.0], [82.1, 34312.0], [82.2, 34350.0], [82.3, 34422.0], [82.4, 34504.0], [82.5, 34762.0], [82.6, 34796.0], [82.7, 34869.0], [82.8, 34977.0], [82.9, 35009.0], [83.0, 35016.0], [83.1, 35137.0], [83.2, 35182.0], [83.3, 35197.0], [83.4, 35377.0], [83.5, 35419.0], [83.6, 35565.0], [83.7, 35689.0], [83.8, 35753.0], [83.9, 35831.0], [84.0, 35944.0], [84.1, 35961.0], [84.2, 36011.0], [84.3, 36096.0], [84.4, 36156.0], [84.5, 36245.0], [84.6, 36264.0], [84.7, 36382.0], [84.8, 36444.0], [84.9, 36576.0], [85.0, 36614.0], [85.1, 36664.0], [85.2, 36697.0], [85.3, 36873.0], [85.4, 36990.0], [85.5, 37069.0], [85.6, 37172.0], [85.7, 37261.0], [85.8, 37281.0], [85.9, 37467.0], [86.0, 37542.0], [86.1, 37667.0], [86.2, 37683.0], [86.3, 37884.0], [86.4, 38038.0], [86.5, 38131.0], [86.6, 38305.0], [86.7, 38316.0], [86.8, 38396.0], [86.9, 38482.0], [87.0, 38564.0], [87.1, 38624.0], [87.2, 38633.0], [87.3, 38782.0], [87.4, 38940.0], [87.5, 38977.0], [87.6, 39094.0], [87.7, 39114.0], [87.8, 39323.0], [87.9, 39492.0], [88.0, 39572.0], [88.1, 39636.0], [88.2, 39791.0], [88.3, 39843.0], [88.4, 39893.0], [88.5, 40102.0], [88.6, 40171.0], [88.7, 40450.0], [88.8, 40465.0], [88.9, 40551.0], [89.0, 40623.0], [89.1, 40778.0], [89.2, 40875.0], [89.3, 40914.0], [89.4, 40936.0], [89.5, 41029.0], [89.6, 41043.0], [89.7, 41284.0], [89.8, 41370.0], [89.9, 41735.0], [90.0, 41783.0], [90.1, 41934.0], [90.2, 41937.0], [90.3, 41986.0], [90.4, 42225.0], [90.5, 42248.0], [90.6, 42434.0], [90.7, 42512.0], [90.8, 42532.0], [90.9, 42813.0], [91.0, 42902.0], [91.1, 43062.0], [91.2, 43120.0], [91.3, 43427.0], [91.4, 43453.0], [91.5, 43541.0], [91.6, 43830.0], [91.7, 43892.0], [91.8, 43910.0], [91.9, 44127.0], [92.0, 44144.0], [92.1, 44158.0], [92.2, 44176.0], [92.3, 44191.0], [92.4, 44315.0], [92.5, 44531.0], [92.6, 45044.0], [92.7, 45067.0], [92.8, 45077.0], [92.9, 45443.0], [93.0, 45453.0], [93.1, 45467.0], [93.2, 45511.0], [93.3, 45823.0], [93.4, 45882.0], [93.5, 46446.0], [93.6, 46698.0], [93.7, 46708.0], [93.8, 46807.0], [93.9, 46849.0], [94.0, 46920.0], [94.1, 47489.0], [94.2, 47550.0], [94.3, 47831.0], [94.4, 47904.0], [94.5, 48096.0], [94.6, 48245.0], [94.7, 48274.0], [94.8, 48361.0], [94.9, 48511.0], [95.0, 48963.0], [95.1, 49008.0], [95.2, 49348.0], [95.3, 49353.0], [95.4, 49457.0], [95.5, 50113.0], [95.6, 50180.0], [95.7, 50329.0], [95.8, 50401.0], [95.9, 50405.0], [96.0, 50473.0], [96.1, 50893.0], [96.2, 51209.0], [96.3, 51284.0], [96.4, 51286.0], [96.5, 51295.0], [96.6, 51410.0], [96.7, 51995.0], [96.8, 52498.0], [96.9, 52653.0], [97.0, 52663.0], [97.1, 52669.0], [97.2, 53226.0], [97.3, 53378.0], [97.4, 53514.0], [97.5, 53664.0], [97.6, 53751.0], [97.7, 54442.0], [97.8, 54626.0], [97.9, 54669.0], [98.0, 54878.0], [98.1, 55197.0], [98.2, 55783.0], [98.3, 56142.0], [98.4, 56241.0], [98.5, 56322.0], [98.6, 56663.0], [98.7, 56673.0], [98.8, 57587.0], [98.9, 57763.0], [99.0, 58067.0], [99.1, 58129.0], [99.2, 58561.0], [99.3, 59003.0], [99.4, 59172.0], [99.5, 59557.0], [99.6, 59578.0], [99.7, 60173.0], [99.8, 60181.0], [99.9, 60228.0], [100.0, 60363.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 10.0, "series": [{"data": [[33700.0, 1.0], [34500.0, 1.0], [36100.0, 1.0], [35300.0, 1.0], [36900.0, 1.0], [38500.0, 1.0], [40900.0, 2.0], [40100.0, 2.0], [39300.0, 1.0], [42500.0, 2.0], [41700.0, 2.0], [44100.0, 5.0], [48900.0, 2.0], [53700.0, 1.0], [56100.0, 2.0], [58500.0, 1.0], [57700.0, 1.0], [60100.0, 2.0], [700.0, 1.0], [800.0, 4.0], [900.0, 7.0], [1000.0, 5.0], [1100.0, 8.0], [1200.0, 7.0], [1300.0, 7.0], [1400.0, 9.0], [1500.0, 9.0], [1600.0, 7.0], [1700.0, 1.0], [1800.0, 6.0], [1900.0, 4.0], [2000.0, 6.0], [2100.0, 1.0], [2200.0, 9.0], [2300.0, 6.0], [2400.0, 4.0], [2500.0, 3.0], [2600.0, 3.0], [2700.0, 9.0], [2800.0, 6.0], [2900.0, 7.0], [3000.0, 6.0], [3100.0, 5.0], [3200.0, 3.0], [3300.0, 2.0], [3400.0, 4.0], [3500.0, 7.0], [3700.0, 5.0], [3600.0, 4.0], [3800.0, 4.0], [3900.0, 2.0], [4000.0, 9.0], [4100.0, 6.0], [4300.0, 4.0], [4200.0, 4.0], [4500.0, 7.0], [4400.0, 7.0], [4600.0, 5.0], [4700.0, 4.0], [4800.0, 3.0], [5000.0, 3.0], [4900.0, 4.0], [5100.0, 5.0], [5300.0, 3.0], [5200.0, 4.0], [5500.0, 3.0], [5600.0, 4.0], [5400.0, 3.0], [5700.0, 4.0], [5800.0, 10.0], [6100.0, 3.0], [5900.0, 5.0], [6000.0, 6.0], [6200.0, 3.0], [6300.0, 3.0], [6400.0, 6.0], [6600.0, 6.0], [6500.0, 2.0], [6900.0, 4.0], [6700.0, 4.0], [6800.0, 1.0], [7000.0, 3.0], [7100.0, 1.0], [7200.0, 3.0], [7400.0, 4.0], [7300.0, 3.0], [7600.0, 6.0], [7500.0, 2.0], [7900.0, 8.0], [7700.0, 2.0], [7800.0, 1.0], [8000.0, 2.0], [8100.0, 2.0], [8400.0, 3.0], [8600.0, 4.0], [8200.0, 3.0], [9000.0, 3.0], [8800.0, 4.0], [9200.0, 1.0], [9600.0, 5.0], [9800.0, 5.0], [10000.0, 2.0], [10200.0, 2.0], [10600.0, 5.0], [10400.0, 3.0], [11200.0, 3.0], [10800.0, 3.0], [11000.0, 2.0], [11400.0, 5.0], [12000.0, 3.0], [11800.0, 3.0], [12200.0, 1.0], [12400.0, 4.0], [12600.0, 2.0], [12800.0, 7.0], [13000.0, 2.0], [13200.0, 2.0], [13800.0, 4.0], [13400.0, 5.0], [13600.0, 2.0], [14200.0, 2.0], [14000.0, 2.0], [14800.0, 4.0], [14400.0, 1.0], [15200.0, 2.0], [15000.0, 1.0], [15600.0, 4.0], [15800.0, 2.0], [16200.0, 2.0], [16000.0, 3.0], [16800.0, 2.0], [16400.0, 2.0], [17200.0, 1.0], [17600.0, 2.0], [18000.0, 3.0], [18400.0, 2.0], [18800.0, 2.0], [19200.0, 1.0], [19600.0, 2.0], [20400.0, 2.0], [20000.0, 2.0], [20800.0, 3.0], [21200.0, 1.0], [22000.0, 3.0], [22400.0, 1.0], [23200.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [24400.0, 1.0], [25200.0, 1.0], [24800.0, 2.0], [26000.0, 5.0], [25600.0, 3.0], [26400.0, 1.0], [27200.0, 1.0], [26800.0, 1.0], [27600.0, 1.0], [28000.0, 2.0], [28400.0, 2.0], [29200.0, 2.0], [29600.0, 2.0], [28800.0, 1.0], [30000.0, 1.0], [30400.0, 4.0], [31600.0, 2.0], [31200.0, 3.0], [30800.0, 1.0], [32000.0, 2.0], [32800.0, 3.0], [34400.0, 1.0], [33600.0, 1.0], [36000.0, 2.0], [36800.0, 1.0], [38400.0, 1.0], [37600.0, 2.0], [40800.0, 1.0], [42400.0, 1.0], [46400.0, 1.0], [48000.0, 1.0], [50400.0, 3.0], [51200.0, 4.0], [53600.0, 1.0], [54400.0, 1.0], [34700.0, 2.0], [33900.0, 2.0], [33100.0, 2.0], [35500.0, 1.0], [36300.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [39500.0, 1.0], [41900.0, 3.0], [43500.0, 1.0], [44300.0, 1.0], [46700.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [56300.0, 1.0], [59500.0, 2.0], [60300.0, 1.0], [17300.0, 2.0], [16500.0, 2.0], [16900.0, 1.0], [18100.0, 2.0], [17700.0, 4.0], [18900.0, 2.0], [19300.0, 3.0], [18500.0, 3.0], [20100.0, 1.0], [19700.0, 1.0], [20500.0, 4.0], [21300.0, 1.0], [20900.0, 1.0], [21700.0, 3.0], [22100.0, 1.0], [22500.0, 2.0], [22900.0, 1.0], [23300.0, 2.0], [23700.0, 4.0], [24100.0, 1.0], [24500.0, 1.0], [24900.0, 3.0], [25300.0, 3.0], [25700.0, 2.0], [26500.0, 2.0], [26100.0, 1.0], [27300.0, 3.0], [26900.0, 1.0], [28100.0, 2.0], [27700.0, 2.0], [29300.0, 3.0], [28900.0, 2.0], [29700.0, 1.0], [30900.0, 2.0], [31300.0, 1.0], [32100.0, 3.0], [32500.0, 2.0], [33800.0, 2.0], [33000.0, 1.0], [36200.0, 2.0], [35400.0, 1.0], [38600.0, 2.0], [37800.0, 1.0], [37000.0, 1.0], [39400.0, 1.0], [41000.0, 2.0], [43400.0, 2.0], [45000.0, 3.0], [45800.0, 2.0], [46600.0, 1.0], [48200.0, 2.0], [49000.0, 1.0], [47400.0, 1.0], [51400.0, 2.0], [54600.0, 2.0], [56200.0, 1.0], [60200.0, 1.0], [34100.0, 1.0], [33300.0, 1.0], [35700.0, 1.0], [34900.0, 1.0], [36500.0, 1.0], [38100.0, 2.0], [38900.0, 2.0], [39700.0, 2.0], [40500.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [44500.0, 1.0], [46900.0, 1.0], [48500.0, 1.0], [49300.0, 2.0], [50100.0, 2.0], [53300.0, 1.0], [55700.0, 1.0], [58100.0, 1.0], [8700.0, 4.0], [8500.0, 1.0], [8300.0, 1.0], [8900.0, 5.0], [9100.0, 2.0], [9300.0, 2.0], [9500.0, 3.0], [9700.0, 2.0], [9900.0, 4.0], [10100.0, 2.0], [10300.0, 6.0], [10700.0, 3.0], [10500.0, 3.0], [11100.0, 3.0], [10900.0, 2.0], [11500.0, 8.0], [11700.0, 1.0], [11300.0, 3.0], [12100.0, 3.0], [11900.0, 1.0], [12300.0, 4.0], [12500.0, 2.0], [12700.0, 1.0], [12900.0, 2.0], [13700.0, 4.0], [13500.0, 3.0], [13900.0, 6.0], [14300.0, 3.0], [14100.0, 1.0], [14700.0, 5.0], [14500.0, 4.0], [15100.0, 2.0], [15300.0, 1.0], [14900.0, 3.0], [15700.0, 3.0], [15500.0, 4.0], [15900.0, 3.0], [16100.0, 1.0], [16300.0, 2.0], [16600.0, 3.0], [17000.0, 4.0], [17400.0, 2.0], [17800.0, 2.0], [19400.0, 3.0], [19000.0, 2.0], [18600.0, 2.0], [20200.0, 2.0], [19800.0, 4.0], [21000.0, 1.0], [21400.0, 1.0], [20600.0, 1.0], [21800.0, 3.0], [22200.0, 2.0], [23000.0, 4.0], [22600.0, 1.0], [23400.0, 2.0], [24200.0, 1.0], [23800.0, 1.0], [25400.0, 3.0], [24600.0, 1.0], [26200.0, 1.0], [26600.0, 4.0], [27400.0, 4.0], [27000.0, 1.0], [28200.0, 3.0], [28600.0, 1.0], [29000.0, 3.0], [29400.0, 1.0], [30200.0, 3.0], [30600.0, 3.0], [29800.0, 1.0], [31000.0, 1.0], [31400.0, 1.0], [32200.0, 3.0], [33200.0, 1.0], [34800.0, 1.0], [35600.0, 1.0], [36400.0, 2.0], [37200.0, 2.0], [38000.0, 1.0], [40400.0, 2.0], [39600.0, 1.0], [42800.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [46800.0, 2.0], [50800.0, 1.0], [53200.0, 1.0], [52400.0, 1.0], [54800.0, 1.0], [58000.0, 1.0], [33500.0, 2.0], [34300.0, 2.0], [35100.0, 4.0], [35900.0, 2.0], [37500.0, 1.0], [38300.0, 3.0], [39100.0, 1.0], [40700.0, 1.0], [41500.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [45500.0, 2.0], [47900.0, 1.0], [50300.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [55100.0, 1.0], [57500.0, 1.0], [59100.0, 1.0], [16700.0, 3.0], [17100.0, 1.0], [18300.0, 2.0], [17500.0, 6.0], [18700.0, 3.0], [19100.0, 3.0], [20300.0, 1.0], [19900.0, 3.0], [21100.0, 2.0], [21500.0, 5.0], [20700.0, 1.0], [21900.0, 2.0], [22300.0, 2.0], [23100.0, 1.0], [22700.0, 2.0], [23500.0, 2.0], [24300.0, 2.0], [23900.0, 4.0], [25100.0, 2.0], [25500.0, 1.0], [25900.0, 1.0], [26700.0, 3.0], [27500.0, 1.0], [27100.0, 1.0], [29900.0, 3.0], [30300.0, 1.0], [31100.0, 1.0], [32700.0, 2.0], [31900.0, 2.0], [33400.0, 1.0], [35800.0, 1.0], [36600.0, 3.0], [35000.0, 2.0], [37400.0, 1.0], [39800.0, 2.0], [40600.0, 1.0], [39000.0, 1.0], [42200.0, 2.0], [43000.0, 1.0], [43800.0, 2.0], [45400.0, 3.0], [47800.0, 1.0], [49400.0, 1.0], [52600.0, 3.0], [56600.0, 2.0], [59000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1006.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1006.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.50617283950617, "minX": 1.65124464E12, "maxY": 84.11764705882351, "series": [{"data": [[1.651245E12, 59.88888888888894], [1.6512447E12, 21.946745562130168], [1.65124464E12, 9.50617283950617], [1.65124482E12, 55.52795031055901], [1.65124476E12, 38.64457831325303], [1.65124494E12, 84.11764705882351], [1.65124488E12, 73.47023809523805]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.651245E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3876.188235294116, "minX": 1.0, "maxY": 45589.0, "series": [{"data": [[2.0, 44176.0], [3.0, 21402.5], [4.0, 14391.0], [5.0, 12847.333333333334], [6.0, 20299.5], [7.0, 18167.0], [8.0, 20426.0], [9.0, 12171.666666666666], [10.0, 3876.188235294116], [11.0, 18067.5], [12.0, 14202.0], [13.0, 13612.333333333334], [14.0, 17420.0], [15.0, 13864.0], [16.0, 12197.666666666666], [17.0, 13271.5], [18.0, 13035.666666666666], [19.0, 31889.5], [20.0, 6970.588235294118], [21.0, 30203.5], [22.0, 13862.666666666668], [23.0, 34522.0], [24.0, 15082.666666666668], [25.0, 31458.0], [26.0, 10851.0], [27.0, 27998.5], [28.0, 10904.0], [29.0, 31139.5], [30.0, 9497.127906976746], [31.0, 28191.0], [32.0, 21481.333333333336], [33.0, 22405.666666666664], [34.0, 28712.5], [35.0, 27553.666666666664], [36.0, 36341.0], [37.0, 37359.0], [38.0, 24820.666666666664], [39.0, 36443.0], [40.0, 12989.717647058824], [41.0, 42004.0], [42.0, 30080.666666666664], [43.0, 25756.666666666668], [44.0, 41387.0], [45.0, 27142.666666666668], [46.0, 33206.5], [47.0, 18005.333333333336], [48.0, 26912.0], [49.0, 26271.0], [50.0, 15740.583333333334], [51.0, 27281.5], [52.0, 34057.666666666664], [53.0, 27770.0], [54.0, 40330.0], [55.0, 30005.333333333332], [56.0, 35376.0], [57.0, 31276.0], [58.0, 35825.0], [59.0, 15899.5], [60.0, 17915.855421686752], [61.0, 23911.5], [62.0, 26525.666666666668], [63.0, 22813.333333333332], [64.0, 31533.0], [65.0, 23763.666666666668], [66.0, 30690.5], [67.0, 24705.666666666668], [68.0, 32141.5], [69.0, 24068.5], [70.0, 23581.632183908052], [71.0, 30790.5], [72.0, 20339.5], [73.0, 22875.333333333332], [74.0, 31049.333333333332], [75.0, 18832.333333333332], [76.0, 25214.25], [77.0, 37246.5], [78.0, 24692.0], [79.0, 28123.0], [80.0, 24968.779069767435], [81.0, 14745.0], [82.0, 13030.5], [83.0, 20978.666666666668], [84.0, 14212.4], [85.0, 29020.55555555556], [1.0, 45589.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[52.03116147308779, 18788.113314447597]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 85.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 209.25, "minX": 1.65124464E12, "maxY": 498.1666666666667, "series": [{"data": [[1.651245E12, 447.7], [1.6512447E12, 493.6166666666667], [1.65124464E12, 236.15], [1.65124482E12, 471.53333333333336], [1.65124476E12, 485.76666666666665], [1.65124494E12, 498.1666666666667], [1.65124488E12, 492.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.651245E12, 372.0], [1.6512447E12, 436.5833333333333], [1.65124464E12, 209.25], [1.65124482E12, 415.9166666666667], [1.65124476E12, 428.8333333333333], [1.65124494E12, 439.1666666666667], [1.65124488E12, 434.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.651245E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3195.7654320987654, "minX": 1.65124464E12, "maxY": 34990.20138888889, "series": [{"data": [[1.651245E12, 34990.20138888889], [1.6512447E12, 6845.047337278107], [1.65124464E12, 3195.7654320987654], [1.65124482E12, 17504.82608695652], [1.65124476E12, 12236.222891566264], [1.65124494E12, 27594.452941176467], [1.65124488E12, 23225.035714285717]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.651245E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3195.6543209876545, "minX": 1.65124464E12, "maxY": 34990.15972222224, "series": [{"data": [[1.651245E12, 34990.15972222224], [1.6512447E12, 6845.011834319525], [1.65124464E12, 3195.6543209876545], [1.65124482E12, 17504.80124223601], [1.65124476E12, 12236.186746987954], [1.65124494E12, 27594.435294117633], [1.65124488E12, 23224.98809523809]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.651245E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.741176470588234, "minX": 1.65124464E12, "maxY": 17.012345679012352, "series": [{"data": [[1.651245E12, 8.08333333333334], [1.6512447E12, 9.41420118343195], [1.65124464E12, 17.012345679012352], [1.65124482E12, 7.776397515527953], [1.65124476E12, 8.09036144578313], [1.65124494E12, 7.741176470588234], [1.65124488E12, 8.077380952380954]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.651245E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 788.0, "minX": 1.65124464E12, "maxY": 59578.0, "series": [{"data": [[1.651245E12, 59578.0], [1.6512447E12, 18114.0], [1.65124464E12, 6324.0], [1.65124482E12, 41370.0], [1.65124476E12, 29235.0], [1.65124494E12, 59003.0], [1.65124488E12, 49008.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.651245E12, 54607.6], [1.6512447E12, 12803.0], [1.65124464E12, 5827.0], [1.65124482E12, 32036.400000000005], [1.65124476E12, 22122.4], [1.65124494E12, 49310.5], [1.65124488E12, 39913.799999999996]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.651245E12, 59569.39], [1.6512447E12, 17241.100000000013], [1.65124464E12, 6324.0], [1.65124482E12, 40454.259999999995], [1.65124476E12, 28506.710000000014], [1.65124494E12, 58382.45999999999], [1.65124488E12, 48501.54]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.651245E12, 57540.79999999999], [1.6512447E12, 14104.0], [1.65124464E12, 6103.2], [1.65124482E12, 35156.9], [1.65124476E12, 24179.2], [1.65124494E12, 52919.649999999994], [1.65124488E12, 43660.34999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.651245E12, 1042.0], [1.6512447E12, 930.0], [1.65124464E12, 843.0], [1.65124482E12, 890.0], [1.65124476E12, 1010.0], [1.65124494E12, 788.0], [1.65124488E12, 879.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.651245E12, 35278.0], [1.6512447E12, 6060.0], [1.65124464E12, 2957.0], [1.65124482E12, 16636.0], [1.65124476E12, 11881.5], [1.65124494E12, 26717.5], [1.65124488E12, 23558.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.651245E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14316.0, "minX": 1.0, "maxY": 60363.0, "series": [{"data": [[1.0, 45589.0], [4.0, 14715.0], [2.0, 15618.5], [3.0, 14316.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60181.0], [3.0, 60363.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14316.0, "minX": 1.0, "maxY": 60362.0, "series": [{"data": [[1.0, 45589.0], [4.0, 14715.0], [2.0, 15618.5], [3.0, 14316.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60181.0], [3.0, 60362.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.65124464E12, "maxY": 3.15, "series": [{"data": [[1.651245E12, 0.9833333333333333], [1.6512447E12, 3.15], [1.65124464E12, 1.5166666666666666], [1.65124482E12, 2.8666666666666667], [1.65124476E12, 3.1], [1.65124494E12, 2.9166666666666665], [1.65124488E12, 3.1166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.651245E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124464E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.651245E12, 2.3333333333333335], [1.6512447E12, 2.816666666666667], [1.65124464E12, 1.35], [1.65124482E12, 2.683333333333333], [1.65124476E12, 2.7666666666666666], [1.65124494E12, 2.8333333333333335], [1.65124488E12, 2.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.651245E12, 0.06666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.651245E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124464E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.651245E12, 2.3333333333333335], [1.6512447E12, 2.816666666666667], [1.65124464E12, 1.35], [1.65124482E12, 2.683333333333333], [1.65124476E12, 2.7666666666666666], [1.65124494E12, 2.8333333333333335], [1.65124488E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.651245E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.651245E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124464E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.651245E12, 2.3333333333333335], [1.6512447E12, 2.816666666666667], [1.65124464E12, 1.35], [1.65124482E12, 2.683333333333333], [1.65124476E12, 2.7666666666666666], [1.65124494E12, 2.8333333333333335], [1.65124488E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.651245E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.651245E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


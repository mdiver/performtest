/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 574.0, "minX": 0.0, "maxY": 54075.0, "series": [{"data": [[0.0, 574.0], [0.1, 574.0], [0.2, 864.0], [0.3, 888.0], [0.4, 908.0], [0.5, 921.0], [0.6, 948.0], [0.7, 950.0], [0.8, 955.0], [0.9, 961.0], [1.0, 993.0], [1.1, 997.0], [1.2, 1000.0], [1.3, 1004.0], [1.4, 1011.0], [1.5, 1018.0], [1.6, 1052.0], [1.7, 1056.0], [1.8, 1065.0], [1.9, 1070.0], [2.0, 1075.0], [2.1, 1075.0], [2.2, 1085.0], [2.3, 1085.0], [2.4, 1115.0], [2.5, 1142.0], [2.6, 1143.0], [2.7, 1148.0], [2.8, 1151.0], [2.9, 1186.0], [3.0, 1197.0], [3.1, 1197.0], [3.2, 1198.0], [3.3, 1208.0], [3.4, 1212.0], [3.5, 1224.0], [3.6, 1227.0], [3.7, 1228.0], [3.8, 1252.0], [3.9, 1255.0], [4.0, 1289.0], [4.1, 1289.0], [4.2, 1328.0], [4.3, 1339.0], [4.4, 1348.0], [4.5, 1363.0], [4.6, 1384.0], [4.7, 1392.0], [4.8, 1393.0], [4.9, 1394.0], [5.0, 1404.0], [5.1, 1405.0], [5.2, 1434.0], [5.3, 1440.0], [5.4, 1444.0], [5.5, 1467.0], [5.6, 1487.0], [5.7, 1490.0], [5.8, 1527.0], [5.9, 1550.0], [6.0, 1583.0], [6.1, 1595.0], [6.2, 1595.0], [6.3, 1607.0], [6.4, 1660.0], [6.5, 1675.0], [6.6, 1728.0], [6.7, 1730.0], [6.8, 1731.0], [6.9, 1732.0], [7.0, 1754.0], [7.1, 1805.0], [7.2, 1821.0], [7.3, 1831.0], [7.4, 1833.0], [7.5, 1861.0], [7.6, 1892.0], [7.7, 1939.0], [7.8, 1956.0], [7.9, 1968.0], [8.0, 1983.0], [8.1, 1997.0], [8.2, 1997.0], [8.3, 2001.0], [8.4, 2015.0], [8.5, 2027.0], [8.6, 2139.0], [8.7, 2156.0], [8.8, 2157.0], [8.9, 2159.0], [9.0, 2204.0], [9.1, 2208.0], [9.2, 2217.0], [9.3, 2236.0], [9.4, 2238.0], [9.5, 2259.0], [9.6, 2298.0], [9.7, 2319.0], [9.8, 2335.0], [9.9, 2339.0], [10.0, 2368.0], [10.1, 2394.0], [10.2, 2395.0], [10.3, 2395.0], [10.4, 2423.0], [10.5, 2474.0], [10.6, 2510.0], [10.7, 2552.0], [10.8, 2553.0], [10.9, 2573.0], [11.0, 2591.0], [11.1, 2592.0], [11.2, 2703.0], [11.3, 2707.0], [11.4, 2740.0], [11.5, 2741.0], [11.6, 2771.0], [11.7, 2778.0], [11.8, 2781.0], [11.9, 2801.0], [12.0, 2802.0], [12.1, 2859.0], [12.2, 2867.0], [12.3, 2867.0], [12.4, 2875.0], [12.5, 2915.0], [12.6, 2923.0], [12.7, 2943.0], [12.8, 2963.0], [12.9, 2965.0], [13.0, 2967.0], [13.1, 2982.0], [13.2, 2991.0], [13.3, 3003.0], [13.4, 3030.0], [13.5, 3032.0], [13.6, 3052.0], [13.7, 3088.0], [13.8, 3094.0], [13.9, 3098.0], [14.0, 3107.0], [14.1, 3147.0], [14.2, 3179.0], [14.3, 3179.0], [14.4, 3197.0], [14.5, 3204.0], [14.6, 3221.0], [14.7, 3260.0], [14.8, 3280.0], [14.9, 3302.0], [15.0, 3320.0], [15.1, 3343.0], [15.2, 3353.0], [15.3, 3472.0], [15.4, 3478.0], [15.5, 3500.0], [15.6, 3515.0], [15.7, 3547.0], [15.8, 3554.0], [15.9, 3556.0], [16.0, 3558.0], [16.1, 3572.0], [16.2, 3599.0], [16.3, 3609.0], [16.4, 3609.0], [16.5, 3625.0], [16.6, 3658.0], [16.7, 3691.0], [16.8, 3774.0], [16.9, 3775.0], [17.0, 3781.0], [17.1, 3790.0], [17.2, 3806.0], [17.3, 3810.0], [17.4, 3818.0], [17.5, 3836.0], [17.6, 3867.0], [17.7, 3952.0], [17.8, 3989.0], [17.9, 3990.0], [18.0, 3994.0], [18.1, 4000.0], [18.2, 4025.0], [18.3, 4098.0], [18.4, 4098.0], [18.5, 4107.0], [18.6, 4129.0], [18.7, 4144.0], [18.8, 4147.0], [18.9, 4158.0], [19.0, 4181.0], [19.1, 4195.0], [19.2, 4200.0], [19.3, 4210.0], [19.4, 4216.0], [19.5, 4217.0], [19.6, 4221.0], [19.7, 4231.0], [19.8, 4245.0], [19.9, 4258.0], [20.0, 4286.0], [20.1, 4294.0], [20.2, 4296.0], [20.3, 4299.0], [20.4, 4370.0], [20.5, 4370.0], [20.6, 4384.0], [20.7, 4446.0], [20.8, 4459.0], [20.9, 4479.0], [21.0, 4526.0], [21.1, 4533.0], [21.2, 4568.0], [21.3, 4580.0], [21.4, 4582.0], [21.5, 4587.0], [21.6, 4602.0], [21.7, 4619.0], [21.8, 4641.0], [21.9, 4714.0], [22.0, 4727.0], [22.1, 4731.0], [22.2, 4807.0], [22.3, 4897.0], [22.4, 4936.0], [22.5, 4936.0], [22.6, 4969.0], [22.7, 4978.0], [22.8, 5019.0], [22.9, 5039.0], [23.0, 5061.0], [23.1, 5062.0], [23.2, 5072.0], [23.3, 5087.0], [23.4, 5091.0], [23.5, 5100.0], [23.6, 5191.0], [23.7, 5236.0], [23.8, 5284.0], [23.9, 5287.0], [24.0, 5292.0], [24.1, 5310.0], [24.2, 5336.0], [24.3, 5387.0], [24.4, 5404.0], [24.5, 5404.0], [24.6, 5415.0], [24.7, 5593.0], [24.8, 5625.0], [24.9, 5625.0], [25.0, 5645.0], [25.1, 5649.0], [25.2, 5701.0], [25.3, 5706.0], [25.4, 5726.0], [25.5, 5736.0], [25.6, 5753.0], [25.7, 5782.0], [25.8, 5855.0], [25.9, 5858.0], [26.0, 5861.0], [26.1, 5865.0], [26.2, 5873.0], [26.3, 5903.0], [26.4, 5905.0], [26.5, 5956.0], [26.6, 5956.0], [26.7, 6022.0], [26.8, 6075.0], [26.9, 6113.0], [27.0, 6114.0], [27.1, 6137.0], [27.2, 6170.0], [27.3, 6187.0], [27.4, 6225.0], [27.5, 6229.0], [27.6, 6246.0], [27.7, 6262.0], [27.8, 6292.0], [27.9, 6297.0], [28.0, 6302.0], [28.1, 6308.0], [28.2, 6316.0], [28.3, 6316.0], [28.4, 6351.0], [28.5, 6364.0], [28.6, 6364.0], [28.7, 6388.0], [28.8, 6398.0], [28.9, 6452.0], [29.0, 6573.0], [29.1, 6601.0], [29.2, 6659.0], [29.3, 6662.0], [29.4, 6668.0], [29.5, 6671.0], [29.6, 6676.0], [29.7, 6708.0], [29.8, 6764.0], [29.9, 6789.0], [30.0, 6832.0], [30.1, 6849.0], [30.2, 6943.0], [30.3, 6997.0], [30.4, 7031.0], [30.5, 7047.0], [30.6, 7065.0], [30.7, 7065.0], [30.8, 7160.0], [30.9, 7162.0], [31.0, 7164.0], [31.1, 7218.0], [31.2, 7251.0], [31.3, 7262.0], [31.4, 7264.0], [31.5, 7274.0], [31.6, 7279.0], [31.7, 7290.0], [31.8, 7331.0], [31.9, 7388.0], [32.0, 7400.0], [32.1, 7425.0], [32.2, 7425.0], [32.3, 7426.0], [32.4, 7436.0], [32.5, 7444.0], [32.6, 7507.0], [32.7, 7507.0], [32.8, 7508.0], [32.9, 7532.0], [33.0, 7597.0], [33.1, 7631.0], [33.2, 7700.0], [33.3, 7775.0], [33.4, 7833.0], [33.5, 7922.0], [33.6, 7977.0], [33.7, 7979.0], [33.8, 7990.0], [33.9, 8004.0], [34.0, 8008.0], [34.1, 8035.0], [34.2, 8089.0], [34.3, 8147.0], [34.4, 8202.0], [34.5, 8205.0], [34.6, 8205.0], [34.7, 8205.0], [34.8, 8215.0], [34.9, 8232.0], [35.0, 8256.0], [35.1, 8288.0], [35.2, 8305.0], [35.3, 8428.0], [35.4, 8480.0], [35.5, 8493.0], [35.6, 8545.0], [35.7, 8548.0], [35.8, 8549.0], [35.9, 8564.0], [36.0, 8642.0], [36.1, 8645.0], [36.2, 8671.0], [36.3, 8713.0], [36.4, 8726.0], [36.5, 8729.0], [36.6, 8736.0], [36.7, 8756.0], [36.8, 8756.0], [36.9, 8781.0], [37.0, 8819.0], [37.1, 8906.0], [37.2, 8964.0], [37.3, 8977.0], [37.4, 8999.0], [37.5, 9003.0], [37.6, 9028.0], [37.7, 9132.0], [37.8, 9179.0], [37.9, 9189.0], [38.0, 9244.0], [38.1, 9294.0], [38.2, 9324.0], [38.3, 9362.0], [38.4, 9362.0], [38.5, 9421.0], [38.6, 9428.0], [38.7, 9475.0], [38.8, 9475.0], [38.9, 9579.0], [39.0, 9625.0], [39.1, 9635.0], [39.2, 9637.0], [39.3, 9656.0], [39.4, 9679.0], [39.5, 9740.0], [39.6, 9795.0], [39.7, 9811.0], [39.8, 9882.0], [39.9, 9957.0], [40.0, 9960.0], [40.1, 9975.0], [40.2, 9981.0], [40.3, 10011.0], [40.4, 10044.0], [40.5, 10054.0], [40.6, 10064.0], [40.7, 10082.0], [40.8, 10089.0], [40.9, 10089.0], [41.0, 10132.0], [41.1, 10211.0], [41.2, 10214.0], [41.3, 10240.0], [41.4, 10276.0], [41.5, 10329.0], [41.6, 10355.0], [41.7, 10364.0], [41.8, 10413.0], [41.9, 10521.0], [42.0, 10560.0], [42.1, 10579.0], [42.2, 10648.0], [42.3, 10662.0], [42.4, 10706.0], [42.5, 10792.0], [42.6, 10806.0], [42.7, 10834.0], [42.8, 10875.0], [42.9, 10875.0], [43.0, 10892.0], [43.1, 10905.0], [43.2, 10914.0], [43.3, 10938.0], [43.4, 10944.0], [43.5, 10968.0], [43.6, 11056.0], [43.7, 11071.0], [43.8, 11090.0], [43.9, 11207.0], [44.0, 11230.0], [44.1, 11250.0], [44.2, 11275.0], [44.3, 11372.0], [44.4, 11384.0], [44.5, 11401.0], [44.6, 11408.0], [44.7, 11458.0], [44.8, 11475.0], [44.9, 11475.0], [45.0, 11493.0], [45.1, 11509.0], [45.2, 11521.0], [45.3, 11540.0], [45.4, 11558.0], [45.5, 11582.0], [45.6, 11589.0], [45.7, 11599.0], [45.8, 11631.0], [45.9, 11663.0], [46.0, 11751.0], [46.1, 11873.0], [46.2, 11924.0], [46.3, 11927.0], [46.4, 11927.0], [46.5, 11927.0], [46.6, 11940.0], [46.7, 12069.0], [46.8, 12071.0], [46.9, 12095.0], [47.0, 12095.0], [47.1, 12125.0], [47.2, 12131.0], [47.3, 12182.0], [47.4, 12279.0], [47.5, 12322.0], [47.6, 12381.0], [47.7, 12407.0], [47.8, 12435.0], [47.9, 12441.0], [48.0, 12530.0], [48.1, 12571.0], [48.2, 12600.0], [48.3, 12757.0], [48.4, 12786.0], [48.5, 12815.0], [48.6, 12826.0], [48.7, 12838.0], [48.8, 12881.0], [48.9, 12931.0], [49.0, 12931.0], [49.1, 12932.0], [49.2, 12936.0], [49.3, 12980.0], [49.4, 13056.0], [49.5, 13130.0], [49.6, 13133.0], [49.7, 13143.0], [49.8, 13268.0], [49.9, 13285.0], [50.0, 13354.0], [50.1, 13358.0], [50.2, 13364.0], [50.3, 13386.0], [50.4, 13407.0], [50.5, 13415.0], [50.6, 13427.0], [50.7, 13444.0], [50.8, 13503.0], [50.9, 13522.0], [51.0, 13584.0], [51.1, 13584.0], [51.2, 13587.0], [51.3, 13635.0], [51.4, 13662.0], [51.5, 13698.0], [51.6, 13775.0], [51.7, 13803.0], [51.8, 13982.0], [51.9, 14040.0], [52.0, 14048.0], [52.1, 14092.0], [52.2, 14242.0], [52.3, 14294.0], [52.4, 14331.0], [52.5, 14345.0], [52.6, 14351.0], [52.7, 14363.0], [52.8, 14367.0], [52.9, 14384.0], [53.0, 14428.0], [53.1, 14428.0], [53.2, 14428.0], [53.3, 14468.0], [53.4, 14492.0], [53.5, 14531.0], [53.6, 14564.0], [53.7, 14569.0], [53.8, 14632.0], [53.9, 14672.0], [54.0, 14679.0], [54.1, 14759.0], [54.2, 14857.0], [54.3, 14861.0], [54.4, 14933.0], [54.5, 15005.0], [54.6, 15014.0], [54.7, 15018.0], [54.8, 15026.0], [54.9, 15133.0], [55.0, 15165.0], [55.1, 15220.0], [55.2, 15220.0], [55.3, 15307.0], [55.4, 15308.0], [55.5, 15505.0], [55.6, 15507.0], [55.7, 15509.0], [55.8, 15539.0], [55.9, 15566.0], [56.0, 15660.0], [56.1, 15665.0], [56.2, 15718.0], [56.3, 15727.0], [56.4, 15733.0], [56.5, 15750.0], [56.6, 15761.0], [56.7, 15870.0], [56.8, 15891.0], [56.9, 15897.0], [57.0, 15931.0], [57.1, 15965.0], [57.2, 15965.0], [57.3, 15974.0], [57.4, 16011.0], [57.5, 16028.0], [57.6, 16052.0], [57.7, 16178.0], [57.8, 16247.0], [57.9, 16254.0], [58.0, 16288.0], [58.1, 16365.0], [58.2, 16430.0], [58.3, 16639.0], [58.4, 16683.0], [58.5, 16685.0], [58.6, 16719.0], [58.7, 16803.0], [58.8, 16814.0], [58.9, 16818.0], [59.0, 16862.0], [59.1, 16913.0], [59.2, 16913.0], [59.3, 17219.0], [59.4, 17221.0], [59.5, 17227.0], [59.6, 17242.0], [59.7, 17270.0], [59.8, 17325.0], [59.9, 17330.0], [60.0, 17410.0], [60.1, 17423.0], [60.2, 17446.0], [60.3, 17494.0], [60.4, 17497.0], [60.5, 17509.0], [60.6, 17640.0], [60.7, 17674.0], [60.8, 17790.0], [60.9, 17803.0], [61.0, 17817.0], [61.1, 17821.0], [61.2, 17915.0], [61.3, 17915.0], [61.4, 17966.0], [61.5, 17979.0], [61.6, 18029.0], [61.7, 18036.0], [61.8, 18040.0], [61.9, 18126.0], [62.0, 18141.0], [62.1, 18182.0], [62.2, 18355.0], [62.3, 18381.0], [62.4, 18419.0], [62.5, 18472.0], [62.6, 18492.0], [62.7, 18549.0], [62.8, 18552.0], [62.9, 18635.0], [63.0, 18786.0], [63.1, 18820.0], [63.2, 18876.0], [63.3, 18876.0], [63.4, 18943.0], [63.5, 18946.0], [63.6, 18981.0], [63.7, 19016.0], [63.8, 19046.0], [63.9, 19058.0], [64.0, 19061.0], [64.1, 19258.0], [64.2, 19268.0], [64.3, 19275.0], [64.4, 19279.0], [64.5, 19355.0], [64.6, 19545.0], [64.7, 19568.0], [64.8, 19641.0], [64.9, 19649.0], [65.0, 19665.0], [65.1, 19798.0], [65.2, 19902.0], [65.3, 19969.0], [65.4, 19969.0], [65.5, 19989.0], [65.6, 20017.0], [65.7, 20088.0], [65.8, 20129.0], [65.9, 20133.0], [66.0, 20144.0], [66.1, 20170.0], [66.2, 20184.0], [66.3, 20198.0], [66.4, 20209.0], [66.5, 20240.0], [66.6, 20269.0], [66.7, 20297.0], [66.8, 20394.0], [66.9, 20521.0], [67.0, 20542.0], [67.1, 20688.0], [67.2, 20764.0], [67.3, 20810.0], [67.4, 20810.0], [67.5, 20946.0], [67.6, 20968.0], [67.7, 21065.0], [67.8, 21123.0], [67.9, 21173.0], [68.0, 21249.0], [68.1, 21326.0], [68.2, 21392.0], [68.3, 21405.0], [68.4, 21439.0], [68.5, 21442.0], [68.6, 21469.0], [68.7, 21522.0], [68.8, 21574.0], [68.9, 21620.0], [69.0, 21675.0], [69.1, 21695.0], [69.2, 21706.0], [69.3, 21801.0], [69.4, 21801.0], [69.5, 21814.0], [69.6, 21872.0], [69.7, 21905.0], [69.8, 21916.0], [69.9, 22071.0], [70.0, 22106.0], [70.1, 22129.0], [70.2, 22182.0], [70.3, 22213.0], [70.4, 22321.0], [70.5, 22389.0], [70.6, 22632.0], [70.7, 22669.0], [70.8, 22671.0], [70.9, 22692.0], [71.0, 22706.0], [71.1, 22773.0], [71.2, 22823.0], [71.3, 22824.0], [71.4, 22843.0], [71.5, 22843.0], [71.6, 22916.0], [71.7, 23005.0], [71.8, 23020.0], [71.9, 23028.0], [72.0, 23116.0], [72.1, 23179.0], [72.2, 23363.0], [72.3, 23381.0], [72.4, 23582.0], [72.5, 23594.0], [72.6, 23638.0], [72.7, 23666.0], [72.8, 23689.0], [72.9, 23696.0], [73.0, 23762.0], [73.1, 23835.0], [73.2, 24014.0], [73.3, 24049.0], [73.4, 24182.0], [73.5, 24182.0], [73.6, 24195.0], [73.7, 24222.0], [73.8, 24262.0], [73.9, 24296.0], [74.0, 24395.0], [74.1, 24442.0], [74.2, 24502.0], [74.3, 24588.0], [74.4, 24766.0], [74.5, 24813.0], [74.6, 24858.0], [74.7, 24943.0], [74.8, 24953.0], [74.9, 25004.0], [75.0, 25148.0], [75.1, 25176.0], [75.2, 25220.0], [75.3, 25242.0], [75.4, 25248.0], [75.5, 25284.0], [75.6, 25284.0], [75.7, 25322.0], [75.8, 25410.0], [75.9, 25505.0], [76.0, 25563.0], [76.1, 25575.0], [76.2, 25745.0], [76.3, 25764.0], [76.4, 25866.0], [76.5, 25877.0], [76.6, 25956.0], [76.7, 26068.0], [76.8, 26231.0], [76.9, 26353.0], [77.0, 26354.0], [77.1, 26364.0], [77.2, 26382.0], [77.3, 26416.0], [77.4, 26440.0], [77.5, 26452.0], [77.6, 26452.0], [77.7, 26485.0], [77.8, 26688.0], [77.9, 26745.0], [78.0, 26766.0], [78.1, 26882.0], [78.2, 26906.0], [78.3, 27003.0], [78.4, 27070.0], [78.5, 27106.0], [78.6, 27337.0], [78.7, 27498.0], [78.8, 27577.0], [78.9, 27579.0], [79.0, 27656.0], [79.1, 27762.0], [79.2, 27841.0], [79.3, 27843.0], [79.4, 27864.0], [79.5, 27905.0], [79.6, 27905.0], [79.7, 27915.0], [79.8, 27931.0], [79.9, 28367.0], [80.0, 28417.0], [80.1, 28433.0], [80.2, 28499.0], [80.3, 28592.0], [80.4, 28600.0], [80.5, 28656.0], [80.6, 28688.0], [80.7, 28742.0], [80.8, 28884.0], [80.9, 29095.0], [81.0, 29231.0], [81.1, 29260.0], [81.2, 29307.0], [81.3, 29330.0], [81.4, 29421.0], [81.5, 29434.0], [81.6, 29450.0], [81.7, 29450.0], [81.8, 29542.0], [81.9, 29762.0], [82.0, 29798.0], [82.1, 29845.0], [82.2, 29919.0], [82.3, 30042.0], [82.4, 30067.0], [82.5, 30120.0], [82.6, 30303.0], [82.7, 30370.0], [82.8, 30395.0], [82.9, 30567.0], [83.0, 30592.0], [83.1, 30819.0], [83.2, 30831.0], [83.3, 30841.0], [83.4, 30842.0], [83.5, 30984.0], [83.6, 31193.0], [83.7, 31193.0], [83.8, 31296.0], [83.9, 31419.0], [84.0, 31458.0], [84.1, 31470.0], [84.2, 31525.0], [84.3, 31712.0], [84.4, 31894.0], [84.5, 31906.0], [84.6, 31920.0], [84.7, 32126.0], [84.8, 32190.0], [84.9, 32235.0], [85.0, 32365.0], [85.1, 32459.0], [85.2, 32498.0], [85.3, 32527.0], [85.4, 32647.0], [85.5, 32856.0], [85.6, 32859.0], [85.7, 33036.0], [85.8, 33036.0], [85.9, 33054.0], [86.0, 33116.0], [86.1, 33178.0], [86.2, 33305.0], [86.3, 33354.0], [86.4, 33377.0], [86.5, 33664.0], [86.6, 33724.0], [86.7, 33766.0], [86.8, 33950.0], [86.9, 33979.0], [87.0, 34006.0], [87.1, 34013.0], [87.2, 34077.0], [87.3, 34195.0], [87.4, 34207.0], [87.5, 34363.0], [87.6, 34396.0], [87.7, 34441.0], [87.8, 34441.0], [87.9, 34575.0], [88.0, 35045.0], [88.1, 35122.0], [88.2, 35369.0], [88.3, 35370.0], [88.4, 35408.0], [88.5, 35458.0], [88.6, 35488.0], [88.7, 35616.0], [88.8, 35731.0], [88.9, 35738.0], [89.0, 35752.0], [89.1, 35843.0], [89.2, 36034.0], [89.3, 36145.0], [89.4, 36260.0], [89.5, 36447.0], [89.6, 36661.0], [89.7, 36662.0], [89.8, 36662.0], [89.9, 36691.0], [90.0, 36709.0], [90.1, 36872.0], [90.2, 36881.0], [90.3, 36932.0], [90.4, 37001.0], [90.5, 37028.0], [90.6, 37046.0], [90.7, 37267.0], [90.8, 37535.0], [90.9, 37849.0], [91.0, 37869.0], [91.1, 37981.0], [91.2, 37993.0], [91.3, 38044.0], [91.4, 38061.0], [91.5, 38093.0], [91.6, 38152.0], [91.7, 38342.0], [91.8, 38707.0], [91.9, 38707.0], [92.0, 38726.0], [92.1, 38749.0], [92.2, 38908.0], [92.3, 38969.0], [92.4, 39262.0], [92.5, 39353.0], [92.6, 39568.0], [92.7, 39704.0], [92.8, 39717.0], [92.9, 39831.0], [93.0, 39905.0], [93.1, 39971.0], [93.2, 40063.0], [93.3, 40066.0], [93.4, 40117.0], [93.5, 40458.0], [93.6, 40704.0], [93.7, 40943.0], [93.8, 40998.0], [93.9, 40998.0], [94.0, 41019.0], [94.1, 41122.0], [94.2, 41130.0], [94.3, 41349.0], [94.4, 41449.0], [94.5, 42081.0], [94.6, 42122.0], [94.7, 42140.0], [94.8, 42163.0], [94.9, 42341.0], [95.0, 42412.0], [95.1, 42416.0], [95.2, 42533.0], [95.3, 42567.0], [95.4, 42591.0], [95.5, 43194.0], [95.6, 43344.0], [95.7, 43587.0], [95.8, 43615.0], [95.9, 43812.0], [96.0, 43812.0], [96.1, 43864.0], [96.2, 43876.0], [96.3, 43961.0], [96.4, 44090.0], [96.5, 44463.0], [96.6, 44617.0], [96.7, 44821.0], [96.8, 45109.0], [96.9, 45287.0], [97.0, 45478.0], [97.1, 45525.0], [97.2, 45591.0], [97.3, 45671.0], [97.4, 45837.0], [97.5, 45857.0], [97.6, 46021.0], [97.7, 46277.0], [97.8, 46361.0], [97.9, 46773.0], [98.0, 46773.0], [98.1, 47099.0], [98.2, 47465.0], [98.3, 47615.0], [98.4, 47852.0], [98.5, 47992.0], [98.6, 48078.0], [98.7, 48737.0], [98.8, 48739.0], [98.9, 48907.0], [99.0, 49436.0], [99.1, 49494.0], [99.2, 49820.0], [99.3, 50315.0], [99.4, 50427.0], [99.5, 50558.0], [99.6, 51009.0], [99.7, 51666.0], [99.8, 53030.0], [99.9, 54075.0], [100.0, 54075.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 12.0, "series": [{"data": [[33300.0, 3.0], [33700.0, 2.0], [34500.0, 1.0], [34100.0, 1.0], [35700.0, 3.0], [36100.0, 1.0], [35300.0, 2.0], [38900.0, 2.0], [38100.0, 1.0], [36900.0, 1.0], [39300.0, 1.0], [39700.0, 2.0], [40100.0, 1.0], [40900.0, 2.0], [42500.0, 3.0], [42100.0, 3.0], [41300.0, 1.0], [43300.0, 1.0], [48900.0, 1.0], [50500.0, 1.0], [500.0, 1.0], [800.0, 2.0], [900.0, 8.0], [1000.0, 11.0], [1100.0, 9.0], [1200.0, 8.0], [1300.0, 8.0], [1400.0, 8.0], [1500.0, 4.0], [1600.0, 3.0], [1700.0, 5.0], [1800.0, 6.0], [1900.0, 5.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 7.0], [2300.0, 6.0], [2400.0, 2.0], [2500.0, 6.0], [2700.0, 7.0], [2800.0, 5.0], [2900.0, 8.0], [3000.0, 7.0], [3100.0, 4.0], [3300.0, 4.0], [3200.0, 4.0], [3400.0, 2.0], [3500.0, 8.0], [3600.0, 4.0], [3700.0, 4.0], [3800.0, 5.0], [3900.0, 4.0], [4000.0, 3.0], [4200.0, 12.0], [4100.0, 7.0], [4300.0, 2.0], [4500.0, 6.0], [4400.0, 3.0], [4600.0, 3.0], [4800.0, 2.0], [4700.0, 3.0], [4900.0, 3.0], [5000.0, 7.0], [5100.0, 2.0], [5300.0, 3.0], [5200.0, 4.0], [5400.0, 2.0], [5600.0, 4.0], [5500.0, 1.0], [5700.0, 6.0], [5800.0, 5.0], [5900.0, 3.0], [6100.0, 5.0], [6000.0, 2.0], [6200.0, 6.0], [6300.0, 8.0], [6600.0, 6.0], [6400.0, 1.0], [6500.0, 1.0], [6800.0, 2.0], [6900.0, 2.0], [6700.0, 3.0], [7100.0, 3.0], [7000.0, 3.0], [7200.0, 7.0], [7400.0, 6.0], [7300.0, 2.0], [7600.0, 1.0], [7500.0, 4.0], [7800.0, 1.0], [7700.0, 2.0], [7900.0, 4.0], [8000.0, 4.0], [8100.0, 1.0], [8200.0, 7.0], [8600.0, 3.0], [8400.0, 3.0], [8700.0, 6.0], [8500.0, 4.0], [8300.0, 1.0], [8900.0, 4.0], [9000.0, 2.0], [9200.0, 2.0], [9100.0, 3.0], [8800.0, 1.0], [9400.0, 3.0], [9600.0, 5.0], [9300.0, 3.0], [9700.0, 2.0], [9500.0, 1.0], [9900.0, 4.0], [10200.0, 4.0], [9800.0, 2.0], [10000.0, 6.0], [10100.0, 1.0], [10300.0, 3.0], [10700.0, 2.0], [10500.0, 3.0], [10600.0, 2.0], [10400.0, 1.0], [10900.0, 5.0], [11000.0, 3.0], [10800.0, 4.0], [11200.0, 4.0], [11500.0, 7.0], [11400.0, 5.0], [11700.0, 1.0], [11300.0, 2.0], [11600.0, 2.0], [11900.0, 5.0], [12100.0, 3.0], [12000.0, 3.0], [11800.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12300.0, 2.0], [12700.0, 2.0], [12500.0, 2.0], [12600.0, 1.0], [13100.0, 3.0], [12900.0, 4.0], [13300.0, 4.0], [12800.0, 4.0], [13200.0, 2.0], [13000.0, 1.0], [13400.0, 4.0], [13500.0, 4.0], [13700.0, 1.0], [13600.0, 3.0], [13800.0, 1.0], [14300.0, 6.0], [14000.0, 3.0], [13900.0, 1.0], [14200.0, 2.0], [14600.0, 3.0], [14500.0, 3.0], [14400.0, 4.0], [14800.0, 2.0], [14700.0, 1.0], [15000.0, 4.0], [14900.0, 1.0], [15200.0, 1.0], [15100.0, 2.0], [15300.0, 2.0], [15500.0, 5.0], [15600.0, 2.0], [15700.0, 5.0], [15800.0, 3.0], [16300.0, 1.0], [16200.0, 3.0], [15900.0, 3.0], [16000.0, 3.0], [16100.0, 1.0], [16600.0, 3.0], [17200.0, 5.0], [16400.0, 1.0], [17400.0, 5.0], [16800.0, 4.0], [17800.0, 3.0], [18000.0, 3.0], [17600.0, 2.0], [18400.0, 3.0], [19200.0, 4.0], [19000.0, 4.0], [18800.0, 2.0], [18600.0, 1.0], [19600.0, 3.0], [20200.0, 4.0], [20000.0, 2.0], [21200.0, 1.0], [21400.0, 4.0], [21000.0, 1.0], [20600.0, 1.0], [20800.0, 1.0], [21800.0, 3.0], [22000.0, 1.0], [21600.0, 3.0], [22200.0, 1.0], [23000.0, 3.0], [22800.0, 3.0], [22600.0, 4.0], [24200.0, 3.0], [24000.0, 2.0], [23600.0, 4.0], [24400.0, 1.0], [23800.0, 1.0], [25000.0, 1.0], [25200.0, 4.0], [25400.0, 1.0], [24800.0, 2.0], [26400.0, 4.0], [26200.0, 1.0], [26600.0, 1.0], [25800.0, 2.0], [26000.0, 1.0], [27000.0, 2.0], [27400.0, 1.0], [26800.0, 1.0], [27600.0, 1.0], [27800.0, 3.0], [28600.0, 3.0], [28400.0, 3.0], [29000.0, 1.0], [29200.0, 2.0], [29400.0, 3.0], [28800.0, 1.0], [30000.0, 2.0], [29800.0, 1.0], [30800.0, 4.0], [31400.0, 3.0], [31200.0, 1.0], [32600.0, 1.0], [32200.0, 1.0], [32400.0, 2.0], [31800.0, 1.0], [32800.0, 2.0], [34000.0, 3.0], [33600.0, 1.0], [34400.0, 1.0], [36400.0, 1.0], [36000.0, 1.0], [36800.0, 2.0], [35600.0, 1.0], [37200.0, 1.0], [38000.0, 3.0], [40000.0, 2.0], [39200.0, 1.0], [40400.0, 1.0], [42000.0, 1.0], [42400.0, 2.0], [44000.0, 1.0], [44800.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [45200.0, 1.0], [46000.0, 1.0], [45600.0, 1.0], [47600.0, 1.0], [48000.0, 1.0], [50400.0, 1.0], [51600.0, 1.0], [54000.0, 1.0], [34300.0, 2.0], [33900.0, 2.0], [33100.0, 2.0], [35100.0, 1.0], [36700.0, 1.0], [38300.0, 1.0], [37900.0, 2.0], [38700.0, 3.0], [37500.0, 1.0], [40700.0, 1.0], [39500.0, 1.0], [39900.0, 2.0], [41100.0, 2.0], [42300.0, 1.0], [43900.0, 1.0], [43100.0, 1.0], [43500.0, 1.0], [45100.0, 1.0], [46300.0, 1.0], [45500.0, 2.0], [46700.0, 1.0], [48700.0, 2.0], [47900.0, 1.0], [50300.0, 1.0], [16900.0, 1.0], [16700.0, 1.0], [17300.0, 2.0], [18100.0, 3.0], [18300.0, 2.0], [17900.0, 3.0], [17700.0, 1.0], [17500.0, 1.0], [18700.0, 1.0], [18500.0, 2.0], [19300.0, 1.0], [18900.0, 3.0], [20100.0, 6.0], [19500.0, 2.0], [19700.0, 1.0], [19900.0, 3.0], [20300.0, 1.0], [20500.0, 2.0], [21500.0, 2.0], [21300.0, 2.0], [20900.0, 2.0], [21100.0, 2.0], [20700.0, 1.0], [22100.0, 3.0], [21900.0, 2.0], [22300.0, 2.0], [21700.0, 1.0], [23100.0, 2.0], [23500.0, 2.0], [23300.0, 2.0], [22700.0, 2.0], [22900.0, 1.0], [23700.0, 1.0], [24100.0, 2.0], [24500.0, 2.0], [24300.0, 1.0], [25100.0, 2.0], [25300.0, 1.0], [24700.0, 1.0], [25500.0, 3.0], [24900.0, 2.0], [26300.0, 4.0], [25700.0, 2.0], [25900.0, 1.0], [27300.0, 1.0], [26700.0, 2.0], [26900.0, 1.0], [27100.0, 1.0], [27500.0, 2.0], [28500.0, 1.0], [27700.0, 1.0], [27900.0, 3.0], [28300.0, 1.0], [29300.0, 2.0], [28700.0, 1.0], [29500.0, 1.0], [30300.0, 3.0], [29700.0, 2.0], [30100.0, 1.0], [30500.0, 2.0], [29900.0, 1.0], [31500.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [31100.0, 1.0], [32300.0, 1.0], [31900.0, 2.0], [32100.0, 2.0], [32500.0, 1.0], [33000.0, 2.0], [34200.0, 1.0], [35400.0, 3.0], [36600.0, 3.0], [36200.0, 1.0], [35000.0, 1.0], [35800.0, 1.0], [37000.0, 3.0], [37800.0, 2.0], [39800.0, 1.0], [41400.0, 1.0], [41000.0, 1.0], [44600.0, 1.0], [43800.0, 3.0], [45800.0, 2.0], [46200.0, 1.0], [47000.0, 1.0], [45400.0, 1.0], [47400.0, 1.0], [47800.0, 1.0], [49800.0, 1.0], [51000.0, 1.0], [49400.0, 2.0], [53000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 54000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 55.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 896.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 55.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 896.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.272727272727272, "minX": 1.65124248E12, "maxY": 73.07272727272728, "series": [{"data": [[1.65124272E12, 68.88304093567253], [1.65124278E12, 73.07272727272728], [1.6512426E12, 35.58536585365854], [1.65124266E12, 53.32352941176469], [1.65124248E12, 9.272727272727272], [1.65124254E12, 18.355029585798825], [1.65124284E12, 29.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124284E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3732.204545454544, "minX": 1.0, "maxY": 50558.0, "series": [{"data": [[2.0, 49436.0], [3.0, 24602.0], [4.0, 15858.0], [5.0, 23338.0], [6.0, 15613.0], [7.0, 22433.5], [8.0, 14957.333333333334], [9.0, 22365.0], [10.0, 3732.204545454544], [11.0, 17198.333333333336], [12.0, 16257.0], [13.0, 21355.5], [14.0, 14467.0], [15.0, 19932.0], [16.0, 19008.5], [17.0, 14122.666666666666], [18.0, 20431.0], [19.0, 15087.333333333334], [20.0, 7127.35294117647], [21.0, 15459.333333333334], [22.0, 15767.0], [23.0, 16693.5], [24.0, 11839.333333333334], [25.0, 13032.333333333334], [26.0, 17193.0], [27.0, 18090.5], [28.0, 14104.333333333332], [29.0, 14969.0], [30.0, 9944.938271604942], [31.0, 19369.666666666668], [32.0, 21835.0], [33.0, 19966.5], [34.0, 19655.333333333332], [35.0, 12545.0], [36.0, 19304.0], [37.0, 14566.333333333334], [38.0, 12057.5], [39.0, 15050.333333333334], [40.0, 12670.88505747127], [41.0, 19389.5], [42.0, 15586.333333333334], [43.0, 13237.0], [44.0, 16349.333333333334], [45.0, 20451.5], [46.0, 12498.5], [47.0, 17931.333333333332], [48.0, 9512.0], [49.0, 13415.0], [50.0, 15407.045977011496], [51.0, 20525.0], [52.0, 20915.333333333332], [53.0, 21358.0], [54.0, 8717.0], [55.0, 15441.0], [56.0, 26259.5], [57.0, 11281.333333333334], [58.0, 36744.0], [59.0, 28692.333333333336], [60.0, 17952.678160919535], [61.0, 41936.0], [62.0, 31101.0], [63.0, 34847.5], [64.0, 42439.666666666664], [65.0, 32167.666666666668], [66.0, 35468.0], [67.0, 35046.666666666664], [68.0, 33695.333333333336], [69.0, 41469.0], [70.0, 22385.34482758621], [71.0, 33457.5], [72.0, 42878.0], [73.0, 28315.85714285714], [74.0, 24635.281767955814], [1.0, 50558.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[46.26919032597269, 16558.02418506835]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 142.08333333333334, "minX": 1.65124248E12, "maxY": 500.98333333333335, "series": [{"data": [[1.65124272E12, 500.98333333333335], [1.65124278E12, 483.56666666666666], [1.6512426E12, 479.93333333333334], [1.65124266E12, 497.81666666666666], [1.65124248E12, 160.28333333333333], [1.65124254E12, 493.26666666666665], [1.65124284E12, 167.13333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124272E12, 441.75], [1.65124278E12, 426.25], [1.6512426E12, 423.6666666666667], [1.65124266E12, 439.1666666666667], [1.65124248E12, 142.08333333333334], [1.65124254E12, 436.5833333333333], [1.65124284E12, 147.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124284E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2789.6181818181813, "minX": 1.65124248E12, "maxY": 28257.052631578947, "series": [{"data": [[1.65124272E12, 21451.327485380127], [1.65124278E12, 28198.042424242423], [1.6512426E12, 11779.451219512192], [1.65124266E12, 16369.835294117645], [1.65124248E12, 2789.6181818181813], [1.65124254E12, 5603.8106508875735], [1.65124284E12, 28257.052631578947]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124284E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2789.4363636363646, "minX": 1.65124248E12, "maxY": 28257.01754385965, "series": [{"data": [[1.65124272E12, 21451.298245614045], [1.65124278E12, 28198.018181818188], [1.6512426E12, 11779.414634146338], [1.65124266E12, 16369.794117647052], [1.65124248E12, 2789.4363636363646], [1.65124254E12, 5603.757396449705], [1.65124284E12, 28257.01754385965]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124284E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.368421052631578, "minX": 1.65124248E12, "maxY": 21.16363636363636, "series": [{"data": [[1.65124272E12, 8.532163742690063], [1.65124278E12, 7.563636363636364], [1.6512426E12, 8.371951219512196], [1.65124266E12, 8.347058823529416], [1.65124248E12, 21.16363636363636], [1.65124254E12, 10.420118343195265], [1.65124284E12, 7.368421052631578]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124284E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 574.0, "minX": 1.65124248E12, "maxY": 54075.0, "series": [{"data": [[1.65124272E12, 45109.0], [1.65124278E12, 54075.0], [1.6512426E12, 27337.0], [1.65124266E12, 35738.0], [1.65124248E12, 6668.0], [1.65124254E12, 15505.0], [1.65124284E12, 50558.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124272E12, 37481.4], [1.65124278E12, 46525.8], [1.6512426E12, 20405.5], [1.65124266E12, 28678.4], [1.65124248E12, 5492.4], [1.65124254E12, 11372.0], [1.65124284E12, 45553.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124272E12, 44282.44], [1.65124278E12, 53385.3], [1.6512426E12, 26753.949999999993], [1.65124266E12, 34785.179999999986], [1.65124248E12, 6668.0], [1.65124254E12, 14921.900000000009], [1.65124284E12, 50558.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124272E12, 39762.6], [1.65124278E12, 48856.6], [1.6512426E12, 22882.5], [1.65124266E12, 31227.449999999993], [1.65124248E12, 6312.399999999998], [1.65124254E12, 12408.0], [1.65124284E12, 49523.899999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124272E12, 1056.0], [1.65124278E12, 1065.0], [1.6512426E12, 950.0], [1.65124266E12, 1142.0], [1.65124248E12, 574.0], [1.65124254E12, 888.0], [1.65124284E12, 3836.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124272E12, 21123.0], [1.65124278E12, 29542.0], [1.6512426E12, 11484.0], [1.65124266E12, 15992.5], [1.65124248E12, 2238.0], [1.65124254E12, 4727.0], [1.65124284E12, 27931.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124284E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10408.5, "minX": 1.0, "maxY": 49436.0, "series": [{"data": [[2.0, 13162.0], [4.0, 10408.5], [1.0, 49436.0], [3.0, 14070.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10408.5, "minX": 1.0, "maxY": 49436.0, "series": [{"data": [[2.0, 13162.0], [4.0, 10408.5], [1.0, 49436.0], [3.0, 14070.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.65124248E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.65124272E12, 3.0833333333333335], [1.65124278E12, 2.466666666666667], [1.6512426E12, 2.9], [1.65124266E12, 3.1666666666666665], [1.65124248E12, 1.0833333333333333], [1.65124254E12, 3.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124278E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.65124248E12, "maxY": 2.85, "series": [{"data": [[1.65124272E12, 2.85], [1.65124278E12, 2.75], [1.6512426E12, 2.7333333333333334], [1.65124266E12, 2.8333333333333335], [1.65124248E12, 0.9166666666666666], [1.65124254E12, 2.816666666666667], [1.65124284E12, 0.95]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124284E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.65124248E12, "maxY": 2.85, "series": [{"data": [[1.65124272E12, 2.85], [1.65124278E12, 2.75], [1.6512426E12, 2.7333333333333334], [1.65124266E12, 2.8333333333333335], [1.65124248E12, 0.9166666666666666], [1.65124254E12, 2.816666666666667], [1.65124284E12, 0.95]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124284E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.65124248E12, "maxY": 2.85, "series": [{"data": [[1.65124272E12, 2.85], [1.65124278E12, 2.75], [1.6512426E12, 2.7333333333333334], [1.65124266E12, 2.8333333333333335], [1.65124248E12, 0.9166666666666666], [1.65124254E12, 2.816666666666667], [1.65124284E12, 0.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124284E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


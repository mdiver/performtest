/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 682.0, "minX": 0.0, "maxY": 60383.0, "series": [{"data": [[0.0, 682.0], [0.1, 753.0], [0.2, 912.0], [0.3, 919.0], [0.4, 928.0], [0.5, 975.0], [0.6, 986.0], [0.7, 992.0], [0.8, 994.0], [0.9, 997.0], [1.0, 1015.0], [1.1, 1015.0], [1.2, 1027.0], [1.3, 1029.0], [1.4, 1046.0], [1.5, 1046.0], [1.6, 1050.0], [1.7, 1059.0], [1.8, 1084.0], [1.9, 1109.0], [2.0, 1120.0], [2.1, 1120.0], [2.2, 1142.0], [2.3, 1142.0], [2.4, 1145.0], [2.5, 1177.0], [2.6, 1179.0], [2.7, 1212.0], [2.8, 1216.0], [2.9, 1217.0], [3.0, 1224.0], [3.1, 1249.0], [3.2, 1254.0], [3.3, 1263.0], [3.4, 1295.0], [3.5, 1301.0], [3.6, 1304.0], [3.7, 1327.0], [3.8, 1331.0], [3.9, 1341.0], [4.0, 1343.0], [4.1, 1350.0], [4.2, 1353.0], [4.3, 1380.0], [4.4, 1381.0], [4.5, 1388.0], [4.6, 1399.0], [4.7, 1405.0], [4.8, 1410.0], [4.9, 1435.0], [5.0, 1464.0], [5.1, 1486.0], [5.2, 1523.0], [5.3, 1539.0], [5.4, 1546.0], [5.5, 1562.0], [5.6, 1574.0], [5.7, 1640.0], [5.8, 1674.0], [5.9, 1691.0], [6.0, 1698.0], [6.1, 1699.0], [6.2, 1748.0], [6.3, 1750.0], [6.4, 1758.0], [6.5, 1758.0], [6.6, 1825.0], [6.7, 1825.0], [6.8, 1837.0], [6.9, 1857.0], [7.0, 1890.0], [7.1, 1894.0], [7.2, 1895.0], [7.3, 1951.0], [7.4, 2010.0], [7.5, 2024.0], [7.6, 2031.0], [7.7, 2032.0], [7.8, 2032.0], [7.9, 2059.0], [8.0, 2064.0], [8.1, 2066.0], [8.2, 2071.0], [8.3, 2092.0], [8.4, 2097.0], [8.5, 2098.0], [8.6, 2105.0], [8.7, 2240.0], [8.8, 2263.0], [8.9, 2302.0], [9.0, 2328.0], [9.1, 2336.0], [9.2, 2353.0], [9.3, 2391.0], [9.4, 2392.0], [9.5, 2401.0], [9.6, 2445.0], [9.7, 2456.0], [9.8, 2504.0], [9.9, 2520.0], [10.0, 2536.0], [10.1, 2540.0], [10.2, 2560.0], [10.3, 2583.0], [10.4, 2637.0], [10.5, 2646.0], [10.6, 2680.0], [10.7, 2702.0], [10.8, 2709.0], [10.9, 2715.0], [11.0, 2725.0], [11.1, 2751.0], [11.2, 2751.0], [11.3, 2762.0], [11.4, 2770.0], [11.5, 2794.0], [11.6, 2808.0], [11.7, 2814.0], [11.8, 2852.0], [11.9, 2908.0], [12.0, 2910.0], [12.1, 2975.0], [12.2, 2984.0], [12.3, 2995.0], [12.4, 3000.0], [12.5, 3034.0], [12.6, 3059.0], [12.7, 3061.0], [12.8, 3068.0], [12.9, 3075.0], [13.0, 3113.0], [13.1, 3130.0], [13.2, 3150.0], [13.3, 3167.0], [13.4, 3168.0], [13.5, 3191.0], [13.6, 3233.0], [13.7, 3273.0], [13.8, 3284.0], [13.9, 3294.0], [14.0, 3297.0], [14.1, 3312.0], [14.2, 3321.0], [14.3, 3329.0], [14.4, 3347.0], [14.5, 3381.0], [14.6, 3412.0], [14.7, 3425.0], [14.8, 3468.0], [14.9, 3593.0], [15.0, 3642.0], [15.1, 3665.0], [15.2, 3753.0], [15.3, 3773.0], [15.4, 3776.0], [15.5, 3788.0], [15.6, 3801.0], [15.7, 3826.0], [15.8, 3845.0], [15.9, 3906.0], [16.0, 3917.0], [16.1, 3948.0], [16.2, 3950.0], [16.3, 3952.0], [16.4, 3998.0], [16.5, 4018.0], [16.6, 4031.0], [16.7, 4047.0], [16.8, 4110.0], [16.9, 4119.0], [17.0, 4134.0], [17.1, 4146.0], [17.2, 4186.0], [17.3, 4221.0], [17.4, 4256.0], [17.5, 4268.0], [17.6, 4275.0], [17.7, 4299.0], [17.8, 4367.0], [17.9, 4384.0], [18.0, 4395.0], [18.1, 4441.0], [18.2, 4450.0], [18.3, 4451.0], [18.4, 4481.0], [18.5, 4508.0], [18.6, 4532.0], [18.7, 4543.0], [18.8, 4563.0], [18.9, 4618.0], [19.0, 4667.0], [19.1, 4705.0], [19.2, 4712.0], [19.3, 4733.0], [19.4, 4740.0], [19.5, 4766.0], [19.6, 4767.0], [19.7, 4767.0], [19.8, 4782.0], [19.9, 4791.0], [20.0, 4871.0], [20.1, 4887.0], [20.2, 4898.0], [20.3, 4903.0], [20.4, 4949.0], [20.5, 4979.0], [20.6, 5025.0], [20.7, 5025.0], [20.8, 5153.0], [20.9, 5175.0], [21.0, 5188.0], [21.1, 5260.0], [21.2, 5295.0], [21.3, 5312.0], [21.4, 5317.0], [21.5, 5403.0], [21.6, 5427.0], [21.7, 5428.0], [21.8, 5445.0], [21.9, 5459.0], [22.0, 5460.0], [22.1, 5481.0], [22.2, 5493.0], [22.3, 5516.0], [22.4, 5599.0], [22.5, 5605.0], [22.6, 5643.0], [22.7, 5668.0], [22.8, 5682.0], [22.9, 5692.0], [23.0, 5780.0], [23.1, 5812.0], [23.2, 5840.0], [23.3, 5843.0], [23.4, 5860.0], [23.5, 5866.0], [23.6, 5890.0], [23.7, 5954.0], [23.8, 5988.0], [23.9, 6027.0], [24.0, 6035.0], [24.1, 6044.0], [24.2, 6056.0], [24.3, 6059.0], [24.4, 6076.0], [24.5, 6118.0], [24.6, 6122.0], [24.7, 6123.0], [24.8, 6202.0], [24.9, 6246.0], [25.0, 6271.0], [25.1, 6281.0], [25.2, 6285.0], [25.3, 6323.0], [25.4, 6374.0], [25.5, 6381.0], [25.6, 6421.0], [25.7, 6462.0], [25.8, 6576.0], [25.9, 6581.0], [26.0, 6660.0], [26.1, 6672.0], [26.2, 6691.0], [26.3, 6732.0], [26.4, 6800.0], [26.5, 6835.0], [26.6, 6852.0], [26.7, 6862.0], [26.8, 6929.0], [26.9, 6971.0], [27.0, 6994.0], [27.1, 6994.0], [27.2, 7031.0], [27.3, 7046.0], [27.4, 7084.0], [27.5, 7111.0], [27.6, 7123.0], [27.7, 7133.0], [27.8, 7154.0], [27.9, 7210.0], [28.0, 7242.0], [28.1, 7308.0], [28.2, 7320.0], [28.3, 7323.0], [28.4, 7360.0], [28.5, 7389.0], [28.6, 7413.0], [28.7, 7427.0], [28.8, 7427.0], [28.9, 7464.0], [29.0, 7493.0], [29.1, 7513.0], [29.2, 7515.0], [29.3, 7531.0], [29.4, 7546.0], [29.5, 7643.0], [29.6, 7696.0], [29.7, 7699.0], [29.8, 7711.0], [29.9, 7725.0], [30.0, 7746.0], [30.1, 7747.0], [30.2, 7809.0], [30.3, 7853.0], [30.4, 7911.0], [30.5, 7912.0], [30.6, 7939.0], [30.7, 8056.0], [30.8, 8064.0], [30.9, 8098.0], [31.0, 8148.0], [31.1, 8243.0], [31.2, 8265.0], [31.3, 8272.0], [31.4, 8381.0], [31.5, 8387.0], [31.6, 8421.0], [31.7, 8427.0], [31.8, 8447.0], [31.9, 8494.0], [32.0, 8510.0], [32.1, 8590.0], [32.2, 8600.0], [32.3, 8612.0], [32.4, 8622.0], [32.5, 8624.0], [32.6, 8628.0], [32.7, 8641.0], [32.8, 8675.0], [32.9, 8694.0], [33.0, 8719.0], [33.1, 8727.0], [33.2, 8758.0], [33.3, 8772.0], [33.4, 8783.0], [33.5, 8796.0], [33.6, 8839.0], [33.7, 8853.0], [33.8, 8870.0], [33.9, 8877.0], [34.0, 8899.0], [34.1, 8901.0], [34.2, 8913.0], [34.3, 9023.0], [34.4, 9033.0], [34.5, 9201.0], [34.6, 9229.0], [34.7, 9288.0], [34.8, 9324.0], [34.9, 9354.0], [35.0, 9369.0], [35.1, 9455.0], [35.2, 9493.0], [35.3, 9513.0], [35.4, 9557.0], [35.5, 9559.0], [35.6, 9597.0], [35.7, 9628.0], [35.8, 9658.0], [35.9, 9709.0], [36.0, 9711.0], [36.1, 9717.0], [36.2, 9728.0], [36.3, 9784.0], [36.4, 9848.0], [36.5, 9878.0], [36.6, 9891.0], [36.7, 9949.0], [36.8, 9961.0], [36.9, 9984.0], [37.0, 10000.0], [37.1, 10025.0], [37.2, 10032.0], [37.3, 10098.0], [37.4, 10105.0], [37.5, 10168.0], [37.6, 10237.0], [37.7, 10279.0], [37.8, 10303.0], [37.9, 10329.0], [38.0, 10373.0], [38.1, 10402.0], [38.2, 10495.0], [38.3, 10518.0], [38.4, 10570.0], [38.5, 10578.0], [38.6, 10621.0], [38.7, 10632.0], [38.8, 10749.0], [38.9, 10811.0], [39.0, 10835.0], [39.1, 10841.0], [39.2, 10882.0], [39.3, 10916.0], [39.4, 10932.0], [39.5, 10973.0], [39.6, 10993.0], [39.7, 11017.0], [39.8, 11022.0], [39.9, 11035.0], [40.0, 11078.0], [40.1, 11081.0], [40.2, 11086.0], [40.3, 11097.0], [40.4, 11117.0], [40.5, 11121.0], [40.6, 11309.0], [40.7, 11338.0], [40.8, 11462.0], [40.9, 11558.0], [41.0, 11624.0], [41.1, 11633.0], [41.2, 11637.0], [41.3, 11679.0], [41.4, 11739.0], [41.5, 11757.0], [41.6, 11812.0], [41.7, 11840.0], [41.8, 11853.0], [41.9, 11912.0], [42.0, 11912.0], [42.1, 11977.0], [42.2, 12062.0], [42.3, 12072.0], [42.4, 12085.0], [42.5, 12086.0], [42.6, 12105.0], [42.7, 12115.0], [42.8, 12198.0], [42.9, 12260.0], [43.0, 12262.0], [43.1, 12282.0], [43.2, 12306.0], [43.3, 12319.0], [43.4, 12408.0], [43.5, 12540.0], [43.6, 12567.0], [43.7, 12610.0], [43.8, 12618.0], [43.9, 12622.0], [44.0, 12661.0], [44.1, 12679.0], [44.2, 12752.0], [44.3, 12761.0], [44.4, 12857.0], [44.5, 12864.0], [44.6, 12898.0], [44.7, 12964.0], [44.8, 13012.0], [44.9, 13107.0], [45.0, 13124.0], [45.1, 13197.0], [45.2, 13251.0], [45.3, 13265.0], [45.4, 13291.0], [45.5, 13304.0], [45.6, 13347.0], [45.7, 13416.0], [45.8, 13423.0], [45.9, 13427.0], [46.0, 13437.0], [46.1, 13617.0], [46.2, 13636.0], [46.3, 13658.0], [46.4, 13701.0], [46.5, 13740.0], [46.6, 13740.0], [46.7, 13788.0], [46.8, 13820.0], [46.9, 13850.0], [47.0, 13858.0], [47.1, 13946.0], [47.2, 13954.0], [47.3, 13971.0], [47.4, 14075.0], [47.5, 14103.0], [47.6, 14123.0], [47.7, 14141.0], [47.8, 14194.0], [47.9, 14211.0], [48.0, 14309.0], [48.1, 14341.0], [48.2, 14364.0], [48.3, 14379.0], [48.4, 14414.0], [48.5, 14420.0], [48.6, 14427.0], [48.7, 14505.0], [48.8, 14506.0], [48.9, 14621.0], [49.0, 14707.0], [49.1, 14720.0], [49.2, 14727.0], [49.3, 14743.0], [49.4, 14746.0], [49.5, 14756.0], [49.6, 14797.0], [49.7, 14846.0], [49.8, 14871.0], [49.9, 14874.0], [50.0, 14880.0], [50.1, 14897.0], [50.2, 14968.0], [50.3, 15045.0], [50.4, 15210.0], [50.5, 15241.0], [50.6, 15392.0], [50.7, 15395.0], [50.8, 15434.0], [50.9, 15476.0], [51.0, 15515.0], [51.1, 15604.0], [51.2, 15636.0], [51.3, 15663.0], [51.4, 15720.0], [51.5, 15818.0], [51.6, 15865.0], [51.7, 15881.0], [51.8, 15881.0], [51.9, 15944.0], [52.0, 15998.0], [52.1, 16063.0], [52.2, 16117.0], [52.3, 16134.0], [52.4, 16155.0], [52.5, 16163.0], [52.6, 16163.0], [52.7, 16331.0], [52.8, 16387.0], [52.9, 16420.0], [53.0, 16474.0], [53.1, 16475.0], [53.2, 16520.0], [53.3, 16548.0], [53.4, 16593.0], [53.5, 16598.0], [53.6, 16685.0], [53.7, 16699.0], [53.8, 16717.0], [53.9, 16748.0], [54.0, 16841.0], [54.1, 16862.0], [54.2, 16993.0], [54.3, 17013.0], [54.4, 17057.0], [54.5, 17059.0], [54.6, 17145.0], [54.7, 17188.0], [54.8, 17191.0], [54.9, 17199.0], [55.0, 17243.0], [55.1, 17258.0], [55.2, 17325.0], [55.3, 17469.0], [55.4, 17512.0], [55.5, 17606.0], [55.6, 17732.0], [55.7, 17745.0], [55.8, 17793.0], [55.9, 17869.0], [56.0, 17872.0], [56.1, 17891.0], [56.2, 17922.0], [56.3, 17924.0], [56.4, 18092.0], [56.5, 18136.0], [56.6, 18203.0], [56.7, 18219.0], [56.8, 18224.0], [56.9, 18229.0], [57.0, 18250.0], [57.1, 18270.0], [57.2, 18284.0], [57.3, 18340.0], [57.4, 18381.0], [57.5, 18503.0], [57.6, 18545.0], [57.7, 18697.0], [57.8, 18698.0], [57.9, 18726.0], [58.0, 18728.0], [58.1, 18770.0], [58.2, 18816.0], [58.3, 18902.0], [58.4, 18947.0], [58.5, 18999.0], [58.6, 19021.0], [58.7, 19051.0], [58.8, 19089.0], [58.9, 19089.0], [59.0, 19123.0], [59.1, 19271.0], [59.2, 19333.0], [59.3, 19614.0], [59.4, 19665.0], [59.5, 19693.0], [59.6, 19703.0], [59.7, 19708.0], [59.8, 19758.0], [59.9, 19761.0], [60.0, 19844.0], [60.1, 19912.0], [60.2, 19916.0], [60.3, 20002.0], [60.4, 20032.0], [60.5, 20060.0], [60.6, 20161.0], [60.7, 20167.0], [60.8, 20175.0], [60.9, 20184.0], [61.0, 20211.0], [61.1, 20227.0], [61.2, 20316.0], [61.3, 20322.0], [61.4, 20426.0], [61.5, 20430.0], [61.6, 20590.0], [61.7, 20629.0], [61.8, 20691.0], [61.9, 20848.0], [62.0, 20903.0], [62.1, 20969.0], [62.2, 21016.0], [62.3, 21062.0], [62.4, 21079.0], [62.5, 21107.0], [62.6, 21158.0], [62.7, 21208.0], [62.8, 21221.0], [62.9, 21241.0], [63.0, 21302.0], [63.1, 21351.0], [63.2, 21492.0], [63.3, 21507.0], [63.4, 21510.0], [63.5, 21529.0], [63.6, 21703.0], [63.7, 21745.0], [63.8, 21827.0], [63.9, 21863.0], [64.0, 21874.0], [64.1, 21948.0], [64.2, 21953.0], [64.3, 21962.0], [64.4, 22104.0], [64.5, 22207.0], [64.6, 22219.0], [64.7, 22337.0], [64.8, 22350.0], [64.9, 22405.0], [65.0, 22422.0], [65.1, 22428.0], [65.2, 22432.0], [65.3, 22435.0], [65.4, 22477.0], [65.5, 22702.0], [65.6, 22748.0], [65.7, 22765.0], [65.8, 22933.0], [65.9, 22963.0], [66.0, 23008.0], [66.1, 23059.0], [66.2, 23074.0], [66.3, 23110.0], [66.4, 23260.0], [66.5, 23266.0], [66.6, 23320.0], [66.7, 23363.0], [66.8, 23368.0], [66.9, 23424.0], [67.0, 23428.0], [67.1, 23448.0], [67.2, 23716.0], [67.3, 23746.0], [67.4, 23784.0], [67.5, 23908.0], [67.6, 23936.0], [67.7, 24042.0], [67.8, 24089.0], [67.9, 24131.0], [68.0, 24193.0], [68.1, 24253.0], [68.2, 24318.0], [68.3, 24359.0], [68.4, 24369.0], [68.5, 24431.0], [68.6, 24451.0], [68.7, 24483.0], [68.8, 24500.0], [68.9, 24696.0], [69.0, 24714.0], [69.1, 24778.0], [69.2, 24779.0], [69.3, 24812.0], [69.4, 24856.0], [69.5, 24901.0], [69.6, 24906.0], [69.7, 25120.0], [69.8, 25375.0], [69.9, 25400.0], [70.0, 25402.0], [70.1, 25484.0], [70.2, 25568.0], [70.3, 25586.0], [70.4, 25675.0], [70.5, 25811.0], [70.6, 25824.0], [70.7, 25830.0], [70.8, 25835.0], [70.9, 26000.0], [71.0, 26014.0], [71.1, 26021.0], [71.2, 26135.0], [71.3, 26164.0], [71.4, 26310.0], [71.5, 26377.0], [71.6, 26461.0], [71.7, 26559.0], [71.8, 26673.0], [71.9, 26713.0], [72.0, 26714.0], [72.1, 26858.0], [72.2, 26918.0], [72.3, 26994.0], [72.4, 27218.0], [72.5, 27253.0], [72.6, 27267.0], [72.7, 27326.0], [72.8, 27340.0], [72.9, 27424.0], [73.0, 27445.0], [73.1, 27507.0], [73.2, 27545.0], [73.3, 27580.0], [73.4, 27595.0], [73.5, 27664.0], [73.6, 27694.0], [73.7, 27699.0], [73.8, 27783.0], [73.9, 27862.0], [74.0, 28004.0], [74.1, 28126.0], [74.2, 28345.0], [74.3, 28416.0], [74.4, 28478.0], [74.5, 28497.0], [74.6, 28535.0], [74.7, 28621.0], [74.8, 28625.0], [74.9, 28662.0], [75.0, 28801.0], [75.1, 28962.0], [75.2, 29193.0], [75.3, 29255.0], [75.4, 29352.0], [75.5, 29441.0], [75.6, 29464.0], [75.7, 29471.0], [75.8, 29486.0], [75.9, 29519.0], [76.0, 29536.0], [76.1, 29571.0], [76.2, 29611.0], [76.3, 29825.0], [76.4, 29985.0], [76.5, 30099.0], [76.6, 30128.0], [76.7, 30185.0], [76.8, 30186.0], [76.9, 30188.0], [77.0, 30249.0], [77.1, 30373.0], [77.2, 30483.0], [77.3, 30745.0], [77.4, 30829.0], [77.5, 30840.0], [77.6, 30844.0], [77.7, 30947.0], [77.8, 31018.0], [77.9, 31043.0], [78.0, 31053.0], [78.1, 31201.0], [78.2, 31304.0], [78.3, 31359.0], [78.4, 31374.0], [78.5, 31390.0], [78.6, 31396.0], [78.7, 31705.0], [78.8, 31772.0], [78.9, 31873.0], [79.0, 31925.0], [79.1, 32048.0], [79.2, 32060.0], [79.3, 32209.0], [79.4, 32276.0], [79.5, 32447.0], [79.6, 32474.0], [79.7, 32525.0], [79.8, 32656.0], [79.9, 32661.0], [80.0, 32675.0], [80.1, 32714.0], [80.2, 32862.0], [80.3, 33207.0], [80.4, 33286.0], [80.5, 33305.0], [80.6, 33359.0], [80.7, 33385.0], [80.8, 33487.0], [80.9, 33614.0], [81.0, 33788.0], [81.1, 33883.0], [81.2, 33886.0], [81.3, 33893.0], [81.4, 33937.0], [81.5, 33974.0], [81.6, 34232.0], [81.7, 34442.0], [81.8, 34499.0], [81.9, 34537.0], [82.0, 34559.0], [82.1, 34655.0], [82.2, 34671.0], [82.3, 34796.0], [82.4, 34873.0], [82.5, 34967.0], [82.6, 34994.0], [82.7, 35037.0], [82.8, 35139.0], [82.9, 35467.0], [83.0, 35475.0], [83.1, 35563.0], [83.2, 35630.0], [83.3, 35663.0], [83.4, 35705.0], [83.5, 35714.0], [83.6, 35971.0], [83.7, 36100.0], [83.8, 36119.0], [83.9, 36166.0], [84.0, 36316.0], [84.1, 36490.0], [84.2, 36544.0], [84.3, 36632.0], [84.4, 36776.0], [84.5, 36795.0], [84.6, 36803.0], [84.7, 36947.0], [84.8, 37077.0], [84.9, 37278.0], [85.0, 37328.0], [85.1, 37437.0], [85.2, 37502.0], [85.3, 37505.0], [85.4, 37533.0], [85.5, 37573.0], [85.6, 37643.0], [85.7, 37799.0], [85.8, 38019.0], [85.9, 38143.0], [86.0, 38153.0], [86.1, 38222.0], [86.2, 38236.0], [86.3, 38687.0], [86.4, 38799.0], [86.5, 38863.0], [86.6, 38953.0], [86.7, 39198.0], [86.8, 39259.0], [86.9, 39406.0], [87.0, 39438.0], [87.1, 39578.0], [87.2, 39627.0], [87.3, 39674.0], [87.4, 39723.0], [87.5, 39847.0], [87.6, 40219.0], [87.7, 40410.0], [87.8, 40427.0], [87.9, 40438.0], [88.0, 40473.0], [88.1, 40629.0], [88.2, 40936.0], [88.3, 40939.0], [88.4, 41017.0], [88.5, 41099.0], [88.6, 41322.0], [88.7, 41334.0], [88.8, 41368.0], [88.9, 41395.0], [89.0, 41403.0], [89.1, 41507.0], [89.2, 41566.0], [89.3, 41768.0], [89.4, 42176.0], [89.5, 42302.0], [89.6, 42382.0], [89.7, 42442.0], [89.8, 42584.0], [89.9, 42693.0], [90.0, 42765.0], [90.1, 42807.0], [90.2, 42940.0], [90.3, 43407.0], [90.4, 43442.0], [90.5, 43454.0], [90.6, 43627.0], [90.7, 43678.0], [90.8, 43922.0], [90.9, 43951.0], [91.0, 44248.0], [91.1, 44397.0], [91.2, 44460.0], [91.3, 44467.0], [91.4, 44488.0], [91.5, 44500.0], [91.6, 44826.0], [91.7, 45031.0], [91.8, 45208.0], [91.9, 45358.0], [92.0, 45382.0], [92.1, 45720.0], [92.2, 45974.0], [92.3, 46223.0], [92.4, 46326.0], [92.5, 46398.0], [92.6, 46618.0], [92.7, 46698.0], [92.8, 46890.0], [92.9, 46891.0], [93.0, 47062.0], [93.1, 47618.0], [93.2, 47727.0], [93.3, 47759.0], [93.4, 47796.0], [93.5, 47885.0], [93.6, 47896.0], [93.7, 48115.0], [93.8, 48198.0], [93.9, 48535.0], [94.0, 48569.0], [94.1, 48786.0], [94.2, 48943.0], [94.3, 49061.0], [94.4, 49444.0], [94.5, 49519.0], [94.6, 49568.0], [94.7, 49771.0], [94.8, 50018.0], [94.9, 50151.0], [95.0, 50403.0], [95.1, 50484.0], [95.2, 50532.0], [95.3, 50722.0], [95.4, 50815.0], [95.5, 51048.0], [95.6, 51160.0], [95.7, 51273.0], [95.8, 51741.0], [95.9, 51998.0], [96.0, 52091.0], [96.1, 52154.0], [96.2, 52238.0], [96.3, 52335.0], [96.4, 52699.0], [96.5, 52752.0], [96.6, 53129.0], [96.7, 53274.0], [96.8, 53448.0], [96.9, 53609.0], [97.0, 53987.0], [97.1, 53993.0], [97.2, 54295.0], [97.3, 54849.0], [97.4, 55447.0], [97.5, 55449.0], [97.6, 55580.0], [97.7, 56439.0], [97.8, 56612.0], [97.9, 56662.0], [98.0, 57283.0], [98.1, 57477.0], [98.2, 57907.0], [98.3, 57971.0], [98.4, 58024.0], [98.5, 58089.0], [98.6, 58608.0], [98.7, 59860.0], [98.8, 59905.0], [98.9, 60179.0], [99.0, 60191.0], [99.1, 60214.0], [99.2, 60218.0], [99.3, 60220.0], [99.4, 60235.0], [99.5, 60235.0], [99.6, 60239.0], [99.7, 60293.0], [99.8, 60339.0], [99.9, 60353.0], [100.0, 60383.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 13.0, "series": [{"data": [[33700.0, 1.0], [34500.0, 2.0], [32900.0, 1.0], [36100.0, 3.0], [36900.0, 1.0], [37700.0, 1.0], [40900.0, 2.0], [39300.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [45700.0, 1.0], [48100.0, 2.0], [48900.0, 1.0], [49700.0, 2.0], [50500.0, 1.0], [52100.0, 2.0], [60100.0, 2.0], [600.0, 1.0], [700.0, 1.0], [900.0, 8.0], [1000.0, 10.0], [1100.0, 8.0], [1200.0, 9.0], [1300.0, 13.0], [1400.0, 5.0], [1500.0, 6.0], [1600.0, 5.0], [1700.0, 5.0], [1800.0, 7.0], [1900.0, 1.0], [2000.0, 13.0], [2100.0, 1.0], [2200.0, 2.0], [2300.0, 7.0], [2400.0, 3.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 9.0], [2800.0, 4.0], [2900.0, 5.0], [3000.0, 6.0], [3100.0, 7.0], [3300.0, 6.0], [3200.0, 5.0], [3400.0, 3.0], [3500.0, 1.0], [3700.0, 4.0], [3600.0, 2.0], [3800.0, 4.0], [3900.0, 6.0], [4000.0, 3.0], [4300.0, 3.0], [4200.0, 5.0], [4100.0, 6.0], [4600.0, 2.0], [4400.0, 4.0], [4500.0, 5.0], [4700.0, 10.0], [4800.0, 3.0], [5100.0, 3.0], [4900.0, 3.0], [5000.0, 2.0], [5200.0, 3.0], [5300.0, 2.0], [5600.0, 5.0], [5400.0, 8.0], [5500.0, 3.0], [5800.0, 6.0], [5700.0, 1.0], [5900.0, 3.0], [6000.0, 6.0], [6100.0, 3.0], [6200.0, 6.0], [6300.0, 3.0], [6600.0, 3.0], [6400.0, 2.0], [6500.0, 2.0], [6700.0, 2.0], [6800.0, 4.0], [6900.0, 4.0], [7000.0, 3.0], [7100.0, 5.0], [7400.0, 6.0], [7200.0, 2.0], [7300.0, 5.0], [7500.0, 4.0], [7600.0, 3.0], [7700.0, 4.0], [7900.0, 3.0], [7800.0, 3.0], [8000.0, 3.0], [8100.0, 1.0], [8600.0, 9.0], [8400.0, 5.0], [8200.0, 3.0], [8800.0, 5.0], [9200.0, 3.0], [9000.0, 2.0], [9400.0, 2.0], [9600.0, 2.0], [10000.0, 4.0], [9800.0, 3.0], [10200.0, 2.0], [10400.0, 3.0], [10600.0, 2.0], [10800.0, 4.0], [11000.0, 7.0], [11600.0, 4.0], [11400.0, 2.0], [11800.0, 3.0], [12000.0, 4.0], [12200.0, 3.0], [12600.0, 5.0], [12400.0, 2.0], [13200.0, 3.0], [13000.0, 2.0], [12800.0, 3.0], [13400.0, 5.0], [13600.0, 3.0], [13800.0, 3.0], [14200.0, 1.0], [14000.0, 1.0], [14400.0, 4.0], [14800.0, 6.0], [14600.0, 1.0], [15200.0, 2.0], [15000.0, 1.0], [15600.0, 4.0], [15800.0, 4.0], [15400.0, 2.0], [16000.0, 1.0], [16400.0, 3.0], [16800.0, 2.0], [17200.0, 2.0], [18000.0, 1.0], [17600.0, 1.0], [18800.0, 1.0], [19200.0, 1.0], [19600.0, 3.0], [20000.0, 3.0], [20400.0, 2.0], [21200.0, 3.0], [20800.0, 1.0], [22400.0, 6.0], [22800.0, 1.0], [23200.0, 2.0], [24400.0, 4.0], [24000.0, 2.0], [24800.0, 2.0], [26000.0, 4.0], [26400.0, 1.0], [25600.0, 1.0], [26800.0, 1.0], [27600.0, 4.0], [27200.0, 3.0], [28400.0, 3.0], [28000.0, 1.0], [28800.0, 1.0], [29600.0, 1.0], [29200.0, 1.0], [30000.0, 1.0], [30400.0, 1.0], [30800.0, 4.0], [31200.0, 1.0], [32400.0, 2.0], [32000.0, 2.0], [34400.0, 2.0], [33600.0, 1.0], [32800.0, 1.0], [36800.0, 1.0], [37600.0, 2.0], [39200.0, 1.0], [42400.0, 1.0], [44800.0, 1.0], [50400.0, 2.0], [52000.0, 1.0], [51200.0, 1.0], [53600.0, 1.0], [55200.0, 1.0], [34700.0, 1.0], [33900.0, 2.0], [36300.0, 1.0], [35500.0, 1.0], [38700.0, 1.0], [39500.0, 1.0], [42700.0, 1.0], [44300.0, 1.0], [45900.0, 1.0], [50700.0, 1.0], [52300.0, 1.0], [53100.0, 1.0], [53900.0, 2.0], [55500.0, 1.0], [57900.0, 2.0], [60300.0, 3.0], [59500.0, 1.0], [16500.0, 4.0], [16900.0, 1.0], [17300.0, 1.0], [17700.0, 3.0], [18100.0, 2.0], [18500.0, 2.0], [18900.0, 3.0], [19300.0, 1.0], [19700.0, 4.0], [20100.0, 5.0], [20900.0, 2.0], [21300.0, 3.0], [20500.0, 1.0], [22100.0, 2.0], [21700.0, 2.0], [23300.0, 3.0], [22900.0, 2.0], [23700.0, 4.0], [24100.0, 2.0], [24500.0, 1.0], [25300.0, 2.0], [24900.0, 2.0], [26100.0, 2.0], [26500.0, 1.0], [26900.0, 2.0], [27300.0, 2.0], [27700.0, 1.0], [28500.0, 1.0], [28100.0, 1.0], [28900.0, 2.0], [29300.0, 1.0], [30100.0, 4.0], [31300.0, 5.0], [31700.0, 2.0], [30900.0, 1.0], [32500.0, 1.0], [33800.0, 3.0], [34600.0, 2.0], [35400.0, 2.0], [38600.0, 1.0], [37000.0, 1.0], [39400.0, 2.0], [40200.0, 1.0], [41000.0, 2.0], [42600.0, 1.0], [43400.0, 3.0], [45000.0, 1.0], [44200.0, 1.0], [45800.0, 1.0], [46600.0, 2.0], [49000.0, 1.0], [52200.0, 1.0], [55400.0, 2.0], [58600.0, 1.0], [60200.0, 7.0], [33300.0, 3.0], [34100.0, 1.0], [36500.0, 2.0], [34900.0, 2.0], [35700.0, 2.0], [38100.0, 2.0], [37300.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [41300.0, 4.0], [42900.0, 1.0], [42100.0, 2.0], [44500.0, 1.0], [45300.0, 2.0], [48500.0, 2.0], [47700.0, 3.0], [50100.0, 1.0], [51700.0, 1.0], [8700.0, 6.0], [8500.0, 2.0], [8300.0, 2.0], [8900.0, 3.0], [9300.0, 3.0], [9500.0, 5.0], [9700.0, 5.0], [9900.0, 4.0], [10100.0, 2.0], [10500.0, 3.0], [10300.0, 3.0], [10700.0, 1.0], [11100.0, 2.0], [10900.0, 5.0], [11700.0, 2.0], [11300.0, 2.0], [11500.0, 1.0], [11900.0, 4.0], [12100.0, 3.0], [12500.0, 2.0], [12300.0, 2.0], [12700.0, 2.0], [12900.0, 1.0], [13100.0, 3.0], [13300.0, 2.0], [13700.0, 4.0], [14300.0, 4.0], [14100.0, 4.0], [13900.0, 4.0], [14500.0, 2.0], [14700.0, 7.0], [15300.0, 2.0], [14900.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [16100.0, 5.0], [15900.0, 2.0], [16300.0, 3.0], [17000.0, 3.0], [16600.0, 2.0], [17400.0, 2.0], [18200.0, 7.0], [17800.0, 3.0], [18600.0, 2.0], [19000.0, 4.0], [20200.0, 2.0], [19800.0, 1.0], [20600.0, 2.0], [21400.0, 1.0], [21000.0, 3.0], [22200.0, 2.0], [21800.0, 3.0], [23400.0, 3.0], [23000.0, 3.0], [24200.0, 1.0], [24600.0, 1.0], [25400.0, 3.0], [26600.0, 1.0], [25800.0, 4.0], [27400.0, 2.0], [28600.0, 3.0], [27800.0, 1.0], [29400.0, 4.0], [29800.0, 1.0], [30200.0, 1.0], [31000.0, 3.0], [32600.0, 3.0], [32200.0, 2.0], [31800.0, 2.0], [33200.0, 2.0], [34800.0, 1.0], [35600.0, 2.0], [36400.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [38000.0, 1.0], [40400.0, 4.0], [39600.0, 2.0], [42800.0, 1.0], [43600.0, 3.0], [44400.0, 3.0], [46800.0, 2.0], [45200.0, 1.0], [47600.0, 1.0], [50800.0, 1.0], [50000.0, 1.0], [53200.0, 1.0], [54800.0, 1.0], [57200.0, 1.0], [56400.0, 1.0], [58000.0, 2.0], [35100.0, 2.0], [35900.0, 1.0], [36700.0, 2.0], [37500.0, 4.0], [39100.0, 1.0], [41500.0, 2.0], [42300.0, 2.0], [43900.0, 2.0], [46300.0, 2.0], [48700.0, 1.0], [49500.0, 2.0], [51100.0, 1.0], [51900.0, 1.0], [52700.0, 1.0], [59900.0, 1.0], [16700.0, 3.0], [17100.0, 4.0], [18300.0, 2.0], [17900.0, 2.0], [17500.0, 1.0], [18700.0, 4.0], [19100.0, 1.0], [20300.0, 2.0], [19900.0, 2.0], [19500.0, 1.0], [21500.0, 3.0], [20700.0, 1.0], [21100.0, 2.0], [21900.0, 3.0], [22300.0, 2.0], [22700.0, 3.0], [23100.0, 1.0], [24300.0, 3.0], [23900.0, 2.0], [25500.0, 2.0], [24700.0, 3.0], [25100.0, 1.0], [26300.0, 2.0], [27500.0, 4.0], [26700.0, 2.0], [27100.0, 1.0], [28300.0, 1.0], [29100.0, 1.0], [29500.0, 3.0], [29900.0, 2.0], [30300.0, 1.0], [30700.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [33400.0, 1.0], [34200.0, 1.0], [36600.0, 1.0], [35000.0, 1.0], [37400.0, 1.0], [38200.0, 2.0], [40600.0, 2.0], [39800.0, 1.0], [41400.0, 1.0], [47000.0, 1.0], [46200.0, 1.0], [47800.0, 3.0], [49400.0, 1.0], [51000.0, 1.0], [52600.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [56600.0, 2.0], [57400.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1009.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 55.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1009.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.58426966292135, "minX": 1.65124044E12, "maxY": 88.5705882352941, "series": [{"data": [[1.6512408E12, 61.786206896551704], [1.6512405E12, 23.030120481927714], [1.65124068E12, 74.4036144578313], [1.65124056E12, 39.916666666666686], [1.65124074E12, 88.5705882352941], [1.65124044E12, 9.58426966292135], [1.65124062E12, 56.37209302325579]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512408E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4071.277108433735, "minX": 1.0, "maxY": 60179.0, "series": [{"data": [[2.0, 59546.0], [3.0, 29449.5], [4.0, 28912.0], [5.0, 19246.0], [6.0, 27515.0], [7.0, 19053.0], [8.0, 26957.5], [9.0, 18704.0], [10.0, 4071.277108433735], [11.0, 20646.0], [12.0, 25174.0], [13.0, 17525.333333333336], [14.0, 25473.5], [15.0, 18306.0], [16.0, 23452.5], [17.0, 26609.5], [18.0, 17779.666666666664], [19.0, 24397.0], [20.0, 7089.535714285714], [21.0, 20279.666666666664], [22.0, 24020.0], [23.0, 27044.0], [24.0, 20361.0], [25.0, 21550.333333333336], [26.0, 19190.5], [27.0, 19101.666666666664], [28.0, 18677.0], [29.0, 14272.666666666666], [30.0, 10346.829268292684], [31.0, 19847.333333333332], [32.0, 18158.5], [33.0, 20481.666666666668], [34.0, 27384.5], [35.0, 13308.333333333334], [36.0, 18787.5], [37.0, 14262.0], [38.0, 15253.5], [39.0, 14760.333333333332], [40.0, 12641.586206896556], [41.0, 17527.0], [42.0, 14079.666666666668], [43.0, 18186.5], [44.0, 15258.0], [45.0, 17971.0], [46.0, 16035.666666666666], [47.0, 18809.5], [48.0, 16842.5], [49.0, 17849.666666666668], [50.0, 15979.966292134832], [51.0, 14030.0], [52.0, 17592.666666666668], [53.0, 22360.5], [54.0, 12342.5], [55.0, 18826.666666666668], [56.0, 9109.666666666666], [57.0, 7815.0], [58.0, 10192.333333333334], [59.0, 13229.5], [60.0, 19301.954545454544], [61.0, 19127.0], [62.0, 43116.666666666664], [63.0, 47856.5], [64.0, 44824.5], [65.0, 44812.333333333336], [66.0, 34213.333333333336], [67.0, 53609.0], [68.0, 21325.333333333332], [69.0, 30709.0], [70.0, 19758.534883720917], [71.0, 30637.333333333336], [72.0, 36726.5], [73.0, 31430.333333333336], [74.0, 43755.5], [75.0, 34381.333333333336], [76.0, 41334.0], [77.0, 45082.0], [78.0, 33847.333333333336], [79.0, 42269.0], [80.0, 27368.59302325582], [81.0, 46075.333333333336], [82.0, 27919.0], [83.0, 23686.0], [84.0, 43543.5], [85.0, 31720.25], [86.0, 34791.28571428572], [87.0, 33651.625], [88.0, 29287.714285714286], [89.0, 31027.8], [90.0, 28512.589595375714], [1.0, 60179.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[53.38754646840145, 19133.05390334572]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 90.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 229.91666666666666, "minX": 1.65124044E12, "maxY": 523.7833333333333, "series": [{"data": [[1.6512408E12, 476.21666666666664], [1.6512405E12, 484.81666666666666], [1.65124068E12, 486.31666666666666], [1.65124056E12, 491.56666666666666], [1.65124074E12, 523.7833333333333], [1.65124044E12, 259.53333333333336], [1.65124062E12, 503.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6512408E12, 374.5833333333333], [1.6512405E12, 428.8333333333333], [1.65124068E12, 428.8333333333333], [1.65124056E12, 434.0], [1.65124074E12, 439.1666666666667], [1.65124044E12, 229.91666666666666], [1.65124062E12, 444.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512408E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3188.112359550562, "minX": 1.65124044E12, "maxY": 34080.06896551724, "series": [{"data": [[1.6512408E12, 34080.06896551724], [1.6512405E12, 7349.903614457832], [1.65124068E12, 22104.02409638554], [1.65124056E12, 12452.839285714288], [1.65124074E12, 30766.45882352941], [1.65124044E12, 3188.112359550562], [1.65124062E12, 18314.459302325584]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512408E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3187.999999999999, "minX": 1.65124044E12, "maxY": 34080.04827586206, "series": [{"data": [[1.6512408E12, 34080.04827586206], [1.6512405E12, 7349.855421686749], [1.65124068E12, 22104.006024096398], [1.65124056E12, 12452.80357142857], [1.65124074E12, 30766.42352941178], [1.65124044E12, 3187.999999999999], [1.65124062E12, 18314.430232558134]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512408E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.552941176470592, "minX": 1.65124044E12, "maxY": 16.1685393258427, "series": [{"data": [[1.6512408E12, 7.648275862068967], [1.6512405E12, 9.596385542168669], [1.65124068E12, 7.837349397590353], [1.65124056E12, 8.541666666666664], [1.65124074E12, 7.552941176470592], [1.65124044E12, 16.1685393258427], [1.65124062E12, 8.046511627906977]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512408E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 682.0, "minX": 1.65124044E12, "maxY": 59905.0, "series": [{"data": [[1.6512408E12, 59860.0], [1.6512405E12, 19703.0], [1.65124068E12, 52335.0], [1.65124056E12, 31304.0], [1.65124074E12, 59905.0], [1.65124044E12, 8870.0], [1.65124062E12, 41507.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6512408E12, 53988.2], [1.6512405E12, 14050.500000000002], [1.65124068E12, 41073.700000000004], [1.65124056E12, 22826.8], [1.65124074E12, 50498.700000000004], [1.65124044E12, 6660.0], [1.65124062E12, 32696.600000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6512408E12, 59740.68], [1.6512405E12, 18712.070000000018], [1.65124068E12, 51937.020000000004], [1.65124056E12, 30492.56], [1.65124074E12, 58644.730000000025], [1.65124044E12, 8870.0], [1.65124062E12, 39996.63000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6512408E12, 56743.49999999999], [1.6512405E12, 15923.000000000002], [1.65124068E12, 45492.25000000001], [1.65124056E12, 25247.599999999988], [1.65124074E12, 53387.1], [1.65124044E12, 7937.0], [1.65124062E12, 35253.799999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6512408E12, 1539.0], [1.6512405E12, 682.0], [1.65124068E12, 1145.0], [1.65124056E12, 997.0], [1.65124074E12, 1120.0], [1.65124044E12, 928.0], [1.65124062E12, 912.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6512408E12, 32525.0], [1.6512405E12, 6914.5], [1.65124068E12, 20754.5], [1.65124056E12, 11920.0], [1.65124074E12, 31374.5], [1.65124044E12, 2725.0], [1.65124062E12, 18386.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512408E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13962.5, "minX": 1.0, "maxY": 60239.0, "series": [{"data": [[2.0, 15241.0], [4.0, 17534.5], [1.0, 29474.0], [5.0, 51048.0], [3.0, 13962.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60227.5], [2.0, 60179.0], [5.0, 60239.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13962.5, "minX": 1.0, "maxY": 60239.0, "series": [{"data": [[2.0, 15241.0], [4.0, 17534.5], [1.0, 29474.0], [5.0, 51048.0], [3.0, 13962.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60227.5], [2.0, 60179.0], [5.0, 60239.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.65124044E12, "maxY": 3.1666666666666665, "series": [{"data": [[1.6512408E12, 0.9166666666666666], [1.6512405E12, 3.1], [1.65124068E12, 2.966666666666667], [1.65124056E12, 3.1333333333333333], [1.65124074E12, 3.0], [1.65124044E12, 1.65], [1.65124062E12, 3.1666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512408E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124044E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.6512408E12, 2.283333333333333], [1.6512405E12, 2.7666666666666666], [1.65124068E12, 2.7666666666666666], [1.65124056E12, 2.8], [1.65124074E12, 2.7666666666666666], [1.65124044E12, 1.4833333333333334], [1.65124062E12, 2.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6512408E12, 0.13333333333333333], [1.65124074E12, 0.06666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512408E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124044E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.6512408E12, 2.283333333333333], [1.6512405E12, 2.7666666666666666], [1.65124068E12, 2.7666666666666666], [1.65124056E12, 2.8], [1.65124074E12, 2.7666666666666666], [1.65124044E12, 1.4833333333333334], [1.65124062E12, 2.8666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.6512408E12, 0.13333333333333333], [1.65124074E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512408E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.65124044E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.6512408E12, 2.283333333333333], [1.6512405E12, 2.7666666666666666], [1.65124068E12, 2.7666666666666666], [1.65124056E12, 2.8], [1.65124074E12, 2.7666666666666666], [1.65124044E12, 1.4833333333333334], [1.65124062E12, 2.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6512408E12, 0.13333333333333333], [1.65124074E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512408E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


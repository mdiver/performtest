/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 635.0, "minX": 0.0, "maxY": 57697.0, "series": [{"data": [[0.0, 635.0], [0.1, 635.0], [0.2, 786.0], [0.3, 806.0], [0.4, 881.0], [0.5, 892.0], [0.6, 905.0], [0.7, 1014.0], [0.8, 1020.0], [0.9, 1032.0], [1.0, 1035.0], [1.1, 1052.0], [1.2, 1058.0], [1.3, 1069.0], [1.4, 1084.0], [1.5, 1101.0], [1.6, 1108.0], [1.7, 1117.0], [1.8, 1118.0], [1.9, 1147.0], [2.0, 1149.0], [2.1, 1155.0], [2.2, 1160.0], [2.3, 1169.0], [2.4, 1195.0], [2.5, 1197.0], [2.6, 1199.0], [2.7, 1214.0], [2.8, 1220.0], [2.9, 1229.0], [3.0, 1269.0], [3.1, 1301.0], [3.2, 1301.0], [3.3, 1301.0], [3.4, 1309.0], [3.5, 1322.0], [3.6, 1327.0], [3.7, 1328.0], [3.8, 1369.0], [3.9, 1382.0], [4.0, 1385.0], [4.1, 1394.0], [4.2, 1396.0], [4.3, 1401.0], [4.4, 1402.0], [4.5, 1404.0], [4.6, 1410.0], [4.7, 1432.0], [4.8, 1434.0], [4.9, 1436.0], [5.0, 1439.0], [5.1, 1499.0], [5.2, 1516.0], [5.3, 1524.0], [5.4, 1560.0], [5.5, 1563.0], [5.6, 1569.0], [5.7, 1591.0], [5.8, 1592.0], [5.9, 1600.0], [6.0, 1609.0], [6.1, 1610.0], [6.2, 1647.0], [6.3, 1647.0], [6.4, 1671.0], [6.5, 1701.0], [6.6, 1708.0], [6.7, 1746.0], [6.8, 1805.0], [6.9, 1814.0], [7.0, 1819.0], [7.1, 1879.0], [7.2, 1914.0], [7.3, 1953.0], [7.4, 1954.0], [7.5, 1967.0], [7.6, 2039.0], [7.7, 2046.0], [7.8, 2064.0], [7.9, 2076.0], [8.0, 2132.0], [8.1, 2159.0], [8.2, 2197.0], [8.3, 2197.0], [8.4, 2209.0], [8.5, 2228.0], [8.6, 2244.0], [8.7, 2251.0], [8.8, 2270.0], [8.9, 2270.0], [9.0, 2312.0], [9.1, 2319.0], [9.2, 2336.0], [9.3, 2340.0], [9.4, 2340.0], [9.5, 2355.0], [9.6, 2373.0], [9.7, 2385.0], [9.8, 2432.0], [9.9, 2444.0], [10.0, 2446.0], [10.1, 2447.0], [10.2, 2447.0], [10.3, 2459.0], [10.4, 2465.0], [10.5, 2486.0], [10.6, 2489.0], [10.7, 2522.0], [10.8, 2553.0], [10.9, 2569.0], [11.0, 2603.0], [11.1, 2639.0], [11.2, 2676.0], [11.3, 2688.0], [11.4, 2692.0], [11.5, 2693.0], [11.6, 2728.0], [11.7, 2747.0], [11.8, 2760.0], [11.9, 2793.0], [12.0, 2802.0], [12.1, 2828.0], [12.2, 2838.0], [12.3, 2842.0], [12.4, 2853.0], [12.5, 2853.0], [12.6, 2863.0], [12.7, 2882.0], [12.8, 2896.0], [12.9, 2901.0], [13.0, 2938.0], [13.1, 2940.0], [13.2, 3002.0], [13.3, 3083.0], [13.4, 3094.0], [13.5, 3106.0], [13.6, 3136.0], [13.7, 3141.0], [13.8, 3166.0], [13.9, 3175.0], [14.0, 3219.0], [14.1, 3225.0], [14.2, 3249.0], [14.3, 3304.0], [14.4, 3304.0], [14.5, 3308.0], [14.6, 3362.0], [14.7, 3375.0], [14.8, 3380.0], [14.9, 3390.0], [15.0, 3394.0], [15.1, 3454.0], [15.2, 3496.0], [15.3, 3500.0], [15.4, 3545.0], [15.5, 3545.0], [15.6, 3550.0], [15.7, 3550.0], [15.8, 3570.0], [15.9, 3573.0], [16.0, 3582.0], [16.1, 3585.0], [16.2, 3607.0], [16.3, 3609.0], [16.4, 3683.0], [16.5, 3691.0], [16.6, 3694.0], [16.7, 3731.0], [16.8, 3747.0], [16.9, 3748.0], [17.0, 3748.0], [17.1, 3754.0], [17.2, 3764.0], [17.3, 3841.0], [17.4, 3878.0], [17.5, 3961.0], [17.6, 3984.0], [17.7, 4033.0], [17.8, 4043.0], [17.9, 4057.0], [18.0, 4060.0], [18.1, 4079.0], [18.2, 4090.0], [18.3, 4096.0], [18.4, 4108.0], [18.5, 4119.0], [18.6, 4132.0], [18.7, 4134.0], [18.8, 4134.0], [18.9, 4180.0], [19.0, 4212.0], [19.1, 4216.0], [19.2, 4257.0], [19.3, 4261.0], [19.4, 4315.0], [19.5, 4332.0], [19.6, 4354.0], [19.7, 4358.0], [19.8, 4365.0], [19.9, 4401.0], [20.0, 4410.0], [20.1, 4510.0], [20.2, 4511.0], [20.3, 4512.0], [20.4, 4569.0], [20.5, 4584.0], [20.6, 4602.0], [20.7, 4639.0], [20.8, 4651.0], [20.9, 4693.0], [21.0, 4715.0], [21.1, 4748.0], [21.2, 4796.0], [21.3, 4801.0], [21.4, 4803.0], [21.5, 4837.0], [21.6, 4839.0], [21.7, 4855.0], [21.8, 4857.0], [21.9, 4857.0], [22.0, 4858.0], [22.1, 4858.0], [22.2, 4885.0], [22.3, 4915.0], [22.4, 4915.0], [22.5, 4917.0], [22.6, 4927.0], [22.7, 4940.0], [22.8, 4960.0], [22.9, 5009.0], [23.0, 5014.0], [23.1, 5036.0], [23.2, 5050.0], [23.3, 5056.0], [23.4, 5092.0], [23.5, 5094.0], [23.6, 5107.0], [23.7, 5120.0], [23.8, 5232.0], [23.9, 5299.0], [24.0, 5311.0], [24.1, 5331.0], [24.2, 5364.0], [24.3, 5378.0], [24.4, 5407.0], [24.5, 5421.0], [24.6, 5422.0], [24.7, 5437.0], [24.8, 5470.0], [24.9, 5487.0], [25.0, 5487.0], [25.1, 5496.0], [25.2, 5527.0], [25.3, 5529.0], [25.4, 5559.0], [25.5, 5565.0], [25.6, 5566.0], [25.7, 5586.0], [25.8, 5641.0], [25.9, 5668.0], [26.0, 5688.0], [26.1, 5690.0], [26.2, 5700.0], [26.3, 5715.0], [26.4, 5764.0], [26.5, 5777.0], [26.6, 5781.0], [26.7, 5826.0], [26.8, 5849.0], [26.9, 5865.0], [27.0, 5887.0], [27.1, 5893.0], [27.2, 5921.0], [27.3, 5922.0], [27.4, 5980.0], [27.5, 6085.0], [27.6, 6097.0], [27.7, 6128.0], [27.8, 6173.0], [27.9, 6181.0], [28.0, 6186.0], [28.1, 6187.0], [28.2, 6187.0], [28.3, 6234.0], [28.4, 6299.0], [28.5, 6304.0], [28.6, 6305.0], [28.7, 6380.0], [28.8, 6380.0], [28.9, 6393.0], [29.0, 6419.0], [29.1, 6475.0], [29.2, 6475.0], [29.3, 6482.0], [29.4, 6513.0], [29.5, 6520.0], [29.6, 6528.0], [29.7, 6592.0], [29.8, 6623.0], [29.9, 6656.0], [30.0, 6835.0], [30.1, 6837.0], [30.2, 6838.0], [30.3, 6847.0], [30.4, 6863.0], [30.5, 6869.0], [30.6, 6905.0], [30.7, 6918.0], [30.8, 6919.0], [30.9, 6920.0], [31.0, 6984.0], [31.1, 6987.0], [31.2, 6990.0], [31.3, 6990.0], [31.4, 6990.0], [31.5, 7003.0], [31.6, 7034.0], [31.7, 7059.0], [31.8, 7086.0], [31.9, 7114.0], [32.0, 7172.0], [32.1, 7202.0], [32.2, 7225.0], [32.3, 7275.0], [32.4, 7301.0], [32.5, 7328.0], [32.6, 7364.0], [32.7, 7456.0], [32.8, 7468.0], [32.9, 7513.0], [33.0, 7563.0], [33.1, 7580.0], [33.2, 7656.0], [33.3, 7682.0], [33.4, 7863.0], [33.5, 7867.0], [33.6, 7880.0], [33.7, 7881.0], [33.8, 7883.0], [33.9, 7900.0], [34.0, 7936.0], [34.1, 7975.0], [34.2, 7979.0], [34.3, 7979.0], [34.4, 7979.0], [34.5, 8028.0], [34.6, 8075.0], [34.7, 8103.0], [34.8, 8160.0], [34.9, 8241.0], [35.0, 8249.0], [35.1, 8255.0], [35.2, 8309.0], [35.3, 8354.0], [35.4, 8363.0], [35.5, 8370.0], [35.6, 8467.0], [35.7, 8492.0], [35.8, 8529.0], [35.9, 8576.0], [36.0, 8583.0], [36.1, 8642.0], [36.2, 8643.0], [36.3, 8699.0], [36.4, 8703.0], [36.5, 8753.0], [36.6, 8761.0], [36.7, 8828.0], [36.8, 8853.0], [36.9, 8877.0], [37.0, 8898.0], [37.1, 8908.0], [37.2, 8917.0], [37.3, 8971.0], [37.4, 8979.0], [37.5, 8979.0], [37.6, 8983.0], [37.7, 9023.0], [37.8, 9156.0], [37.9, 9179.0], [38.0, 9182.0], [38.1, 9203.0], [38.2, 9204.0], [38.3, 9236.0], [38.4, 9244.0], [38.5, 9314.0], [38.6, 9315.0], [38.7, 9413.0], [38.8, 9459.0], [38.9, 9472.0], [39.0, 9480.0], [39.1, 9495.0], [39.2, 9550.0], [39.3, 9639.0], [39.4, 9671.0], [39.5, 9682.0], [39.6, 9755.0], [39.7, 9803.0], [39.8, 9813.0], [39.9, 9848.0], [40.0, 9876.0], [40.1, 9950.0], [40.2, 9974.0], [40.3, 9990.0], [40.4, 9997.0], [40.5, 10033.0], [40.6, 10073.0], [40.7, 10073.0], [40.8, 10093.0], [40.9, 10128.0], [41.0, 10129.0], [41.1, 10147.0], [41.2, 10304.0], [41.3, 10321.0], [41.4, 10329.0], [41.5, 10332.0], [41.6, 10342.0], [41.7, 10359.0], [41.8, 10427.0], [41.9, 10463.0], [42.0, 10465.0], [42.1, 10467.0], [42.2, 10520.0], [42.3, 10533.0], [42.4, 10592.0], [42.5, 10646.0], [42.6, 10657.0], [42.7, 10680.0], [42.8, 10697.0], [42.9, 10744.0], [43.0, 10787.0], [43.1, 10792.0], [43.2, 10825.0], [43.3, 10841.0], [43.4, 10985.0], [43.5, 11023.0], [43.6, 11027.0], [43.7, 11033.0], [43.8, 11033.0], [43.9, 11080.0], [44.0, 11091.0], [44.1, 11122.0], [44.2, 11170.0], [44.3, 11222.0], [44.4, 11233.0], [44.5, 11251.0], [44.6, 11300.0], [44.7, 11373.0], [44.8, 11400.0], [44.9, 11427.0], [45.0, 11475.0], [45.1, 11512.0], [45.2, 11514.0], [45.3, 11550.0], [45.4, 11696.0], [45.5, 11724.0], [45.6, 11732.0], [45.7, 11783.0], [45.8, 11871.0], [45.9, 11913.0], [46.0, 11926.0], [46.1, 11951.0], [46.2, 11967.0], [46.3, 12030.0], [46.4, 12030.0], [46.5, 12060.0], [46.6, 12093.0], [46.7, 12147.0], [46.8, 12201.0], [46.9, 12201.0], [47.0, 12210.0], [47.1, 12216.0], [47.2, 12308.0], [47.3, 12406.0], [47.4, 12411.0], [47.5, 12464.0], [47.6, 12529.0], [47.7, 12612.0], [47.8, 12636.0], [47.9, 12638.0], [48.0, 12660.0], [48.1, 12722.0], [48.2, 12782.0], [48.3, 12861.0], [48.4, 12952.0], [48.5, 12977.0], [48.6, 13018.0], [48.7, 13075.0], [48.8, 13203.0], [48.9, 13210.0], [49.0, 13210.0], [49.1, 13211.0], [49.2, 13225.0], [49.3, 13247.0], [49.4, 13257.0], [49.5, 13264.0], [49.6, 13304.0], [49.7, 13391.0], [49.8, 13393.0], [49.9, 13457.0], [50.0, 13512.0], [50.1, 13512.0], [50.2, 13545.0], [50.3, 13657.0], [50.4, 13715.0], [50.5, 13747.0], [50.6, 13772.0], [50.7, 13804.0], [50.8, 13817.0], [50.9, 13832.0], [51.0, 13837.0], [51.1, 13854.0], [51.2, 13857.0], [51.3, 13877.0], [51.4, 13983.0], [51.5, 14065.0], [51.6, 14121.0], [51.7, 14127.0], [51.8, 14140.0], [51.9, 14180.0], [52.0, 14216.0], [52.1, 14218.0], [52.2, 14246.0], [52.3, 14293.0], [52.4, 14312.0], [52.5, 14336.0], [52.6, 14347.0], [52.7, 14360.0], [52.8, 14472.0], [52.9, 14578.0], [53.0, 14617.0], [53.1, 14617.0], [53.2, 14617.0], [53.3, 14618.0], [53.4, 14634.0], [53.5, 14634.0], [53.6, 14689.0], [53.7, 14731.0], [53.8, 14819.0], [53.9, 14922.0], [54.0, 14958.0], [54.1, 14989.0], [54.2, 15120.0], [54.3, 15185.0], [54.4, 15259.0], [54.5, 15267.0], [54.6, 15335.0], [54.7, 15375.0], [54.8, 15540.0], [54.9, 15631.0], [55.0, 15646.0], [55.1, 15692.0], [55.2, 15731.0], [55.3, 15862.0], [55.4, 15869.0], [55.5, 15954.0], [55.6, 15962.0], [55.7, 15972.0], [55.8, 15980.0], [55.9, 15993.0], [56.0, 16029.0], [56.1, 16088.0], [56.2, 16141.0], [56.3, 16141.0], [56.4, 16205.0], [56.5, 16324.0], [56.6, 16349.0], [56.7, 16355.0], [56.8, 16438.0], [56.9, 16514.0], [57.0, 16543.0], [57.1, 16579.0], [57.2, 16586.0], [57.3, 16589.0], [57.4, 16590.0], [57.5, 16654.0], [57.6, 16679.0], [57.7, 16689.0], [57.8, 16776.0], [57.9, 16846.0], [58.0, 16887.0], [58.1, 16992.0], [58.2, 17011.0], [58.3, 17054.0], [58.4, 17071.0], [58.5, 17118.0], [58.6, 17126.0], [58.7, 17294.0], [58.8, 17322.0], [58.9, 17374.0], [59.0, 17391.0], [59.1, 17464.0], [59.2, 17508.0], [59.3, 17551.0], [59.4, 17551.0], [59.5, 17645.0], [59.6, 17656.0], [59.7, 17778.0], [59.8, 17969.0], [59.9, 17972.0], [60.0, 17994.0], [60.1, 18025.0], [60.2, 18027.0], [60.3, 18176.0], [60.4, 18182.0], [60.5, 18182.0], [60.6, 18193.0], [60.7, 18218.0], [60.8, 18267.0], [60.9, 18320.0], [61.0, 18320.0], [61.1, 18361.0], [61.2, 18395.0], [61.3, 18431.0], [61.4, 18536.0], [61.5, 18570.0], [61.6, 18630.0], [61.7, 18901.0], [61.8, 18945.0], [61.9, 18996.0], [62.0, 19002.0], [62.1, 19034.0], [62.2, 19082.0], [62.3, 19094.0], [62.4, 19106.0], [62.5, 19232.0], [62.6, 19232.0], [62.7, 19263.0], [62.8, 19292.0], [62.9, 19327.0], [63.0, 19330.0], [63.1, 19356.0], [63.2, 19377.0], [63.3, 19420.0], [63.4, 19510.0], [63.5, 19512.0], [63.6, 19761.0], [63.7, 19762.0], [63.8, 19837.0], [63.9, 19868.0], [64.0, 19975.0], [64.1, 20071.0], [64.2, 20075.0], [64.3, 20105.0], [64.4, 20162.0], [64.5, 20288.0], [64.6, 20297.0], [64.7, 20350.0], [64.8, 20428.0], [64.9, 20457.0], [65.0, 20470.0], [65.1, 20549.0], [65.2, 20634.0], [65.3, 20689.0], [65.4, 20822.0], [65.5, 20857.0], [65.6, 20931.0], [65.7, 20931.0], [65.8, 21003.0], [65.9, 21006.0], [66.0, 21092.0], [66.1, 21141.0], [66.2, 21171.0], [66.3, 21250.0], [66.4, 21277.0], [66.5, 21286.0], [66.6, 21323.0], [66.7, 21376.0], [66.8, 21396.0], [66.9, 21476.0], [67.0, 21502.0], [67.1, 21527.0], [67.2, 21656.0], [67.3, 21710.0], [67.4, 21734.0], [67.5, 21737.0], [67.6, 21802.0], [67.7, 21844.0], [67.8, 21925.0], [67.9, 22051.0], [68.0, 22064.0], [68.1, 22083.0], [68.2, 22201.0], [68.3, 22267.0], [68.4, 22313.0], [68.5, 22371.0], [68.6, 22560.0], [68.7, 22573.0], [68.8, 22573.0], [68.9, 22705.0], [69.0, 22766.0], [69.1, 22793.0], [69.2, 22862.0], [69.3, 22927.0], [69.4, 22951.0], [69.5, 22976.0], [69.6, 22979.0], [69.7, 23032.0], [69.8, 23075.0], [69.9, 23137.0], [70.0, 23138.0], [70.1, 23145.0], [70.2, 23298.0], [70.3, 23457.0], [70.4, 23539.0], [70.5, 23644.0], [70.6, 23763.0], [70.7, 23787.0], [70.8, 23819.0], [70.9, 23857.0], [71.0, 23864.0], [71.1, 23906.0], [71.2, 23936.0], [71.3, 24164.0], [71.4, 24255.0], [71.5, 24318.0], [71.6, 24334.0], [71.7, 24413.0], [71.8, 24467.0], [71.9, 24467.0], [72.0, 24511.0], [72.1, 24534.0], [72.2, 24547.0], [72.3, 24653.0], [72.4, 24692.0], [72.5, 24708.0], [72.6, 24791.0], [72.7, 24921.0], [72.8, 24940.0], [72.9, 24972.0], [73.0, 25188.0], [73.1, 25305.0], [73.2, 25370.0], [73.3, 25377.0], [73.4, 25428.0], [73.5, 25516.0], [73.6, 25684.0], [73.7, 25689.0], [73.8, 25746.0], [73.9, 25751.0], [74.0, 25875.0], [74.1, 25900.0], [74.2, 25937.0], [74.3, 25958.0], [74.4, 25962.0], [74.5, 25974.0], [74.6, 25982.0], [74.7, 26052.0], [74.8, 26060.0], [74.9, 26073.0], [75.0, 26075.0], [75.1, 26075.0], [75.2, 26136.0], [75.3, 26149.0], [75.4, 26222.0], [75.5, 26331.0], [75.6, 26356.0], [75.7, 26716.0], [75.8, 27000.0], [75.9, 27052.0], [76.0, 27139.0], [76.1, 27178.0], [76.2, 27178.0], [76.3, 27192.0], [76.4, 27263.0], [76.5, 27268.0], [76.6, 27322.0], [76.7, 27389.0], [76.8, 27426.0], [76.9, 27456.0], [77.0, 27521.0], [77.1, 27535.0], [77.2, 27676.0], [77.3, 27735.0], [77.4, 27835.0], [77.5, 27942.0], [77.6, 27967.0], [77.7, 27970.0], [77.8, 28010.0], [77.9, 28013.0], [78.0, 28304.0], [78.1, 28410.0], [78.2, 28410.0], [78.3, 28480.0], [78.4, 28531.0], [78.5, 28697.0], [78.6, 28731.0], [78.7, 28744.0], [78.8, 28800.0], [78.9, 28919.0], [79.0, 28921.0], [79.1, 28962.0], [79.2, 29033.0], [79.3, 29050.0], [79.4, 29186.0], [79.5, 29233.0], [79.6, 29311.0], [79.7, 29431.0], [79.8, 29461.0], [79.9, 29586.0], [80.0, 29590.0], [80.1, 29663.0], [80.2, 29672.0], [80.3, 29682.0], [80.4, 29712.0], [80.5, 29840.0], [80.6, 29939.0], [80.7, 30229.0], [80.8, 30260.0], [80.9, 30335.0], [81.0, 30336.0], [81.1, 30354.0], [81.2, 30410.0], [81.3, 30410.0], [81.4, 30539.0], [81.5, 30748.0], [81.6, 30870.0], [81.7, 30930.0], [81.8, 31022.0], [81.9, 31099.0], [82.0, 31115.0], [82.1, 31185.0], [82.2, 31358.0], [82.3, 31446.0], [82.4, 31477.0], [82.5, 31480.0], [82.6, 31544.0], [82.7, 31626.0], [82.8, 31797.0], [82.9, 31890.0], [83.0, 32039.0], [83.1, 32140.0], [83.2, 32333.0], [83.3, 32488.0], [83.4, 32539.0], [83.5, 32555.0], [83.6, 32557.0], [83.7, 32568.0], [83.8, 32675.0], [83.9, 32693.0], [84.0, 32781.0], [84.1, 32928.0], [84.2, 33018.0], [84.3, 33219.0], [84.4, 33219.0], [84.5, 33357.0], [84.6, 33715.0], [84.7, 33716.0], [84.8, 33745.0], [84.9, 33783.0], [85.0, 33812.0], [85.1, 33827.0], [85.2, 33912.0], [85.3, 33940.0], [85.4, 33959.0], [85.5, 34003.0], [85.6, 34007.0], [85.7, 34113.0], [85.8, 34298.0], [85.9, 34581.0], [86.0, 34583.0], [86.1, 34882.0], [86.2, 35026.0], [86.3, 35029.0], [86.4, 35072.0], [86.5, 35080.0], [86.6, 35158.0], [86.7, 35204.0], [86.8, 35286.0], [86.9, 35292.0], [87.0, 35451.0], [87.1, 35538.0], [87.2, 35543.0], [87.3, 35627.0], [87.4, 35774.0], [87.5, 35927.0], [87.6, 35927.0], [87.7, 36031.0], [87.8, 36220.0], [87.9, 36247.0], [88.0, 36270.0], [88.1, 36364.0], [88.2, 36606.0], [88.3, 36626.0], [88.4, 36662.0], [88.5, 36826.0], [88.6, 37026.0], [88.7, 37078.0], [88.8, 37204.0], [88.9, 37499.0], [89.0, 37524.0], [89.1, 37712.0], [89.2, 37718.0], [89.3, 37794.0], [89.4, 37905.0], [89.5, 38069.0], [89.6, 38099.0], [89.7, 38204.0], [89.8, 38537.0], [89.9, 38599.0], [90.0, 38852.0], [90.1, 38906.0], [90.2, 38926.0], [90.3, 39041.0], [90.4, 39137.0], [90.5, 39237.0], [90.6, 39306.0], [90.7, 39306.0], [90.8, 39455.0], [90.9, 39514.0], [91.0, 39525.0], [91.1, 39540.0], [91.2, 39633.0], [91.3, 39882.0], [91.4, 39964.0], [91.5, 40160.0], [91.6, 40328.0], [91.7, 40343.0], [91.8, 40754.0], [91.9, 40799.0], [92.0, 40810.0], [92.1, 40857.0], [92.2, 40901.0], [92.3, 41062.0], [92.4, 41133.0], [92.5, 41153.0], [92.6, 41274.0], [92.7, 41327.0], [92.8, 41401.0], [92.9, 41604.0], [93.0, 41774.0], [93.1, 41944.0], [93.2, 42246.0], [93.3, 42474.0], [93.4, 42490.0], [93.5, 42497.0], [93.6, 42518.0], [93.7, 42583.0], [93.8, 42583.0], [93.9, 42669.0], [94.0, 42909.0], [94.1, 43053.0], [94.2, 43103.0], [94.3, 43478.0], [94.4, 43574.0], [94.5, 43789.0], [94.6, 44019.0], [94.7, 44107.0], [94.8, 44223.0], [94.9, 44401.0], [95.0, 44542.0], [95.1, 44656.0], [95.2, 45325.0], [95.3, 45402.0], [95.4, 45448.0], [95.5, 45732.0], [95.6, 45791.0], [95.7, 46208.0], [95.8, 46535.0], [95.9, 46607.0], [96.0, 46642.0], [96.1, 46921.0], [96.2, 46922.0], [96.3, 47294.0], [96.4, 47386.0], [96.5, 47466.0], [96.6, 47530.0], [96.7, 47721.0], [96.8, 48230.0], [96.9, 48230.0], [97.0, 48290.0], [97.1, 48482.0], [97.2, 49239.0], [97.3, 49260.0], [97.4, 49351.0], [97.5, 49483.0], [97.6, 49635.0], [97.7, 50150.0], [97.8, 50351.0], [97.9, 50786.0], [98.0, 50823.0], [98.1, 51151.0], [98.2, 51435.0], [98.3, 51716.0], [98.4, 51987.0], [98.5, 52155.0], [98.6, 52211.0], [98.7, 52602.0], [98.8, 53181.0], [98.9, 53280.0], [99.0, 53916.0], [99.1, 53933.0], [99.2, 54542.0], [99.3, 54679.0], [99.4, 55024.0], [99.5, 55417.0], [99.6, 55586.0], [99.7, 55647.0], [99.8, 56002.0], [99.9, 57697.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 12.0, "series": [{"data": [[34500.0, 2.0], [33700.0, 4.0], [32900.0, 1.0], [37700.0, 3.0], [38500.0, 2.0], [40100.0, 1.0], [39300.0, 1.0], [40900.0, 1.0], [42500.0, 2.0], [41700.0, 1.0], [44100.0, 1.0], [45700.0, 2.0], [46500.0, 1.0], [47300.0, 1.0], [52100.0, 1.0], [54500.0, 1.0], [600.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 8.0], [1100.0, 12.0], [1200.0, 4.0], [1300.0, 11.0], [1400.0, 9.0], [1500.0, 7.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 6.0], [2300.0, 7.0], [2400.0, 9.0], [2500.0, 3.0], [2600.0, 6.0], [2700.0, 4.0], [2800.0, 8.0], [2900.0, 3.0], [3000.0, 3.0], [3100.0, 5.0], [3300.0, 8.0], [3200.0, 3.0], [3400.0, 2.0], [3500.0, 8.0], [3600.0, 5.0], [3700.0, 6.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 7.0], [4200.0, 4.0], [4300.0, 5.0], [4100.0, 5.0], [4600.0, 4.0], [4500.0, 5.0], [4400.0, 2.0], [4800.0, 9.0], [4700.0, 3.0], [4900.0, 6.0], [5000.0, 7.0], [5100.0, 2.0], [5300.0, 4.0], [5200.0, 2.0], [5600.0, 4.0], [5500.0, 6.0], [5400.0, 7.0], [5800.0, 5.0], [5700.0, 5.0], [6100.0, 5.0], [5900.0, 3.0], [6000.0, 2.0], [6300.0, 5.0], [6200.0, 2.0], [6600.0, 2.0], [6500.0, 4.0], [6400.0, 4.0], [6900.0, 8.0], [6800.0, 6.0], [7000.0, 4.0], [7100.0, 2.0], [7400.0, 2.0], [7300.0, 3.0], [7200.0, 3.0], [7600.0, 2.0], [7500.0, 3.0], [7900.0, 5.0], [7800.0, 5.0], [8000.0, 2.0], [8100.0, 2.0], [8600.0, 3.0], [8200.0, 3.0], [8400.0, 2.0], [9200.0, 4.0], [8800.0, 4.0], [9000.0, 1.0], [9400.0, 5.0], [9600.0, 3.0], [9800.0, 4.0], [10000.0, 3.0], [10600.0, 4.0], [10400.0, 4.0], [11000.0, 5.0], [10800.0, 2.0], [11200.0, 3.0], [11600.0, 1.0], [11400.0, 3.0], [12200.0, 3.0], [12000.0, 4.0], [11800.0, 1.0], [12400.0, 3.0], [12600.0, 4.0], [13200.0, 8.0], [13000.0, 2.0], [12800.0, 1.0], [13800.0, 7.0], [13400.0, 1.0], [13600.0, 1.0], [14200.0, 4.0], [14000.0, 1.0], [14400.0, 1.0], [14600.0, 6.0], [14800.0, 1.0], [15200.0, 2.0], [15600.0, 3.0], [15800.0, 2.0], [16000.0, 2.0], [16200.0, 1.0], [16800.0, 2.0], [16400.0, 1.0], [17200.0, 1.0], [18000.0, 2.0], [17600.0, 2.0], [18400.0, 1.0], [19200.0, 3.0], [20400.0, 3.0], [20000.0, 2.0], [21200.0, 3.0], [20800.0, 2.0], [22000.0, 3.0], [21600.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [26000.0, 4.0], [25600.0, 2.0], [27600.0, 1.0], [27200.0, 2.0], [28000.0, 2.0], [28400.0, 2.0], [29600.0, 3.0], [29200.0, 1.0], [28800.0, 1.0], [30400.0, 1.0], [30800.0, 1.0], [31600.0, 1.0], [32400.0, 1.0], [32000.0, 1.0], [35200.0, 3.0], [36800.0, 1.0], [36000.0, 1.0], [40800.0, 2.0], [39200.0, 1.0], [41600.0, 1.0], [42400.0, 3.0], [44000.0, 1.0], [47200.0, 1.0], [49600.0, 1.0], [56000.0, 1.0], [57600.0, 1.0], [33900.0, 3.0], [35500.0, 2.0], [36300.0, 1.0], [37900.0, 1.0], [39500.0, 3.0], [40300.0, 2.0], [41100.0, 2.0], [41900.0, 1.0], [43500.0, 1.0], [47500.0, 1.0], [50700.0, 1.0], [53100.0, 1.0], [53900.0, 2.0], [55500.0, 1.0], [16500.0, 6.0], [17300.0, 3.0], [16900.0, 1.0], [18100.0, 4.0], [17700.0, 1.0], [19300.0, 4.0], [18900.0, 3.0], [18500.0, 2.0], [20100.0, 2.0], [19700.0, 2.0], [21300.0, 3.0], [20500.0, 1.0], [20900.0, 1.0], [22500.0, 2.0], [21700.0, 3.0], [22900.0, 4.0], [24100.0, 1.0], [24500.0, 3.0], [23700.0, 2.0], [25300.0, 3.0], [24900.0, 3.0], [25700.0, 2.0], [26100.0, 2.0], [27300.0, 2.0], [28500.0, 1.0], [27700.0, 1.0], [28900.0, 3.0], [29300.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [31700.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [32500.0, 4.0], [32100.0, 1.0], [33800.0, 2.0], [33000.0, 1.0], [36200.0, 3.0], [35400.0, 1.0], [37000.0, 2.0], [39400.0, 1.0], [42600.0, 1.0], [41000.0, 1.0], [43400.0, 1.0], [44200.0, 1.0], [46600.0, 2.0], [47400.0, 1.0], [48200.0, 2.0], [52200.0, 1.0], [51400.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [34100.0, 1.0], [33300.0, 1.0], [35700.0, 1.0], [38900.0, 2.0], [41300.0, 1.0], [42900.0, 1.0], [44500.0, 1.0], [43700.0, 1.0], [46900.0, 2.0], [45300.0, 1.0], [47700.0, 1.0], [50100.0, 1.0], [49300.0, 1.0], [51700.0, 1.0], [8300.0, 4.0], [8500.0, 3.0], [8700.0, 3.0], [9100.0, 3.0], [8900.0, 5.0], [9500.0, 1.0], [9300.0, 2.0], [9700.0, 1.0], [9900.0, 4.0], [10100.0, 3.0], [10700.0, 3.0], [10300.0, 6.0], [10500.0, 3.0], [10900.0, 1.0], [11100.0, 2.0], [11500.0, 3.0], [11700.0, 3.0], [11300.0, 2.0], [11900.0, 4.0], [12100.0, 1.0], [12700.0, 2.0], [12500.0, 1.0], [12300.0, 1.0], [13300.0, 3.0], [12900.0, 2.0], [13500.0, 2.0], [13700.0, 3.0], [13900.0, 1.0], [14300.0, 4.0], [14100.0, 4.0], [14700.0, 1.0], [14500.0, 1.0], [15300.0, 2.0], [14900.0, 3.0], [15100.0, 2.0], [15500.0, 1.0], [15700.0, 1.0], [16300.0, 3.0], [16100.0, 1.0], [15900.0, 5.0], [16600.0, 3.0], [17400.0, 1.0], [17000.0, 3.0], [18200.0, 2.0], [19000.0, 4.0], [18600.0, 1.0], [19400.0, 1.0], [20200.0, 2.0], [19800.0, 2.0], [20600.0, 2.0], [21000.0, 3.0], [21400.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [23000.0, 2.0], [23400.0, 1.0], [23800.0, 3.0], [24200.0, 1.0], [24600.0, 2.0], [25400.0, 1.0], [26200.0, 1.0], [25800.0, 1.0], [27400.0, 2.0], [27000.0, 2.0], [27800.0, 1.0], [28600.0, 1.0], [29000.0, 2.0], [29400.0, 2.0], [30200.0, 2.0], [29800.0, 1.0], [31400.0, 3.0], [31000.0, 2.0], [31800.0, 1.0], [32600.0, 2.0], [34000.0, 2.0], [33200.0, 1.0], [34800.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [38800.0, 1.0], [38000.0, 2.0], [39600.0, 1.0], [41200.0, 1.0], [44400.0, 1.0], [48400.0, 1.0], [49200.0, 2.0], [50800.0, 1.0], [53200.0, 1.0], [55600.0, 1.0], [35100.0, 1.0], [35900.0, 1.0], [37500.0, 1.0], [40700.0, 2.0], [39900.0, 1.0], [39100.0, 1.0], [43100.0, 1.0], [51100.0, 1.0], [50300.0, 1.0], [51900.0, 1.0], [17100.0, 2.0], [16700.0, 1.0], [17500.0, 2.0], [18300.0, 4.0], [17900.0, 3.0], [19100.0, 1.0], [19500.0, 2.0], [20300.0, 1.0], [19900.0, 1.0], [21500.0, 2.0], [21100.0, 2.0], [22300.0, 2.0], [21900.0, 1.0], [22700.0, 3.0], [23500.0, 1.0], [23100.0, 3.0], [23900.0, 2.0], [24300.0, 2.0], [24700.0, 2.0], [25100.0, 1.0], [25500.0, 1.0], [25900.0, 6.0], [26300.0, 2.0], [27500.0, 2.0], [27100.0, 4.0], [26700.0, 1.0], [27900.0, 3.0], [28300.0, 1.0], [28700.0, 2.0], [29500.0, 2.0], [29100.0, 1.0], [29900.0, 1.0], [30300.0, 3.0], [30700.0, 1.0], [31100.0, 2.0], [31500.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [34200.0, 1.0], [36600.0, 3.0], [35000.0, 4.0], [38200.0, 1.0], [37400.0, 1.0], [39000.0, 1.0], [39800.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [45400.0, 2.0], [46200.0, 1.0], [49400.0, 1.0], [52600.0, 1.0], [55000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 57600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 918.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 918.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.263157894736842, "minX": 1.65124692E12, "maxY": 79.42771084337349, "series": [{"data": [[1.65124728E12, 36.38888888888891], [1.6512471E12, 53.588957055214735], [1.65124692E12, 9.263157894736842], [1.65124716E12, 70.46198830409357], [1.65124704E12, 35.662650602409634], [1.65124722E12, 79.42771084337349], [1.65124698E12, 18.919075144508668]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124728E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3652.1764705882333, "minX": 1.0, "maxY": 43574.0, "series": [{"data": [[2.0, 15950.5], [3.0, 42497.0], [4.0, 10195.0], [5.0, 21166.0], [6.0, 9404.666666666666], [7.0, 20565.5], [8.0, 9039.0], [9.0, 14403.666666666666], [10.0, 3652.1764705882333], [11.0, 15164.0], [12.0, 20327.0], [13.0, 19941.5], [14.0, 19481.666666666668], [15.0, 19356.5], [16.0, 20226.0], [17.0, 12305.333333333334], [18.0, 27703.5], [19.0, 12800.333333333334], [20.0, 7118.056818181821], [21.0, 29712.0], [22.0, 21052.666666666664], [23.0, 10873.333333333334], [24.0, 26172.0], [25.0, 11806.0], [26.0, 19317.333333333336], [27.0, 14665.0], [28.0, 26735.5], [29.0, 12990.333333333332], [30.0, 10129.290697674418], [31.0, 12867.666666666666], [32.0, 20259.666666666664], [33.0, 18637.5], [34.0, 20821.666666666664], [35.0, 11635.5], [36.0, 15320.0], [37.0, 7680.5], [38.0, 15643.666666666666], [39.0, 33684.0], [40.0, 12820.176470588234], [41.0, 31298.333333333336], [42.0, 29318.5], [43.0, 32171.666666666664], [44.0, 25042.0], [45.0, 40368.0], [46.0, 16987.333333333332], [47.0, 35598.5], [48.0, 17972.666666666668], [49.0, 26271.5], [50.0, 15909.183908045978], [51.0, 36227.0], [53.0, 25554.0], [52.0, 25962.0], [55.0, 26218.333333333336], [54.0, 23864.0], [56.0, 15145.5], [57.0, 36534.5], [58.0, 15227.5], [59.0, 28247.333333333332], [60.0, 19706.31325301205], [61.0, 29324.0], [62.0, 15738.5], [63.0, 29983.0], [64.0, 26590.5], [65.0, 26994.75], [66.0, 26511.5], [67.0, 24139.666666666668], [68.0, 17832.0], [69.0, 11591.0], [70.0, 21187.588888888888], [71.0, 23694.5], [72.0, 21135.333333333332], [73.0, 34127.5], [74.0, 18073.666666666668], [75.0, 22906.5], [76.0, 19822.333333333332], [77.0, 36951.0], [78.0, 32804.0], [79.0, 35266.0], [80.0, 26620.59217877095], [1.0, 43574.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[47.840909090909115, 17227.370867768594]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 147.25, "minX": 1.65124692E12, "maxY": 504.95, "series": [{"data": [[1.65124728E12, 211.2], [1.6512471E12, 477.35], [1.65124692E12, 166.16666666666666], [1.65124716E12, 500.96666666666664], [1.65124704E12, 485.78333333333336], [1.65124722E12, 486.3833333333333], [1.65124698E12, 504.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124728E12, 186.0], [1.6512471E12, 421.0833333333333], [1.65124692E12, 147.25], [1.65124716E12, 441.75], [1.65124704E12, 428.8333333333333], [1.65124722E12, 428.8333333333333], [1.65124698E12, 446.9166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124728E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2900.80701754386, "minX": 1.65124692E12, "maxY": 34969.68055555557, "series": [{"data": [[1.65124728E12, 34969.68055555557], [1.6512471E12, 16958.730061349695], [1.65124692E12, 2900.80701754386], [1.65124716E12, 22454.309941520452], [1.65124704E12, 11599.054216867473], [1.65124722E12, 27027.6265060241], [1.65124698E12, 5647.06936416185]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124728E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2900.719298245615, "minX": 1.65124692E12, "maxY": 34969.68055555557, "series": [{"data": [[1.65124728E12, 34969.68055555557], [1.6512471E12, 16958.693251533736], [1.65124692E12, 2900.719298245615], [1.65124716E12, 22454.298245614027], [1.65124704E12, 11599.018072289153], [1.65124722E12, 27027.590361445775], [1.65124698E12, 5647.040462427747]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124728E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.555555555555556, "minX": 1.65124692E12, "maxY": 20.35087719298245, "series": [{"data": [[1.65124728E12, 7.555555555555556], [1.6512471E12, 7.914110429447856], [1.65124692E12, 20.35087719298245], [1.65124716E12, 8.081871345029242], [1.65124704E12, 8.566265060240964], [1.65124722E12, 7.566265060240965], [1.65124698E12, 10.352601156069365]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124728E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 635.0, "minX": 1.65124692E12, "maxY": 57697.0, "series": [{"data": [[1.65124728E12, 57697.0], [1.6512471E12, 36220.0], [1.65124692E12, 6990.0], [1.65124716E12, 47386.0], [1.65124704E12, 25370.0], [1.65124722E12, 56002.0], [1.65124698E12, 14293.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124728E12, 52741.50000000001], [1.6512471E12, 29747.799999999996], [1.65124692E12, 5362.000000000001], [1.65124716E12, 39897.8], [1.65124704E12, 20199.800000000003], [1.65124722E12, 49287.3], [1.65124698E12, 10821.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124728E12, 57697.0], [1.6512471E12, 35626.07999999999], [1.65124692E12, 6990.0], [1.65124716E12, 47051.2], [1.65124704E12, 25069.170000000006], [1.65124722E12, 55610.05000000001], [1.65124698E12, 13526.35999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124728E12, 54996.45], [1.6512471E12, 32543.199999999997], [1.65124692E12, 6340.099999999998], [1.65124716E12, 42527.2], [1.65124704E12, 22381.850000000002], [1.65124722E12, 52096.200000000004], [1.65124698E12, 12030.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124728E12, 10646.0], [1.6512471E12, 1032.0], [1.65124692E12, 786.0], [1.65124716E12, 635.0], [1.65124704E12, 892.0], [1.65124722E12, 1069.0], [1.65124698E12, 905.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124728E12, 35054.5], [1.6512471E12, 16514.0], [1.65124692E12, 2459.0], [1.65124716E12, 22201.0], [1.65124704E12, 11457.0], [1.65124722E12, 27178.0], [1.65124698E12, 5050.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124728E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 786.0, "minX": 1.0, "maxY": 14232.0, "series": [{"data": [[1.0, 786.0], [2.0, 14232.0], [4.0, 8839.0], [3.0, 14140.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 784.0, "minX": 1.0, "maxY": 14232.0, "series": [{"data": [[1.0, 784.0], [2.0, 14232.0], [4.0, 8839.0], [3.0, 14140.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124692E12, "maxY": 3.216666666666667, "series": [{"data": [[1.65124728E12, 0.03333333333333333], [1.6512471E12, 3.0], [1.65124692E12, 1.1166666666666667], [1.65124716E12, 3.183333333333333], [1.65124704E12, 2.9833333333333334], [1.65124722E12, 2.6], [1.65124698E12, 3.216666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.65124692E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124728E12, 1.2], [1.6512471E12, 2.716666666666667], [1.65124692E12, 0.95], [1.65124716E12, 2.85], [1.65124704E12, 2.7666666666666666], [1.65124722E12, 2.7666666666666666], [1.65124698E12, 2.8833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124728E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.65124692E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124728E12, 1.2], [1.6512471E12, 2.716666666666667], [1.65124692E12, 0.95], [1.65124716E12, 2.85], [1.65124704E12, 2.7666666666666666], [1.65124722E12, 2.7666666666666666], [1.65124698E12, 2.8833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124728E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.65124692E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65124728E12, 1.2], [1.6512471E12, 2.716666666666667], [1.65124692E12, 0.95], [1.65124716E12, 2.85], [1.65124704E12, 2.7666666666666666], [1.65124722E12, 2.7666666666666666], [1.65124698E12, 2.8833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124728E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


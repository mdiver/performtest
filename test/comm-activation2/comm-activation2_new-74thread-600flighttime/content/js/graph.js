/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 761.0, "minX": 0.0, "maxY": 59028.0, "series": [{"data": [[0.0, 761.0], [0.1, 825.0], [0.2, 907.0], [0.3, 950.0], [0.4, 973.0], [0.5, 976.0], [0.6, 998.0], [0.7, 1019.0], [0.8, 1035.0], [0.9, 1047.0], [1.0, 1062.0], [1.1, 1074.0], [1.2, 1113.0], [1.3, 1163.0], [1.4, 1165.0], [1.5, 1178.0], [1.6, 1221.0], [1.7, 1228.0], [1.8, 1252.0], [1.9, 1287.0], [2.0, 1332.0], [2.1, 1350.0], [2.2, 1371.0], [2.3, 1391.0], [2.4, 1399.0], [2.5, 1469.0], [2.6, 1475.0], [2.7, 1510.0], [2.8, 1532.0], [2.9, 1550.0], [3.0, 1563.0], [3.1, 1594.0], [3.2, 1611.0], [3.3, 1652.0], [3.4, 1658.0], [3.5, 1719.0], [3.6, 1735.0], [3.7, 1820.0], [3.8, 1836.0], [3.9, 1885.0], [4.0, 1908.0], [4.1, 1931.0], [4.2, 1946.0], [4.3, 1970.0], [4.4, 1997.0], [4.5, 2005.0], [4.6, 2078.0], [4.7, 2090.0], [4.8, 2113.0], [4.9, 2136.0], [5.0, 2168.0], [5.1, 2198.0], [5.2, 2211.0], [5.3, 2261.0], [5.4, 2324.0], [5.5, 2357.0], [5.6, 2366.0], [5.7, 2385.0], [5.8, 2401.0], [5.9, 2430.0], [6.0, 2469.0], [6.1, 2513.0], [6.2, 2518.0], [6.3, 2578.0], [6.4, 2626.0], [6.5, 2664.0], [6.6, 2679.0], [6.7, 2716.0], [6.8, 2731.0], [6.9, 2758.0], [7.0, 2790.0], [7.1, 2796.0], [7.2, 2865.0], [7.3, 2907.0], [7.4, 2912.0], [7.5, 2934.0], [7.6, 2973.0], [7.7, 3029.0], [7.8, 3085.0], [7.9, 3128.0], [8.0, 3138.0], [8.1, 3156.0], [8.2, 3257.0], [8.3, 3286.0], [8.4, 3290.0], [8.5, 3296.0], [8.6, 3319.0], [8.7, 3379.0], [8.8, 3399.0], [8.9, 3405.0], [9.0, 3438.0], [9.1, 3456.0], [9.2, 3480.0], [9.3, 3617.0], [9.4, 3648.0], [9.5, 3688.0], [9.6, 3727.0], [9.7, 3772.0], [9.8, 3778.0], [9.9, 3825.0], [10.0, 3870.0], [10.1, 3879.0], [10.2, 3909.0], [10.3, 3935.0], [10.4, 3992.0], [10.5, 4059.0], [10.6, 4085.0], [10.7, 4140.0], [10.8, 4164.0], [10.9, 4172.0], [11.0, 4191.0], [11.1, 4215.0], [11.2, 4237.0], [11.3, 4305.0], [11.4, 4352.0], [11.5, 4366.0], [11.6, 4378.0], [11.7, 4391.0], [11.8, 4432.0], [11.9, 4464.0], [12.0, 4494.0], [12.1, 4539.0], [12.2, 4561.0], [12.3, 4590.0], [12.4, 4615.0], [12.5, 4643.0], [12.6, 4692.0], [12.7, 4713.0], [12.8, 4769.0], [12.9, 4894.0], [13.0, 4931.0], [13.1, 4964.0], [13.2, 5012.0], [13.3, 5051.0], [13.4, 5054.0], [13.5, 5074.0], [13.6, 5098.0], [13.7, 5141.0], [13.8, 5216.0], [13.9, 5226.0], [14.0, 5282.0], [14.1, 5313.0], [14.2, 5340.0], [14.3, 5361.0], [14.4, 5393.0], [14.5, 5405.0], [14.6, 5456.0], [14.7, 5492.0], [14.8, 5496.0], [14.9, 5534.0], [15.0, 5563.0], [15.1, 5666.0], [15.2, 5686.0], [15.3, 5717.0], [15.4, 5736.0], [15.5, 5746.0], [15.6, 5784.0], [15.7, 5873.0], [15.8, 5882.0], [15.9, 5981.0], [16.0, 5996.0], [16.1, 6023.0], [16.2, 6033.0], [16.3, 6087.0], [16.4, 6153.0], [16.5, 6178.0], [16.6, 6184.0], [16.7, 6208.0], [16.8, 6257.0], [16.9, 6282.0], [17.0, 6322.0], [17.1, 6346.0], [17.2, 6365.0], [17.3, 6425.0], [17.4, 6433.0], [17.5, 6520.0], [17.6, 6523.0], [17.7, 6533.0], [17.8, 6591.0], [17.9, 6616.0], [18.0, 6624.0], [18.1, 6645.0], [18.2, 6712.0], [18.3, 6793.0], [18.4, 6824.0], [18.5, 6847.0], [18.6, 6934.0], [18.7, 6944.0], [18.8, 6961.0], [18.9, 7046.0], [19.0, 7064.0], [19.1, 7084.0], [19.2, 7159.0], [19.3, 7214.0], [19.4, 7234.0], [19.5, 7254.0], [19.6, 7319.0], [19.7, 7412.0], [19.8, 7439.0], [19.9, 7475.0], [20.0, 7581.0], [20.1, 7626.0], [20.2, 7653.0], [20.3, 7708.0], [20.4, 7767.0], [20.5, 7783.0], [20.6, 7855.0], [20.7, 7893.0], [20.8, 7923.0], [20.9, 7954.0], [21.0, 8055.0], [21.1, 8106.0], [21.2, 8227.0], [21.3, 8278.0], [21.4, 8342.0], [21.5, 8362.0], [21.6, 8367.0], [21.7, 8376.0], [21.8, 8415.0], [21.9, 8450.0], [22.0, 8456.0], [22.1, 8503.0], [22.2, 8518.0], [22.3, 8536.0], [22.4, 8589.0], [22.5, 8658.0], [22.6, 8669.0], [22.7, 8680.0], [22.8, 8726.0], [22.9, 8756.0], [23.0, 8767.0], [23.1, 8815.0], [23.2, 8901.0], [23.3, 8943.0], [23.4, 8965.0], [23.5, 9046.0], [23.6, 9069.0], [23.7, 9095.0], [23.8, 9115.0], [23.9, 9183.0], [24.0, 9227.0], [24.1, 9239.0], [24.2, 9315.0], [24.3, 9344.0], [24.4, 9394.0], [24.5, 9451.0], [24.6, 9495.0], [24.7, 9536.0], [24.8, 9558.0], [24.9, 9631.0], [25.0, 9712.0], [25.1, 9776.0], [25.2, 9784.0], [25.3, 9796.0], [25.4, 9842.0], [25.5, 9886.0], [25.6, 9934.0], [25.7, 9952.0], [25.8, 10009.0], [25.9, 10071.0], [26.0, 10156.0], [26.1, 10173.0], [26.2, 10207.0], [26.3, 10234.0], [26.4, 10269.0], [26.5, 10300.0], [26.6, 10304.0], [26.7, 10382.0], [26.8, 10459.0], [26.9, 10467.0], [27.0, 10483.0], [27.1, 10559.0], [27.2, 10581.0], [27.3, 10660.0], [27.4, 10734.0], [27.5, 10789.0], [27.6, 10791.0], [27.7, 10852.0], [27.8, 10882.0], [27.9, 10891.0], [28.0, 10907.0], [28.1, 10968.0], [28.2, 11085.0], [28.3, 11110.0], [28.4, 11153.0], [28.5, 11170.0], [28.6, 11211.0], [28.7, 11240.0], [28.8, 11324.0], [28.9, 11399.0], [29.0, 11426.0], [29.1, 11458.0], [29.2, 11567.0], [29.3, 11614.0], [29.4, 11648.0], [29.5, 11709.0], [29.6, 11748.0], [29.7, 11768.0], [29.8, 11853.0], [29.9, 11941.0], [30.0, 11969.0], [30.1, 11997.0], [30.2, 12049.0], [30.3, 12081.0], [30.4, 12149.0], [30.5, 12183.0], [30.6, 12224.0], [30.7, 12278.0], [30.8, 12321.0], [30.9, 12353.0], [31.0, 12404.0], [31.1, 12455.0], [31.2, 12461.0], [31.3, 12495.0], [31.4, 12538.0], [31.5, 12561.0], [31.6, 12611.0], [31.7, 12698.0], [31.8, 12738.0], [31.9, 12760.0], [32.0, 12793.0], [32.1, 12845.0], [32.2, 12861.0], [32.3, 12928.0], [32.4, 12964.0], [32.5, 12999.0], [32.6, 13093.0], [32.7, 13114.0], [32.8, 13157.0], [32.9, 13201.0], [33.0, 13274.0], [33.1, 13350.0], [33.2, 13387.0], [33.3, 13437.0], [33.4, 13464.0], [33.5, 13519.0], [33.6, 13567.0], [33.7, 13580.0], [33.8, 13655.0], [33.9, 13778.0], [34.0, 13800.0], [34.1, 13824.0], [34.2, 13946.0], [34.3, 13952.0], [34.4, 13989.0], [34.5, 14004.0], [34.6, 14055.0], [34.7, 14076.0], [34.8, 14092.0], [34.9, 14106.0], [35.0, 14125.0], [35.1, 14186.0], [35.2, 14228.0], [35.3, 14259.0], [35.4, 14330.0], [35.5, 14436.0], [35.6, 14456.0], [35.7, 14480.0], [35.8, 14572.0], [35.9, 14580.0], [36.0, 14613.0], [36.1, 14681.0], [36.2, 14732.0], [36.3, 14854.0], [36.4, 14887.0], [36.5, 14925.0], [36.6, 14995.0], [36.7, 15071.0], [36.8, 15089.0], [36.9, 15143.0], [37.0, 15157.0], [37.1, 15200.0], [37.2, 15228.0], [37.3, 15265.0], [37.4, 15288.0], [37.5, 15307.0], [37.6, 15439.0], [37.7, 15469.0], [37.8, 15599.0], [37.9, 15690.0], [38.0, 15732.0], [38.1, 15776.0], [38.2, 15795.0], [38.3, 15829.0], [38.4, 15876.0], [38.5, 15995.0], [38.6, 16032.0], [38.7, 16064.0], [38.8, 16119.0], [38.9, 16139.0], [39.0, 16153.0], [39.1, 16180.0], [39.2, 16192.0], [39.3, 16211.0], [39.4, 16231.0], [39.5, 16249.0], [39.6, 16305.0], [39.7, 16377.0], [39.8, 16432.0], [39.9, 16516.0], [40.0, 16655.0], [40.1, 16766.0], [40.2, 16774.0], [40.3, 16836.0], [40.4, 16879.0], [40.5, 16885.0], [40.6, 16995.0], [40.7, 17013.0], [40.8, 17036.0], [40.9, 17046.0], [41.0, 17115.0], [41.1, 17167.0], [41.2, 17215.0], [41.3, 17299.0], [41.4, 17342.0], [41.5, 17377.0], [41.6, 17380.0], [41.7, 17433.0], [41.8, 17478.0], [41.9, 17549.0], [42.0, 17590.0], [42.1, 17681.0], [42.2, 17781.0], [42.3, 17789.0], [42.4, 17835.0], [42.5, 17854.0], [42.6, 17917.0], [42.7, 18014.0], [42.8, 18048.0], [42.9, 18058.0], [43.0, 18126.0], [43.1, 18180.0], [43.2, 18271.0], [43.3, 18277.0], [43.4, 18289.0], [43.5, 18342.0], [43.6, 18436.0], [43.7, 18436.0], [43.8, 18480.0], [43.9, 18535.0], [44.0, 18554.0], [44.1, 18622.0], [44.2, 18740.0], [44.3, 18869.0], [44.4, 18894.0], [44.5, 18949.0], [44.6, 18980.0], [44.7, 19006.0], [44.8, 19015.0], [44.9, 19032.0], [45.0, 19068.0], [45.1, 19127.0], [45.2, 19199.0], [45.3, 19243.0], [45.4, 19368.0], [45.5, 19416.0], [45.6, 19451.0], [45.7, 19461.0], [45.8, 19497.0], [45.9, 19546.0], [46.0, 19608.0], [46.1, 19648.0], [46.2, 19722.0], [46.3, 19750.0], [46.4, 19787.0], [46.5, 19866.0], [46.6, 19899.0], [46.7, 19977.0], [46.8, 20038.0], [46.9, 20049.0], [47.0, 20084.0], [47.1, 20135.0], [47.2, 20146.0], [47.3, 20159.0], [47.4, 20226.0], [47.5, 20307.0], [47.6, 20377.0], [47.7, 20521.0], [47.8, 20557.0], [47.9, 20578.0], [48.0, 20601.0], [48.1, 20608.0], [48.2, 20638.0], [48.3, 20710.0], [48.4, 20805.0], [48.5, 20807.0], [48.6, 20858.0], [48.7, 20882.0], [48.8, 21026.0], [48.9, 21072.0], [49.0, 21111.0], [49.1, 21233.0], [49.2, 21345.0], [49.3, 21367.0], [49.4, 21455.0], [49.5, 21520.0], [49.6, 21562.0], [49.7, 21576.0], [49.8, 21606.0], [49.9, 21616.0], [50.0, 21651.0], [50.1, 21668.0], [50.2, 21738.0], [50.3, 21751.0], [50.4, 21778.0], [50.5, 21822.0], [50.6, 21911.0], [50.7, 21915.0], [50.8, 21957.0], [50.9, 22080.0], [51.0, 22155.0], [51.1, 22168.0], [51.2, 22247.0], [51.3, 22291.0], [51.4, 22300.0], [51.5, 22324.0], [51.6, 22368.0], [51.7, 22520.0], [51.8, 22544.0], [51.9, 22631.0], [52.0, 22648.0], [52.1, 22722.0], [52.2, 22751.0], [52.3, 22798.0], [52.4, 22858.0], [52.5, 22952.0], [52.6, 22964.0], [52.7, 23008.0], [52.8, 23035.0], [52.9, 23054.0], [53.0, 23104.0], [53.1, 23190.0], [53.2, 23276.0], [53.3, 23399.0], [53.4, 23450.0], [53.5, 23455.0], [53.6, 23466.0], [53.7, 23484.0], [53.8, 23547.0], [53.9, 23574.0], [54.0, 23698.0], [54.1, 23770.0], [54.2, 23779.0], [54.3, 23844.0], [54.4, 23883.0], [54.5, 23957.0], [54.6, 24039.0], [54.7, 24152.0], [54.8, 24179.0], [54.9, 24214.0], [55.0, 24248.0], [55.1, 24270.0], [55.2, 24340.0], [55.3, 24435.0], [55.4, 24436.0], [55.5, 24485.0], [55.6, 24576.0], [55.7, 24618.0], [55.8, 24654.0], [55.9, 24721.0], [56.0, 24766.0], [56.1, 24775.0], [56.2, 24868.0], [56.3, 24909.0], [56.4, 24990.0], [56.5, 25082.0], [56.6, 25120.0], [56.7, 25270.0], [56.8, 25285.0], [56.9, 25334.0], [57.0, 25365.0], [57.1, 25400.0], [57.2, 25458.0], [57.3, 25532.0], [57.4, 25539.0], [57.5, 25588.0], [57.6, 25640.0], [57.7, 25669.0], [57.8, 25694.0], [57.9, 25711.0], [58.0, 25752.0], [58.1, 25880.0], [58.2, 25897.0], [58.3, 25920.0], [58.4, 26001.0], [58.5, 26045.0], [58.6, 26059.0], [58.7, 26167.0], [58.8, 26215.0], [58.9, 26258.0], [59.0, 26292.0], [59.1, 26411.0], [59.2, 26478.0], [59.3, 26530.0], [59.4, 26560.0], [59.5, 26620.0], [59.6, 26632.0], [59.7, 26670.0], [59.8, 26873.0], [59.9, 26899.0], [60.0, 26969.0], [60.1, 27026.0], [60.2, 27077.0], [60.3, 27102.0], [60.4, 27149.0], [60.5, 27273.0], [60.6, 27363.0], [60.7, 27421.0], [60.8, 27426.0], [60.9, 27471.0], [61.0, 27549.0], [61.1, 27560.0], [61.2, 27654.0], [61.3, 27754.0], [61.4, 27807.0], [61.5, 27831.0], [61.6, 27870.0], [61.7, 27925.0], [61.8, 27952.0], [61.9, 28021.0], [62.0, 28146.0], [62.1, 28242.0], [62.2, 28276.0], [62.3, 28348.0], [62.4, 28410.0], [62.5, 28445.0], [62.6, 28484.0], [62.7, 28526.0], [62.8, 28551.0], [62.9, 28567.0], [63.0, 28713.0], [63.1, 28755.0], [63.2, 28772.0], [63.3, 28803.0], [63.4, 28864.0], [63.5, 28874.0], [63.6, 29028.0], [63.7, 29072.0], [63.8, 29111.0], [63.9, 29203.0], [64.0, 29230.0], [64.1, 29429.0], [64.2, 29486.0], [64.3, 29530.0], [64.4, 29562.0], [64.5, 29605.0], [64.6, 29623.0], [64.7, 29675.0], [64.8, 29770.0], [64.9, 29789.0], [65.0, 29905.0], [65.1, 29910.0], [65.2, 29926.0], [65.3, 29935.0], [65.4, 29994.0], [65.5, 30105.0], [65.6, 30140.0], [65.7, 30150.0], [65.8, 30175.0], [65.9, 30290.0], [66.0, 30379.0], [66.1, 30462.0], [66.2, 30571.0], [66.3, 30587.0], [66.4, 30679.0], [66.5, 30792.0], [66.6, 30841.0], [66.7, 30853.0], [66.8, 30903.0], [66.9, 30960.0], [67.0, 31075.0], [67.1, 31109.0], [67.2, 31151.0], [67.3, 31223.0], [67.4, 31230.0], [67.5, 31309.0], [67.6, 31322.0], [67.7, 31345.0], [67.8, 31373.0], [67.9, 31450.0], [68.0, 31514.0], [68.1, 31738.0], [68.2, 31818.0], [68.3, 31852.0], [68.4, 31929.0], [68.5, 31943.0], [68.6, 31967.0], [68.7, 32096.0], [68.8, 32151.0], [68.9, 32207.0], [69.0, 32211.0], [69.1, 32268.0], [69.2, 32301.0], [69.3, 32342.0], [69.4, 32384.0], [69.5, 32435.0], [69.6, 32498.0], [69.7, 32553.0], [69.8, 32654.0], [69.9, 32672.0], [70.0, 32698.0], [70.1, 32728.0], [70.2, 32810.0], [70.3, 32898.0], [70.4, 32958.0], [70.5, 33098.0], [70.6, 33187.0], [70.7, 33221.0], [70.8, 33268.0], [70.9, 33294.0], [71.0, 33418.0], [71.1, 33474.0], [71.2, 33565.0], [71.3, 33591.0], [71.4, 33611.0], [71.5, 33666.0], [71.6, 33718.0], [71.7, 33793.0], [71.8, 33836.0], [71.9, 33891.0], [72.0, 33942.0], [72.1, 33950.0], [72.2, 33978.0], [72.3, 34113.0], [72.4, 34196.0], [72.5, 34247.0], [72.6, 34281.0], [72.7, 34320.0], [72.8, 34412.0], [72.9, 34456.0], [73.0, 34544.0], [73.1, 34598.0], [73.2, 34681.0], [73.3, 34758.0], [73.4, 34824.0], [73.5, 34885.0], [73.6, 34913.0], [73.7, 35026.0], [73.8, 35058.0], [73.9, 35064.0], [74.0, 35110.0], [74.1, 35159.0], [74.2, 35227.0], [74.3, 35246.0], [74.4, 35315.0], [74.5, 35337.0], [74.6, 35381.0], [74.7, 35542.0], [74.8, 35620.0], [74.9, 35736.0], [75.0, 35768.0], [75.1, 35821.0], [75.2, 35890.0], [75.3, 35942.0], [75.4, 35955.0], [75.5, 35985.0], [75.6, 36058.0], [75.7, 36090.0], [75.8, 36229.0], [75.9, 36298.0], [76.0, 36372.0], [76.1, 36396.0], [76.2, 36514.0], [76.3, 36540.0], [76.4, 36592.0], [76.5, 36648.0], [76.6, 36826.0], [76.7, 36849.0], [76.8, 36907.0], [76.9, 37032.0], [77.0, 37092.0], [77.1, 37124.0], [77.2, 37142.0], [77.3, 37241.0], [77.4, 37266.0], [77.5, 37349.0], [77.6, 37364.0], [77.7, 37410.0], [77.8, 37446.0], [77.9, 37478.0], [78.0, 37577.0], [78.1, 37615.0], [78.2, 37701.0], [78.3, 37808.0], [78.4, 37835.0], [78.5, 37922.0], [78.6, 37996.0], [78.7, 38057.0], [78.8, 38066.0], [78.9, 38086.0], [79.0, 38206.0], [79.1, 38270.0], [79.2, 38276.0], [79.3, 38481.0], [79.4, 38550.0], [79.5, 38654.0], [79.6, 38720.0], [79.7, 38724.0], [79.8, 38741.0], [79.9, 38787.0], [80.0, 38824.0], [80.1, 38908.0], [80.2, 38946.0], [80.3, 39008.0], [80.4, 39109.0], [80.5, 39347.0], [80.6, 39363.0], [80.7, 39388.0], [80.8, 39475.0], [80.9, 39485.0], [81.0, 39531.0], [81.1, 39630.0], [81.2, 39704.0], [81.3, 39753.0], [81.4, 39781.0], [81.5, 39866.0], [81.6, 39929.0], [81.7, 40032.0], [81.8, 40084.0], [81.9, 40109.0], [82.0, 40243.0], [82.1, 40267.0], [82.2, 40308.0], [82.3, 40343.0], [82.4, 40473.0], [82.5, 40550.0], [82.6, 40599.0], [82.7, 40630.0], [82.8, 40638.0], [82.9, 40709.0], [83.0, 40742.0], [83.1, 40793.0], [83.2, 40867.0], [83.3, 40890.0], [83.4, 40947.0], [83.5, 40960.0], [83.6, 41006.0], [83.7, 41313.0], [83.8, 41330.0], [83.9, 41351.0], [84.0, 41442.0], [84.1, 41467.0], [84.2, 41498.0], [84.3, 41620.0], [84.4, 41676.0], [84.5, 41697.0], [84.6, 41778.0], [84.7, 41799.0], [84.8, 41900.0], [84.9, 41949.0], [85.0, 41999.0], [85.1, 42050.0], [85.2, 42068.0], [85.3, 42108.0], [85.4, 42181.0], [85.5, 42321.0], [85.6, 42351.0], [85.7, 42356.0], [85.8, 42448.0], [85.9, 42493.0], [86.0, 42523.0], [86.1, 42588.0], [86.2, 42683.0], [86.3, 42756.0], [86.4, 42812.0], [86.5, 42842.0], [86.6, 43004.0], [86.7, 43054.0], [86.8, 43134.0], [86.9, 43236.0], [87.0, 43297.0], [87.1, 43301.0], [87.2, 43492.0], [87.3, 43543.0], [87.4, 43616.0], [87.5, 43664.0], [87.6, 43696.0], [87.7, 43778.0], [87.8, 43869.0], [87.9, 43926.0], [88.0, 43968.0], [88.1, 43989.0], [88.2, 44047.0], [88.3, 44124.0], [88.4, 44162.0], [88.5, 44290.0], [88.6, 44413.0], [88.7, 44524.0], [88.8, 44546.0], [88.9, 44598.0], [89.0, 44681.0], [89.1, 44813.0], [89.2, 44815.0], [89.3, 44854.0], [89.4, 44886.0], [89.5, 44950.0], [89.6, 45002.0], [89.7, 45144.0], [89.8, 45183.0], [89.9, 45255.0], [90.0, 45344.0], [90.1, 45367.0], [90.2, 45387.0], [90.3, 45437.0], [90.4, 45535.0], [90.5, 45637.0], [90.6, 45724.0], [90.7, 45743.0], [90.8, 45911.0], [90.9, 45963.0], [91.0, 46200.0], [91.1, 46210.0], [91.2, 46250.0], [91.3, 46333.0], [91.4, 46479.0], [91.5, 46537.0], [91.6, 46591.0], [91.7, 46723.0], [91.8, 46742.0], [91.9, 46762.0], [92.0, 46786.0], [92.1, 46955.0], [92.2, 47012.0], [92.3, 47023.0], [92.4, 47051.0], [92.5, 47067.0], [92.6, 47211.0], [92.7, 47273.0], [92.8, 47314.0], [92.9, 47383.0], [93.0, 47477.0], [93.1, 47496.0], [93.2, 47564.0], [93.3, 47740.0], [93.4, 47849.0], [93.5, 47877.0], [93.6, 47964.0], [93.7, 47983.0], [93.8, 48131.0], [93.9, 48250.0], [94.0, 48348.0], [94.1, 48367.0], [94.2, 48505.0], [94.3, 48630.0], [94.4, 48671.0], [94.5, 48700.0], [94.6, 48724.0], [94.7, 49062.0], [94.8, 49129.0], [94.9, 49163.0], [95.0, 49209.0], [95.1, 49288.0], [95.2, 49363.0], [95.3, 49394.0], [95.4, 49507.0], [95.5, 49571.0], [95.6, 49580.0], [95.7, 49647.0], [95.8, 49768.0], [95.9, 49864.0], [96.0, 50051.0], [96.1, 50117.0], [96.2, 50252.0], [96.3, 50342.0], [96.4, 50409.0], [96.5, 50497.0], [96.6, 50618.0], [96.7, 50666.0], [96.8, 50866.0], [96.9, 50889.0], [97.0, 50922.0], [97.1, 50971.0], [97.2, 51167.0], [97.3, 51329.0], [97.4, 51374.0], [97.5, 51563.0], [97.6, 51738.0], [97.7, 51764.0], [97.8, 51804.0], [97.9, 51893.0], [98.0, 51955.0], [98.1, 52181.0], [98.2, 52330.0], [98.3, 52553.0], [98.4, 52888.0], [98.5, 53119.0], [98.6, 53377.0], [98.7, 53430.0], [98.8, 53682.0], [98.9, 53904.0], [99.0, 54373.0], [99.1, 54700.0], [99.2, 54926.0], [99.3, 55468.0], [99.4, 55710.0], [99.5, 56489.0], [99.6, 56875.0], [99.7, 57259.0], [99.8, 58026.0], [99.9, 58503.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 13.0, "series": [{"data": [[33700.0, 4.0], [34500.0, 3.0], [32900.0, 2.0], [35300.0, 5.0], [37700.0, 2.0], [36900.0, 3.0], [38500.0, 3.0], [39300.0, 6.0], [40900.0, 5.0], [40100.0, 1.0], [41700.0, 5.0], [42500.0, 4.0], [44900.0, 2.0], [44100.0, 5.0], [43300.0, 2.0], [45700.0, 4.0], [46500.0, 4.0], [48100.0, 1.0], [47300.0, 4.0], [49700.0, 2.0], [50500.0, 1.0], [52100.0, 2.0], [51300.0, 4.0], [52900.0, 1.0], [54500.0, 1.0], [58500.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 10.0], [1000.0, 13.0], [1100.0, 8.0], [1200.0, 10.0], [1300.0, 10.0], [1400.0, 6.0], [1500.0, 10.0], [1600.0, 8.0], [1700.0, 5.0], [1800.0, 7.0], [1900.0, 10.0], [2000.0, 7.0], [2100.0, 9.0], [2200.0, 5.0], [2300.0, 10.0], [2400.0, 6.0], [2500.0, 6.0], [2600.0, 7.0], [2700.0, 11.0], [2800.0, 4.0], [2900.0, 8.0], [3000.0, 5.0], [3100.0, 8.0], [3200.0, 8.0], [3300.0, 6.0], [3400.0, 9.0], [3500.0, 1.0], [3700.0, 8.0], [3600.0, 6.0], [3800.0, 7.0], [3900.0, 6.0], [4000.0, 4.0], [4100.0, 10.0], [4300.0, 10.0], [4200.0, 5.0], [4500.0, 7.0], [4600.0, 7.0], [4400.0, 7.0], [4800.0, 3.0], [4700.0, 4.0], [5000.0, 11.0], [4900.0, 5.0], [5100.0, 2.0], [5300.0, 9.0], [5200.0, 8.0], [5500.0, 5.0], [5400.0, 8.0], [5600.0, 5.0], [5800.0, 5.0], [5700.0, 8.0], [6000.0, 7.0], [5900.0, 4.0], [6100.0, 8.0], [6200.0, 7.0], [6300.0, 6.0], [6500.0, 8.0], [6400.0, 6.0], [6600.0, 8.0], [6800.0, 5.0], [6900.0, 7.0], [6700.0, 3.0], [7000.0, 6.0], [7100.0, 4.0], [7400.0, 6.0], [7300.0, 2.0], [7200.0, 7.0], [7600.0, 6.0], [7500.0, 2.0], [7900.0, 5.0], [7800.0, 4.0], [7700.0, 6.0], [8000.0, 3.0], [8100.0, 1.0], [8200.0, 4.0], [8600.0, 8.0], [8400.0, 7.0], [9200.0, 5.0], [9000.0, 6.0], [8800.0, 3.0], [9400.0, 5.0], [9600.0, 3.0], [10000.0, 5.0], [9800.0, 4.0], [10200.0, 7.0], [10400.0, 6.0], [10600.0, 2.0], [10800.0, 8.0], [11200.0, 4.0], [11000.0, 3.0], [11600.0, 5.0], [11400.0, 4.0], [11800.0, 3.0], [12000.0, 5.0], [12200.0, 5.0], [12400.0, 7.0], [12600.0, 4.0], [12800.0, 6.0], [13200.0, 3.0], [13000.0, 2.0], [13400.0, 6.0], [13800.0, 4.0], [13600.0, 4.0], [14000.0, 11.0], [14200.0, 4.0], [14800.0, 3.0], [14600.0, 4.0], [14400.0, 6.0], [15200.0, 9.0], [15000.0, 5.0], [15800.0, 4.0], [15400.0, 4.0], [15600.0, 3.0], [16000.0, 5.0], [16200.0, 6.0], [17200.0, 5.0], [16400.0, 3.0], [16800.0, 7.0], [18000.0, 7.0], [17600.0, 2.0], [18400.0, 6.0], [19200.0, 3.0], [18800.0, 4.0], [20000.0, 6.0], [20400.0, 2.0], [19600.0, 3.0], [20800.0, 7.0], [21200.0, 2.0], [21600.0, 11.0], [22000.0, 3.0], [22400.0, 1.0], [22800.0, 3.0], [23200.0, 2.0], [24000.0, 2.0], [23600.0, 2.0], [24400.0, 5.0], [25200.0, 4.0], [24800.0, 3.0], [26000.0, 6.0], [25600.0, 7.0], [26400.0, 3.0], [26800.0, 5.0], [27200.0, 3.0], [27600.0, 3.0], [28400.0, 5.0], [28000.0, 2.0], [28800.0, 6.0], [29200.0, 4.0], [29600.0, 5.0], [30000.0, 2.0], [30400.0, 3.0], [30800.0, 6.0], [31200.0, 5.0], [31600.0, 1.0], [32000.0, 2.0], [32400.0, 4.0], [34400.0, 5.0], [32800.0, 3.0], [33600.0, 4.0], [36800.0, 4.0], [35200.0, 5.0], [36000.0, 4.0], [37600.0, 2.0], [38400.0, 3.0], [40000.0, 5.0], [40800.0, 5.0], [39200.0, 1.0], [41600.0, 6.0], [42400.0, 4.0], [43200.0, 5.0], [44800.0, 8.0], [44000.0, 2.0], [46400.0, 3.0], [45600.0, 2.0], [47200.0, 5.0], [48000.0, 1.0], [48800.0, 2.0], [50400.0, 4.0], [49600.0, 3.0], [52800.0, 2.0], [55200.0, 1.0], [53600.0, 2.0], [56800.0, 2.0], [33100.0, 3.0], [34700.0, 4.0], [33900.0, 5.0], [35500.0, 4.0], [36300.0, 4.0], [37100.0, 5.0], [38700.0, 8.0], [37900.0, 3.0], [39500.0, 3.0], [40300.0, 5.0], [41100.0, 1.0], [42700.0, 3.0], [41900.0, 5.0], [44300.0, 1.0], [43500.0, 2.0], [45900.0, 3.0], [45100.0, 5.0], [46700.0, 8.0], [47500.0, 3.0], [48300.0, 5.0], [49100.0, 5.0], [50700.0, 1.0], [53100.0, 2.0], [52300.0, 2.0], [51500.0, 1.0], [53900.0, 2.0], [54700.0, 2.0], [57100.0, 1.0], [58700.0, 1.0], [16900.0, 3.0], [16500.0, 3.0], [17300.0, 6.0], [17700.0, 4.0], [18100.0, 6.0], [18900.0, 6.0], [18500.0, 4.0], [19300.0, 2.0], [19700.0, 7.0], [20100.0, 7.0], [21300.0, 5.0], [20900.0, 1.0], [20500.0, 6.0], [22100.0, 4.0], [22500.0, 3.0], [21700.0, 6.0], [22900.0, 6.0], [23300.0, 2.0], [24500.0, 3.0], [24100.0, 5.0], [23700.0, 5.0], [24900.0, 4.0], [25300.0, 6.0], [25700.0, 5.0], [26500.0, 5.0], [26100.0, 2.0], [26900.0, 3.0], [27300.0, 3.0], [28500.0, 7.0], [28100.0, 3.0], [27700.0, 3.0], [29300.0, 1.0], [29700.0, 5.0], [30100.0, 9.0], [30500.0, 4.0], [30900.0, 4.0], [31300.0, 8.0], [31700.0, 2.0], [32100.0, 3.0], [32500.0, 4.0], [34600.0, 2.0], [33000.0, 3.0], [33800.0, 6.0], [36200.0, 5.0], [37000.0, 3.0], [37800.0, 5.0], [38600.0, 2.0], [39400.0, 5.0], [40200.0, 5.0], [42600.0, 3.0], [41800.0, 1.0], [41000.0, 2.0], [43400.0, 2.0], [45000.0, 3.0], [44200.0, 2.0], [46600.0, 1.0], [45800.0, 1.0], [47400.0, 4.0], [48200.0, 2.0], [49000.0, 1.0], [50600.0, 4.0], [49800.0, 2.0], [51400.0, 1.0], [53800.0, 1.0], [55400.0, 1.0], [33300.0, 1.0], [34100.0, 3.0], [34900.0, 4.0], [35700.0, 5.0], [36500.0, 5.0], [37300.0, 5.0], [38900.0, 5.0], [38100.0, 1.0], [40500.0, 4.0], [39700.0, 6.0], [41300.0, 5.0], [42100.0, 3.0], [42900.0, 1.0], [44500.0, 6.0], [43700.0, 2.0], [45300.0, 7.0], [46900.0, 2.0], [47700.0, 1.0], [48500.0, 1.0], [49300.0, 4.0], [50100.0, 4.0], [50900.0, 3.0], [52500.0, 3.0], [51700.0, 5.0], [54900.0, 2.0], [53300.0, 1.0], [54100.0, 1.0], [55700.0, 1.0], [8300.0, 10.0], [8700.0, 7.0], [8500.0, 8.0], [8900.0, 6.0], [9100.0, 6.0], [9700.0, 9.0], [9500.0, 4.0], [9300.0, 5.0], [9900.0, 6.0], [10100.0, 4.0], [10700.0, 7.0], [10500.0, 5.0], [10300.0, 6.0], [10900.0, 3.0], [11100.0, 8.0], [11700.0, 6.0], [11500.0, 3.0], [11300.0, 4.0], [12100.0, 4.0], [11900.0, 6.0], [12700.0, 6.0], [12300.0, 6.0], [12500.0, 6.0], [13100.0, 6.0], [12900.0, 6.0], [13300.0, 5.0], [13500.0, 5.0], [13700.0, 2.0], [14300.0, 3.0], [14100.0, 6.0], [13900.0, 6.0], [14700.0, 4.0], [14500.0, 5.0], [14900.0, 4.0], [15100.0, 6.0], [15300.0, 2.0], [15700.0, 6.0], [15500.0, 2.0], [16300.0, 4.0], [15900.0, 3.0], [16100.0, 12.0], [17000.0, 7.0], [17400.0, 5.0], [16600.0, 1.0], [17800.0, 6.0], [18200.0, 5.0], [18600.0, 3.0], [19000.0, 9.0], [19400.0, 9.0], [19800.0, 4.0], [20200.0, 3.0], [21400.0, 2.0], [21000.0, 5.0], [20600.0, 6.0], [21800.0, 3.0], [22200.0, 6.0], [23400.0, 10.0], [23000.0, 6.0], [22600.0, 6.0], [24200.0, 7.0], [23800.0, 5.0], [24600.0, 4.0], [25000.0, 4.0], [25400.0, 3.0], [26200.0, 6.0], [25800.0, 4.0], [26600.0, 6.0], [27000.0, 5.0], [27400.0, 6.0], [27800.0, 7.0], [28600.0, 2.0], [28200.0, 5.0], [29400.0, 4.0], [29000.0, 6.0], [30200.0, 1.0], [30600.0, 2.0], [29800.0, 1.0], [31000.0, 3.0], [31400.0, 4.0], [31800.0, 4.0], [32200.0, 7.0], [32600.0, 5.0], [33200.0, 6.0], [34800.0, 3.0], [34000.0, 2.0], [36400.0, 2.0], [35600.0, 2.0], [38000.0, 7.0], [38800.0, 3.0], [37200.0, 4.0], [40400.0, 2.0], [39600.0, 3.0], [42800.0, 4.0], [42000.0, 6.0], [43600.0, 7.0], [44400.0, 2.0], [45200.0, 2.0], [46000.0, 1.0], [46800.0, 1.0], [47600.0, 1.0], [48400.0, 1.0], [50800.0, 4.0], [50000.0, 2.0], [49200.0, 4.0], [51600.0, 1.0], [53200.0, 1.0], [56400.0, 2.0], [55600.0, 1.0], [57200.0, 1.0], [58000.0, 1.0], [33500.0, 5.0], [34300.0, 2.0], [35900.0, 7.0], [36700.0, 2.0], [35100.0, 5.0], [37500.0, 3.0], [39900.0, 3.0], [39100.0, 1.0], [40700.0, 6.0], [42300.0, 7.0], [41500.0, 1.0], [43100.0, 3.0], [43900.0, 7.0], [45500.0, 3.0], [47100.0, 1.0], [46300.0, 1.0], [47900.0, 5.0], [48700.0, 3.0], [51100.0, 1.0], [49500.0, 5.0], [50300.0, 2.0], [51900.0, 2.0], [54300.0, 1.0], [57500.0, 1.0], [16700.0, 4.0], [17100.0, 4.0], [17500.0, 5.0], [18300.0, 4.0], [17900.0, 1.0], [18700.0, 2.0], [19100.0, 4.0], [19500.0, 3.0], [20300.0, 3.0], [19900.0, 4.0], [21500.0, 6.0], [20700.0, 4.0], [21100.0, 2.0], [22300.0, 6.0], [21900.0, 5.0], [22700.0, 5.0], [23500.0, 4.0], [23100.0, 4.0], [23900.0, 3.0], [24300.0, 2.0], [24700.0, 7.0], [25100.0, 1.0], [25500.0, 7.0], [25900.0, 4.0], [26300.0, 2.0], [27500.0, 4.0], [27100.0, 3.0], [27900.0, 4.0], [28300.0, 2.0], [29500.0, 5.0], [28700.0, 6.0], [29100.0, 2.0], [29900.0, 10.0], [30300.0, 2.0], [30700.0, 2.0], [31100.0, 4.0], [31500.0, 1.0], [31900.0, 7.0], [32700.0, 4.0], [32300.0, 6.0], [34200.0, 6.0], [33400.0, 4.0], [35000.0, 6.0], [35800.0, 3.0], [36600.0, 2.0], [38200.0, 6.0], [37400.0, 7.0], [40600.0, 5.0], [39000.0, 2.0], [39800.0, 2.0], [43000.0, 3.0], [42200.0, 1.0], [41400.0, 7.0], [44600.0, 4.0], [43800.0, 2.0], [46200.0, 7.0], [47000.0, 8.0], [45400.0, 2.0], [47800.0, 4.0], [48600.0, 6.0], [49400.0, 2.0], [50200.0, 2.0], [51000.0, 2.0], [51800.0, 4.0], [53400.0, 2.0], [56600.0, 1.0], [59000.0, 1.0], [58200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 59000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 61.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2220.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 61.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2220.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.244897959183676, "minX": 1.65125178E12, "maxY": 74.0, "series": [{"data": [[1.65125244E12, 74.0], [1.65125214E12, 74.0], [1.65125208E12, 74.0], [1.65125178E12, 9.244897959183676], [1.65125238E12, 74.0], [1.65125232E12, 74.0], [1.65125202E12, 74.0], [1.65125196E12, 69.18023255813954], [1.65125262E12, 20.5], [1.65125256E12, 70.32934131736526], [1.65125226E12, 74.0], [1.6512522E12, 74.0], [1.6512519E12, 47.63218390804595], [1.65125184E12, 22.76162790697675], [1.6512525E12, 74.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125262E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4042.4516129032263, "minX": 1.0, "maxY": 53418.0, "series": [{"data": [[2.0, 33611.0], [3.0, 15300.0], [4.0, 14888.5], [5.0, 9399.666666666666], [6.0, 12839.0], [7.0, 20236.666666666668], [8.0, 28987.5], [9.0, 19851.0], [10.0, 4042.4516129032263], [11.0, 53418.0], [12.0, 9133.333333333332], [13.0, 27336.5], [14.0, 17665.0], [15.0, 25620.5], [16.0, 21484.0], [17.0, 25517.5], [18.0, 12185.75], [19.0, 46591.0], [20.0, 6398.5245901639355], [21.0, 20944.666666666664], [22.0, 18961.0], [23.0, 27199.0], [24.0, 16245.0], [25.0, 28273.0], [26.0, 18095.5], [27.0, 28177.0], [28.0, 13773.0], [29.0, 15566.0], [30.0, 10075.438596491227], [31.0, 25864.333333333332], [32.0, 15295.5], [33.0, 13028.666666666666], [34.0, 10942.0], [35.0, 19021.5], [36.0, 11874.666666666668], [37.0, 15330.333333333334], [38.0, 13170.666666666668], [39.0, 20398.5], [40.0, 12295.067796610168], [41.0, 21616.0], [42.0, 23437.0], [43.0, 22315.0], [44.0, 16583.0], [45.0, 27368.5], [46.0, 11623.666666666666], [47.0, 21429.5], [48.0, 12403.0], [49.0, 14582.0], [50.0, 13615.918032786883], [51.0, 23770.0], [52.0, 11832.666666666666], [53.0, 14974.0], [54.0, 14362.5], [55.0, 16021.666666666666], [56.0, 12159.5], [57.0, 16823.0], [58.0, 14845.0], [59.0, 17363.0], [60.0, 17675.491228070183], [61.0, 20898.666666666668], [62.0, 18264.333333333332], [63.0, 19703.5], [64.0, 14464.6], [65.0, 27547.333333333332], [66.0, 22009.333333333332], [67.0, 34993.0], [68.0, 22788.333333333332], [69.0, 25292.2], [70.0, 19028.317460317456], [71.0, 33194.0], [72.0, 19841.0], [73.0, 32989.71428571428], [74.0, 26436.27498521584], [1.0, 34393.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[65.1635247698377, 23252.411223147763]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 104.03333333333333, "minX": 1.65125178E12, "maxY": 541.3666666666667, "series": [{"data": [[1.65125244E12, 527.0833333333334], [1.65125214E12, 528.7333333333333], [1.65125208E12, 527.9666666666667], [1.65125178E12, 151.23333333333332], [1.65125238E12, 527.0166666666667], [1.65125232E12, 521.35], [1.65125202E12, 509.6166666666667], [1.65125196E12, 535.4333333333333], [1.65125262E12, 125.73333333333333], [1.65125256E12, 522.5833333333334], [1.65125226E12, 536.7], [1.6512522E12, 527.1666666666666], [1.6512519E12, 541.3666666666667], [1.65125184E12, 535.8666666666667], [1.6512525E12, 512.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125244E12, 436.9], [1.65125214E12, 439.3833333333333], [1.65125208E12, 436.96666666666664], [1.65125178E12, 127.28333333333333], [1.65125238E12, 436.9], [1.65125232E12, 434.0833333333333], [1.65125202E12, 423.75], [1.65125196E12, 446.96666666666664], [1.65125262E12, 104.03333333333333], [1.65125256E12, 434.18333333333334], [1.65125226E12, 444.71666666666664], [1.6512522E12, 439.25], [1.6512519E12, 452.1666666666667], [1.65125184E12, 447.1333333333333], [1.6512525E12, 426.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125262E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2751.2448979591845, "minX": 1.65125178E12, "maxY": 38140.725000000006, "series": [{"data": [[1.65125244E12, 26806.66071428572], [1.65125214E12, 25968.739644970417], [1.65125208E12, 27033.422619047604], [1.65125178E12, 2751.2448979591845], [1.65125238E12, 24761.68452380952], [1.65125232E12, 27513.41916167665], [1.65125202E12, 26843.288343558284], [1.65125196E12, 19696.872093023263], [1.65125262E12, 38140.725000000006], [1.65125256E12, 26994.19760479043], [1.65125226E12, 26455.94152046782], [1.6512522E12, 26016.313609467463], [1.6512519E12, 14553.436781609198], [1.65125184E12, 6792.982558139537], [1.6512525E12, 26201.17073170732]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125262E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2751.122448979591, "minX": 1.65125178E12, "maxY": 38140.70000000001, "series": [{"data": [[1.65125244E12, 26806.6488095238], [1.65125214E12, 25968.733727810642], [1.65125208E12, 27033.398809523802], [1.65125178E12, 2751.122448979591], [1.65125238E12, 24761.67857142858], [1.65125232E12, 27513.401197604784], [1.65125202E12, 26843.24539877301], [1.65125196E12, 19696.848837209298], [1.65125262E12, 38140.70000000001], [1.65125256E12, 26994.179640718572], [1.65125226E12, 26455.929824561405], [1.6512522E12, 26016.307692307684], [1.6512519E12, 14553.396551724143], [1.65125184E12, 6792.947674418605], [1.6512525E12, 26201.164634146342]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125262E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.900000000000001, "minX": 1.65125178E12, "maxY": 22.387755102040813, "series": [{"data": [[1.65125244E12, 7.440476190476188], [1.65125214E12, 7.940828402366862], [1.65125208E12, 8.041666666666663], [1.65125178E12, 22.387755102040813], [1.65125238E12, 7.958333333333332], [1.65125232E12, 7.2574850299401215], [1.65125202E12, 8.263803680981594], [1.65125196E12, 8.697674418604647], [1.65125262E12, 6.900000000000001], [1.65125256E12, 7.371257485029943], [1.65125226E12, 7.637426900584799], [1.6512522E12, 8.461538461538458], [1.6512519E12, 9.114942528735634], [1.65125184E12, 11.093023255813948], [1.6512525E12, 7.286585365853656]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125262E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 761.0, "minX": 1.65125178E12, "maxY": 59028.0, "series": [{"data": [[1.65125244E12, 56474.0], [1.65125214E12, 51893.0], [1.65125208E12, 54926.0], [1.65125178E12, 6591.0], [1.65125238E12, 53669.0], [1.65125232E12, 52867.0], [1.65125202E12, 55266.0], [1.65125196E12, 46211.0], [1.65125262E12, 58294.0], [1.65125256E12, 59028.0], [1.65125226E12, 53883.0], [1.6512522E12, 53377.0], [1.6512519E12, 35337.0], [1.65125184E12, 21680.0], [1.6512525E12, 58762.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125244E12, 46738.4], [1.65125214E12, 46773.0], [1.65125208E12, 48134.1], [1.65125178E12, 5534.0], [1.65125238E12, 46766.9], [1.65125232E12, 47780.600000000006], [1.65125202E12, 46404.2], [1.65125196E12, 35958.400000000016], [1.65125262E12, 54277.5], [1.65125256E12, 47377.60000000003], [1.65125226E12, 45800.8], [1.6512522E12, 47496.0], [1.6512519E12, 26156.5], [1.65125184E12, 13522.5], [1.6512525E12, 47389.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125244E12, 55427.96000000001], [1.65125214E12, 51802.700000000004], [1.65125208E12, 54067.64], [1.65125178E12, 6591.0], [1.65125238E12, 52745.090000000004], [1.65125232E12, 52125.799999999996], [1.65125202E12, 54090.95999999997], [1.65125196E12, 45268.570000000014], [1.65125262E12, 58294.0], [1.65125256E12, 58671.0], [1.65125226E12, 53332.92], [1.6512522E12, 53093.50000000001], [1.6512519E12, 34522.5], [1.65125184E12, 21041.98000000001], [1.6512525E12, 57994.34999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125244E12, 50156.6], [1.65125214E12, 50307.5], [1.65125208E12, 49946.799999999996], [1.65125178E12, 6427.5], [1.65125238E12, 49788.399999999994], [1.65125232E12, 49978.799999999996], [1.65125202E12, 49219.59999999999], [1.65125196E12, 39668.549999999996], [1.65125262E12, 57094.149999999994], [1.65125256E12, 54122.399999999994], [1.65125226E12, 49319.4], [1.6512522E12, 49957.5], [1.6512519E12, 29765.5], [1.65125184E12, 16991.2], [1.6512525E12, 53812.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125244E12, 970.0], [1.65125214E12, 974.0], [1.65125208E12, 1019.0], [1.65125178E12, 808.0], [1.65125238E12, 1001.0], [1.65125232E12, 1224.0], [1.65125202E12, 1475.0], [1.65125196E12, 1033.0], [1.65125262E12, 20084.0], [1.65125256E12, 1391.0], [1.65125226E12, 950.0], [1.6512522E12, 998.0], [1.6512519E12, 907.0], [1.65125184E12, 761.0], [1.6512525E12, 1356.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125244E12, 27038.0], [1.65125214E12, 26292.0], [1.65125208E12, 26425.5], [1.65125178E12, 2193.0], [1.65125238E12, 22483.5], [1.65125232E12, 28526.0], [1.65125202E12, 28257.0], [1.65125196E12, 18995.5], [1.65125262E12, 36644.5], [1.65125256E12, 26001.0], [1.65125226E12, 26823.0], [1.6512522E12, 25300.0], [1.6512519E12, 14102.5], [1.65125184E12, 5488.5], [1.6512525E12, 25559.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125262E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18963.0, "minX": 1.0, "maxY": 41496.0, "series": [{"data": [[1.0, 41496.0], [4.0, 18963.0], [2.0, 22445.0], [3.0, 21778.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 18963.0, "minX": 1.0, "maxY": 41496.0, "series": [{"data": [[1.0, 41496.0], [4.0, 18963.0], [2.0, 22445.0], [3.0, 21778.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.65125178E12, "maxY": 3.3, "series": [{"data": [[1.65125244E12, 2.8], [1.65125214E12, 2.816666666666667], [1.65125208E12, 2.8], [1.65125178E12, 0.9833333333333333], [1.65125238E12, 2.8], [1.65125232E12, 2.783333333333333], [1.65125202E12, 2.716666666666667], [1.65125196E12, 3.1], [1.65125256E12, 2.216666666666667], [1.65125226E12, 2.85], [1.6512522E12, 2.816666666666667], [1.6512519E12, 3.3], [1.65125184E12, 3.3], [1.6512525E12, 2.7333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125256E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.65125178E12, "maxY": 2.9, "series": [{"data": [[1.65125244E12, 2.8], [1.65125214E12, 2.816666666666667], [1.65125208E12, 2.8], [1.65125178E12, 0.8166666666666667], [1.65125238E12, 2.8], [1.65125232E12, 2.783333333333333], [1.65125202E12, 2.716666666666667], [1.65125196E12, 2.8666666666666667], [1.65125262E12, 0.6666666666666666], [1.65125256E12, 2.783333333333333], [1.65125226E12, 2.85], [1.6512522E12, 2.816666666666667], [1.6512519E12, 2.9], [1.65125184E12, 2.8666666666666667], [1.6512525E12, 2.7333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125262E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.65125178E12, "maxY": 2.9, "series": [{"data": [[1.65125244E12, 2.8], [1.65125214E12, 2.816666666666667], [1.65125208E12, 2.8], [1.65125178E12, 0.8166666666666667], [1.65125238E12, 2.8], [1.65125232E12, 2.783333333333333], [1.65125202E12, 2.716666666666667], [1.65125196E12, 2.8666666666666667], [1.65125262E12, 0.6666666666666666], [1.65125256E12, 2.783333333333333], [1.65125226E12, 2.85], [1.6512522E12, 2.816666666666667], [1.6512519E12, 2.9], [1.65125184E12, 2.8666666666666667], [1.6512525E12, 2.7333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125262E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.65125178E12, "maxY": 2.9, "series": [{"data": [[1.65125244E12, 2.8], [1.65125214E12, 2.816666666666667], [1.65125208E12, 2.8], [1.65125178E12, 0.8166666666666667], [1.65125238E12, 2.8], [1.65125232E12, 2.783333333333333], [1.65125202E12, 2.716666666666667], [1.65125196E12, 2.8666666666666667], [1.65125262E12, 0.6666666666666666], [1.65125256E12, 2.783333333333333], [1.65125226E12, 2.85], [1.6512522E12, 2.816666666666667], [1.6512519E12, 2.9], [1.65125184E12, 2.8666666666666667], [1.6512525E12, 2.7333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125262E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


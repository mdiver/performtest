/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 565.0, "minX": 0.0, "maxY": 55741.0, "series": [{"data": [[0.0, 565.0], [0.1, 565.0], [0.2, 771.0], [0.3, 784.0], [0.4, 875.0], [0.5, 875.0], [0.6, 890.0], [0.7, 897.0], [0.8, 924.0], [0.9, 924.0], [1.0, 946.0], [1.1, 948.0], [1.2, 961.0], [1.3, 969.0], [1.4, 969.0], [1.5, 979.0], [1.6, 995.0], [1.7, 1017.0], [1.8, 1017.0], [1.9, 1019.0], [2.0, 1031.0], [2.1, 1034.0], [2.2, 1079.0], [2.3, 1079.0], [2.4, 1114.0], [2.5, 1115.0], [2.6, 1119.0], [2.7, 1119.0], [2.8, 1129.0], [2.9, 1138.0], [3.0, 1198.0], [3.1, 1243.0], [3.2, 1243.0], [3.3, 1258.0], [3.4, 1258.0], [3.5, 1270.0], [3.6, 1270.0], [3.7, 1300.0], [3.8, 1317.0], [3.9, 1325.0], [4.0, 1329.0], [4.1, 1329.0], [4.2, 1332.0], [4.3, 1336.0], [4.4, 1342.0], [4.5, 1342.0], [4.6, 1387.0], [4.7, 1391.0], [4.8, 1409.0], [4.9, 1423.0], [5.0, 1423.0], [5.1, 1429.0], [5.2, 1438.0], [5.3, 1446.0], [5.4, 1446.0], [5.5, 1452.0], [5.6, 1453.0], [5.7, 1479.0], [5.8, 1490.0], [5.9, 1490.0], [6.0, 1504.0], [6.1, 1554.0], [6.2, 1602.0], [6.3, 1602.0], [6.4, 1661.0], [6.5, 1703.0], [6.6, 1707.0], [6.7, 1707.0], [6.8, 1734.0], [6.9, 1756.0], [7.0, 1822.0], [7.1, 1850.0], [7.2, 1850.0], [7.3, 1951.0], [7.4, 1966.0], [7.5, 2008.0], [7.6, 2008.0], [7.7, 2050.0], [7.8, 2100.0], [7.9, 2121.0], [8.0, 2155.0], [8.1, 2155.0], [8.2, 2167.0], [8.3, 2172.0], [8.4, 2175.0], [8.5, 2175.0], [8.6, 2191.0], [8.7, 2191.0], [8.8, 2198.0], [8.9, 2200.0], [9.0, 2200.0], [9.1, 2200.0], [9.2, 2201.0], [9.3, 2234.0], [9.4, 2234.0], [9.5, 2273.0], [9.6, 2291.0], [9.7, 2344.0], [9.8, 2384.0], [9.9, 2384.0], [10.0, 2419.0], [10.1, 2430.0], [10.2, 2432.0], [10.3, 2432.0], [10.4, 2525.0], [10.5, 2526.0], [10.6, 2531.0], [10.7, 2583.0], [10.8, 2583.0], [10.9, 2615.0], [11.0, 2615.0], [11.1, 2617.0], [11.2, 2617.0], [11.3, 2634.0], [11.4, 2651.0], [11.5, 2660.0], [11.6, 2668.0], [11.7, 2668.0], [11.8, 2678.0], [11.9, 2679.0], [12.0, 2692.0], [12.1, 2692.0], [12.2, 2712.0], [12.3, 2736.0], [12.4, 2848.0], [12.5, 2873.0], [12.6, 2873.0], [12.7, 2916.0], [12.8, 2938.0], [12.9, 2946.0], [13.0, 2946.0], [13.1, 3027.0], [13.2, 3092.0], [13.3, 3103.0], [13.4, 3103.0], [13.5, 3209.0], [13.6, 3212.0], [13.7, 3228.0], [13.8, 3242.0], [13.9, 3242.0], [14.0, 3259.0], [14.1, 3259.0], [14.2, 3282.0], [14.3, 3282.0], [14.4, 3301.0], [14.5, 3314.0], [14.6, 3349.0], [14.7, 3353.0], [14.8, 3353.0], [14.9, 3402.0], [15.0, 3407.0], [15.1, 3416.0], [15.2, 3416.0], [15.3, 3452.0], [15.4, 3454.0], [15.5, 3517.0], [15.6, 3547.0], [15.7, 3547.0], [15.8, 3588.0], [15.9, 3604.0], [16.0, 3613.0], [16.1, 3613.0], [16.2, 3655.0], [16.3, 3689.0], [16.4, 3691.0], [16.5, 3706.0], [16.6, 3706.0], [16.7, 3725.0], [16.8, 3744.0], [16.9, 3745.0], [17.0, 3745.0], [17.1, 3750.0], [17.2, 3807.0], [17.3, 3869.0], [17.4, 3874.0], [17.5, 3874.0], [17.6, 3949.0], [17.7, 3952.0], [17.8, 4038.0], [17.9, 4038.0], [18.0, 4074.0], [18.1, 4085.0], [18.2, 4148.0], [18.3, 4176.0], [18.4, 4176.0], [18.5, 4195.0], [18.6, 4200.0], [18.7, 4213.0], [18.8, 4213.0], [18.9, 4215.0], [19.0, 4252.0], [19.1, 4295.0], [19.2, 4295.0], [19.3, 4302.0], [19.4, 4405.0], [19.5, 4430.0], [19.6, 4457.0], [19.7, 4457.0], [19.8, 4489.0], [19.9, 4528.0], [20.0, 4546.0], [20.1, 4546.0], [20.2, 4578.0], [20.3, 4589.0], [20.4, 4656.0], [20.5, 4670.0], [20.6, 4670.0], [20.7, 4703.0], [20.8, 4726.0], [20.9, 4740.0], [21.0, 4740.0], [21.1, 4750.0], [21.2, 4757.0], [21.3, 4761.0], [21.4, 4771.0], [21.5, 4771.0], [21.6, 4785.0], [21.7, 4791.0], [21.8, 4823.0], [21.9, 4823.0], [22.0, 4867.0], [22.1, 4905.0], [22.2, 5018.0], [22.3, 5020.0], [22.4, 5020.0], [22.5, 5049.0], [22.6, 5049.0], [22.7, 5053.0], [22.8, 5053.0], [22.9, 5093.0], [23.0, 5108.0], [23.1, 5178.0], [23.2, 5178.0], [23.3, 5178.0], [23.4, 5227.0], [23.5, 5287.0], [23.6, 5334.0], [23.7, 5334.0], [23.8, 5335.0], [23.9, 5396.0], [24.0, 5402.0], [24.1, 5407.0], [24.2, 5407.0], [24.3, 5431.0], [24.4, 5470.0], [24.5, 5489.0], [24.6, 5489.0], [24.7, 5524.0], [24.8, 5540.0], [24.9, 5563.0], [25.0, 5563.0], [25.1, 5580.0], [25.2, 5681.0], [25.3, 5693.0], [25.4, 5721.0], [25.5, 5721.0], [25.6, 5750.0], [25.7, 5782.0], [25.8, 5892.0], [25.9, 5892.0], [26.0, 5918.0], [26.1, 5934.0], [26.2, 5974.0], [26.3, 6034.0], [26.4, 6034.0], [26.5, 6120.0], [26.6, 6154.0], [26.7, 6159.0], [26.8, 6159.0], [26.9, 6206.0], [27.0, 6229.0], [27.1, 6240.0], [27.2, 6297.0], [27.3, 6297.0], [27.4, 6309.0], [27.5, 6326.0], [27.6, 6378.0], [27.7, 6378.0], [27.8, 6464.0], [27.9, 6481.0], [28.0, 6484.0], [28.1, 6505.0], [28.2, 6505.0], [28.3, 6508.0], [28.4, 6510.0], [28.5, 6572.0], [28.6, 6572.0], [28.7, 6598.0], [28.8, 6723.0], [28.9, 6729.0], [29.0, 6766.0], [29.1, 6766.0], [29.2, 6824.0], [29.3, 6908.0], [29.4, 6914.0], [29.5, 6914.0], [29.6, 7007.0], [29.7, 7153.0], [29.8, 7178.0], [29.9, 7191.0], [30.0, 7191.0], [30.1, 7191.0], [30.2, 7290.0], [30.3, 7321.0], [30.4, 7321.0], [30.5, 7400.0], [30.6, 7402.0], [30.7, 7430.0], [30.8, 7461.0], [30.9, 7461.0], [31.0, 7495.0], [31.1, 7500.0], [31.2, 7539.0], [31.3, 7539.0], [31.4, 7579.0], [31.5, 7592.0], [31.6, 7599.0], [31.7, 7599.0], [31.8, 7630.0], [31.9, 7706.0], [32.0, 7724.0], [32.1, 7739.0], [32.2, 7739.0], [32.3, 7748.0], [32.4, 7891.0], [32.5, 7909.0], [32.6, 7909.0], [32.7, 7936.0], [32.8, 7969.0], [32.9, 7980.0], [33.0, 8089.0], [33.1, 8089.0], [33.2, 8137.0], [33.3, 8150.0], [33.4, 8225.0], [33.5, 8225.0], [33.6, 8313.0], [33.7, 8336.0], [33.8, 8361.0], [33.9, 8371.0], [34.0, 8371.0], [34.1, 8440.0], [34.2, 8502.0], [34.3, 8576.0], [34.4, 8576.0], [34.5, 8631.0], [34.6, 8727.0], [34.7, 8730.0], [34.8, 8740.0], [34.9, 8740.0], [35.0, 8764.0], [35.1, 8779.0], [35.2, 8786.0], [35.3, 8786.0], [35.4, 8866.0], [35.5, 8871.0], [35.6, 8886.0], [35.7, 8958.0], [35.8, 8958.0], [35.9, 8988.0], [36.0, 9005.0], [36.1, 9028.0], [36.2, 9028.0], [36.3, 9055.0], [36.4, 9083.0], [36.5, 9106.0], [36.6, 9185.0], [36.7, 9185.0], [36.8, 9187.0], [36.9, 9225.0], [37.0, 9312.0], [37.1, 9312.0], [37.2, 9345.0], [37.3, 9455.0], [37.4, 9485.0], [37.5, 9485.0], [37.6, 9503.0], [37.7, 9543.0], [37.8, 9565.0], [37.9, 9591.0], [38.0, 9591.0], [38.1, 9612.0], [38.2, 9658.0], [38.3, 9671.0], [38.4, 9671.0], [38.5, 9721.0], [38.6, 9740.0], [38.7, 9818.0], [38.8, 9944.0], [38.9, 9944.0], [39.0, 9955.0], [39.1, 10083.0], [39.2, 10256.0], [39.3, 10256.0], [39.4, 10280.0], [39.5, 10281.0], [39.6, 10312.0], [39.7, 10335.0], [39.8, 10335.0], [39.9, 10352.0], [40.0, 10433.0], [40.1, 10442.0], [40.2, 10442.0], [40.3, 10444.0], [40.4, 10458.0], [40.5, 10470.0], [40.6, 10499.0], [40.7, 10499.0], [40.8, 10515.0], [40.9, 10553.0], [41.0, 10606.0], [41.1, 10606.0], [41.2, 10607.0], [41.3, 10628.0], [41.4, 10687.0], [41.5, 10694.0], [41.6, 10694.0], [41.7, 10902.0], [41.8, 10939.0], [41.9, 11095.0], [42.0, 11095.0], [42.1, 11097.0], [42.2, 11194.0], [42.3, 11231.0], [42.4, 11239.0], [42.5, 11239.0], [42.6, 11266.0], [42.7, 11274.0], [42.8, 11305.0], [42.9, 11305.0], [43.0, 11474.0], [43.1, 11498.0], [43.2, 11563.0], [43.3, 11596.0], [43.4, 11596.0], [43.5, 11610.0], [43.6, 11611.0], [43.7, 11699.0], [43.8, 11699.0], [43.9, 11704.0], [44.0, 11804.0], [44.1, 11849.0], [44.2, 11849.0], [44.3, 11892.0], [44.4, 11959.0], [44.5, 12088.0], [44.6, 12115.0], [44.7, 12115.0], [44.8, 12140.0], [44.9, 12144.0], [45.0, 12151.0], [45.1, 12151.0], [45.2, 12242.0], [45.3, 12280.0], [45.4, 12335.0], [45.5, 12393.0], [45.6, 12393.0], [45.7, 12407.0], [45.8, 12424.0], [45.9, 12449.0], [46.0, 12449.0], [46.1, 12499.0], [46.2, 12579.0], [46.3, 12667.0], [46.4, 12728.0], [46.5, 12728.0], [46.6, 12808.0], [46.7, 12838.0], [46.8, 12871.0], [46.9, 12871.0], [47.0, 12958.0], [47.1, 12979.0], [47.2, 12982.0], [47.3, 13042.0], [47.4, 13042.0], [47.5, 13100.0], [47.6, 13104.0], [47.7, 13313.0], [47.8, 13313.0], [47.9, 13316.0], [48.0, 13333.0], [48.1, 13366.0], [48.2, 13437.0], [48.3, 13437.0], [48.4, 13464.0], [48.5, 13493.0], [48.6, 13493.0], [48.7, 13493.0], [48.8, 13532.0], [48.9, 13606.0], [49.0, 13623.0], [49.1, 13710.0], [49.2, 13710.0], [49.3, 13734.0], [49.4, 13773.0], [49.5, 13846.0], [49.6, 13846.0], [49.7, 14008.0], [49.8, 14101.0], [49.9, 14305.0], [50.0, 14305.0], [50.1, 14420.0], [50.2, 14479.0], [50.3, 14496.0], [50.4, 14523.0], [50.5, 14523.0], [50.6, 14525.0], [50.7, 14568.0], [50.8, 14587.0], [50.9, 14587.0], [51.0, 14587.0], [51.1, 14739.0], [51.2, 14775.0], [51.3, 14901.0], [51.4, 14901.0], [51.5, 14933.0], [51.6, 15045.0], [51.7, 15065.0], [51.8, 15065.0], [51.9, 15082.0], [52.0, 15132.0], [52.1, 15168.0], [52.2, 15199.0], [52.3, 15199.0], [52.4, 15203.0], [52.5, 15247.0], [52.6, 15267.0], [52.7, 15267.0], [52.8, 15382.0], [52.9, 15554.0], [53.0, 15576.0], [53.1, 15699.0], [53.2, 15699.0], [53.3, 15753.0], [53.4, 15871.0], [53.5, 15899.0], [53.6, 15899.0], [53.7, 15931.0], [53.8, 15946.0], [53.9, 15961.0], [54.0, 16148.0], [54.1, 16148.0], [54.2, 16211.0], [54.3, 16256.0], [54.4, 16287.0], [54.5, 16287.0], [54.6, 16309.0], [54.7, 16331.0], [54.8, 16372.0], [54.9, 16406.0], [55.0, 16406.0], [55.1, 16448.0], [55.2, 16529.0], [55.3, 16567.0], [55.4, 16567.0], [55.5, 16596.0], [55.6, 16901.0], [55.7, 16934.0], [55.8, 16991.0], [55.9, 16991.0], [56.0, 17003.0], [56.1, 17057.0], [56.2, 17126.0], [56.3, 17126.0], [56.4, 17139.0], [56.5, 17195.0], [56.6, 17250.0], [56.7, 17250.0], [56.8, 17315.0], [56.9, 17320.0], [57.0, 17337.0], [57.1, 17424.0], [57.2, 17424.0], [57.3, 17474.0], [57.4, 17502.0], [57.5, 17555.0], [57.6, 17555.0], [57.7, 17621.0], [57.8, 17625.0], [57.9, 17741.0], [58.0, 17770.0], [58.1, 17770.0], [58.2, 17796.0], [58.3, 17814.0], [58.4, 17849.0], [58.5, 17849.0], [58.6, 17983.0], [58.7, 17989.0], [58.8, 18035.0], [58.9, 18203.0], [59.0, 18203.0], [59.1, 18216.0], [59.2, 18288.0], [59.3, 18355.0], [59.4, 18355.0], [59.5, 18494.0], [59.6, 18500.0], [59.7, 18507.0], [59.8, 18536.0], [59.9, 18536.0], [60.0, 18654.0], [60.1, 18685.0], [60.2, 18775.0], [60.3, 18775.0], [60.4, 18807.0], [60.5, 18879.0], [60.6, 18915.0], [60.7, 19129.0], [60.8, 19129.0], [60.9, 19161.0], [61.0, 19177.0], [61.1, 19254.0], [61.2, 19254.0], [61.3, 19270.0], [61.4, 19329.0], [61.5, 19363.0], [61.6, 19435.0], [61.7, 19435.0], [61.8, 19522.0], [61.9, 19675.0], [62.0, 19701.0], [62.1, 19701.0], [62.2, 19701.0], [62.3, 19718.0], [62.4, 19842.0], [62.5, 19842.0], [62.6, 19923.0], [62.7, 20108.0], [62.8, 20136.0], [62.9, 20178.0], [63.0, 20178.0], [63.1, 20197.0], [63.2, 20488.0], [63.3, 20639.0], [63.4, 20639.0], [63.5, 20695.0], [63.6, 20836.0], [63.7, 20855.0], [63.8, 20873.0], [63.9, 20873.0], [64.0, 20879.0], [64.1, 20880.0], [64.2, 20890.0], [64.3, 20890.0], [64.4, 21049.0], [64.5, 21069.0], [64.6, 21118.0], [64.7, 21252.0], [64.8, 21252.0], [64.9, 21261.0], [65.0, 21359.0], [65.1, 21363.0], [65.2, 21363.0], [65.3, 21461.0], [65.4, 21717.0], [65.5, 21799.0], [65.6, 21833.0], [65.7, 21833.0], [65.8, 21887.0], [65.9, 21897.0], [66.0, 21938.0], [66.1, 21938.0], [66.2, 22052.0], [66.3, 22052.0], [66.4, 22083.0], [66.5, 22147.0], [66.6, 22147.0], [66.7, 22177.0], [66.8, 22241.0], [66.9, 22254.0], [67.0, 22254.0], [67.1, 22303.0], [67.2, 22435.0], [67.3, 22547.0], [67.4, 22731.0], [67.5, 22731.0], [67.6, 22810.0], [67.7, 22822.0], [67.8, 22855.0], [67.9, 22855.0], [68.0, 22888.0], [68.1, 22888.0], [68.2, 22988.0], [68.3, 23113.0], [68.4, 23113.0], [68.5, 23127.0], [68.6, 23204.0], [68.7, 23223.0], [68.8, 23223.0], [68.9, 23227.0], [69.0, 23345.0], [69.1, 23435.0], [69.2, 23435.0], [69.3, 23520.0], [69.4, 23530.0], [69.5, 23552.0], [69.6, 23791.0], [69.7, 23791.0], [69.8, 23942.0], [69.9, 23964.0], [70.0, 23978.0], [70.1, 23978.0], [70.2, 24002.0], [70.3, 24071.0], [70.4, 24123.0], [70.5, 24169.0], [70.6, 24169.0], [70.7, 24211.0], [70.8, 24412.0], [70.9, 24530.0], [71.0, 24530.0], [71.1, 24558.0], [71.2, 24593.0], [71.3, 24757.0], [71.4, 24831.0], [71.5, 24831.0], [71.6, 24888.0], [71.7, 24895.0], [71.8, 24947.0], [71.9, 24947.0], [72.0, 24960.0], [72.1, 25010.0], [72.2, 25111.0], [72.3, 25149.0], [72.4, 25149.0], [72.5, 25178.0], [72.6, 25261.0], [72.7, 25261.0], [72.8, 25261.0], [72.9, 25379.0], [73.0, 25473.0], [73.1, 25706.0], [73.2, 25737.0], [73.3, 25737.0], [73.4, 25863.0], [73.5, 25955.0], [73.6, 26107.0], [73.7, 26107.0], [73.8, 26180.0], [73.9, 26250.0], [74.0, 26310.0], [74.1, 26400.0], [74.2, 26400.0], [74.3, 26452.0], [74.4, 26559.0], [74.5, 26657.0], [74.6, 26657.0], [74.7, 26668.0], [74.8, 26790.0], [74.9, 26828.0], [75.0, 26828.0], [75.1, 26837.0], [75.2, 27020.0], [75.3, 27095.0], [75.4, 27224.0], [75.5, 27224.0], [75.6, 27400.0], [75.7, 27417.0], [75.8, 27546.0], [75.9, 27546.0], [76.0, 27631.0], [76.1, 27789.0], [76.2, 27881.0], [76.3, 27884.0], [76.4, 27884.0], [76.5, 27913.0], [76.6, 27933.0], [76.7, 27993.0], [76.8, 27993.0], [76.9, 28100.0], [77.0, 28106.0], [77.1, 28257.0], [77.2, 28514.0], [77.3, 28514.0], [77.4, 28533.0], [77.5, 28569.0], [77.6, 28754.0], [77.7, 28754.0], [77.8, 28782.0], [77.9, 28800.0], [78.0, 28888.0], [78.1, 28973.0], [78.2, 28973.0], [78.3, 29250.0], [78.4, 29321.0], [78.5, 29333.0], [78.6, 29333.0], [78.7, 29344.0], [78.8, 29529.0], [78.9, 29548.0], [79.0, 29578.0], [79.1, 29578.0], [79.2, 29659.0], [79.3, 29762.0], [79.4, 29821.0], [79.5, 29821.0], [79.6, 29860.0], [79.7, 29987.0], [79.8, 30025.0], [79.9, 30035.0], [80.0, 30035.0], [80.1, 30140.0], [80.2, 30172.0], [80.3, 30220.0], [80.4, 30220.0], [80.5, 30236.0], [80.6, 30562.0], [80.7, 30751.0], [80.8, 30796.0], [80.9, 30796.0], [81.0, 30814.0], [81.1, 30889.0], [81.2, 30959.0], [81.3, 30959.0], [81.4, 31164.0], [81.5, 31237.0], [81.6, 31329.0], [81.7, 31329.0], [81.8, 31348.0], [81.9, 31490.0], [82.0, 31497.0], [82.1, 31514.0], [82.2, 31514.0], [82.3, 31678.0], [82.4, 31751.0], [82.5, 31940.0], [82.6, 31940.0], [82.7, 32197.0], [82.8, 32246.0], [82.9, 32330.0], [83.0, 32470.0], [83.1, 32470.0], [83.2, 32472.0], [83.3, 32552.0], [83.4, 32625.0], [83.5, 32625.0], [83.6, 32649.0], [83.7, 33020.0], [83.8, 33041.0], [83.9, 33177.0], [84.0, 33177.0], [84.1, 33283.0], [84.2, 33471.0], [84.3, 33486.0], [84.4, 33486.0], [84.5, 33555.0], [84.6, 33774.0], [84.7, 33838.0], [84.8, 34201.0], [84.9, 34201.0], [85.0, 34204.0], [85.1, 34229.0], [85.2, 34503.0], [85.3, 34503.0], [85.4, 34529.0], [85.5, 34600.0], [85.6, 34663.0], [85.7, 34722.0], [85.8, 34722.0], [85.9, 34792.0], [86.0, 34909.0], [86.1, 35018.0], [86.2, 35018.0], [86.3, 35049.0], [86.4, 35239.0], [86.5, 35313.0], [86.6, 35418.0], [86.7, 35418.0], [86.8, 35684.0], [86.9, 35971.0], [87.0, 36014.0], [87.1, 36014.0], [87.2, 36213.0], [87.3, 36230.0], [87.4, 36518.0], [87.5, 36518.0], [87.6, 36615.0], [87.7, 36667.0], [87.8, 36755.0], [87.9, 36901.0], [88.0, 36901.0], [88.1, 36909.0], [88.2, 36982.0], [88.3, 36982.0], [88.4, 36982.0], [88.5, 37259.0], [88.6, 37485.0], [88.7, 37608.0], [88.8, 38019.0], [88.9, 38019.0], [89.0, 38081.0], [89.1, 38141.0], [89.2, 38199.0], [89.3, 38199.0], [89.4, 38434.0], [89.5, 38622.0], [89.6, 38990.0], [89.7, 39055.0], [89.8, 39055.0], [89.9, 39197.0], [90.0, 39225.0], [90.1, 39479.0], [90.2, 39479.0], [90.3, 39752.0], [90.4, 39886.0], [90.5, 39921.0], [90.6, 40084.0], [90.7, 40084.0], [90.8, 40084.0], [90.9, 40154.0], [91.0, 40210.0], [91.1, 40210.0], [91.2, 40233.0], [91.3, 40377.0], [91.4, 40550.0], [91.5, 41210.0], [91.6, 41210.0], [91.7, 41249.0], [91.8, 41319.0], [91.9, 41428.0], [92.0, 41428.0], [92.1, 41442.0], [92.2, 41580.0], [92.3, 42084.0], [92.4, 42103.0], [92.5, 42103.0], [92.6, 42170.0], [92.7, 42378.0], [92.8, 42477.0], [92.9, 42477.0], [93.0, 42514.0], [93.1, 42716.0], [93.2, 42854.0], [93.3, 43161.0], [93.4, 43161.0], [93.5, 43398.0], [93.6, 43456.0], [93.7, 43991.0], [93.8, 43991.0], [93.9, 44292.0], [94.0, 44521.0], [94.1, 44611.0], [94.2, 44611.0], [94.3, 45011.0], [94.4, 45297.0], [94.5, 45657.0], [94.6, 45731.0], [94.7, 45731.0], [94.8, 45876.0], [94.9, 45887.0], [95.0, 45897.0], [95.1, 45897.0], [95.2, 46047.0], [95.3, 46180.0], [95.4, 46672.0], [95.5, 46844.0], [95.6, 46844.0], [95.7, 46968.0], [95.8, 47084.0], [95.9, 47212.0], [96.0, 47212.0], [96.1, 47362.0], [96.2, 47691.0], [96.3, 48348.0], [96.4, 48429.0], [96.5, 48429.0], [96.6, 48619.0], [96.7, 48659.0], [96.8, 48971.0], [96.9, 48971.0], [97.0, 49308.0], [97.1, 49715.0], [97.2, 50004.0], [97.3, 50223.0], [97.4, 50223.0], [97.5, 50534.0], [97.6, 50856.0], [97.7, 51279.0], [97.8, 51279.0], [97.9, 51339.0], [98.0, 51687.0], [98.1, 51903.0], [98.2, 52121.0], [98.3, 52121.0], [98.4, 52690.0], [98.5, 52820.0], [98.6, 52841.0], [98.7, 52841.0], [98.8, 53073.0], [98.9, 53079.0], [99.0, 54090.0], [99.1, 54272.0], [99.2, 54272.0], [99.3, 54430.0], [99.4, 54566.0], [99.5, 55080.0], [99.6, 55080.0], [99.7, 55437.0], [99.8, 55722.0], [99.9, 55741.0], [100.0, 55741.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 10.0, "series": [{"data": [[34500.0, 2.0], [33700.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [35300.0, 1.0], [36900.0, 4.0], [38100.0, 2.0], [38900.0, 1.0], [40100.0, 1.0], [39700.0, 1.0], [40500.0, 1.0], [42100.0, 2.0], [41300.0, 1.0], [42500.0, 1.0], [43300.0, 1.0], [44500.0, 1.0], [45700.0, 1.0], [46100.0, 1.0], [46900.0, 1.0], [47300.0, 1.0], [48900.0, 1.0], [49700.0, 1.0], [50500.0, 1.0], [49300.0, 1.0], [52100.0, 1.0], [51300.0, 1.0], [54500.0, 1.0], [55700.0, 2.0], [500.0, 1.0], [700.0, 2.0], [800.0, 3.0], [900.0, 7.0], [1000.0, 5.0], [1100.0, 6.0], [1200.0, 4.0], [1300.0, 9.0], [1400.0, 9.0], [1500.0, 2.0], [1600.0, 2.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 9.0], [2200.0, 6.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 10.0], [2700.0, 2.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 7.0], [3300.0, 4.0], [3400.0, 5.0], [3500.0, 3.0], [3700.0, 5.0], [3600.0, 5.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 3.0], [4200.0, 5.0], [4300.0, 1.0], [4400.0, 4.0], [4500.0, 4.0], [4600.0, 2.0], [4700.0, 9.0], [4800.0, 2.0], [5100.0, 3.0], [4900.0, 1.0], [5000.0, 6.0], [5200.0, 2.0], [5300.0, 3.0], [5400.0, 5.0], [5500.0, 4.0], [5600.0, 2.0], [5700.0, 3.0], [5800.0, 1.0], [6000.0, 1.0], [5900.0, 3.0], [6100.0, 3.0], [6200.0, 4.0], [6300.0, 3.0], [6500.0, 5.0], [6400.0, 3.0], [6700.0, 3.0], [6900.0, 2.0], [6800.0, 1.0], [7100.0, 4.0], [7000.0, 1.0], [7200.0, 1.0], [7400.0, 5.0], [7300.0, 1.0], [7500.0, 5.0], [7600.0, 1.0], [7900.0, 4.0], [7800.0, 1.0], [7700.0, 4.0], [8000.0, 1.0], [8100.0, 2.0], [8700.0, 6.0], [8300.0, 4.0], [8400.0, 1.0], [8600.0, 1.0], [8200.0, 1.0], [8500.0, 2.0], [9000.0, 4.0], [9100.0, 3.0], [8800.0, 3.0], [8900.0, 2.0], [9200.0, 1.0], [9500.0, 4.0], [9600.0, 3.0], [9700.0, 2.0], [9300.0, 2.0], [9400.0, 2.0], [10000.0, 1.0], [9900.0, 2.0], [10200.0, 3.0], [9800.0, 1.0], [10500.0, 2.0], [10300.0, 3.0], [10600.0, 5.0], [10400.0, 6.0], [11200.0, 4.0], [11100.0, 1.0], [11000.0, 2.0], [10900.0, 2.0], [11600.0, 3.0], [11700.0, 1.0], [11400.0, 2.0], [11500.0, 2.0], [11300.0, 1.0], [12100.0, 4.0], [12200.0, 2.0], [11900.0, 1.0], [11800.0, 3.0], [12000.0, 1.0], [12700.0, 1.0], [12500.0, 1.0], [12400.0, 4.0], [12300.0, 2.0], [12600.0, 1.0], [13100.0, 2.0], [13300.0, 4.0], [12800.0, 3.0], [12900.0, 3.0], [13000.0, 1.0], [13700.0, 3.0], [13600.0, 2.0], [13400.0, 4.0], [13500.0, 1.0], [13800.0, 1.0], [14300.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [14500.0, 5.0], [14700.0, 2.0], [14400.0, 3.0], [15100.0, 3.0], [15200.0, 3.0], [15000.0, 3.0], [14900.0, 2.0], [15300.0, 1.0], [15500.0, 2.0], [15600.0, 1.0], [15700.0, 1.0], [15800.0, 2.0], [15900.0, 3.0], [16200.0, 3.0], [16300.0, 3.0], [16100.0, 1.0], [17400.0, 2.0], [16400.0, 2.0], [17000.0, 2.0], [17200.0, 1.0], [18200.0, 3.0], [17600.0, 2.0], [18400.0, 1.0], [17800.0, 2.0], [18000.0, 1.0], [18800.0, 2.0], [18600.0, 2.0], [19200.0, 2.0], [19400.0, 1.0], [19800.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [20600.0, 2.0], [20800.0, 6.0], [21000.0, 2.0], [21400.0, 1.0], [21200.0, 2.0], [22200.0, 2.0], [21800.0, 3.0], [22000.0, 3.0], [22400.0, 1.0], [22800.0, 5.0], [23200.0, 3.0], [23400.0, 1.0], [24000.0, 2.0], [24400.0, 1.0], [24200.0, 1.0], [25400.0, 1.0], [24800.0, 3.0], [25200.0, 2.0], [25000.0, 1.0], [26400.0, 2.0], [26600.0, 2.0], [26200.0, 1.0], [25800.0, 1.0], [27000.0, 2.0], [26800.0, 2.0], [27400.0, 2.0], [27200.0, 1.0], [27600.0, 1.0], [27800.0, 2.0], [28200.0, 1.0], [28800.0, 2.0], [29600.0, 1.0], [29200.0, 1.0], [29800.0, 2.0], [30200.0, 2.0], [30000.0, 2.0], [31200.0, 1.0], [30800.0, 2.0], [31600.0, 1.0], [31400.0, 2.0], [32400.0, 2.0], [32600.0, 2.0], [32200.0, 1.0], [33200.0, 1.0], [35600.0, 1.0], [36000.0, 1.0], [35200.0, 1.0], [37600.0, 1.0], [37200.0, 1.0], [38000.0, 2.0], [38400.0, 1.0], [39200.0, 1.0], [40000.0, 2.0], [42000.0, 1.0], [41200.0, 2.0], [42400.0, 1.0], [42800.0, 1.0], [45200.0, 1.0], [46800.0, 1.0], [45600.0, 1.0], [46000.0, 1.0], [48400.0, 1.0], [47600.0, 1.0], [47200.0, 1.0], [50000.0, 1.0], [50800.0, 1.0], [51200.0, 1.0], [52800.0, 2.0], [51600.0, 1.0], [54000.0, 1.0], [54400.0, 1.0], [33100.0, 1.0], [34700.0, 2.0], [33500.0, 1.0], [35900.0, 1.0], [36700.0, 1.0], [39100.0, 1.0], [40300.0, 1.0], [39900.0, 1.0], [42700.0, 1.0], [41500.0, 1.0], [42300.0, 1.0], [43100.0, 1.0], [43900.0, 1.0], [48300.0, 1.0], [51900.0, 1.0], [16500.0, 3.0], [17300.0, 3.0], [17100.0, 3.0], [16900.0, 3.0], [17900.0, 2.0], [17700.0, 3.0], [18300.0, 1.0], [17500.0, 2.0], [19100.0, 3.0], [19300.0, 2.0], [18500.0, 3.0], [18700.0, 1.0], [18900.0, 1.0], [20100.0, 4.0], [19500.0, 1.0], [19900.0, 1.0], [19700.0, 3.0], [21300.0, 2.0], [21100.0, 1.0], [21700.0, 2.0], [22100.0, 2.0], [22300.0, 1.0], [21900.0, 1.0], [22500.0, 1.0], [23300.0, 1.0], [23100.0, 2.0], [23500.0, 3.0], [22700.0, 1.0], [22900.0, 1.0], [24500.0, 3.0], [24100.0, 2.0], [23700.0, 1.0], [23900.0, 3.0], [24700.0, 1.0], [25300.0, 1.0], [24900.0, 2.0], [25100.0, 3.0], [25900.0, 1.0], [25700.0, 2.0], [26100.0, 2.0], [26300.0, 1.0], [26500.0, 1.0], [27500.0, 1.0], [26700.0, 1.0], [28100.0, 2.0], [28500.0, 3.0], [27900.0, 3.0], [27700.0, 1.0], [29300.0, 3.0], [29500.0, 3.0], [28900.0, 1.0], [28700.0, 2.0], [29700.0, 1.0], [29900.0, 1.0], [30700.0, 2.0], [30100.0, 2.0], [30500.0, 1.0], [31500.0, 1.0], [31100.0, 1.0], [31300.0, 2.0], [31700.0, 1.0], [30900.0, 1.0], [32500.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [32100.0, 1.0], [33000.0, 2.0], [34200.0, 3.0], [33400.0, 2.0], [34600.0, 2.0], [33800.0, 1.0], [35000.0, 2.0], [35400.0, 1.0], [36600.0, 2.0], [36200.0, 2.0], [37400.0, 1.0], [38600.0, 1.0], [39000.0, 1.0], [39800.0, 1.0], [40200.0, 2.0], [39400.0, 1.0], [41400.0, 2.0], [44200.0, 1.0], [43400.0, 1.0], [44600.0, 1.0], [45000.0, 1.0], [45800.0, 3.0], [47000.0, 1.0], [46600.0, 1.0], [48600.0, 2.0], [50200.0, 1.0], [52600.0, 1.0], [53000.0, 2.0], [55000.0, 1.0], [54200.0, 1.0], [55400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 55700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 46.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 730.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 46.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 730.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.124183006535945, "minX": 1.651248E12, "maxY": 79.43786982248521, "series": [{"data": [[1.65124824E12, 52.28448275862066], [1.65124812E12, 61.356321839080444], [1.651248E12, 15.124183006535945], [1.65124818E12, 79.43786982248521], [1.65124806E12, 38.359756097561004]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124824E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3987.833333333333, "minX": 1.0, "maxY": 40843.5, "series": [{"data": [[2.0, 23942.0], [3.0, 15507.5], [4.0, 19457.0], [5.0, 14900.5], [6.0, 27912.0], [7.0, 8430.0], [8.0, 27287.5], [9.0, 19480.333333333332], [10.0, 3987.833333333333], [11.0, 28980.5], [12.0, 19995.333333333336], [13.0, 27204.5], [14.0, 19286.333333333336], [15.0, 29996.0], [16.0, 17117.0], [17.0, 17805.333333333336], [18.0, 24163.5], [19.0, 26162.0], [20.0, 6707.704918032787], [21.0, 26227.0], [22.0, 18912.666666666664], [23.0, 27163.5], [24.0, 19987.0], [25.0, 27012.0], [26.0, 17103.0], [27.0, 22477.0], [28.0, 17813.0], [29.0, 27078.0], [30.0, 9899.803921568628], [31.0, 22514.333333333336], [32.0, 24670.0], [33.0, 24339.0], [34.0, 23209.666666666668], [35.0, 28476.0], [36.0, 24364.0], [37.0, 18173.5], [38.0, 27282.0], [39.0, 20175.333333333332], [40.0, 10904.383333333335], [41.0, 27113.5], [42.0, 21384.666666666668], [43.0, 23082.0], [44.0, 21947.0], [45.0, 15451.5], [46.0, 21863.0], [47.0, 16584.333333333332], [48.0, 13562.0], [49.0, 17141.333333333332], [50.0, 15563.833333333336], [51.0, 22409.0], [52.0, 14917.0], [53.0, 22579.0], [54.0, 11158.5], [55.0, 16626.333333333332], [56.0, 21130.5], [57.0, 13629.0], [58.0, 20914.0], [59.0, 17888.333333333332], [60.0, 17562.083333333336], [61.0, 10814.333333333334], [62.0, 14253.5], [63.0, 11842.75], [64.0, 11644.0], [65.0, 12572.666666666666], [66.0, 14609.5], [67.0, 13368.666666666666], [68.0, 8749.0], [69.0, 16267.5], [70.0, 19798.43333333334], [71.0, 14185.0], [72.0, 8993.5], [73.0, 14712.5], [74.0, 13731.666666666668], [75.0, 28518.0], [76.0, 22731.714285714286], [77.0, 35448.0], [78.0, 40843.5], [79.0, 37825.75], [80.0, 27846.016483516487], [1.0, 30025.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[49.96262886597936, 17698.96005154638]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 301.3333333333333, "minX": 1.651248E12, "maxY": 543.1666666666666, "series": [{"data": [[1.65124824E12, 360.0833333333333], [1.65124812E12, 543.1666666666666], [1.651248E12, 474.6666666666667], [1.65124818E12, 528.4666666666667], [1.65124806E12, 511.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124824E12, 301.3333333333333], [1.65124812E12, 452.3], [1.651248E12, 397.6166666666667], [1.65124818E12, 439.35], [1.65124806E12, 426.26666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124824E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4523.424836601306, "minX": 1.651248E12, "maxY": 33531.62931034483, "series": [{"data": [[1.65124824E12, 33531.62931034483], [1.65124812E12, 17718.47126436782], [1.651248E12, 4523.424836601306], [1.65124818E12, 24757.183431952675], [1.65124806E12, 11497.939024390242]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124824E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4523.346405228757, "minX": 1.651248E12, "maxY": 33531.53448275862, "series": [{"data": [[1.65124824E12, 33531.53448275862], [1.65124812E12, 17718.42528735633], [1.651248E12, 4523.346405228757], [1.65124818E12, 24757.147928994073], [1.65124806E12, 11497.914634146351]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124824E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.514792899408285, "minX": 1.651248E12, "maxY": 16.915032679738562, "series": [{"data": [[1.65124824E12, 9.931034482758616], [1.65124812E12, 9.33333333333333], [1.651248E12, 16.915032679738562], [1.65124818E12, 8.514792899408285], [1.65124806E12, 9.70731707317073]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124824E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 565.0, "minX": 1.651248E12, "maxY": 55741.0, "series": [{"data": [[1.65124824E12, 55741.0], [1.65124812E12, 39886.0], [1.651248E12, 14523.0], [1.65124818E12, 52820.0], [1.65124806E12, 27881.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124824E12, 52735.3], [1.65124812E12, 32075.0], [1.651248E12, 9527.0], [1.65124818E12, 42716.0], [1.65124806E12, 21216.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124824E12, 55737.77], [1.65124812E12, 39262.75], [1.651248E12, 14083.980000000007], [1.65124818E12, 51741.30000000002], [1.65124806E12, 27321.349999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124824E12, 54450.4], [1.65124812E12, 34712.25], [1.651248E12, 10575.499999999998], [1.65124818E12, 46512.0], [1.65124806E12, 23949.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124824E12, 1479.0], [1.65124812E12, 995.0], [1.651248E12, 565.0], [1.65124818E12, 890.0], [1.65124806E12, 948.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124824E12, 35605.0], [1.65124812E12, 17065.0], [1.651248E12, 3725.0], [1.65124818E12, 24947.0], [1.65124806E12, 10650.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124824E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12151.0, "minX": 1.0, "maxY": 16793.5, "series": [{"data": [[1.0, 12151.0], [4.0, 14734.5], [2.0, 16793.5], [3.0, 13464.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12151.0, "minX": 1.0, "maxY": 16793.5, "series": [{"data": [[1.0, 12151.0], [4.0, 14734.5], [2.0, 16793.5], [3.0, 13464.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.651248E12, "maxY": 3.2333333333333334, "series": [{"data": [[1.65124824E12, 0.6], [1.65124812E12, 3.2333333333333334], [1.651248E12, 3.0166666666666666], [1.65124818E12, 2.9833333333333334], [1.65124806E12, 3.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124824E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.651248E12, "maxY": 2.9, "series": [{"data": [[1.65124824E12, 1.9333333333333333], [1.65124812E12, 2.9], [1.651248E12, 2.55], [1.65124818E12, 2.816666666666667], [1.65124806E12, 2.7333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124824E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.651248E12, "maxY": 2.9, "series": [{"data": [[1.65124824E12, 1.9333333333333333], [1.65124812E12, 2.9], [1.651248E12, 2.55], [1.65124818E12, 2.816666666666667], [1.65124806E12, 2.7333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124824E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.651248E12, "maxY": 2.9, "series": [{"data": [[1.65124824E12, 1.9333333333333333], [1.65124812E12, 2.9], [1.651248E12, 2.55], [1.65124818E12, 2.816666666666667], [1.65124806E12, 2.7333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124824E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


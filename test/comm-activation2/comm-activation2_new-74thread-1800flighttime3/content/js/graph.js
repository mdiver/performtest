/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 678.0, "minX": 0.0, "maxY": 60227.0, "series": [{"data": [[0.0, 678.0], [0.1, 893.0], [0.2, 930.0], [0.3, 966.0], [0.4, 1028.0], [0.5, 1048.0], [0.6, 1069.0], [0.7, 1100.0], [0.8, 1130.0], [0.9, 1142.0], [1.0, 1194.0], [1.1, 1237.0], [1.2, 1264.0], [1.3, 1322.0], [1.4, 1344.0], [1.5, 1361.0], [1.6, 1379.0], [1.7, 1396.0], [1.8, 1407.0], [1.9, 1428.0], [2.0, 1466.0], [2.1, 1485.0], [2.2, 1512.0], [2.3, 1549.0], [2.4, 1571.0], [2.5, 1591.0], [2.6, 1624.0], [2.7, 1679.0], [2.8, 1700.0], [2.9, 1782.0], [3.0, 1841.0], [3.1, 1879.0], [3.2, 1920.0], [3.3, 1980.0], [3.4, 2032.0], [3.5, 2099.0], [3.6, 2152.0], [3.7, 2178.0], [3.8, 2239.0], [3.9, 2275.0], [4.0, 2332.0], [4.1, 2362.0], [4.2, 2404.0], [4.3, 2493.0], [4.4, 2517.0], [4.5, 2546.0], [4.6, 2575.0], [4.7, 2604.0], [4.8, 2632.0], [4.9, 2680.0], [5.0, 2726.0], [5.1, 2755.0], [5.2, 2786.0], [5.3, 2806.0], [5.4, 2834.0], [5.5, 2864.0], [5.6, 2910.0], [5.7, 2930.0], [5.8, 2959.0], [5.9, 3008.0], [6.0, 3024.0], [6.1, 3052.0], [6.2, 3100.0], [6.3, 3123.0], [6.4, 3238.0], [6.5, 3322.0], [6.6, 3376.0], [6.7, 3459.0], [6.8, 3515.0], [6.9, 3604.0], [7.0, 3644.0], [7.1, 3672.0], [7.2, 3703.0], [7.3, 3725.0], [7.4, 3785.0], [7.5, 3823.0], [7.6, 3861.0], [7.7, 3929.0], [7.8, 3981.0], [7.9, 4023.0], [8.0, 4076.0], [8.1, 4090.0], [8.2, 4118.0], [8.3, 4152.0], [8.4, 4175.0], [8.5, 4213.0], [8.6, 4246.0], [8.7, 4301.0], [8.8, 4322.0], [8.9, 4345.0], [9.0, 4371.0], [9.1, 4401.0], [9.2, 4445.0], [9.3, 4456.0], [9.4, 4524.0], [9.5, 4599.0], [9.6, 4620.0], [9.7, 4747.0], [9.8, 4809.0], [9.9, 4859.0], [10.0, 4937.0], [10.1, 4978.0], [10.2, 4998.0], [10.3, 5042.0], [10.4, 5061.0], [10.5, 5103.0], [10.6, 5127.0], [10.7, 5147.0], [10.8, 5172.0], [10.9, 5229.0], [11.0, 5280.0], [11.1, 5290.0], [11.2, 5325.0], [11.3, 5344.0], [11.4, 5396.0], [11.5, 5416.0], [11.6, 5443.0], [11.7, 5494.0], [11.8, 5525.0], [11.9, 5572.0], [12.0, 5628.0], [12.1, 5680.0], [12.2, 5714.0], [12.3, 5743.0], [12.4, 5800.0], [12.5, 5825.0], [12.6, 5865.0], [12.7, 5934.0], [12.8, 5993.0], [12.9, 6043.0], [13.0, 6076.0], [13.1, 6103.0], [13.2, 6171.0], [13.3, 6208.0], [13.4, 6236.0], [13.5, 6325.0], [13.6, 6370.0], [13.7, 6429.0], [13.8, 6458.0], [13.9, 6521.0], [14.0, 6577.0], [14.1, 6640.0], [14.2, 6654.0], [14.3, 6707.0], [14.4, 6751.0], [14.5, 6802.0], [14.6, 6846.0], [14.7, 6895.0], [14.8, 6929.0], [14.9, 6999.0], [15.0, 7031.0], [15.1, 7049.0], [15.2, 7082.0], [15.3, 7124.0], [15.4, 7164.0], [15.5, 7286.0], [15.6, 7328.0], [15.7, 7401.0], [15.8, 7441.0], [15.9, 7475.0], [16.0, 7568.0], [16.1, 7617.0], [16.2, 7667.0], [16.3, 7728.0], [16.4, 7771.0], [16.5, 7816.0], [16.6, 7846.0], [16.7, 7881.0], [16.8, 7937.0], [16.9, 7991.0], [17.0, 8024.0], [17.1, 8070.0], [17.2, 8130.0], [17.3, 8179.0], [17.4, 8227.0], [17.5, 8307.0], [17.6, 8345.0], [17.7, 8368.0], [17.8, 8408.0], [17.9, 8452.0], [18.0, 8470.0], [18.1, 8525.0], [18.2, 8608.0], [18.3, 8629.0], [18.4, 8654.0], [18.5, 8688.0], [18.6, 8739.0], [18.7, 8781.0], [18.8, 8863.0], [18.9, 8898.0], [19.0, 8965.0], [19.1, 9019.0], [19.2, 9050.0], [19.3, 9101.0], [19.4, 9155.0], [19.5, 9218.0], [19.6, 9283.0], [19.7, 9306.0], [19.8, 9367.0], [19.9, 9431.0], [20.0, 9478.0], [20.1, 9495.0], [20.2, 9549.0], [20.3, 9566.0], [20.4, 9608.0], [20.5, 9635.0], [20.6, 9679.0], [20.7, 9731.0], [20.8, 9837.0], [20.9, 9865.0], [21.0, 9927.0], [21.1, 9947.0], [21.2, 10076.0], [21.3, 10108.0], [21.4, 10144.0], [21.5, 10179.0], [21.6, 10230.0], [21.7, 10255.0], [21.8, 10295.0], [21.9, 10359.0], [22.0, 10416.0], [22.1, 10442.0], [22.2, 10453.0], [22.3, 10485.0], [22.4, 10537.0], [22.5, 10632.0], [22.6, 10665.0], [22.7, 10697.0], [22.8, 10747.0], [22.9, 10797.0], [23.0, 10832.0], [23.1, 10854.0], [23.2, 10904.0], [23.3, 10970.0], [23.4, 10992.0], [23.5, 11026.0], [23.6, 11085.0], [23.7, 11153.0], [23.8, 11186.0], [23.9, 11215.0], [24.0, 11269.0], [24.1, 11298.0], [24.2, 11351.0], [24.3, 11415.0], [24.4, 11445.0], [24.5, 11515.0], [24.6, 11565.0], [24.7, 11613.0], [24.8, 11671.0], [24.9, 11717.0], [25.0, 11770.0], [25.1, 11846.0], [25.2, 11870.0], [25.3, 11939.0], [25.4, 11975.0], [25.5, 12037.0], [25.6, 12095.0], [25.7, 12150.0], [25.8, 12185.0], [25.9, 12208.0], [26.0, 12255.0], [26.1, 12299.0], [26.2, 12324.0], [26.3, 12348.0], [26.4, 12390.0], [26.5, 12452.0], [26.6, 12491.0], [26.7, 12583.0], [26.8, 12642.0], [26.9, 12687.0], [27.0, 12755.0], [27.1, 12797.0], [27.2, 12850.0], [27.3, 12863.0], [27.4, 12905.0], [27.5, 12983.0], [27.6, 13051.0], [27.7, 13066.0], [27.8, 13092.0], [27.9, 13122.0], [28.0, 13176.0], [28.1, 13228.0], [28.2, 13260.0], [28.3, 13343.0], [28.4, 13403.0], [28.5, 13450.0], [28.6, 13493.0], [28.7, 13539.0], [28.8, 13600.0], [28.9, 13634.0], [29.0, 13702.0], [29.1, 13762.0], [29.2, 13831.0], [29.3, 13852.0], [29.4, 13885.0], [29.5, 13944.0], [29.6, 14008.0], [29.7, 14064.0], [29.8, 14101.0], [29.9, 14176.0], [30.0, 14218.0], [30.1, 14258.0], [30.2, 14285.0], [30.3, 14317.0], [30.4, 14393.0], [30.5, 14461.0], [30.6, 14500.0], [30.7, 14539.0], [30.8, 14584.0], [30.9, 14606.0], [31.0, 14669.0], [31.1, 14721.0], [31.2, 14775.0], [31.3, 14851.0], [31.4, 14919.0], [31.5, 14969.0], [31.6, 15001.0], [31.7, 15073.0], [31.8, 15146.0], [31.9, 15203.0], [32.0, 15275.0], [32.1, 15310.0], [32.2, 15381.0], [32.3, 15421.0], [32.4, 15478.0], [32.5, 15517.0], [32.6, 15566.0], [32.7, 15593.0], [32.8, 15638.0], [32.9, 15676.0], [33.0, 15733.0], [33.1, 15759.0], [33.2, 15793.0], [33.3, 15863.0], [33.4, 15895.0], [33.5, 15950.0], [33.6, 16008.0], [33.7, 16043.0], [33.8, 16124.0], [33.9, 16159.0], [34.0, 16186.0], [34.1, 16232.0], [34.2, 16285.0], [34.3, 16330.0], [34.4, 16439.0], [34.5, 16474.0], [34.6, 16569.0], [34.7, 16583.0], [34.8, 16611.0], [34.9, 16638.0], [35.0, 16725.0], [35.1, 16751.0], [35.2, 16823.0], [35.3, 16921.0], [35.4, 16941.0], [35.5, 16973.0], [35.6, 17019.0], [35.7, 17050.0], [35.8, 17075.0], [35.9, 17153.0], [36.0, 17200.0], [36.1, 17250.0], [36.2, 17318.0], [36.3, 17395.0], [36.4, 17462.0], [36.5, 17507.0], [36.6, 17536.0], [36.7, 17572.0], [36.8, 17627.0], [36.9, 17672.0], [37.0, 17709.0], [37.1, 17736.0], [37.2, 17787.0], [37.3, 17832.0], [37.4, 17883.0], [37.5, 17928.0], [37.6, 17956.0], [37.7, 18059.0], [37.8, 18085.0], [37.9, 18109.0], [38.0, 18164.0], [38.1, 18265.0], [38.2, 18297.0], [38.3, 18327.0], [38.4, 18393.0], [38.5, 18461.0], [38.6, 18521.0], [38.7, 18558.0], [38.8, 18589.0], [38.9, 18603.0], [39.0, 18683.0], [39.1, 18729.0], [39.2, 18781.0], [39.3, 18813.0], [39.4, 18924.0], [39.5, 18963.0], [39.6, 19059.0], [39.7, 19134.0], [39.8, 19185.0], [39.9, 19224.0], [40.0, 19274.0], [40.1, 19311.0], [40.2, 19323.0], [40.3, 19376.0], [40.4, 19433.0], [40.5, 19471.0], [40.6, 19502.0], [40.7, 19578.0], [40.8, 19631.0], [40.9, 19702.0], [41.0, 19734.0], [41.1, 19765.0], [41.2, 19833.0], [41.3, 19880.0], [41.4, 19943.0], [41.5, 19990.0], [41.6, 20043.0], [41.7, 20089.0], [41.8, 20110.0], [41.9, 20138.0], [42.0, 20192.0], [42.1, 20229.0], [42.2, 20295.0], [42.3, 20364.0], [42.4, 20426.0], [42.5, 20476.0], [42.6, 20502.0], [42.7, 20578.0], [42.8, 20674.0], [42.9, 20712.0], [43.0, 20738.0], [43.1, 20774.0], [43.2, 20866.0], [43.3, 20953.0], [43.4, 20979.0], [43.5, 21034.0], [43.6, 21080.0], [43.7, 21121.0], [43.8, 21213.0], [43.9, 21279.0], [44.0, 21344.0], [44.1, 21387.0], [44.2, 21439.0], [44.3, 21471.0], [44.4, 21538.0], [44.5, 21577.0], [44.6, 21595.0], [44.7, 21683.0], [44.8, 21710.0], [44.9, 21728.0], [45.0, 21758.0], [45.1, 21801.0], [45.2, 21850.0], [45.3, 21868.0], [45.4, 21915.0], [45.5, 21993.0], [45.6, 22055.0], [45.7, 22114.0], [45.8, 22183.0], [45.9, 22233.0], [46.0, 22250.0], [46.1, 22327.0], [46.2, 22350.0], [46.3, 22393.0], [46.4, 22448.0], [46.5, 22489.0], [46.6, 22565.0], [46.7, 22666.0], [46.8, 22698.0], [46.9, 22783.0], [47.0, 22826.0], [47.1, 22903.0], [47.2, 22964.0], [47.3, 23002.0], [47.4, 23036.0], [47.5, 23105.0], [47.6, 23165.0], [47.7, 23203.0], [47.8, 23253.0], [47.9, 23288.0], [48.0, 23365.0], [48.1, 23406.0], [48.2, 23503.0], [48.3, 23536.0], [48.4, 23592.0], [48.5, 23637.0], [48.6, 23688.0], [48.7, 23716.0], [48.8, 23783.0], [48.9, 23867.0], [49.0, 23920.0], [49.1, 23972.0], [49.2, 24028.0], [49.3, 24072.0], [49.4, 24135.0], [49.5, 24184.0], [49.6, 24225.0], [49.7, 24253.0], [49.8, 24295.0], [49.9, 24350.0], [50.0, 24405.0], [50.1, 24454.0], [50.2, 24515.0], [50.3, 24570.0], [50.4, 24595.0], [50.5, 24610.0], [50.6, 24658.0], [50.7, 24681.0], [50.8, 24733.0], [50.9, 24789.0], [51.0, 24844.0], [51.1, 24881.0], [51.2, 24972.0], [51.3, 25060.0], [51.4, 25103.0], [51.5, 25170.0], [51.6, 25198.0], [51.7, 25233.0], [51.8, 25268.0], [51.9, 25307.0], [52.0, 25362.0], [52.1, 25412.0], [52.2, 25471.0], [52.3, 25613.0], [52.4, 25657.0], [52.5, 25694.0], [52.6, 25739.0], [52.7, 25813.0], [52.8, 25826.0], [52.9, 25882.0], [53.0, 25937.0], [53.1, 25967.0], [53.2, 26060.0], [53.3, 26096.0], [53.4, 26160.0], [53.5, 26210.0], [53.6, 26243.0], [53.7, 26340.0], [53.8, 26392.0], [53.9, 26424.0], [54.0, 26453.0], [54.1, 26478.0], [54.2, 26592.0], [54.3, 26615.0], [54.4, 26640.0], [54.5, 26672.0], [54.6, 26751.0], [54.7, 26783.0], [54.8, 26855.0], [54.9, 26900.0], [55.0, 26946.0], [55.1, 26987.0], [55.2, 27025.0], [55.3, 27168.0], [55.4, 27214.0], [55.5, 27277.0], [55.6, 27339.0], [55.7, 27395.0], [55.8, 27444.0], [55.9, 27498.0], [56.0, 27532.0], [56.1, 27558.0], [56.2, 27597.0], [56.3, 27654.0], [56.4, 27739.0], [56.5, 27819.0], [56.6, 27889.0], [56.7, 27912.0], [56.8, 28001.0], [56.9, 28022.0], [57.0, 28114.0], [57.1, 28173.0], [57.2, 28199.0], [57.3, 28253.0], [57.4, 28287.0], [57.5, 28341.0], [57.6, 28389.0], [57.7, 28469.0], [57.8, 28490.0], [57.9, 28523.0], [58.0, 28594.0], [58.1, 28690.0], [58.2, 28732.0], [58.3, 28765.0], [58.4, 28806.0], [58.5, 28840.0], [58.6, 28872.0], [58.7, 28922.0], [58.8, 28951.0], [58.9, 29022.0], [59.0, 29072.0], [59.1, 29104.0], [59.2, 29197.0], [59.3, 29231.0], [59.4, 29333.0], [59.5, 29392.0], [59.6, 29434.0], [59.7, 29456.0], [59.8, 29519.0], [59.9, 29568.0], [60.0, 29608.0], [60.1, 29660.0], [60.2, 29686.0], [60.3, 29786.0], [60.4, 29856.0], [60.5, 29893.0], [60.6, 29914.0], [60.7, 29968.0], [60.8, 30021.0], [60.9, 30100.0], [61.0, 30139.0], [61.1, 30199.0], [61.2, 30274.0], [61.3, 30325.0], [61.4, 30412.0], [61.5, 30437.0], [61.6, 30466.0], [61.7, 30521.0], [61.8, 30603.0], [61.9, 30686.0], [62.0, 30711.0], [62.1, 30825.0], [62.2, 30874.0], [62.3, 30909.0], [62.4, 30975.0], [62.5, 31023.0], [62.6, 31073.0], [62.7, 31110.0], [62.8, 31192.0], [62.9, 31238.0], [63.0, 31274.0], [63.1, 31313.0], [63.2, 31354.0], [63.3, 31383.0], [63.4, 31437.0], [63.5, 31471.0], [63.6, 31501.0], [63.7, 31543.0], [63.8, 31615.0], [63.9, 31680.0], [64.0, 31737.0], [64.1, 31783.0], [64.2, 31829.0], [64.3, 31899.0], [64.4, 32013.0], [64.5, 32093.0], [64.6, 32143.0], [64.7, 32215.0], [64.8, 32293.0], [64.9, 32346.0], [65.0, 32366.0], [65.1, 32412.0], [65.2, 32440.0], [65.3, 32479.0], [65.4, 32511.0], [65.5, 32550.0], [65.6, 32594.0], [65.7, 32655.0], [65.8, 32700.0], [65.9, 32716.0], [66.0, 32790.0], [66.1, 32843.0], [66.2, 32900.0], [66.3, 33001.0], [66.4, 33049.0], [66.5, 33092.0], [66.6, 33169.0], [66.7, 33181.0], [66.8, 33230.0], [66.9, 33282.0], [67.0, 33333.0], [67.1, 33381.0], [67.2, 33413.0], [67.3, 33454.0], [67.4, 33509.0], [67.5, 33549.0], [67.6, 33591.0], [67.7, 33677.0], [67.8, 33701.0], [67.9, 33743.0], [68.0, 33854.0], [68.1, 33952.0], [68.2, 34055.0], [68.3, 34084.0], [68.4, 34132.0], [68.5, 34179.0], [68.6, 34221.0], [68.7, 34272.0], [68.8, 34321.0], [68.9, 34359.0], [69.0, 34394.0], [69.1, 34452.0], [69.2, 34521.0], [69.3, 34582.0], [69.4, 34615.0], [69.5, 34705.0], [69.6, 34777.0], [69.7, 34807.0], [69.8, 34906.0], [69.9, 34934.0], [70.0, 34996.0], [70.1, 35050.0], [70.2, 35106.0], [70.3, 35159.0], [70.4, 35187.0], [70.5, 35223.0], [70.6, 35280.0], [70.7, 35352.0], [70.8, 35375.0], [70.9, 35473.0], [71.0, 35536.0], [71.1, 35577.0], [71.2, 35686.0], [71.3, 35706.0], [71.4, 35722.0], [71.5, 35808.0], [71.6, 35847.0], [71.7, 35901.0], [71.8, 35974.0], [71.9, 36015.0], [72.0, 36091.0], [72.1, 36131.0], [72.2, 36170.0], [72.3, 36214.0], [72.4, 36273.0], [72.5, 36316.0], [72.6, 36379.0], [72.7, 36437.0], [72.8, 36491.0], [72.9, 36541.0], [73.0, 36610.0], [73.1, 36651.0], [73.2, 36786.0], [73.3, 36830.0], [73.4, 36846.0], [73.5, 36895.0], [73.6, 36919.0], [73.7, 36975.0], [73.8, 37000.0], [73.9, 37066.0], [74.0, 37119.0], [74.1, 37155.0], [74.2, 37208.0], [74.3, 37271.0], [74.4, 37302.0], [74.5, 37346.0], [74.6, 37364.0], [74.7, 37427.0], [74.8, 37496.0], [74.9, 37568.0], [75.0, 37642.0], [75.1, 37753.0], [75.2, 37776.0], [75.3, 37875.0], [75.4, 37916.0], [75.5, 37944.0], [75.6, 38001.0], [75.7, 38063.0], [75.8, 38109.0], [75.9, 38165.0], [76.0, 38196.0], [76.1, 38264.0], [76.2, 38316.0], [76.3, 38365.0], [76.4, 38411.0], [76.5, 38464.0], [76.6, 38515.0], [76.7, 38560.0], [76.8, 38622.0], [76.9, 38660.0], [77.0, 38717.0], [77.1, 38764.0], [77.2, 38821.0], [77.3, 38885.0], [77.4, 38969.0], [77.5, 39027.0], [77.6, 39084.0], [77.7, 39114.0], [77.8, 39164.0], [77.9, 39197.0], [78.0, 39286.0], [78.1, 39365.0], [78.2, 39391.0], [78.3, 39447.0], [78.4, 39475.0], [78.5, 39510.0], [78.6, 39554.0], [78.7, 39614.0], [78.8, 39673.0], [78.9, 39744.0], [79.0, 39765.0], [79.1, 39818.0], [79.2, 39894.0], [79.3, 39926.0], [79.4, 39965.0], [79.5, 40015.0], [79.6, 40087.0], [79.7, 40187.0], [79.8, 40238.0], [79.9, 40326.0], [80.0, 40430.0], [80.1, 40453.0], [80.2, 40552.0], [80.3, 40582.0], [80.4, 40617.0], [80.5, 40692.0], [80.6, 40752.0], [80.7, 40796.0], [80.8, 40855.0], [80.9, 40895.0], [81.0, 40929.0], [81.1, 41006.0], [81.2, 41056.0], [81.3, 41091.0], [81.4, 41114.0], [81.5, 41190.0], [81.6, 41247.0], [81.7, 41281.0], [81.8, 41338.0], [81.9, 41390.0], [82.0, 41441.0], [82.1, 41487.0], [82.2, 41529.0], [82.3, 41594.0], [82.4, 41633.0], [82.5, 41715.0], [82.6, 41799.0], [82.7, 41861.0], [82.8, 41886.0], [82.9, 41995.0], [83.0, 42053.0], [83.1, 42094.0], [83.2, 42144.0], [83.3, 42222.0], [83.4, 42307.0], [83.5, 42340.0], [83.6, 42379.0], [83.7, 42410.0], [83.8, 42509.0], [83.9, 42534.0], [84.0, 42573.0], [84.1, 42655.0], [84.2, 42681.0], [84.3, 42824.0], [84.4, 42902.0], [84.5, 42968.0], [84.6, 43031.0], [84.7, 43102.0], [84.8, 43183.0], [84.9, 43208.0], [85.0, 43219.0], [85.1, 43237.0], [85.2, 43279.0], [85.3, 43333.0], [85.4, 43419.0], [85.5, 43459.0], [85.6, 43501.0], [85.7, 43554.0], [85.8, 43601.0], [85.9, 43673.0], [86.0, 43741.0], [86.1, 43805.0], [86.2, 43903.0], [86.3, 43940.0], [86.4, 43984.0], [86.5, 44096.0], [86.6, 44211.0], [86.7, 44235.0], [86.8, 44355.0], [86.9, 44421.0], [87.0, 44472.0], [87.1, 44532.0], [87.2, 44589.0], [87.3, 44716.0], [87.4, 44793.0], [87.5, 44826.0], [87.6, 44871.0], [87.7, 44956.0], [87.8, 45039.0], [87.9, 45069.0], [88.0, 45109.0], [88.1, 45215.0], [88.2, 45302.0], [88.3, 45344.0], [88.4, 45451.0], [88.5, 45518.0], [88.6, 45599.0], [88.7, 45651.0], [88.8, 45679.0], [88.9, 45769.0], [89.0, 45838.0], [89.1, 45916.0], [89.2, 46008.0], [89.3, 46073.0], [89.4, 46158.0], [89.5, 46218.0], [89.6, 46334.0], [89.7, 46384.0], [89.8, 46446.0], [89.9, 46514.0], [90.0, 46592.0], [90.1, 46642.0], [90.2, 46679.0], [90.3, 46785.0], [90.4, 46871.0], [90.5, 46895.0], [90.6, 47000.0], [90.7, 47142.0], [90.8, 47197.0], [90.9, 47216.0], [91.0, 47296.0], [91.1, 47404.0], [91.2, 47459.0], [91.3, 47512.0], [91.4, 47613.0], [91.5, 47666.0], [91.6, 47758.0], [91.7, 47788.0], [91.8, 47871.0], [91.9, 47925.0], [92.0, 48039.0], [92.1, 48071.0], [92.2, 48132.0], [92.3, 48184.0], [92.4, 48280.0], [92.5, 48334.0], [92.6, 48442.0], [92.7, 48511.0], [92.8, 48634.0], [92.9, 48721.0], [93.0, 48865.0], [93.1, 48915.0], [93.2, 49004.0], [93.3, 49104.0], [93.4, 49254.0], [93.5, 49312.0], [93.6, 49434.0], [93.7, 49541.0], [93.8, 49617.0], [93.9, 49688.0], [94.0, 49754.0], [94.1, 49806.0], [94.2, 49962.0], [94.3, 50045.0], [94.4, 50119.0], [94.5, 50193.0], [94.6, 50272.0], [94.7, 50347.0], [94.8, 50485.0], [94.9, 50569.0], [95.0, 50691.0], [95.1, 50723.0], [95.2, 50766.0], [95.3, 50892.0], [95.4, 50990.0], [95.5, 51035.0], [95.6, 51175.0], [95.7, 51332.0], [95.8, 51526.0], [95.9, 51643.0], [96.0, 51759.0], [96.1, 51883.0], [96.2, 51963.0], [96.3, 52056.0], [96.4, 52188.0], [96.5, 52266.0], [96.6, 52354.0], [96.7, 52468.0], [96.8, 52612.0], [96.9, 52744.0], [97.0, 52907.0], [97.1, 52977.0], [97.2, 53068.0], [97.3, 53214.0], [97.4, 53368.0], [97.5, 53499.0], [97.6, 53661.0], [97.7, 53708.0], [97.8, 53985.0], [97.9, 54281.0], [98.0, 54446.0], [98.1, 54601.0], [98.2, 54994.0], [98.3, 55263.0], [98.4, 55389.0], [98.5, 55559.0], [98.6, 55967.0], [98.7, 56135.0], [98.8, 56363.0], [98.9, 56570.0], [99.0, 56886.0], [99.1, 57063.0], [99.2, 57204.0], [99.3, 57750.0], [99.4, 58064.0], [99.5, 58224.0], [99.6, 58702.0], [99.7, 59219.0], [99.8, 59743.0], [99.9, 60010.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 27.0, "series": [{"data": [[32900.0, 6.0], [34500.0, 11.0], [33700.0, 9.0], [35300.0, 9.0], [36100.0, 15.0], [36900.0, 14.0], [37700.0, 12.0], [38500.0, 9.0], [39300.0, 12.0], [40100.0, 6.0], [40900.0, 11.0], [42500.0, 12.0], [41700.0, 7.0], [44100.0, 5.0], [44900.0, 5.0], [43300.0, 7.0], [45700.0, 7.0], [46500.0, 11.0], [48900.0, 7.0], [48100.0, 10.0], [47300.0, 5.0], [50500.0, 6.0], [49700.0, 7.0], [52900.0, 8.0], [51300.0, 4.0], [52100.0, 5.0], [53700.0, 4.0], [54500.0, 2.0], [56100.0, 3.0], [55300.0, 4.0], [56900.0, 2.0], [57700.0, 3.0], [59300.0, 1.0], [58500.0, 1.0], [60100.0, 1.0], [600.0, 1.0], [700.0, 2.0], [800.0, 4.0], [900.0, 12.0], [1000.0, 20.0], [1100.0, 19.0], [1200.0, 13.0], [1300.0, 27.0], [1400.0, 22.0], [1500.0, 23.0], [1600.0, 14.0], [1700.0, 9.0], [1800.0, 13.0], [1900.0, 7.0], [2000.0, 12.0], [2100.0, 14.0], [2300.0, 13.0], [2200.0, 11.0], [2400.0, 8.0], [2500.0, 20.0], [2600.0, 17.0], [2800.0, 16.0], [2700.0, 16.0], [2900.0, 18.0], [3000.0, 18.0], [3100.0, 11.0], [3300.0, 9.0], [3200.0, 5.0], [3400.0, 8.0], [3500.0, 6.0], [3600.0, 17.0], [3700.0, 12.0], [3800.0, 15.0], [3900.0, 12.0], [4000.0, 15.0], [4300.0, 22.0], [4200.0, 14.0], [4100.0, 17.0], [4600.0, 9.0], [4400.0, 13.0], [4500.0, 11.0], [4700.0, 6.0], [4800.0, 10.0], [5000.0, 15.0], [5100.0, 21.0], [4900.0, 14.0], [5300.0, 17.0], [5200.0, 16.0], [5500.0, 14.0], [5400.0, 16.0], [5600.0, 12.0], [5800.0, 13.0], [5700.0, 12.0], [6000.0, 14.0], [6100.0, 11.0], [5900.0, 12.0], [6300.0, 11.0], [6200.0, 10.0], [6500.0, 9.0], [6600.0, 15.0], [6400.0, 12.0], [6800.0, 14.0], [6900.0, 11.0], [6700.0, 11.0], [7100.0, 11.0], [7000.0, 18.0], [7200.0, 6.0], [7300.0, 8.0], [7400.0, 14.0], [7600.0, 9.0], [7500.0, 9.0], [7700.0, 11.0], [7900.0, 11.0], [7800.0, 17.0], [8100.0, 12.0], [8000.0, 11.0], [8400.0, 16.0], [8600.0, 20.0], [8200.0, 5.0], [9200.0, 13.0], [8800.0, 10.0], [9000.0, 12.0], [9400.0, 15.0], [9600.0, 15.0], [10000.0, 8.0], [9800.0, 12.0], [10200.0, 16.0], [10400.0, 21.0], [10600.0, 14.0], [10800.0, 16.0], [11000.0, 9.0], [11200.0, 15.0], [11400.0, 11.0], [11600.0, 10.0], [12000.0, 9.0], [11800.0, 11.0], [12200.0, 12.0], [12400.0, 12.0], [12600.0, 11.0], [12800.0, 16.0], [13200.0, 13.0], [13000.0, 18.0], [13600.0, 11.0], [13800.0, 16.0], [13400.0, 12.0], [14000.0, 11.0], [14200.0, 15.0], [14400.0, 11.0], [14600.0, 8.0], [14800.0, 9.0], [15200.0, 10.0], [15000.0, 7.0], [15600.0, 12.0], [15800.0, 13.0], [15400.0, 12.0], [16000.0, 10.0], [16200.0, 9.0], [16800.0, 5.0], [16400.0, 7.0], [17200.0, 9.0], [17600.0, 11.0], [18000.0, 9.0], [18400.0, 8.0], [19200.0, 12.0], [18800.0, 9.0], [20000.0, 12.0], [20400.0, 11.0], [19600.0, 9.0], [21200.0, 8.0], [20800.0, 7.0], [21600.0, 9.0], [22400.0, 11.0], [22000.0, 9.0], [23200.0, 13.0], [22800.0, 10.0], [23600.0, 12.0], [24000.0, 12.0], [24400.0, 11.0], [24800.0, 11.0], [25200.0, 14.0], [26000.0, 10.0], [26400.0, 16.0], [25600.0, 13.0], [27200.0, 11.0], [26800.0, 11.0], [27600.0, 9.0], [28400.0, 11.0], [28000.0, 10.0], [28800.0, 16.0], [29600.0, 12.0], [29200.0, 7.0], [30400.0, 15.0], [30000.0, 8.0], [31600.0, 8.0], [31200.0, 14.0], [30800.0, 10.0], [32400.0, 16.0], [32000.0, 8.0], [32800.0, 8.0], [33600.0, 9.0], [34400.0, 8.0], [36000.0, 9.0], [36800.0, 16.0], [35200.0, 11.0], [38400.0, 14.0], [37600.0, 3.0], [40000.0, 9.0], [40800.0, 10.0], [39200.0, 6.0], [42400.0, 6.0], [41600.0, 8.0], [44000.0, 6.0], [43200.0, 23.0], [44800.0, 12.0], [45600.0, 11.0], [46400.0, 6.0], [48800.0, 7.0], [48000.0, 10.0], [47200.0, 10.0], [49600.0, 10.0], [50400.0, 7.0], [51200.0, 4.0], [52000.0, 4.0], [52800.0, 2.0], [53600.0, 9.0], [55200.0, 4.0], [54400.0, 4.0], [56800.0, 2.0], [56000.0, 1.0], [58400.0, 3.0], [59200.0, 1.0], [60000.0, 7.0], [33100.0, 12.0], [34700.0, 10.0], [33900.0, 2.0], [35500.0, 10.0], [36300.0, 10.0], [37100.0, 15.0], [37900.0, 14.0], [38700.0, 9.0], [39500.0, 10.0], [40300.0, 6.0], [42700.0, 3.0], [41100.0, 11.0], [41900.0, 4.0], [43500.0, 11.0], [44300.0, 2.0], [45900.0, 8.0], [45100.0, 7.0], [46700.0, 7.0], [49100.0, 5.0], [48300.0, 7.0], [47500.0, 5.0], [50700.0, 13.0], [49900.0, 4.0], [52300.0, 7.0], [51500.0, 4.0], [53100.0, 2.0], [53900.0, 2.0], [57100.0, 3.0], [56300.0, 4.0], [55500.0, 6.0], [58700.0, 2.0], [59500.0, 1.0], [16900.0, 16.0], [17300.0, 9.0], [16500.0, 13.0], [18100.0, 11.0], [17700.0, 16.0], [18500.0, 17.0], [19300.0, 14.0], [18900.0, 9.0], [19700.0, 17.0], [20100.0, 14.0], [20500.0, 9.0], [21300.0, 12.0], [20900.0, 12.0], [21700.0, 18.0], [22100.0, 9.0], [22500.0, 6.0], [22900.0, 11.0], [23300.0, 7.0], [24500.0, 15.0], [23700.0, 11.0], [24100.0, 11.0], [24900.0, 6.0], [25300.0, 11.0], [26500.0, 7.0], [26100.0, 10.0], [25700.0, 8.0], [27300.0, 10.0], [26900.0, 13.0], [28100.0, 13.0], [28500.0, 12.0], [27700.0, 6.0], [28900.0, 11.0], [29300.0, 10.0], [30100.0, 12.0], [30500.0, 7.0], [29700.0, 6.0], [31700.0, 12.0], [30900.0, 11.0], [31300.0, 15.0], [32100.0, 7.0], [32500.0, 16.0], [33800.0, 8.0], [33000.0, 12.0], [34600.0, 8.0], [36200.0, 10.0], [35400.0, 7.0], [38600.0, 13.0], [37800.0, 6.0], [37000.0, 8.0], [40200.0, 8.0], [39400.0, 15.0], [41000.0, 14.0], [41800.0, 13.0], [42600.0, 12.0], [44200.0, 11.0], [45000.0, 13.0], [43400.0, 12.0], [46600.0, 10.0], [45800.0, 7.0], [48200.0, 5.0], [47400.0, 10.0], [49000.0, 6.0], [50600.0, 4.0], [49800.0, 6.0], [53000.0, 7.0], [52200.0, 6.0], [51400.0, 2.0], [54600.0, 4.0], [53800.0, 1.0], [55400.0, 3.0], [57000.0, 5.0], [56200.0, 2.0], [57800.0, 2.0], [59400.0, 1.0], [60200.0, 2.0], [34100.0, 11.0], [33300.0, 13.0], [36500.0, 10.0], [35700.0, 11.0], [34900.0, 12.0], [38100.0, 14.0], [37300.0, 14.0], [38900.0, 7.0], [40500.0, 12.0], [39700.0, 13.0], [42100.0, 8.0], [41300.0, 13.0], [42900.0, 7.0], [43700.0, 7.0], [44500.0, 9.0], [45300.0, 9.0], [46900.0, 5.0], [46100.0, 7.0], [47700.0, 10.0], [48500.0, 5.0], [50100.0, 10.0], [50900.0, 7.0], [49300.0, 6.0], [51700.0, 5.0], [52500.0, 2.0], [54900.0, 3.0], [54100.0, 2.0], [53300.0, 4.0], [56500.0, 6.0], [57300.0, 1.0], [58900.0, 1.0], [58100.0, 3.0], [59700.0, 2.0], [8300.0, 18.0], [8500.0, 8.0], [8700.0, 10.0], [9100.0, 10.0], [8900.0, 9.0], [9500.0, 13.0], [9300.0, 10.0], [9700.0, 8.0], [9900.0, 10.0], [10100.0, 13.0], [10300.0, 8.0], [10500.0, 7.0], [10700.0, 12.0], [10900.0, 15.0], [11100.0, 12.0], [11700.0, 11.0], [11300.0, 10.0], [11500.0, 11.0], [12100.0, 16.0], [11900.0, 12.0], [12300.0, 17.0], [12500.0, 6.0], [12700.0, 10.0], [13100.0, 11.0], [13300.0, 8.0], [12900.0, 7.0], [13500.0, 10.0], [13700.0, 11.0], [14300.0, 10.0], [14100.0, 10.0], [13900.0, 7.0], [14700.0, 12.0], [14500.0, 16.0], [15300.0, 11.0], [14900.0, 11.0], [15100.0, 9.0], [15700.0, 16.0], [15500.0, 14.0], [16100.0, 16.0], [16300.0, 10.0], [15900.0, 8.0], [16600.0, 14.0], [17000.0, 15.0], [17400.0, 9.0], [18200.0, 10.0], [17800.0, 12.0], [19400.0, 15.0], [19000.0, 7.0], [18600.0, 11.0], [19800.0, 8.0], [20200.0, 11.0], [21400.0, 11.0], [20600.0, 8.0], [21000.0, 12.0], [22200.0, 12.0], [21800.0, 15.0], [22600.0, 11.0], [23000.0, 12.0], [23400.0, 8.0], [23800.0, 6.0], [24200.0, 17.0], [24600.0, 18.0], [25000.0, 9.0], [25400.0, 12.0], [26200.0, 12.0], [25800.0, 15.0], [26600.0, 17.0], [27000.0, 6.0], [27400.0, 11.0], [28200.0, 13.0], [28600.0, 6.0], [27800.0, 10.0], [29400.0, 15.0], [29000.0, 12.0], [30600.0, 11.0], [29800.0, 11.0], [30200.0, 7.0], [31400.0, 14.0], [31000.0, 11.0], [32200.0, 9.0], [31800.0, 10.0], [32600.0, 9.0], [33200.0, 13.0], [34800.0, 7.0], [34000.0, 13.0], [36400.0, 10.0], [35600.0, 11.0], [37200.0, 10.0], [38800.0, 11.0], [38000.0, 10.0], [40400.0, 10.0], [39600.0, 9.0], [42800.0, 7.0], [41200.0, 9.0], [42000.0, 12.0], [43600.0, 9.0], [44400.0, 12.0], [46800.0, 10.0], [46000.0, 8.0], [45200.0, 6.0], [47600.0, 10.0], [48400.0, 7.0], [49200.0, 5.0], [50800.0, 4.0], [50000.0, 6.0], [53200.0, 4.0], [51600.0, 4.0], [52400.0, 5.0], [54800.0, 1.0], [54000.0, 1.0], [57200.0, 3.0], [58000.0, 2.0], [58800.0, 1.0], [34300.0, 14.0], [33500.0, 14.0], [35100.0, 14.0], [36700.0, 6.0], [35900.0, 9.0], [38300.0, 10.0], [37500.0, 9.0], [39100.0, 17.0], [39900.0, 13.0], [40700.0, 12.0], [41500.0, 12.0], [42300.0, 17.0], [43100.0, 9.0], [43900.0, 12.0], [44700.0, 8.0], [45500.0, 7.0], [46300.0, 8.0], [47100.0, 9.0], [47900.0, 9.0], [48700.0, 5.0], [50300.0, 4.0], [49500.0, 6.0], [51100.0, 3.0], [52700.0, 4.0], [51900.0, 7.0], [55100.0, 2.0], [53500.0, 1.0], [54300.0, 4.0], [56700.0, 1.0], [55900.0, 3.0], [59100.0, 1.0], [17100.0, 10.0], [16700.0, 11.0], [18300.0, 11.0], [17900.0, 15.0], [17500.0, 14.0], [19100.0, 10.0], [18700.0, 10.0], [20300.0, 9.0], [19500.0, 8.0], [19900.0, 13.0], [20700.0, 14.0], [21100.0, 7.0], [21500.0, 15.0], [22300.0, 15.0], [21900.0, 9.0], [23500.0, 14.0], [23100.0, 11.0], [22700.0, 6.0], [23900.0, 10.0], [24300.0, 8.0], [25100.0, 13.0], [24700.0, 9.0], [25500.0, 1.0], [26300.0, 7.0], [25900.0, 11.0], [27500.0, 17.0], [26700.0, 10.0], [27100.0, 6.0], [28300.0, 10.0], [27900.0, 8.0], [29100.0, 7.0], [28700.0, 15.0], [29500.0, 12.0], [30300.0, 9.0], [29900.0, 14.0], [30700.0, 6.0], [31100.0, 10.0], [31500.0, 10.0], [32300.0, 14.0], [32700.0, 14.0], [31900.0, 5.0], [34200.0, 12.0], [33400.0, 11.0], [36600.0, 9.0], [35000.0, 11.0], [35800.0, 11.0], [37400.0, 11.0], [38200.0, 8.0], [39000.0, 8.0], [39800.0, 10.0], [40600.0, 8.0], [41400.0, 11.0], [42200.0, 7.0], [43000.0, 9.0], [44600.0, 5.0], [43800.0, 7.0], [45400.0, 7.0], [46200.0, 7.0], [47000.0, 4.0], [47800.0, 7.0], [48600.0, 4.0], [50200.0, 7.0], [49400.0, 4.0], [51000.0, 7.0], [52600.0, 6.0], [51800.0, 6.0], [53400.0, 5.0], [54200.0, 2.0], [56600.0, 1.0], [55800.0, 2.0], [57400.0, 2.0], [58200.0, 3.0], [59000.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5505.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 120.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5505.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.916666666666666, "minX": 1.6514571E12, "maxY": 74.0, "series": [{"data": [[1.65145872E12, 74.0], [1.65145842E12, 74.0], [1.65145812E12, 74.0], [1.65145782E12, 74.0], [1.65145752E12, 74.0], [1.65145914E12, 36.98648648648649], [1.65145722E12, 41.89221556886226], [1.65145884E12, 74.0], [1.65145854E12, 74.0], [1.65145728E12, 65.97058823529414], [1.6514589E12, 74.0], [1.6514586E12, 74.0], [1.6514583E12, 74.0], [1.651458E12, 74.0], [1.6514577E12, 74.0], [1.6514574E12, 74.0], [1.65145902E12, 74.0], [1.6514571E12, 6.916666666666666], [1.65145776E12, 74.0], [1.65145746E12, 74.0], [1.65145716E12, 18.633136094674555], [1.65145908E12, 73.91176470588236], [1.65145878E12, 74.0], [1.65145848E12, 74.0], [1.65145818E12, 74.0], [1.65145788E12, 74.0], [1.65145758E12, 74.0], [1.65145824E12, 74.0], [1.65145794E12, 74.0], [1.65145764E12, 74.0], [1.65145734E12, 74.0], [1.65145896E12, 74.0], [1.65145866E12, 74.0], [1.65145836E12, 74.0], [1.65145806E12, 74.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65145914E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4204.8245614035095, "minX": 1.0, "maxY": 58702.0, "series": [{"data": [[2.0, 58702.0], [3.0, 28904.5], [4.0, 28909.5], [5.0, 18676.333333333332], [6.0, 26984.0], [7.0, 17935.333333333332], [8.0, 25222.5], [9.0, 17335.333333333336], [10.0, 4204.8245614035095], [11.0, 24909.5], [12.0, 14665.666666666666], [13.0, 15232.0], [14.0, 16782.0], [15.0, 22085.5], [16.0, 12301.666666666666], [17.0, 23249.0], [18.0, 13162.0], [19.0, 22253.0], [20.0, 6614.101694915253], [21.0, 19627.0], [22.0, 11965.666666666668], [23.0, 22204.5], [24.0, 12479.0], [25.0, 19731.0], [26.0, 13278.333333333332], [27.0, 22686.5], [28.0, 14295.333333333334], [29.0, 20238.0], [30.0, 9836.63793103448], [31.0, 15972.5], [32.0, 18279.0], [33.0, 11045.0], [34.0, 9072.0], [35.0, 11787.333333333334], [36.0, 10325.5], [37.0, 13001.0], [38.0, 8383.5], [39.0, 13617.333333333332], [40.0, 13097.152542372884], [41.0, 12503.0], [42.0, 16753.666666666664], [43.0, 14242.0], [44.0, 17935.333333333336], [45.0, 13363.5], [46.0, 24496.5], [47.0, 12560.0], [48.0, 23530.0], [49.0, 13015.333333333334], [50.0, 15348.431034482759], [51.0, 20202.5], [52.0, 28954.5], [53.0, 21406.666666666668], [55.0, 21990.0], [54.0, 33694.0], [57.0, 22452.333333333332], [56.0, 32688.0], [58.0, 29639.5], [59.0, 20302.5], [60.0, 18935.266666666666], [61.0, 31610.0], [62.0, 27641.333333333336], [63.0, 14481.75], [64.0, 13768.333333333332], [65.0, 22198.666666666668], [66.0, 27620.666666666664], [67.0, 21751.666666666668], [68.0, 10012.0], [69.0, 32592.0], [70.0, 21006.68965517242], [71.0, 32986.833333333336], [72.0, 27060.5], [73.0, 10192.0], [74.0, 26363.96503358355], [1.0, 28471.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[70.5134895278664, 25172.26269080587]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31.166666666666668, "minX": 1.6514571E12, "maxY": 543.1833333333333, "series": [{"data": [[1.65145872E12, 537.0666666666667], [1.65145842E12, 530.5], [1.65145812E12, 506.7], [1.65145782E12, 538.7666666666667], [1.65145752E12, 525.9333333333333], [1.65145914E12, 231.36666666666667], [1.65145722E12, 520.4], [1.65145884E12, 538.4166666666666], [1.65145854E12, 532.4166666666666], [1.65145728E12, 531.15], [1.6514589E12, 539.6666666666666], [1.6514586E12, 519.7166666666667], [1.6514583E12, 535.8666666666667], [1.651458E12, 529.0333333333333], [1.6514577E12, 504.8], [1.6514574E12, 522.5833333333334], [1.65145902E12, 531.55], [1.6514571E12, 36.916666666666664], [1.65145776E12, 530.7833333333333], [1.65145746E12, 512.15], [1.65145716E12, 524.0833333333334], [1.65145908E12, 533.6166666666667], [1.65145878E12, 532.55], [1.65145848E12, 529.1833333333333], [1.65145818E12, 511.73333333333335], [1.65145788E12, 534.2833333333333], [1.65145758E12, 530.3166666666667], [1.65145824E12, 524.5666666666667], [1.65145794E12, 526.3166666666667], [1.65145764E12, 519.7], [1.65145734E12, 521.75], [1.65145896E12, 543.1833333333333], [1.65145866E12, 512.6833333333333], [1.65145836E12, 531.7], [1.65145806E12, 522.3166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65145872E12, 444.75], [1.65145842E12, 439.51666666666665], [1.65145812E12, 421.1666666666667], [1.65145782E12, 447.23333333333335], [1.65145752E12, 436.8], [1.65145914E12, 192.36666666666667], [1.65145722E12, 434.05], [1.65145884E12, 447.2], [1.65145854E12, 441.9], [1.65145728E12, 441.93333333333334], [1.6514589E12, 449.65], [1.6514586E12, 431.6], [1.6514583E12, 444.65], [1.651458E12, 437.06666666666666], [1.6514577E12, 421.0], [1.6514574E12, 434.18333333333334], [1.65145902E12, 434.15], [1.6514571E12, 31.166666666666668], [1.65145776E12, 439.55], [1.65145746E12, 426.3], [1.65145716E12, 439.15], [1.65145908E12, 442.0], [1.65145878E12, 442.03333333333336], [1.65145848E12, 439.4166666666667], [1.65145818E12, 423.9166666666667], [1.65145788E12, 444.51666666666665], [1.65145758E12, 439.51666666666665], [1.65145824E12, 436.7], [1.65145794E12, 436.8333333333333], [1.65145764E12, 431.6], [1.65145734E12, 434.1166666666667], [1.65145896E12, 439.51666666666665], [1.65145866E12, 423.75], [1.65145836E12, 441.96666666666664], [1.65145806E12, 436.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65145914E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1378.9166666666665, "minX": 1.6514571E12, "maxY": 30415.77027027027, "series": [{"data": [[1.65145872E12, 26055.415204678367], [1.65145842E12, 26349.79289940828], [1.65145812E12, 26024.641975308645], [1.65145782E12, 25738.023255813947], [1.65145752E12, 27174.23214285715], [1.65145914E12, 30415.77027027027], [1.65145722E12, 12444.808383233534], [1.65145884E12, 26457.447674418614], [1.65145854E12, 26439.105882352946], [1.65145728E12, 19492.43529411764], [1.6514589E12, 25602.849710982668], [1.6514586E12, 26934.915662650605], [1.6514583E12, 25019.929824561405], [1.651458E12, 25380.976190476198], [1.6514577E12, 28530.092592592602], [1.6514574E12, 26152.826347305392], [1.65145902E12, 26106.808383233525], [1.6514571E12, 1378.9166666666665], [1.65145776E12, 25971.68047337278], [1.65145746E12, 27650.170731707312], [1.65145716E12, 5638.414201183433], [1.65145908E12, 25832.900000000005], [1.65145878E12, 26770.129411764712], [1.65145848E12, 26290.727810650882], [1.65145818E12, 28712.748466257675], [1.65145788E12, 25934.058479532152], [1.65145758E12, 25701.461538461535], [1.65145824E12, 26439.52976190476], [1.65145794E12, 26753.035714285714], [1.65145764E12, 26087.63253012047], [1.65145734E12, 25988.311377245507], [1.65145896E12, 26509.213017751466], [1.65145866E12, 26456.030674846625], [1.65145836E12, 26349.882352941186], [1.65145806E12, 27424.476190476187]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65145914E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1378.6666666666665, "minX": 1.6514571E12, "maxY": 30415.75675675675, "series": [{"data": [[1.65145872E12, 26055.397660818722], [1.65145842E12, 26349.775147928984], [1.65145812E12, 26024.635802469136], [1.65145782E12, 25738.011627906977], [1.65145752E12, 27174.220238095237], [1.65145914E12, 30415.75675675675], [1.65145722E12, 12444.766467065867], [1.65145884E12, 26457.441860465122], [1.65145854E12, 26439.082352941172], [1.65145728E12, 19492.405882352945], [1.6514589E12, 25602.8323699422], [1.6514586E12, 26934.89156626506], [1.6514583E12, 25019.912280701745], [1.651458E12, 25380.958333333325], [1.6514577E12, 28530.049382716046], [1.6514574E12, 26152.790419161687], [1.65145902E12, 26106.790419161676], [1.6514571E12, 1378.6666666666665], [1.65145776E12, 25971.66863905326], [1.65145746E12, 27650.1219512195], [1.65145716E12, 5638.372781065091], [1.65145908E12, 25832.876470588228], [1.65145878E12, 26770.12352941176], [1.65145848E12, 26290.727810650882], [1.65145818E12, 28712.74233128832], [1.65145788E12, 25934.029239766074], [1.65145758E12, 25701.44970414201], [1.65145824E12, 26439.523809523802], [1.65145794E12, 26753.01190476191], [1.65145764E12, 26087.608433734953], [1.65145734E12, 25988.26946107785], [1.65145896E12, 26509.213017751466], [1.65145866E12, 26456.030674846625], [1.65145836E12, 26349.882352941186], [1.65145806E12, 27424.464285714294]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65145914E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.815950920245396, "minX": 1.6514571E12, "maxY": 55.416666666666664, "series": [{"data": [[1.65145872E12, 7.198830409356724], [1.65145842E12, 6.940828402366867], [1.65145812E12, 7.148148148148147], [1.65145782E12, 7.220930232558141], [1.65145752E12, 7.863095238095242], [1.65145914E12, 7.324324324324322], [1.65145722E12, 9.467065868263475], [1.65145884E12, 6.99418604651163], [1.65145854E12, 7.182352941176472], [1.65145728E12, 8.464705882352938], [1.6514589E12, 7.184971098265897], [1.6514586E12, 6.873493975903615], [1.6514583E12, 7.368421052631577], [1.651458E12, 7.797619047619047], [1.6514577E12, 7.3086419753086425], [1.6514574E12, 8.49101796407186], [1.65145902E12, 7.239520958083832], [1.6514571E12, 55.416666666666664], [1.65145776E12, 7.408284023668641], [1.65145746E12, 9.335365853658539], [1.65145716E12, 11.224852071005913], [1.65145908E12, 7.3235294117647065], [1.65145878E12, 6.92941176470588], [1.65145848E12, 7.029585798816568], [1.65145818E12, 7.294478527607363], [1.65145788E12, 7.058479532163744], [1.65145758E12, 7.757396449704147], [1.65145824E12, 6.9226190476190474], [1.65145794E12, 7.029761904761905], [1.65145764E12, 7.644578313253015], [1.65145734E12, 8.658682634730537], [1.65145896E12, 7.195266272189351], [1.65145866E12, 6.815950920245396], [1.65145836E12, 7.376470588235296], [1.65145806E12, 7.398809523809523]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65145914E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 678.0, "minX": 1.6514571E12, "maxY": 60056.0, "series": [{"data": [[1.65145872E12, 59358.0], [1.65145842E12, 55383.0], [1.65145812E12, 53406.0], [1.65145782E12, 51913.0], [1.65145752E12, 57349.0], [1.65145914E12, 59828.0], [1.65145722E12, 26609.0], [1.65145884E12, 58436.0], [1.65145854E12, 58999.0], [1.65145728E12, 44085.0], [1.6514589E12, 58588.0], [1.6514586E12, 59571.0], [1.6514583E12, 53381.0], [1.651458E12, 52605.0], [1.6514577E12, 55110.0], [1.6514574E12, 54601.0], [1.65145902E12, 59743.0], [1.6514571E12, 2806.0], [1.65145776E12, 53524.0], [1.65145746E12, 57790.0], [1.65145716E12, 16048.0], [1.65145908E12, 59015.0], [1.65145878E12, 58103.0], [1.65145848E12, 56952.0], [1.65145818E12, 55967.0], [1.65145788E12, 51256.0], [1.65145758E12, 57204.0], [1.65145824E12, 56117.0], [1.65145794E12, 53341.0], [1.65145764E12, 54446.0], [1.65145734E12, 52907.0], [1.65145896E12, 59720.0], [1.65145866E12, 60056.0], [1.65145836E12, 52983.0], [1.65145806E12, 52977.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65145872E12, 47658.8], [1.65145842E12, 45679.0], [1.65145812E12, 46860.50000000001], [1.65145782E12, 47078.8], [1.65145752E12, 48863.399999999994], [1.65145914E12, 53590.0], [1.65145722E12, 21550.4], [1.65145884E12, 48698.000000000015], [1.65145854E12, 48973.0], [1.65145728E12, 35189.2], [1.6514589E12, 47721.799999999996], [1.6514586E12, 47797.00000000001], [1.6514583E12, 46011.0], [1.651458E12, 46681.9], [1.6514577E12, 49308.4], [1.6514574E12, 45509.00000000001], [1.65145902E12, 47506.5], [1.6514571E12, 2614.000000000001], [1.65145776E12, 47000.0], [1.65145746E12, 47915.0], [1.65145716E12, 11424.0], [1.65145908E12, 47752.0], [1.65145878E12, 49931.200000000004], [1.65145848E12, 46883.0], [1.65145818E12, 49118.4], [1.65145788E12, 46447.20000000001], [1.65145758E12, 46514.0], [1.65145824E12, 48409.4], [1.65145794E12, 47214.4], [1.65145764E12, 46623.6], [1.65145734E12, 44318.00000000001], [1.65145896E12, 48318.80000000001], [1.65145866E12, 48812.80000000002], [1.65145836E12, 45929.700000000004], [1.65145806E12, 47815.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65145872E12, 58541.520000000004], [1.65145842E12, 53894.10000000003], [1.65145812E12, 53381.43], [1.65145782E12, 51845.11], [1.65145752E12, 57187.54], [1.65145914E12, 59828.0], [1.65145722E12, 26340.399999999998], [1.65145884E12, 58289.270000000004], [1.65145854E12, 58167.400000000016], [1.65145728E12, 43144.95999999999], [1.6514589E12, 58314.939999999995], [1.6514586E12, 59516.73], [1.6514583E12, 53267.96], [1.651458E12, 52041.96], [1.6514577E12, 54695.46000000001], [1.6514574E12, 54182.119999999995], [1.65145902E12, 58923.99999999999], [1.6514571E12, 2806.0], [1.65145776E12, 52774.30000000001], [1.65145746E12, 57123.74999999999], [1.65145716E12, 15455.80000000001], [1.65145908E12, 58865.200000000004], [1.65145878E12, 57863.02], [1.65145848E12, 56672.700000000004], [1.65145818E12, 55490.19999999999], [1.65145788E12, 50832.64], [1.65145758E12, 56716.100000000006], [1.65145824E12, 55106.15], [1.65145794E12, 52504.72], [1.65145764E12, 54272.47], [1.65145734E12, 51784.31999999999], [1.65145896E12, 59379.32], [1.65145866E12, 59508.53999999999], [1.65145836E12, 52946.79], [1.65145806E12, 52403.61]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65145872E12, 52907.4], [1.65145842E12, 49125.0], [1.65145812E12, 49623.5], [1.65145782E12, 49218.149999999994], [1.65145752E12, 52846.74999999999], [1.65145914E12, 57364.25], [1.65145722E12, 23628.6], [1.65145884E12, 54528.05], [1.65145854E12, 53292.0], [1.65145728E12, 37455.85], [1.6514589E12, 53535.39999999999], [1.6514586E12, 55036.9], [1.6514583E12, 49262.4], [1.651458E12, 49576.75], [1.6514577E12, 51938.7], [1.6514574E12, 49538.2], [1.65145902E12, 53247.0], [1.6514571E12, 2806.0], [1.65145776E12, 49795.5], [1.65145746E12, 52158.0], [1.65145716E12, 12975.0], [1.65145908E12, 53225.0], [1.65145878E12, 52939.45], [1.65145848E12, 51572.5], [1.65145818E12, 52012.599999999984], [1.65145788E12, 49214.4], [1.65145758E12, 52235.0], [1.65145824E12, 51339.149999999994], [1.65145794E12, 49442.399999999994], [1.65145764E12, 49923.450000000004], [1.65145734E12, 46885.4], [1.65145896E12, 54064.399999999994], [1.65145866E12, 54055.200000000004], [1.65145836E12, 48505.94999999999], [1.65145806E12, 50216.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65145872E12, 1148.0], [1.65145842E12, 1036.0], [1.65145812E12, 1350.0], [1.65145782E12, 998.0], [1.65145752E12, 912.0], [1.65145914E12, 1048.0], [1.65145722E12, 1015.0], [1.65145884E12, 1047.0], [1.65145854E12, 1194.0], [1.65145728E12, 924.0], [1.6514589E12, 939.0], [1.6514586E12, 1343.0], [1.6514583E12, 776.0], [1.651458E12, 919.0], [1.6514577E12, 1123.0], [1.6514574E12, 993.0], [1.65145902E12, 1051.0], [1.6514571E12, 678.0], [1.65145776E12, 1174.0], [1.65145746E12, 1391.0], [1.65145716E12, 826.0], [1.65145908E12, 930.0], [1.65145878E12, 1243.0], [1.65145848E12, 1278.0], [1.65145818E12, 1105.0], [1.65145788E12, 1218.0], [1.65145758E12, 1396.0], [1.65145824E12, 1142.0], [1.65145794E12, 1065.0], [1.65145764E12, 1116.0], [1.65145734E12, 1253.0], [1.65145896E12, 1365.0], [1.65145866E12, 1040.0], [1.65145836E12, 945.0], [1.65145806E12, 1020.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65145872E12, 26438.0], [1.65145842E12, 26044.0], [1.65145812E12, 26383.5], [1.65145782E12, 25433.0], [1.65145752E12, 26525.5], [1.65145914E12, 29178.5], [1.65145722E12, 12452.0], [1.65145884E12, 25996.0], [1.65145854E12, 26592.0], [1.65145728E12, 19279.5], [1.6514589E12, 24544.0], [1.6514586E12, 26234.0], [1.6514583E12, 23756.0], [1.651458E12, 25241.0], [1.6514577E12, 28722.0], [1.6514574E12, 26210.0], [1.65145902E12, 24346.5], [1.6514571E12, 1059.0], [1.65145776E12, 25889.0], [1.65145746E12, 28713.0], [1.65145716E12, 4809.0], [1.65145908E12, 25070.0], [1.65145878E12, 26556.0], [1.65145848E12, 25836.0], [1.65145818E12, 29572.0], [1.65145788E12, 25420.0], [1.65145758E12, 25412.0], [1.65145824E12, 26422.0], [1.65145794E12, 27306.5], [1.65145764E12, 25528.5], [1.65145734E12, 27449.0], [1.65145896E12, 24609.0], [1.65145866E12, 24638.0], [1.65145836E12, 26787.5], [1.65145806E12, 27706.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65145914E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 24178.0, "minX": 1.0, "maxY": 60223.0, "series": [{"data": [[2.0, 24228.0], [4.0, 26082.0], [1.0, 39107.0], [5.0, 58141.0], [3.0, 24178.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60223.0], [5.0, 60010.0], [3.0, 60010.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 24178.0, "minX": 1.0, "maxY": 60223.0, "series": [{"data": [[2.0, 24228.0], [4.0, 26082.0], [1.0, 39107.0], [5.0, 58141.0], [3.0, 24178.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60223.0], [5.0, 60010.0], [3.0, 60010.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.6514571E12, "maxY": 3.216666666666667, "series": [{"data": [[1.65145872E12, 2.85], [1.65145842E12, 2.816666666666667], [1.65145812E12, 2.7], [1.65145782E12, 2.8666666666666667], [1.65145752E12, 2.8], [1.65145914E12, 0.06666666666666667], [1.65145722E12, 3.1333333333333333], [1.65145884E12, 2.8666666666666667], [1.65145854E12, 2.8333333333333335], [1.65145728E12, 3.216666666666667], [1.6514589E12, 2.8833333333333333], [1.6514586E12, 2.7666666666666666], [1.6514583E12, 2.85], [1.651458E12, 2.8], [1.6514577E12, 2.7], [1.6514574E12, 2.783333333333333], [1.65145902E12, 2.783333333333333], [1.6514571E12, 0.36666666666666664], [1.65145776E12, 2.816666666666667], [1.65145746E12, 2.7333333333333334], [1.65145716E12, 3.15], [1.65145908E12, 2.7666666666666666], [1.65145878E12, 2.8333333333333335], [1.65145848E12, 2.816666666666667], [1.65145818E12, 2.716666666666667], [1.65145788E12, 2.85], [1.65145758E12, 2.816666666666667], [1.65145824E12, 2.8], [1.65145794E12, 2.8], [1.65145764E12, 2.7666666666666666], [1.65145734E12, 2.783333333333333], [1.65145896E12, 2.816666666666667], [1.65145866E12, 2.716666666666667], [1.65145836E12, 2.8333333333333335], [1.65145806E12, 2.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65145914E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6514571E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65145872E12, 2.85], [1.65145842E12, 2.816666666666667], [1.65145812E12, 2.7], [1.65145782E12, 2.8666666666666667], [1.65145752E12, 2.8], [1.65145914E12, 1.2333333333333334], [1.65145722E12, 2.783333333333333], [1.65145884E12, 2.8666666666666667], [1.65145854E12, 2.816666666666667], [1.65145728E12, 2.8333333333333335], [1.6514589E12, 2.8833333333333333], [1.6514586E12, 2.7666666666666666], [1.6514583E12, 2.85], [1.651458E12, 2.8], [1.6514577E12, 2.7], [1.6514574E12, 2.783333333333333], [1.65145902E12, 2.7333333333333334], [1.6514571E12, 0.2], [1.65145776E12, 2.816666666666667], [1.65145746E12, 2.7333333333333334], [1.65145716E12, 2.816666666666667], [1.65145908E12, 2.816666666666667], [1.65145878E12, 2.8333333333333335], [1.65145848E12, 2.816666666666667], [1.65145818E12, 2.716666666666667], [1.65145788E12, 2.85], [1.65145758E12, 2.816666666666667], [1.65145824E12, 2.8], [1.65145794E12, 2.8], [1.65145764E12, 2.7666666666666666], [1.65145734E12, 2.783333333333333], [1.65145896E12, 2.783333333333333], [1.65145866E12, 2.683333333333333], [1.65145836E12, 2.8333333333333335], [1.65145806E12, 2.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65145908E12, 0.016666666666666666], [1.65145896E12, 0.03333333333333333], [1.65145866E12, 0.03333333333333333], [1.65145902E12, 0.05], [1.65145854E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65145914E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6514571E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65145872E12, 2.85], [1.65145842E12, 2.816666666666667], [1.65145812E12, 2.7], [1.65145782E12, 2.8666666666666667], [1.65145752E12, 2.8], [1.65145914E12, 1.2333333333333334], [1.65145722E12, 2.783333333333333], [1.65145884E12, 2.8666666666666667], [1.65145854E12, 2.816666666666667], [1.65145728E12, 2.8333333333333335], [1.6514589E12, 2.8833333333333333], [1.6514586E12, 2.7666666666666666], [1.6514583E12, 2.85], [1.651458E12, 2.8], [1.6514577E12, 2.7], [1.6514574E12, 2.783333333333333], [1.65145902E12, 2.7333333333333334], [1.6514571E12, 0.2], [1.65145776E12, 2.816666666666667], [1.65145746E12, 2.7333333333333334], [1.65145716E12, 2.816666666666667], [1.65145908E12, 2.816666666666667], [1.65145878E12, 2.8333333333333335], [1.65145848E12, 2.816666666666667], [1.65145818E12, 2.716666666666667], [1.65145788E12, 2.85], [1.65145758E12, 2.816666666666667], [1.65145824E12, 2.8], [1.65145794E12, 2.8], [1.65145764E12, 2.7666666666666666], [1.65145734E12, 2.783333333333333], [1.65145896E12, 2.783333333333333], [1.65145866E12, 2.683333333333333], [1.65145836E12, 2.8333333333333335], [1.65145806E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65145908E12, 0.016666666666666666], [1.65145896E12, 0.03333333333333333], [1.65145866E12, 0.03333333333333333], [1.65145902E12, 0.05], [1.65145854E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65145914E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6514571E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65145872E12, 2.85], [1.65145842E12, 2.816666666666667], [1.65145812E12, 2.7], [1.65145782E12, 2.8666666666666667], [1.65145752E12, 2.8], [1.65145914E12, 1.2333333333333334], [1.65145722E12, 2.783333333333333], [1.65145884E12, 2.8666666666666667], [1.65145854E12, 2.816666666666667], [1.65145728E12, 2.8333333333333335], [1.6514589E12, 2.8833333333333333], [1.6514586E12, 2.7666666666666666], [1.6514583E12, 2.85], [1.651458E12, 2.8], [1.6514577E12, 2.7], [1.6514574E12, 2.783333333333333], [1.65145902E12, 2.7333333333333334], [1.6514571E12, 0.2], [1.65145776E12, 2.816666666666667], [1.65145746E12, 2.7333333333333334], [1.65145716E12, 2.816666666666667], [1.65145908E12, 2.816666666666667], [1.65145878E12, 2.8333333333333335], [1.65145848E12, 2.816666666666667], [1.65145818E12, 2.716666666666667], [1.65145788E12, 2.85], [1.65145758E12, 2.816666666666667], [1.65145824E12, 2.8], [1.65145794E12, 2.8], [1.65145764E12, 2.7666666666666666], [1.65145734E12, 2.783333333333333], [1.65145896E12, 2.783333333333333], [1.65145866E12, 2.683333333333333], [1.65145836E12, 2.8333333333333335], [1.65145806E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65145908E12, 0.016666666666666666], [1.65145896E12, 0.03333333333333333], [1.65145866E12, 0.03333333333333333], [1.65145902E12, 0.05], [1.65145854E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65145914E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


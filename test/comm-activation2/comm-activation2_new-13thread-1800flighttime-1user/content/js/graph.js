/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 580.0, "minX": 0.0, "maxY": 17440.0, "series": [{"data": [[0.0, 580.0], [0.1, 647.0], [0.2, 779.0], [0.3, 824.0], [0.4, 835.0], [0.5, 843.0], [0.6, 849.0], [0.7, 851.0], [0.8, 857.0], [0.9, 869.0], [1.0, 872.0], [1.1, 875.0], [1.2, 884.0], [1.3, 890.0], [1.4, 896.0], [1.5, 901.0], [1.6, 909.0], [1.7, 916.0], [1.8, 920.0], [1.9, 929.0], [2.0, 936.0], [2.1, 943.0], [2.2, 951.0], [2.3, 967.0], [2.4, 974.0], [2.5, 980.0], [2.6, 987.0], [2.7, 993.0], [2.8, 1005.0], [2.9, 1008.0], [3.0, 1016.0], [3.1, 1023.0], [3.2, 1028.0], [3.3, 1034.0], [3.4, 1037.0], [3.5, 1038.0], [3.6, 1042.0], [3.7, 1044.0], [3.8, 1046.0], [3.9, 1051.0], [4.0, 1053.0], [4.1, 1054.0], [4.2, 1057.0], [4.3, 1059.0], [4.4, 1062.0], [4.5, 1064.0], [4.6, 1068.0], [4.7, 1071.0], [4.8, 1074.0], [4.9, 1077.0], [5.0, 1080.0], [5.1, 1082.0], [5.2, 1084.0], [5.3, 1085.0], [5.4, 1087.0], [5.5, 1089.0], [5.6, 1091.0], [5.7, 1093.0], [5.8, 1096.0], [5.9, 1098.0], [6.0, 1101.0], [6.1, 1104.0], [6.2, 1109.0], [6.3, 1115.0], [6.4, 1117.0], [6.5, 1119.0], [6.6, 1124.0], [6.7, 1128.0], [6.8, 1132.0], [6.9, 1137.0], [7.0, 1142.0], [7.1, 1144.0], [7.2, 1151.0], [7.3, 1154.0], [7.4, 1157.0], [7.5, 1159.0], [7.6, 1160.0], [7.7, 1164.0], [7.8, 1166.0], [7.9, 1170.0], [8.0, 1174.0], [8.1, 1178.0], [8.2, 1180.0], [8.3, 1183.0], [8.4, 1185.0], [8.5, 1189.0], [8.6, 1193.0], [8.7, 1196.0], [8.8, 1200.0], [8.9, 1201.0], [9.0, 1204.0], [9.1, 1207.0], [9.2, 1209.0], [9.3, 1211.0], [9.4, 1212.0], [9.5, 1219.0], [9.6, 1220.0], [9.7, 1221.0], [9.8, 1223.0], [9.9, 1226.0], [10.0, 1229.0], [10.1, 1232.0], [10.2, 1233.0], [10.3, 1235.0], [10.4, 1237.0], [10.5, 1243.0], [10.6, 1247.0], [10.7, 1249.0], [10.8, 1253.0], [10.9, 1257.0], [11.0, 1259.0], [11.1, 1260.0], [11.2, 1265.0], [11.3, 1268.0], [11.4, 1273.0], [11.5, 1277.0], [11.6, 1286.0], [11.7, 1291.0], [11.8, 1295.0], [11.9, 1299.0], [12.0, 1302.0], [12.1, 1306.0], [12.2, 1309.0], [12.3, 1313.0], [12.4, 1321.0], [12.5, 1326.0], [12.6, 1330.0], [12.7, 1339.0], [12.8, 1341.0], [12.9, 1347.0], [13.0, 1351.0], [13.1, 1356.0], [13.2, 1360.0], [13.3, 1363.0], [13.4, 1370.0], [13.5, 1376.0], [13.6, 1378.0], [13.7, 1383.0], [13.8, 1386.0], [13.9, 1394.0], [14.0, 1398.0], [14.1, 1403.0], [14.2, 1408.0], [14.3, 1410.0], [14.4, 1412.0], [14.5, 1415.0], [14.6, 1416.0], [14.7, 1420.0], [14.8, 1422.0], [14.9, 1424.0], [15.0, 1426.0], [15.1, 1427.0], [15.2, 1429.0], [15.3, 1434.0], [15.4, 1436.0], [15.5, 1441.0], [15.6, 1442.0], [15.7, 1446.0], [15.8, 1449.0], [15.9, 1451.0], [16.0, 1453.0], [16.1, 1455.0], [16.2, 1457.0], [16.3, 1460.0], [16.4, 1463.0], [16.5, 1465.0], [16.6, 1469.0], [16.7, 1471.0], [16.8, 1473.0], [16.9, 1476.0], [17.0, 1477.0], [17.1, 1485.0], [17.2, 1487.0], [17.3, 1491.0], [17.4, 1499.0], [17.5, 1501.0], [17.6, 1506.0], [17.7, 1512.0], [17.8, 1517.0], [17.9, 1520.0], [18.0, 1527.0], [18.1, 1529.0], [18.2, 1534.0], [18.3, 1538.0], [18.4, 1543.0], [18.5, 1546.0], [18.6, 1551.0], [18.7, 1558.0], [18.8, 1559.0], [18.9, 1567.0], [19.0, 1570.0], [19.1, 1576.0], [19.2, 1582.0], [19.3, 1586.0], [19.4, 1593.0], [19.5, 1598.0], [19.6, 1601.0], [19.7, 1607.0], [19.8, 1611.0], [19.9, 1614.0], [20.0, 1619.0], [20.1, 1621.0], [20.2, 1625.0], [20.3, 1630.0], [20.4, 1636.0], [20.5, 1639.0], [20.6, 1644.0], [20.7, 1648.0], [20.8, 1649.0], [20.9, 1651.0], [21.0, 1653.0], [21.1, 1657.0], [21.2, 1660.0], [21.3, 1665.0], [21.4, 1672.0], [21.5, 1674.0], [21.6, 1680.0], [21.7, 1682.0], [21.8, 1686.0], [21.9, 1687.0], [22.0, 1694.0], [22.1, 1697.0], [22.2, 1701.0], [22.3, 1705.0], [22.4, 1711.0], [22.5, 1716.0], [22.6, 1720.0], [22.7, 1726.0], [22.8, 1731.0], [22.9, 1738.0], [23.0, 1746.0], [23.1, 1755.0], [23.2, 1764.0], [23.3, 1774.0], [23.4, 1787.0], [23.5, 1791.0], [23.6, 1795.0], [23.7, 1797.0], [23.8, 1813.0], [23.9, 1825.0], [24.0, 1831.0], [24.1, 1834.0], [24.2, 1838.0], [24.3, 1847.0], [24.4, 1853.0], [24.5, 1859.0], [24.6, 1868.0], [24.7, 1874.0], [24.8, 1878.0], [24.9, 1883.0], [25.0, 1893.0], [25.1, 1904.0], [25.2, 1911.0], [25.3, 1921.0], [25.4, 1930.0], [25.5, 1935.0], [25.6, 1940.0], [25.7, 1950.0], [25.8, 1955.0], [25.9, 1958.0], [26.0, 1967.0], [26.1, 1975.0], [26.2, 1981.0], [26.3, 1986.0], [26.4, 1998.0], [26.5, 2006.0], [26.6, 2018.0], [26.7, 2026.0], [26.8, 2033.0], [26.9, 2044.0], [27.0, 2057.0], [27.1, 2062.0], [27.2, 2070.0], [27.3, 2075.0], [27.4, 2087.0], [27.5, 2093.0], [27.6, 2104.0], [27.7, 2107.0], [27.8, 2112.0], [27.9, 2118.0], [28.0, 2134.0], [28.1, 2146.0], [28.2, 2159.0], [28.3, 2167.0], [28.4, 2182.0], [28.5, 2193.0], [28.6, 2200.0], [28.7, 2208.0], [28.8, 2211.0], [28.9, 2216.0], [29.0, 2221.0], [29.1, 2232.0], [29.2, 2237.0], [29.3, 2243.0], [29.4, 2249.0], [29.5, 2251.0], [29.6, 2259.0], [29.7, 2263.0], [29.8, 2269.0], [29.9, 2279.0], [30.0, 2282.0], [30.1, 2288.0], [30.2, 2293.0], [30.3, 2302.0], [30.4, 2306.0], [30.5, 2311.0], [30.6, 2321.0], [30.7, 2326.0], [30.8, 2334.0], [30.9, 2336.0], [31.0, 2343.0], [31.1, 2348.0], [31.2, 2364.0], [31.3, 2371.0], [31.4, 2374.0], [31.5, 2377.0], [31.6, 2380.0], [31.7, 2393.0], [31.8, 2399.0], [31.9, 2409.0], [32.0, 2410.0], [32.1, 2421.0], [32.2, 2425.0], [32.3, 2429.0], [32.4, 2434.0], [32.5, 2437.0], [32.6, 2446.0], [32.7, 2450.0], [32.8, 2458.0], [32.9, 2465.0], [33.0, 2472.0], [33.1, 2480.0], [33.2, 2486.0], [33.3, 2496.0], [33.4, 2504.0], [33.5, 2512.0], [33.6, 2517.0], [33.7, 2520.0], [33.8, 2527.0], [33.9, 2530.0], [34.0, 2534.0], [34.1, 2540.0], [34.2, 2551.0], [34.3, 2556.0], [34.4, 2561.0], [34.5, 2566.0], [34.6, 2576.0], [34.7, 2580.0], [34.8, 2586.0], [34.9, 2590.0], [35.0, 2597.0], [35.1, 2602.0], [35.2, 2606.0], [35.3, 2609.0], [35.4, 2612.0], [35.5, 2617.0], [35.6, 2620.0], [35.7, 2624.0], [35.8, 2631.0], [35.9, 2638.0], [36.0, 2639.0], [36.1, 2643.0], [36.2, 2651.0], [36.3, 2656.0], [36.4, 2663.0], [36.5, 2671.0], [36.6, 2673.0], [36.7, 2679.0], [36.8, 2683.0], [36.9, 2686.0], [37.0, 2692.0], [37.1, 2697.0], [37.2, 2701.0], [37.3, 2706.0], [37.4, 2712.0], [37.5, 2723.0], [37.6, 2725.0], [37.7, 2729.0], [37.8, 2739.0], [37.9, 2747.0], [38.0, 2755.0], [38.1, 2762.0], [38.2, 2771.0], [38.3, 2782.0], [38.4, 2791.0], [38.5, 2796.0], [38.6, 2805.0], [38.7, 2808.0], [38.8, 2812.0], [38.9, 2821.0], [39.0, 2830.0], [39.1, 2839.0], [39.2, 2843.0], [39.3, 2845.0], [39.4, 2850.0], [39.5, 2862.0], [39.6, 2865.0], [39.7, 2870.0], [39.8, 2872.0], [39.9, 2875.0], [40.0, 2880.0], [40.1, 2886.0], [40.2, 2891.0], [40.3, 2893.0], [40.4, 2902.0], [40.5, 2908.0], [40.6, 2915.0], [40.7, 2920.0], [40.8, 2927.0], [40.9, 2932.0], [41.0, 2937.0], [41.1, 2940.0], [41.2, 2946.0], [41.3, 2952.0], [41.4, 2956.0], [41.5, 2968.0], [41.6, 2972.0], [41.7, 2975.0], [41.8, 2982.0], [41.9, 2984.0], [42.0, 2997.0], [42.1, 3004.0], [42.2, 3008.0], [42.3, 3015.0], [42.4, 3019.0], [42.5, 3023.0], [42.6, 3031.0], [42.7, 3041.0], [42.8, 3047.0], [42.9, 3059.0], [43.0, 3067.0], [43.1, 3071.0], [43.2, 3074.0], [43.3, 3088.0], [43.4, 3092.0], [43.5, 3107.0], [43.6, 3112.0], [43.7, 3118.0], [43.8, 3127.0], [43.9, 3131.0], [44.0, 3144.0], [44.1, 3149.0], [44.2, 3158.0], [44.3, 3163.0], [44.4, 3171.0], [44.5, 3175.0], [44.6, 3186.0], [44.7, 3194.0], [44.8, 3199.0], [44.9, 3206.0], [45.0, 3217.0], [45.1, 3225.0], [45.2, 3233.0], [45.3, 3236.0], [45.4, 3239.0], [45.5, 3242.0], [45.6, 3246.0], [45.7, 3254.0], [45.8, 3263.0], [45.9, 3270.0], [46.0, 3282.0], [46.1, 3292.0], [46.2, 3300.0], [46.3, 3305.0], [46.4, 3308.0], [46.5, 3314.0], [46.6, 3325.0], [46.7, 3334.0], [46.8, 3342.0], [46.9, 3347.0], [47.0, 3355.0], [47.1, 3375.0], [47.2, 3385.0], [47.3, 3391.0], [47.4, 3397.0], [47.5, 3403.0], [47.6, 3414.0], [47.7, 3424.0], [47.8, 3444.0], [47.9, 3446.0], [48.0, 3452.0], [48.1, 3455.0], [48.2, 3462.0], [48.3, 3466.0], [48.4, 3472.0], [48.5, 3484.0], [48.6, 3492.0], [48.7, 3497.0], [48.8, 3499.0], [48.9, 3509.0], [49.0, 3513.0], [49.1, 3523.0], [49.2, 3528.0], [49.3, 3532.0], [49.4, 3536.0], [49.5, 3544.0], [49.6, 3553.0], [49.7, 3567.0], [49.8, 3573.0], [49.9, 3584.0], [50.0, 3594.0], [50.1, 3599.0], [50.2, 3606.0], [50.3, 3615.0], [50.4, 3626.0], [50.5, 3631.0], [50.6, 3642.0], [50.7, 3652.0], [50.8, 3657.0], [50.9, 3674.0], [51.0, 3694.0], [51.1, 3705.0], [51.2, 3721.0], [51.3, 3726.0], [51.4, 3733.0], [51.5, 3744.0], [51.6, 3749.0], [51.7, 3753.0], [51.8, 3757.0], [51.9, 3761.0], [52.0, 3772.0], [52.1, 3780.0], [52.2, 3787.0], [52.3, 3799.0], [52.4, 3809.0], [52.5, 3824.0], [52.6, 3832.0], [52.7, 3838.0], [52.8, 3843.0], [52.9, 3852.0], [53.0, 3864.0], [53.1, 3871.0], [53.2, 3881.0], [53.3, 3893.0], [53.4, 3899.0], [53.5, 3913.0], [53.6, 3921.0], [53.7, 3925.0], [53.8, 3928.0], [53.9, 3945.0], [54.0, 3964.0], [54.1, 3975.0], [54.2, 3986.0], [54.3, 3995.0], [54.4, 4000.0], [54.5, 4005.0], [54.6, 4008.0], [54.7, 4015.0], [54.8, 4022.0], [54.9, 4027.0], [55.0, 4031.0], [55.1, 4035.0], [55.2, 4047.0], [55.3, 4055.0], [55.4, 4062.0], [55.5, 4072.0], [55.6, 4076.0], [55.7, 4087.0], [55.8, 4091.0], [55.9, 4101.0], [56.0, 4106.0], [56.1, 4110.0], [56.2, 4116.0], [56.3, 4122.0], [56.4, 4129.0], [56.5, 4137.0], [56.6, 4149.0], [56.7, 4160.0], [56.8, 4165.0], [56.9, 4168.0], [57.0, 4175.0], [57.1, 4179.0], [57.2, 4186.0], [57.3, 4197.0], [57.4, 4208.0], [57.5, 4218.0], [57.6, 4231.0], [57.7, 4239.0], [57.8, 4245.0], [57.9, 4252.0], [58.0, 4260.0], [58.1, 4281.0], [58.2, 4289.0], [58.3, 4299.0], [58.4, 4304.0], [58.5, 4313.0], [58.6, 4322.0], [58.7, 4330.0], [58.8, 4337.0], [58.9, 4345.0], [59.0, 4352.0], [59.1, 4356.0], [59.2, 4366.0], [59.3, 4371.0], [59.4, 4381.0], [59.5, 4395.0], [59.6, 4404.0], [59.7, 4409.0], [59.8, 4416.0], [59.9, 4423.0], [60.0, 4436.0], [60.1, 4443.0], [60.2, 4453.0], [60.3, 4457.0], [60.4, 4463.0], [60.5, 4467.0], [60.6, 4471.0], [60.7, 4484.0], [60.8, 4488.0], [60.9, 4494.0], [61.0, 4506.0], [61.1, 4516.0], [61.2, 4520.0], [61.3, 4528.0], [61.4, 4533.0], [61.5, 4540.0], [61.6, 4547.0], [61.7, 4558.0], [61.8, 4566.0], [61.9, 4576.0], [62.0, 4598.0], [62.1, 4607.0], [62.2, 4616.0], [62.3, 4624.0], [62.4, 4642.0], [62.5, 4645.0], [62.6, 4657.0], [62.7, 4665.0], [62.8, 4686.0], [62.9, 4690.0], [63.0, 4700.0], [63.1, 4713.0], [63.2, 4734.0], [63.3, 4741.0], [63.4, 4752.0], [63.5, 4763.0], [63.6, 4779.0], [63.7, 4786.0], [63.8, 4792.0], [63.9, 4806.0], [64.0, 4822.0], [64.1, 4836.0], [64.2, 4844.0], [64.3, 4854.0], [64.4, 4868.0], [64.5, 4886.0], [64.6, 4896.0], [64.7, 4899.0], [64.8, 4911.0], [64.9, 4930.0], [65.0, 4942.0], [65.1, 4960.0], [65.2, 4977.0], [65.3, 4987.0], [65.4, 4994.0], [65.5, 5011.0], [65.6, 5016.0], [65.7, 5027.0], [65.8, 5036.0], [65.9, 5049.0], [66.0, 5061.0], [66.1, 5068.0], [66.2, 5080.0], [66.3, 5087.0], [66.4, 5098.0], [66.5, 5106.0], [66.6, 5123.0], [66.7, 5139.0], [66.8, 5149.0], [66.9, 5159.0], [67.0, 5168.0], [67.1, 5176.0], [67.2, 5194.0], [67.3, 5207.0], [67.4, 5219.0], [67.5, 5229.0], [67.6, 5249.0], [67.7, 5257.0], [67.8, 5279.0], [67.9, 5286.0], [68.0, 5297.0], [68.1, 5307.0], [68.2, 5325.0], [68.3, 5333.0], [68.4, 5341.0], [68.5, 5359.0], [68.6, 5375.0], [68.7, 5385.0], [68.8, 5400.0], [68.9, 5416.0], [69.0, 5425.0], [69.1, 5447.0], [69.2, 5471.0], [69.3, 5493.0], [69.4, 5508.0], [69.5, 5527.0], [69.6, 5546.0], [69.7, 5563.0], [69.8, 5578.0], [69.9, 5588.0], [70.0, 5614.0], [70.1, 5624.0], [70.2, 5644.0], [70.3, 5652.0], [70.4, 5660.0], [70.5, 5679.0], [70.6, 5692.0], [70.7, 5699.0], [70.8, 5710.0], [70.9, 5717.0], [71.0, 5727.0], [71.1, 5737.0], [71.2, 5748.0], [71.3, 5757.0], [71.4, 5772.0], [71.5, 5798.0], [71.6, 5808.0], [71.7, 5824.0], [71.8, 5836.0], [71.9, 5851.0], [72.0, 5876.0], [72.1, 5885.0], [72.2, 5898.0], [72.3, 5916.0], [72.4, 5926.0], [72.5, 5941.0], [72.6, 5954.0], [72.7, 5977.0], [72.8, 5986.0], [72.9, 5997.0], [73.0, 6026.0], [73.1, 6039.0], [73.2, 6051.0], [73.3, 6079.0], [73.4, 6089.0], [73.5, 6096.0], [73.6, 6111.0], [73.7, 6129.0], [73.8, 6145.0], [73.9, 6152.0], [74.0, 6172.0], [74.1, 6192.0], [74.2, 6217.0], [74.3, 6241.0], [74.4, 6252.0], [74.5, 6274.0], [74.6, 6297.0], [74.7, 6328.0], [74.8, 6343.0], [74.9, 6359.0], [75.0, 6375.0], [75.1, 6392.0], [75.2, 6419.0], [75.3, 6436.0], [75.4, 6477.0], [75.5, 6489.0], [75.6, 6516.0], [75.7, 6530.0], [75.8, 6552.0], [75.9, 6574.0], [76.0, 6594.0], [76.1, 6606.0], [76.2, 6623.0], [76.3, 6649.0], [76.4, 6705.0], [76.5, 6714.0], [76.6, 6741.0], [76.7, 6758.0], [76.8, 6789.0], [76.9, 6822.0], [77.0, 6858.0], [77.1, 6875.0], [77.2, 6903.0], [77.3, 6918.0], [77.4, 6943.0], [77.5, 6957.0], [77.6, 6979.0], [77.7, 6993.0], [77.8, 7014.0], [77.9, 7044.0], [78.0, 7059.0], [78.1, 7108.0], [78.2, 7130.0], [78.3, 7186.0], [78.4, 7218.0], [78.5, 7250.0], [78.6, 7265.0], [78.7, 7282.0], [78.8, 7296.0], [78.9, 7323.0], [79.0, 7332.0], [79.1, 7347.0], [79.2, 7368.0], [79.3, 7389.0], [79.4, 7405.0], [79.5, 7435.0], [79.6, 7466.0], [79.7, 7475.0], [79.8, 7499.0], [79.9, 7546.0], [80.0, 7551.0], [80.1, 7576.0], [80.2, 7589.0], [80.3, 7625.0], [80.4, 7643.0], [80.5, 7672.0], [80.6, 7693.0], [80.7, 7719.0], [80.8, 7737.0], [80.9, 7768.0], [81.0, 7800.0], [81.1, 7826.0], [81.2, 7877.0], [81.3, 7899.0], [81.4, 7950.0], [81.5, 7967.0], [81.6, 7982.0], [81.7, 8023.0], [81.8, 8061.0], [81.9, 8093.0], [82.0, 8102.0], [82.1, 8134.0], [82.2, 8182.0], [82.3, 8206.0], [82.4, 8228.0], [82.5, 8271.0], [82.6, 8330.0], [82.7, 8350.0], [82.8, 8367.0], [82.9, 8393.0], [83.0, 8431.0], [83.1, 8446.0], [83.2, 8476.0], [83.3, 8516.0], [83.4, 8559.0], [83.5, 8616.0], [83.6, 8636.0], [83.7, 8657.0], [83.8, 8695.0], [83.9, 8708.0], [84.0, 8738.0], [84.1, 8777.0], [84.2, 8804.0], [84.3, 8825.0], [84.4, 8866.0], [84.5, 8912.0], [84.6, 8936.0], [84.7, 8949.0], [84.8, 8982.0], [84.9, 8991.0], [85.0, 9005.0], [85.1, 9034.0], [85.2, 9050.0], [85.3, 9077.0], [85.4, 9092.0], [85.5, 9121.0], [85.6, 9162.0], [85.7, 9203.0], [85.8, 9228.0], [85.9, 9261.0], [86.0, 9272.0], [86.1, 9305.0], [86.2, 9318.0], [86.3, 9340.0], [86.4, 9379.0], [86.5, 9393.0], [86.6, 9403.0], [86.7, 9419.0], [86.8, 9486.0], [86.9, 9502.0], [87.0, 9530.0], [87.1, 9545.0], [87.2, 9575.0], [87.3, 9612.0], [87.4, 9644.0], [87.5, 9671.0], [87.6, 9693.0], [87.7, 9711.0], [87.8, 9724.0], [87.9, 9763.0], [88.0, 9789.0], [88.1, 9802.0], [88.2, 9824.0], [88.3, 9884.0], [88.4, 9907.0], [88.5, 9944.0], [88.6, 9987.0], [88.7, 10024.0], [88.8, 10046.0], [88.9, 10069.0], [89.0, 10084.0], [89.1, 10104.0], [89.2, 10138.0], [89.3, 10187.0], [89.4, 10227.0], [89.5, 10250.0], [89.6, 10287.0], [89.7, 10315.0], [89.8, 10350.0], [89.9, 10380.0], [90.0, 10398.0], [90.1, 10446.0], [90.2, 10463.0], [90.3, 10491.0], [90.4, 10501.0], [90.5, 10523.0], [90.6, 10573.0], [90.7, 10605.0], [90.8, 10629.0], [90.9, 10665.0], [91.0, 10692.0], [91.1, 10718.0], [91.2, 10737.0], [91.3, 10748.0], [91.4, 10773.0], [91.5, 10808.0], [91.6, 10822.0], [91.7, 10840.0], [91.8, 10868.0], [91.9, 10878.0], [92.0, 10911.0], [92.1, 10919.0], [92.2, 10935.0], [92.3, 10971.0], [92.4, 11018.0], [92.5, 11031.0], [92.6, 11045.0], [92.7, 11081.0], [92.8, 11097.0], [92.9, 11149.0], [93.0, 11175.0], [93.1, 11220.0], [93.2, 11228.0], [93.3, 11266.0], [93.4, 11280.0], [93.5, 11305.0], [93.6, 11333.0], [93.7, 11396.0], [93.8, 11428.0], [93.9, 11447.0], [94.0, 11497.0], [94.1, 11549.0], [94.2, 11593.0], [94.3, 11615.0], [94.4, 11643.0], [94.5, 11674.0], [94.6, 11687.0], [94.7, 11715.0], [94.8, 11735.0], [94.9, 11775.0], [95.0, 11802.0], [95.1, 11859.0], [95.2, 11903.0], [95.3, 11925.0], [95.4, 11999.0], [95.5, 12048.0], [95.6, 12108.0], [95.7, 12137.0], [95.8, 12176.0], [95.9, 12200.0], [96.0, 12229.0], [96.1, 12256.0], [96.2, 12308.0], [96.3, 12342.0], [96.4, 12391.0], [96.5, 12473.0], [96.6, 12522.0], [96.7, 12569.0], [96.8, 12626.0], [96.9, 12658.0], [97.0, 12703.0], [97.1, 12749.0], [97.2, 12813.0], [97.3, 12843.0], [97.4, 12885.0], [97.5, 12908.0], [97.6, 12968.0], [97.7, 12980.0], [97.8, 13038.0], [97.9, 13136.0], [98.0, 13208.0], [98.1, 13253.0], [98.2, 13305.0], [98.3, 13354.0], [98.4, 13447.0], [98.5, 13528.0], [98.6, 13639.0], [98.7, 13750.0], [98.8, 13881.0], [98.9, 13961.0], [99.0, 14076.0], [99.1, 14118.0], [99.2, 14294.0], [99.3, 14422.0], [99.4, 14677.0], [99.5, 14827.0], [99.6, 14917.0], [99.7, 15043.0], [99.8, 15749.0], [99.9, 16466.0], [100.0, 17440.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 186.0, "series": [{"data": [[500.0, 1.0], [600.0, 8.0], [700.0, 3.0], [800.0, 68.0], [900.0, 70.0], [1000.0, 175.0], [1100.0, 154.0], [1200.0, 172.0], [1300.0, 112.0], [1400.0, 186.0], [1500.0, 115.0], [1600.0, 141.0], [1700.0, 86.0], [1800.0, 73.0], [1900.0, 74.0], [2000.0, 62.0], [2100.0, 57.0], [2300.0, 83.0], [2200.0, 92.0], [2400.0, 84.0], [2500.0, 94.0], [2600.0, 114.0], [2700.0, 75.0], [2800.0, 100.0], [2900.0, 91.0], [3000.0, 76.0], [3100.0, 74.0], [3200.0, 76.0], [3300.0, 68.0], [3400.0, 74.0], [3500.0, 71.0], [3700.0, 70.0], [3600.0, 50.0], [3800.0, 60.0], [3900.0, 53.0], [4000.0, 82.0], [4100.0, 78.0], [4200.0, 55.0], [4300.0, 66.0], [4400.0, 77.0], [4500.0, 57.0], [4600.0, 53.0], [4700.0, 48.0], [4800.0, 46.0], [4900.0, 40.0], [5000.0, 54.0], [5100.0, 44.0], [5200.0, 43.0], [5300.0, 41.0], [5600.0, 42.0], [5400.0, 32.0], [5500.0, 31.0], [5700.0, 44.0], [5800.0, 38.0], [6100.0, 33.0], [5900.0, 39.0], [6000.0, 32.0], [6300.0, 27.0], [6200.0, 27.0], [6500.0, 29.0], [6600.0, 17.0], [6400.0, 22.0], [6900.0, 30.0], [6800.0, 19.0], [6700.0, 25.0], [7000.0, 19.0], [7100.0, 15.0], [7300.0, 30.0], [7200.0, 27.0], [7400.0, 22.0], [7600.0, 21.0], [7500.0, 23.0], [7800.0, 17.0], [7700.0, 21.0], [7900.0, 17.0], [8100.0, 17.0], [8000.0, 19.0], [8300.0, 22.0], [8400.0, 14.0], [8500.0, 14.0], [8700.0, 16.0], [8200.0, 15.0], [8600.0, 21.0], [8900.0, 25.0], [8800.0, 18.0], [9200.0, 21.0], [9100.0, 15.0], [9000.0, 26.0], [9500.0, 19.0], [9600.0, 21.0], [9400.0, 16.0], [9700.0, 25.0], [9300.0, 27.0], [10000.0, 24.0], [10100.0, 13.0], [9900.0, 15.0], [9800.0, 17.0], [10200.0, 18.0], [10600.0, 18.0], [10500.0, 16.0], [10400.0, 21.0], [10700.0, 23.0], [10300.0, 19.0], [10800.0, 29.0], [11000.0, 28.0], [11100.0, 12.0], [11200.0, 24.0], [10900.0, 18.0], [11700.0, 20.0], [11400.0, 17.0], [11600.0, 19.0], [11500.0, 14.0], [11300.0, 12.0], [11800.0, 11.0], [11900.0, 12.0], [12100.0, 16.0], [12200.0, 17.0], [12000.0, 10.0], [12400.0, 7.0], [12700.0, 12.0], [12300.0, 11.0], [12600.0, 12.0], [12500.0, 12.0], [12900.0, 17.0], [13000.0, 4.0], [13200.0, 11.0], [12800.0, 14.0], [13100.0, 8.0], [13300.0, 9.0], [13600.0, 6.0], [13400.0, 5.0], [13500.0, 6.0], [13800.0, 8.0], [13700.0, 4.0], [14000.0, 5.0], [13900.0, 3.0], [14300.0, 3.0], [14100.0, 6.0], [14200.0, 4.0], [14700.0, 4.0], [14800.0, 6.0], [14600.0, 2.0], [14400.0, 4.0], [14500.0, 2.0], [15200.0, 2.0], [14900.0, 4.0], [15000.0, 4.0], [15500.0, 1.0], [15700.0, 1.0], [16200.0, 1.0], [16100.0, 2.0], [16300.0, 1.0], [16900.0, 2.0], [16500.0, 1.0], [16400.0, 1.0], [17400.0, 1.0], [17000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 953.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4493.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 953.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4493.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6710526315789471, "minX": 1.65163098E12, "maxY": 13.0, "series": [{"data": [[1.65163158E12, 13.0], [1.65163188E12, 13.0], [1.65163308E12, 11.500000000000002], [1.65163218E12, 13.0], [1.65163248E12, 13.0], [1.6516323E12, 13.0], [1.6516326E12, 13.0], [1.65163098E12, 1.6710526315789471], [1.6516329E12, 13.0], [1.65163128E12, 12.848101265822777], [1.65163206E12, 13.0], [1.65163236E12, 13.0], [1.65163266E12, 13.0], [1.65163104E12, 3.794701986754967], [1.65163296E12, 13.0], [1.65163278E12, 13.0], [1.65163116E12, 8.548387096774196], [1.65163146E12, 13.0], [1.65163176E12, 13.0], [1.65163254E12, 13.0], [1.65163284E12, 13.0], [1.65163122E12, 10.949367088607598], [1.65163152E12, 13.0], [1.65163134E12, 13.0], [1.65163164E12, 13.0], [1.65163194E12, 13.0], [1.65163224E12, 13.0], [1.6516311E12, 6.108280254777067], [1.65163302E12, 13.0], [1.6516314E12, 13.0], [1.6516317E12, 13.0], [1.651632E12, 13.0], [1.65163182E12, 13.0], [1.65163212E12, 13.0], [1.65163242E12, 13.0], [1.65163272E12, 13.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65163308E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1181.2291666666665, "minX": 1.0, "maxY": 4978.645024400588, "series": [{"data": [[2.0, 1181.2291666666665], [8.0, 3102.2727272727266], [9.0, 3657.0952380952385], [10.0, 3724.264705882353], [11.0, 4071.865671641791], [3.0, 1296.9193548387098], [12.0, 4477.402985074627], [13.0, 4978.645024400588], [1.0, 1218.392857142857], [4.0, 1590.9076923076925], [5.0, 1898.8787878787873], [6.0, 2263.2238805970146], [7.0, 2747.0454545454545]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[12.183070143224393, 4674.7063900110215]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 13.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 135.23333333333332, "minX": 1.65163098E12, "maxY": 502.23333333333335, "series": [{"data": [[1.65163158E12, 486.3], [1.65163188E12, 502.23333333333335], [1.65163308E12, 162.55], [1.65163218E12, 496.01666666666665], [1.65163248E12, 477.1333333333333], [1.6516323E12, 468.65], [1.6516326E12, 493.21666666666664], [1.65163098E12, 235.93333333333334], [1.6516329E12, 495.3], [1.65163128E12, 493.4166666666667], [1.65163206E12, 477.5], [1.65163236E12, 490.28333333333336], [1.65163266E12, 489.1], [1.65163104E12, 469.53333333333336], [1.65163296E12, 487.35], [1.65163278E12, 480.25], [1.65163116E12, 483.6666666666667], [1.65163146E12, 499.76666666666665], [1.65163176E12, 483.06666666666666], [1.65163254E12, 496.1166666666667], [1.65163284E12, 496.45], [1.65163122E12, 491.23333333333335], [1.65163152E12, 492.31666666666666], [1.65163134E12, 500.96666666666664], [1.65163164E12, 492.95], [1.65163194E12, 492.3666666666667], [1.65163224E12, 488.6666666666667], [1.6516311E12, 488.51666666666665], [1.65163302E12, 498.1666666666667], [1.6516314E12, 477.3], [1.6516317E12, 495.5833333333333], [1.651632E12, 499.3666666666667], [1.65163182E12, 455.3333333333333], [1.65163212E12, 489.3666666666667], [1.65163242E12, 491.6666666666667], [1.65163272E12, 462.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65163158E12, 405.6], [1.65163188E12, 418.6166666666667], [1.65163308E12, 135.23333333333332], [1.65163218E12, 413.4166666666667], [1.65163248E12, 397.78333333333336], [1.6516323E12, 390.06666666666666], [1.6516326E12, 410.8333333333333], [1.65163098E12, 197.6], [1.6516329E12, 413.35], [1.65163128E12, 410.8666666666667], [1.65163206E12, 397.81666666666666], [1.65163236E12, 408.25], [1.65163266E12, 408.15], [1.65163104E12, 392.55], [1.65163296E12, 405.6666666666667], [1.65163278E12, 400.4], [1.65163116E12, 403.05], [1.65163146E12, 416.06666666666666], [1.65163176E12, 402.98333333333335], [1.65163254E12, 413.4166666666667], [1.65163284E12, 413.45], [1.65163122E12, 410.7], [1.65163152E12, 410.76666666666665], [1.65163134E12, 418.51666666666665], [1.65163164E12, 410.8333333333333], [1.65163194E12, 410.76666666666665], [1.65163224E12, 408.1166666666667], [1.6516311E12, 408.15], [1.65163302E12, 415.93333333333334], [1.6516314E12, 397.81666666666666], [1.6516317E12, 413.3833333333333], [1.651632E12, 416.03333333333336], [1.65163182E12, 379.6], [1.65163212E12, 408.18333333333334], [1.65163242E12, 410.7], [1.65163272E12, 384.8333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65163308E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 986.9210526315788, "minX": 1.65163098E12, "maxY": 5300.205479452057, "series": [{"data": [[1.65163158E12, 5025.435897435899], [1.65163188E12, 4838.763975155278], [1.65163308E12, 5083.999999999998], [1.65163218E12, 4837.691823899368], [1.65163248E12, 5106.464052287584], [1.6516323E12, 5090.813333333331], [1.6516326E12, 4998.873417721521], [1.65163098E12, 986.9210526315788], [1.6516329E12, 4904.30817610063], [1.65163128E12, 4845.17088607595], [1.65163206E12, 5165.163398692811], [1.65163236E12, 4980.0573248407645], [1.65163266E12, 4933.56687898089], [1.65163104E12, 1481.496688741722], [1.65163296E12, 5049.897435897436], [1.65163278E12, 5059.318181818182], [1.65163116E12, 3241.619354838709], [1.65163146E12, 4939.156249999999], [1.65163176E12, 4985.070967741936], [1.65163254E12, 4953.962264150943], [1.65163284E12, 4889.547169811318], [1.65163122E12, 4044.696202531647], [1.65163152E12, 4962.272151898729], [1.65163134E12, 4900.229813664595], [1.65163164E12, 4891.993670886073], [1.65163194E12, 4993.132911392405], [1.65163224E12, 5005.490445859875], [1.6516311E12, 2285.4267515923566], [1.65163302E12, 4919.412500000002], [1.6516314E12, 4952.568627450984], [1.6516317E12, 4956.345911949686], [1.651632E12, 4783.09375], [1.65163182E12, 5300.205479452057], [1.65163212E12, 4990.178343949046], [1.65163242E12, 4960.474683544307], [1.65163272E12, 5278.094594594592]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65163308E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 986.842105263158, "minX": 1.65163098E12, "maxY": 5300.178082191782, "series": [{"data": [[1.65163158E12, 5025.41666666667], [1.65163188E12, 4838.73291925466], [1.65163308E12, 5083.999999999998], [1.65163218E12, 4837.672955974845], [1.65163248E12, 5106.450980392159], [1.6516323E12, 5090.806666666666], [1.6516326E12, 4998.848101265824], [1.65163098E12, 986.842105263158], [1.6516329E12, 4904.301886792453], [1.65163128E12, 4845.120253164556], [1.65163206E12, 5165.150326797383], [1.65163236E12, 4980.050955414015], [1.65163266E12, 4933.547770700638], [1.65163104E12, 1481.3841059602655], [1.65163296E12, 5049.878205128202], [1.65163278E12, 5059.305194805194], [1.65163116E12, 3241.5806451612902], [1.65163146E12, 4939.15], [1.65163176E12, 4985.051612903226], [1.65163254E12, 4953.930817610063], [1.65163284E12, 4889.547169811318], [1.65163122E12, 4044.6898734177234], [1.65163152E12, 4962.2468354430375], [1.65163134E12, 4900.211180124221], [1.65163164E12, 4891.981012658229], [1.65163194E12, 4993.126582278478], [1.65163224E12, 5005.477707006374], [1.6516311E12, 2285.382165605095], [1.65163302E12, 4919.4000000000015], [1.6516314E12, 4952.522875816992], [1.6516317E12, 4956.327044025158], [1.651632E12, 4783.087500000002], [1.65163182E12, 5300.178082191782], [1.65163212E12, 4990.171974522294], [1.65163242E12, 4960.462025316458], [1.65163272E12, 5278.094594594592]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65163308E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.716981132075472, "minX": 1.65163098E12, "maxY": 18.52631578947368, "series": [{"data": [[1.65163158E12, 7.839743589743593], [1.65163188E12, 7.285714285714287], [1.65163308E12, 7.480769230769231], [1.65163218E12, 7.327044025157235], [1.65163248E12, 6.9346405228758154], [1.6516323E12, 7.293333333333334], [1.6516326E12, 7.19620253164557], [1.65163098E12, 18.52631578947368], [1.6516329E12, 7.044025157232706], [1.65163128E12, 8.189873417721524], [1.65163206E12, 7.267973856209154], [1.65163236E12, 7.585987261146497], [1.65163266E12, 6.789808917197454], [1.65163104E12, 10.88079470198675], [1.65163296E12, 7.192307692307692], [1.65163278E12, 7.285714285714283], [1.65163116E12, 9.296774193548389], [1.65163146E12, 7.793750000000004], [1.65163176E12, 7.419354838709679], [1.65163254E12, 7.264150943396224], [1.65163284E12, 6.716981132075472], [1.65163122E12, 8.158227848101264], [1.65163152E12, 7.803797468354428], [1.65163134E12, 8.403726708074535], [1.65163164E12, 7.74683544303797], [1.65163194E12, 7.348101265822785], [1.65163224E12, 7.171974522292993], [1.6516311E12, 9.401273885350323], [1.65163302E12, 7.218750000000002], [1.6516314E12, 8.254901960784318], [1.6516317E12, 7.60377358490566], [1.651632E12, 7.462499999999999], [1.65163182E12, 7.1506849315068495], [1.65163212E12, 6.97452229299363], [1.65163242E12, 7.012658227848102], [1.65163272E12, 7.006756756756756]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65163308E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.65163098E12, "maxY": 17440.0, "series": [{"data": [[1.65163158E12, 11715.0], [1.65163188E12, 13657.0], [1.65163308E12, 11640.0], [1.65163218E12, 14029.0], [1.65163248E12, 16314.0], [1.6516323E12, 16900.0], [1.6516326E12, 13522.0], [1.65163098E12, 1642.0], [1.6516329E12, 13641.0], [1.65163128E12, 11859.0], [1.65163206E12, 15230.0], [1.65163236E12, 16925.0], [1.65163266E12, 14118.0], [1.65163104E12, 3444.0], [1.65163296E12, 13811.0], [1.65163278E12, 12904.0], [1.65163116E12, 6383.0], [1.65163146E12, 13447.0], [1.65163176E12, 12843.0], [1.65163254E12, 14761.0], [1.65163284E12, 13348.0], [1.65163122E12, 10662.0], [1.65163152E12, 12342.0], [1.65163134E12, 12431.0], [1.65163164E12, 11797.0], [1.65163194E12, 13881.0], [1.65163224E12, 14999.0], [1.6516311E12, 5202.0], [1.65163302E12, 12626.0], [1.6516314E12, 14076.0], [1.6516317E12, 12829.0], [1.651632E12, 13911.0], [1.65163182E12, 14883.0], [1.65163212E12, 14106.0], [1.65163242E12, 15749.0], [1.65163272E12, 17440.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65163158E12, 9236.000000000002], [1.65163188E12, 10679.000000000004], [1.65163308E12, 10252.300000000001], [1.65163218E12, 10919.0], [1.65163248E12, 13237.4], [1.6516323E12, 10772.1], [1.6516326E12, 11237.699999999999], [1.65163098E12, 1282.6999999999998], [1.6516329E12, 10730.0], [1.65163128E12, 9577.199999999999], [1.65163206E12, 12029.8], [1.65163236E12, 13311.000000000002], [1.65163266E12, 11099.000000000007], [1.65163104E12, 2516.4000000000005], [1.65163296E12, 11135.600000000002], [1.65163278E12, 10521.0], [1.65163116E12, 5322.0], [1.65163146E12, 10708.7], [1.65163176E12, 9594.6], [1.65163254E12, 12037.0], [1.65163284E12, 10250.0], [1.65163122E12, 6683.4], [1.65163152E12, 10375.3], [1.65163134E12, 9799.2], [1.65163164E12, 9332.8], [1.65163194E12, 10990.3], [1.65163224E12, 11535.400000000001], [1.6516311E12, 4113.200000000001], [1.65163302E12, 10894.7], [1.6516314E12, 10283.8], [1.6516317E12, 9722.0], [1.651632E12, 10645.5], [1.65163182E12, 10888.800000000001], [1.65163212E12, 10656.200000000003], [1.65163242E12, 12661.099999999999], [1.65163272E12, 12715.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65163158E12, 11686.5], [1.65163188E12, 13229.819999999996], [1.65163308E12, 11640.0], [1.65163218E12, 13624.000000000004], [1.65163248E12, 16202.220000000001], [1.6516323E12, 15842.770000000019], [1.6516326E12, 13414.619999999999], [1.65163098E12, 1642.0], [1.6516329E12, 13639.8], [1.65163128E12, 11789.38], [1.65163206E12, 14958.380000000005], [1.65163236E12, 16679.079999999994], [1.65163266E12, 13981.119999999997], [1.65163104E12, 3436.72], [1.65163296E12, 13776.23], [1.65163278E12, 12800.049999999997], [1.65163116E12, 6370.68], [1.65163146E12, 13353.669999999998], [1.65163176E12, 12438.119999999999], [1.65163254E12, 14612.2], [1.65163284E12, 13114.000000000002], [1.65163122E12, 9822.429999999995], [1.65163152E12, 12324.89], [1.65163134E12, 12107.359999999997], [1.65163164E12, 11441.819999999998], [1.65163194E12, 13426.109999999997], [1.65163224E12, 14684.059999999994], [1.6516311E12, 5091.2199999999975], [1.65163302E12, 12550.969999999998], [1.6516314E12, 13821.660000000003], [1.6516317E12, 12159.400000000007], [1.651632E12, 13509.619999999992], [1.65163182E12, 14809.210000000001], [1.65163212E12, 13599.659999999989], [1.65163242E12, 15647.519999999999], [1.65163272E12, 17245.469999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65163158E12, 10298.0], [1.65163188E12, 11692.400000000001], [1.65163308E12, 11449.0], [1.65163218E12, 12226.0], [1.65163248E12, 14468.799999999997], [1.6516323E12, 12196.05], [1.6516326E12, 12859.65], [1.65163098E12, 1545.9999999999998], [1.6516329E12, 12123.0], [1.65163128E12, 10811.199999999999], [1.65163206E12, 13249.099999999999], [1.65163236E12, 14884.3], [1.65163266E12, 12639.8], [1.65163104E12, 2857.6000000000004], [1.65163296E12, 12088.250000000004], [1.65163278E12, 11650.25], [1.65163116E12, 5807.5999999999985], [1.65163146E12, 11682.849999999999], [1.65163176E12, 10766.399999999998], [1.65163254E12, 13159.0], [1.65163284E12, 11295.0], [1.65163122E12, 7570.649999999999], [1.65163152E12, 11682.549999999997], [1.65163134E12, 10995.300000000003], [1.65163164E12, 10202.499999999995], [1.65163194E12, 12288.799999999997], [1.65163224E12, 12951.3], [1.6516311E12, 4464.1], [1.65163302E12, 11751.149999999998], [1.6516314E12, 11833.699999999992], [1.6516317E12, 10907.0], [1.651632E12, 11899.4], [1.65163182E12, 11749.1], [1.65163212E12, 11654.0], [1.65163242E12, 14189.449999999995], [1.65163272E12, 13990.449999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65163158E12, 921.0], [1.65163188E12, 869.0], [1.65163308E12, 1196.0], [1.65163218E12, 800.0], [1.65163248E12, 896.0], [1.6516323E12, 851.0], [1.6516326E12, 939.0], [1.65163098E12, 720.0], [1.6516329E12, 941.0], [1.65163128E12, 1038.0], [1.65163206E12, 1019.0], [1.65163236E12, 786.0], [1.65163266E12, 1054.0], [1.65163104E12, 580.0], [1.65163296E12, 835.0], [1.65163278E12, 968.0], [1.65163116E12, 935.0], [1.65163146E12, 869.0], [1.65163176E12, 835.0], [1.65163254E12, 904.0], [1.65163284E12, 1022.0], [1.65163122E12, 935.0], [1.65163152E12, 1029.0], [1.65163134E12, 851.0], [1.65163164E12, 977.0], [1.65163194E12, 849.0], [1.65163224E12, 1102.0], [1.6516311E12, 646.0], [1.65163302E12, 819.0], [1.6516314E12, 894.0], [1.6516317E12, 981.0], [1.651632E12, 932.0], [1.65163182E12, 854.0], [1.65163212E12, 951.0], [1.65163242E12, 849.0], [1.65163272E12, 884.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65163158E12, 4837.5], [1.65163188E12, 3894.0], [1.65163308E12, 4249.0], [1.65163218E12, 3642.0], [1.65163248E12, 2336.0], [1.6516323E12, 4063.0], [1.6516326E12, 3713.5], [1.65163098E12, 914.0], [1.6516329E12, 3555.0], [1.65163128E12, 4404.5], [1.65163206E12, 3240.0], [1.65163236E12, 2375.0], [1.65163266E12, 3677.0], [1.65163104E12, 1320.0], [1.65163296E12, 3968.0], [1.65163278E12, 4334.5], [1.65163116E12, 3171.0], [1.65163146E12, 3816.5], [1.65163176E12, 4516.0], [1.65163254E12, 3130.0], [1.65163284E12, 4109.0], [1.65163122E12, 3990.0], [1.65163152E12, 4166.5], [1.65163134E12, 4260.0], [1.65163164E12, 4595.5], [1.65163194E12, 3775.0], [1.65163224E12, 3553.0], [1.6516311E12, 1960.0], [1.65163302E12, 4000.0], [1.6516314E12, 4106.0], [1.6516317E12, 4555.0], [1.651632E12, 3547.0], [1.65163182E12, 4528.5], [1.65163212E12, 4072.0], [1.65163242E12, 2307.5], [1.65163272E12, 3488.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65163308E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 948.0, "minX": 1.0, "maxY": 3726.0, "series": [{"data": [[1.0, 948.0], [2.0, 3458.5], [4.0, 3475.0], [3.0, 3726.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 948.0, "minX": 1.0, "maxY": 3726.0, "series": [{"data": [[1.0, 948.0], [2.0, 3458.5], [4.0, 3475.0], [3.0, 3726.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.65163098E12, "maxY": 2.683333333333333, "series": [{"data": [[1.65163158E12, 2.6], [1.65163188E12, 2.683333333333333], [1.65163308E12, 0.65], [1.65163218E12, 2.65], [1.65163248E12, 2.55], [1.6516323E12, 2.5], [1.6516326E12, 2.6333333333333333], [1.65163098E12, 1.3166666666666667], [1.6516329E12, 2.65], [1.65163128E12, 2.65], [1.65163206E12, 2.55], [1.65163236E12, 2.6166666666666667], [1.65163266E12, 2.6166666666666667], [1.65163104E12, 2.55], [1.65163296E12, 2.6], [1.65163278E12, 2.566666666666667], [1.65163116E12, 2.6333333333333333], [1.65163146E12, 2.6666666666666665], [1.65163176E12, 2.5833333333333335], [1.65163254E12, 2.65], [1.65163284E12, 2.65], [1.65163122E12, 2.6666666666666665], [1.65163152E12, 2.6333333333333333], [1.65163134E12, 2.683333333333333], [1.65163164E12, 2.6333333333333333], [1.65163194E12, 2.6333333333333333], [1.65163224E12, 2.6166666666666667], [1.6516311E12, 2.65], [1.65163302E12, 2.6666666666666665], [1.6516314E12, 2.55], [1.6516317E12, 2.65], [1.651632E12, 2.6666666666666665], [1.65163182E12, 2.433333333333333], [1.65163212E12, 2.6166666666666667], [1.65163242E12, 2.6333333333333333], [1.65163272E12, 2.466666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65163308E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8666666666666667, "minX": 1.65163098E12, "maxY": 2.683333333333333, "series": [{"data": [[1.65163158E12, 2.6], [1.65163188E12, 2.683333333333333], [1.65163308E12, 0.8666666666666667], [1.65163218E12, 2.65], [1.65163248E12, 2.55], [1.6516323E12, 2.5], [1.6516326E12, 2.6333333333333333], [1.65163098E12, 1.2666666666666666], [1.6516329E12, 2.65], [1.65163128E12, 2.6333333333333333], [1.65163206E12, 2.55], [1.65163236E12, 2.6166666666666667], [1.65163266E12, 2.6166666666666667], [1.65163104E12, 2.5166666666666666], [1.65163296E12, 2.6], [1.65163278E12, 2.566666666666667], [1.65163116E12, 2.5833333333333335], [1.65163146E12, 2.6666666666666665], [1.65163176E12, 2.5833333333333335], [1.65163254E12, 2.65], [1.65163284E12, 2.65], [1.65163122E12, 2.6333333333333333], [1.65163152E12, 2.6333333333333333], [1.65163134E12, 2.683333333333333], [1.65163164E12, 2.6333333333333333], [1.65163194E12, 2.6333333333333333], [1.65163224E12, 2.6166666666666667], [1.6516311E12, 2.6166666666666667], [1.65163302E12, 2.6666666666666665], [1.6516314E12, 2.55], [1.6516317E12, 2.65], [1.651632E12, 2.6666666666666665], [1.65163182E12, 2.433333333333333], [1.65163212E12, 2.6166666666666667], [1.65163242E12, 2.6333333333333333], [1.65163272E12, 2.466666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65163308E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8666666666666667, "minX": 1.65163098E12, "maxY": 2.683333333333333, "series": [{"data": [[1.65163158E12, 2.6], [1.65163188E12, 2.683333333333333], [1.65163308E12, 0.8666666666666667], [1.65163218E12, 2.65], [1.65163248E12, 2.55], [1.6516323E12, 2.5], [1.6516326E12, 2.6333333333333333], [1.65163098E12, 1.2666666666666666], [1.6516329E12, 2.65], [1.65163128E12, 2.6333333333333333], [1.65163206E12, 2.55], [1.65163236E12, 2.6166666666666667], [1.65163266E12, 2.6166666666666667], [1.65163104E12, 2.5166666666666666], [1.65163296E12, 2.6], [1.65163278E12, 2.566666666666667], [1.65163116E12, 2.5833333333333335], [1.65163146E12, 2.6666666666666665], [1.65163176E12, 2.5833333333333335], [1.65163254E12, 2.65], [1.65163284E12, 2.65], [1.65163122E12, 2.6333333333333333], [1.65163152E12, 2.6333333333333333], [1.65163134E12, 2.683333333333333], [1.65163164E12, 2.6333333333333333], [1.65163194E12, 2.6333333333333333], [1.65163224E12, 2.6166666666666667], [1.6516311E12, 2.6166666666666667], [1.65163302E12, 2.6666666666666665], [1.6516314E12, 2.55], [1.6516317E12, 2.65], [1.651632E12, 2.6666666666666665], [1.65163182E12, 2.433333333333333], [1.65163212E12, 2.6166666666666667], [1.65163242E12, 2.6333333333333333], [1.65163272E12, 2.466666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65163308E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8666666666666667, "minX": 1.65163098E12, "maxY": 2.683333333333333, "series": [{"data": [[1.65163158E12, 2.6], [1.65163188E12, 2.683333333333333], [1.65163308E12, 0.8666666666666667], [1.65163218E12, 2.65], [1.65163248E12, 2.55], [1.6516323E12, 2.5], [1.6516326E12, 2.6333333333333333], [1.65163098E12, 1.2666666666666666], [1.6516329E12, 2.65], [1.65163128E12, 2.6333333333333333], [1.65163206E12, 2.55], [1.65163236E12, 2.6166666666666667], [1.65163266E12, 2.6166666666666667], [1.65163104E12, 2.5166666666666666], [1.65163296E12, 2.6], [1.65163278E12, 2.566666666666667], [1.65163116E12, 2.5833333333333335], [1.65163146E12, 2.6666666666666665], [1.65163176E12, 2.5833333333333335], [1.65163254E12, 2.65], [1.65163284E12, 2.65], [1.65163122E12, 2.6333333333333333], [1.65163152E12, 2.6333333333333333], [1.65163134E12, 2.683333333333333], [1.65163164E12, 2.6333333333333333], [1.65163194E12, 2.6333333333333333], [1.65163224E12, 2.6166666666666667], [1.6516311E12, 2.6166666666666667], [1.65163302E12, 2.6666666666666665], [1.6516314E12, 2.55], [1.6516317E12, 2.65], [1.651632E12, 2.6666666666666665], [1.65163182E12, 2.433333333333333], [1.65163212E12, 2.6166666666666667], [1.65163242E12, 2.6333333333333333], [1.65163272E12, 2.466666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65163308E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


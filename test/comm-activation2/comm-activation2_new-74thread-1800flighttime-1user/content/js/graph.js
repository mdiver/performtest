/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 558.0, "minX": 0.0, "maxY": 60589.0, "series": [{"data": [[0.0, 558.0], [0.1, 741.0], [0.2, 757.0], [0.3, 773.0], [0.4, 789.0], [0.5, 797.0], [0.6, 806.0], [0.7, 833.0], [0.8, 854.0], [0.9, 873.0], [1.0, 894.0], [1.1, 905.0], [1.2, 918.0], [1.3, 928.0], [1.4, 940.0], [1.5, 951.0], [1.6, 966.0], [1.7, 974.0], [1.8, 982.0], [1.9, 996.0], [2.0, 1011.0], [2.1, 1019.0], [2.2, 1028.0], [2.3, 1041.0], [2.4, 1053.0], [2.5, 1061.0], [2.6, 1075.0], [2.7, 1093.0], [2.8, 1107.0], [2.9, 1115.0], [3.0, 1123.0], [3.1, 1129.0], [3.2, 1136.0], [3.3, 1145.0], [3.4, 1152.0], [3.5, 1158.0], [3.6, 1165.0], [3.7, 1175.0], [3.8, 1185.0], [3.9, 1189.0], [4.0, 1203.0], [4.1, 1211.0], [4.2, 1221.0], [4.3, 1228.0], [4.4, 1243.0], [4.5, 1256.0], [4.6, 1271.0], [4.7, 1291.0], [4.8, 1296.0], [4.9, 1311.0], [5.0, 1324.0], [5.1, 1329.0], [5.2, 1338.0], [5.3, 1347.0], [5.4, 1355.0], [5.5, 1359.0], [5.6, 1366.0], [5.7, 1377.0], [5.8, 1386.0], [5.9, 1403.0], [6.0, 1411.0], [6.1, 1417.0], [6.2, 1430.0], [6.3, 1439.0], [6.4, 1452.0], [6.5, 1461.0], [6.6, 1474.0], [6.7, 1483.0], [6.8, 1496.0], [6.9, 1510.0], [7.0, 1526.0], [7.1, 1541.0], [7.2, 1549.0], [7.3, 1564.0], [7.4, 1584.0], [7.5, 1594.0], [7.6, 1606.0], [7.7, 1620.0], [7.8, 1635.0], [7.9, 1664.0], [8.0, 1689.0], [8.1, 1714.0], [8.2, 1736.0], [8.3, 1762.0], [8.4, 1783.0], [8.5, 1803.0], [8.6, 1820.0], [8.7, 1846.0], [8.8, 1876.0], [8.9, 1898.0], [9.0, 1907.0], [9.1, 1924.0], [9.2, 1941.0], [9.3, 1950.0], [9.4, 1974.0], [9.5, 1993.0], [9.6, 2010.0], [9.7, 2025.0], [9.8, 2055.0], [9.9, 2081.0], [10.0, 2106.0], [10.1, 2123.0], [10.2, 2146.0], [10.3, 2171.0], [10.4, 2200.0], [10.5, 2222.0], [10.6, 2249.0], [10.7, 2265.0], [10.8, 2286.0], [10.9, 2298.0], [11.0, 2322.0], [11.1, 2349.0], [11.2, 2361.0], [11.3, 2377.0], [11.4, 2393.0], [11.5, 2432.0], [11.6, 2453.0], [11.7, 2472.0], [11.8, 2489.0], [11.9, 2507.0], [12.0, 2529.0], [12.1, 2540.0], [12.2, 2560.0], [12.3, 2577.0], [12.4, 2585.0], [12.5, 2599.0], [12.6, 2614.0], [12.7, 2643.0], [12.8, 2668.0], [12.9, 2687.0], [13.0, 2713.0], [13.1, 2725.0], [13.2, 2736.0], [13.3, 2752.0], [13.4, 2766.0], [13.5, 2782.0], [13.6, 2801.0], [13.7, 2817.0], [13.8, 2836.0], [13.9, 2851.0], [14.0, 2873.0], [14.1, 2889.0], [14.2, 2903.0], [14.3, 2925.0], [14.4, 2942.0], [14.5, 2952.0], [14.6, 2974.0], [14.7, 2995.0], [14.8, 3017.0], [14.9, 3036.0], [15.0, 3058.0], [15.1, 3086.0], [15.2, 3109.0], [15.3, 3131.0], [15.4, 3155.0], [15.5, 3171.0], [15.6, 3213.0], [15.7, 3237.0], [15.8, 3270.0], [15.9, 3303.0], [16.0, 3321.0], [16.1, 3350.0], [16.2, 3375.0], [16.3, 3384.0], [16.4, 3410.0], [16.5, 3422.0], [16.6, 3440.0], [16.7, 3479.0], [16.8, 3502.0], [16.9, 3532.0], [17.0, 3551.0], [17.1, 3586.0], [17.2, 3597.0], [17.3, 3621.0], [17.4, 3659.0], [17.5, 3693.0], [17.6, 3716.0], [17.7, 3729.0], [17.8, 3746.0], [17.9, 3766.0], [18.0, 3783.0], [18.1, 3801.0], [18.2, 3822.0], [18.3, 3833.0], [18.4, 3844.0], [18.5, 3867.0], [18.6, 3889.0], [18.7, 3918.0], [18.8, 3942.0], [18.9, 3954.0], [19.0, 3971.0], [19.1, 4004.0], [19.2, 4048.0], [19.3, 4066.0], [19.4, 4088.0], [19.5, 4112.0], [19.6, 4134.0], [19.7, 4155.0], [19.8, 4170.0], [19.9, 4199.0], [20.0, 4218.0], [20.1, 4242.0], [20.2, 4270.0], [20.3, 4295.0], [20.4, 4309.0], [20.5, 4329.0], [20.6, 4358.0], [20.7, 4386.0], [20.8, 4410.0], [20.9, 4421.0], [21.0, 4445.0], [21.1, 4474.0], [21.2, 4504.0], [21.3, 4522.0], [21.4, 4549.0], [21.5, 4590.0], [21.6, 4607.0], [21.7, 4631.0], [21.8, 4651.0], [21.9, 4680.0], [22.0, 4699.0], [22.1, 4724.0], [22.2, 4738.0], [22.3, 4772.0], [22.4, 4795.0], [22.5, 4815.0], [22.6, 4850.0], [22.7, 4866.0], [22.8, 4898.0], [22.9, 4911.0], [23.0, 4924.0], [23.1, 4961.0], [23.2, 4999.0], [23.3, 5050.0], [23.4, 5070.0], [23.5, 5091.0], [23.6, 5132.0], [23.7, 5150.0], [23.8, 5184.0], [23.9, 5216.0], [24.0, 5245.0], [24.1, 5262.0], [24.2, 5277.0], [24.3, 5292.0], [24.4, 5315.0], [24.5, 5340.0], [24.6, 5372.0], [24.7, 5408.0], [24.8, 5435.0], [24.9, 5453.0], [25.0, 5487.0], [25.1, 5503.0], [25.2, 5519.0], [25.3, 5557.0], [25.4, 5569.0], [25.5, 5591.0], [25.6, 5635.0], [25.7, 5661.0], [25.8, 5689.0], [25.9, 5718.0], [26.0, 5739.0], [26.1, 5764.0], [26.2, 5790.0], [26.3, 5805.0], [26.4, 5822.0], [26.5, 5841.0], [26.6, 5858.0], [26.7, 5893.0], [26.8, 5903.0], [26.9, 5918.0], [27.0, 5945.0], [27.1, 5974.0], [27.2, 6002.0], [27.3, 6040.0], [27.4, 6077.0], [27.5, 6095.0], [27.6, 6121.0], [27.7, 6142.0], [27.8, 6168.0], [27.9, 6217.0], [28.0, 6242.0], [28.1, 6270.0], [28.2, 6294.0], [28.3, 6319.0], [28.4, 6346.0], [28.5, 6384.0], [28.6, 6407.0], [28.7, 6445.0], [28.8, 6469.0], [28.9, 6500.0], [29.0, 6534.0], [29.1, 6575.0], [29.2, 6611.0], [29.3, 6660.0], [29.4, 6688.0], [29.5, 6723.0], [29.6, 6742.0], [29.7, 6780.0], [29.8, 6812.0], [29.9, 6836.0], [30.0, 6856.0], [30.1, 6905.0], [30.2, 6945.0], [30.3, 6959.0], [30.4, 7003.0], [30.5, 7009.0], [30.6, 7030.0], [30.7, 7047.0], [30.8, 7063.0], [30.9, 7097.0], [31.0, 7118.0], [31.1, 7146.0], [31.2, 7172.0], [31.3, 7210.0], [31.4, 7230.0], [31.5, 7269.0], [31.6, 7304.0], [31.7, 7326.0], [31.8, 7362.0], [31.9, 7385.0], [32.0, 7404.0], [32.1, 7427.0], [32.2, 7455.0], [32.3, 7489.0], [32.4, 7515.0], [32.5, 7556.0], [32.6, 7599.0], [32.7, 7623.0], [32.8, 7657.0], [32.9, 7678.0], [33.0, 7704.0], [33.1, 7732.0], [33.2, 7756.0], [33.3, 7783.0], [33.4, 7806.0], [33.5, 7825.0], [33.6, 7863.0], [33.7, 7895.0], [33.8, 7929.0], [33.9, 7969.0], [34.0, 7986.0], [34.1, 8002.0], [34.2, 8022.0], [34.3, 8045.0], [34.4, 8065.0], [34.5, 8105.0], [34.6, 8128.0], [34.7, 8163.0], [34.8, 8189.0], [34.9, 8223.0], [35.0, 8254.0], [35.1, 8271.0], [35.2, 8304.0], [35.3, 8332.0], [35.4, 8361.0], [35.5, 8401.0], [35.6, 8435.0], [35.7, 8452.0], [35.8, 8485.0], [35.9, 8515.0], [36.0, 8545.0], [36.1, 8581.0], [36.2, 8610.0], [36.3, 8649.0], [36.4, 8677.0], [36.5, 8710.0], [36.6, 8751.0], [36.7, 8775.0], [36.8, 8818.0], [36.9, 8852.0], [37.0, 8882.0], [37.1, 8919.0], [37.2, 8944.0], [37.3, 8984.0], [37.4, 9024.0], [37.5, 9059.0], [37.6, 9101.0], [37.7, 9138.0], [37.8, 9182.0], [37.9, 9207.0], [38.0, 9251.0], [38.1, 9274.0], [38.2, 9294.0], [38.3, 9337.0], [38.4, 9384.0], [38.5, 9415.0], [38.6, 9438.0], [38.7, 9482.0], [38.8, 9510.0], [38.9, 9537.0], [39.0, 9569.0], [39.1, 9595.0], [39.2, 9610.0], [39.3, 9657.0], [39.4, 9693.0], [39.5, 9725.0], [39.6, 9766.0], [39.7, 9785.0], [39.8, 9811.0], [39.9, 9826.0], [40.0, 9865.0], [40.1, 9905.0], [40.2, 9939.0], [40.3, 9968.0], [40.4, 9993.0], [40.5, 10028.0], [40.6, 10060.0], [40.7, 10090.0], [40.8, 10137.0], [40.9, 10177.0], [41.0, 10215.0], [41.1, 10251.0], [41.2, 10301.0], [41.3, 10337.0], [41.4, 10394.0], [41.5, 10418.0], [41.6, 10460.0], [41.7, 10493.0], [41.8, 10534.0], [41.9, 10565.0], [42.0, 10610.0], [42.1, 10638.0], [42.2, 10669.0], [42.3, 10717.0], [42.4, 10736.0], [42.5, 10759.0], [42.6, 10772.0], [42.7, 10817.0], [42.8, 10844.0], [42.9, 10859.0], [43.0, 10887.0], [43.1, 10931.0], [43.2, 10975.0], [43.3, 11001.0], [43.4, 11040.0], [43.5, 11065.0], [43.6, 11096.0], [43.7, 11138.0], [43.8, 11187.0], [43.9, 11221.0], [44.0, 11253.0], [44.1, 11272.0], [44.2, 11317.0], [44.3, 11342.0], [44.4, 11403.0], [44.5, 11425.0], [44.6, 11480.0], [44.7, 11506.0], [44.8, 11528.0], [44.9, 11575.0], [45.0, 11614.0], [45.1, 11666.0], [45.2, 11712.0], [45.3, 11741.0], [45.4, 11797.0], [45.5, 11823.0], [45.6, 11869.0], [45.7, 11898.0], [45.8, 11934.0], [45.9, 11970.0], [46.0, 12011.0], [46.1, 12041.0], [46.2, 12073.0], [46.3, 12093.0], [46.4, 12129.0], [46.5, 12152.0], [46.6, 12196.0], [46.7, 12233.0], [46.8, 12262.0], [46.9, 12299.0], [47.0, 12363.0], [47.1, 12409.0], [47.2, 12474.0], [47.3, 12515.0], [47.4, 12537.0], [47.5, 12570.0], [47.6, 12601.0], [47.7, 12637.0], [47.8, 12672.0], [47.9, 12693.0], [48.0, 12728.0], [48.1, 12745.0], [48.2, 12790.0], [48.3, 12820.0], [48.4, 12856.0], [48.5, 12899.0], [48.6, 12943.0], [48.7, 12983.0], [48.8, 13018.0], [48.9, 13045.0], [49.0, 13076.0], [49.1, 13116.0], [49.2, 13154.0], [49.3, 13190.0], [49.4, 13229.0], [49.5, 13271.0], [49.6, 13314.0], [49.7, 13355.0], [49.8, 13391.0], [49.9, 13471.0], [50.0, 13509.0], [50.1, 13541.0], [50.2, 13572.0], [50.3, 13639.0], [50.4, 13670.0], [50.5, 13696.0], [50.6, 13720.0], [50.7, 13765.0], [50.8, 13800.0], [50.9, 13841.0], [51.0, 13866.0], [51.1, 13918.0], [51.2, 13966.0], [51.3, 13999.0], [51.4, 14033.0], [51.5, 14074.0], [51.6, 14113.0], [51.7, 14149.0], [51.8, 14174.0], [51.9, 14224.0], [52.0, 14249.0], [52.1, 14290.0], [52.2, 14319.0], [52.3, 14365.0], [52.4, 14386.0], [52.5, 14429.0], [52.6, 14481.0], [52.7, 14535.0], [52.8, 14605.0], [52.9, 14650.0], [53.0, 14685.0], [53.1, 14730.0], [53.2, 14762.0], [53.3, 14783.0], [53.4, 14814.0], [53.5, 14842.0], [53.6, 14892.0], [53.7, 14937.0], [53.8, 14985.0], [53.9, 15027.0], [54.0, 15083.0], [54.1, 15131.0], [54.2, 15174.0], [54.3, 15248.0], [54.4, 15306.0], [54.5, 15348.0], [54.6, 15371.0], [54.7, 15403.0], [54.8, 15458.0], [54.9, 15507.0], [55.0, 15560.0], [55.1, 15601.0], [55.2, 15664.0], [55.3, 15693.0], [55.4, 15704.0], [55.5, 15745.0], [55.6, 15789.0], [55.7, 15818.0], [55.8, 15865.0], [55.9, 15904.0], [56.0, 15980.0], [56.1, 16011.0], [56.2, 16057.0], [56.3, 16117.0], [56.4, 16158.0], [56.5, 16204.0], [56.6, 16223.0], [56.7, 16291.0], [56.8, 16325.0], [56.9, 16362.0], [57.0, 16400.0], [57.1, 16451.0], [57.2, 16484.0], [57.3, 16518.0], [57.4, 16585.0], [57.5, 16617.0], [57.6, 16647.0], [57.7, 16683.0], [57.8, 16750.0], [57.9, 16788.0], [58.0, 16835.0], [58.1, 16893.0], [58.2, 16914.0], [58.3, 16971.0], [58.4, 17016.0], [58.5, 17045.0], [58.6, 17099.0], [58.7, 17133.0], [58.8, 17166.0], [58.9, 17204.0], [59.0, 17241.0], [59.1, 17279.0], [59.2, 17329.0], [59.3, 17362.0], [59.4, 17415.0], [59.5, 17468.0], [59.6, 17508.0], [59.7, 17538.0], [59.8, 17560.0], [59.9, 17612.0], [60.0, 17666.0], [60.1, 17716.0], [60.2, 17758.0], [60.3, 17817.0], [60.4, 17845.0], [60.5, 17874.0], [60.6, 17927.0], [60.7, 17974.0], [60.8, 18024.0], [60.9, 18067.0], [61.0, 18089.0], [61.1, 18140.0], [61.2, 18179.0], [61.3, 18234.0], [61.4, 18286.0], [61.5, 18334.0], [61.6, 18374.0], [61.7, 18407.0], [61.8, 18437.0], [61.9, 18484.0], [62.0, 18535.0], [62.1, 18599.0], [62.2, 18644.0], [62.3, 18711.0], [62.4, 18764.0], [62.5, 18794.0], [62.6, 18848.0], [62.7, 18882.0], [62.8, 18936.0], [62.9, 18965.0], [63.0, 19029.0], [63.1, 19090.0], [63.2, 19145.0], [63.3, 19183.0], [63.4, 19243.0], [63.5, 19294.0], [63.6, 19324.0], [63.7, 19366.0], [63.8, 19439.0], [63.9, 19498.0], [64.0, 19560.0], [64.1, 19613.0], [64.2, 19655.0], [64.3, 19704.0], [64.4, 19740.0], [64.5, 19783.0], [64.6, 19823.0], [64.7, 19894.0], [64.8, 19936.0], [64.9, 19981.0], [65.0, 20019.0], [65.1, 20081.0], [65.2, 20129.0], [65.3, 20191.0], [65.4, 20244.0], [65.5, 20292.0], [65.6, 20354.0], [65.7, 20432.0], [65.8, 20491.0], [65.9, 20551.0], [66.0, 20595.0], [66.1, 20648.0], [66.2, 20729.0], [66.3, 20767.0], [66.4, 20847.0], [66.5, 20885.0], [66.6, 20942.0], [66.7, 21006.0], [66.8, 21077.0], [66.9, 21113.0], [67.0, 21151.0], [67.1, 21200.0], [67.2, 21243.0], [67.3, 21317.0], [67.4, 21348.0], [67.5, 21448.0], [67.6, 21512.0], [67.7, 21589.0], [67.8, 21627.0], [67.9, 21748.0], [68.0, 21845.0], [68.1, 21888.0], [68.2, 21977.0], [68.3, 22052.0], [68.4, 22117.0], [68.5, 22175.0], [68.6, 22200.0], [68.7, 22264.0], [68.8, 22332.0], [68.9, 22418.0], [69.0, 22474.0], [69.1, 22538.0], [69.2, 22615.0], [69.3, 22671.0], [69.4, 22725.0], [69.5, 22803.0], [69.6, 22872.0], [69.7, 22966.0], [69.8, 23036.0], [69.9, 23091.0], [70.0, 23141.0], [70.1, 23189.0], [70.2, 23263.0], [70.3, 23315.0], [70.4, 23399.0], [70.5, 23472.0], [70.6, 23558.0], [70.7, 23624.0], [70.8, 23696.0], [70.9, 23771.0], [71.0, 23840.0], [71.1, 23884.0], [71.2, 23979.0], [71.3, 24098.0], [71.4, 24214.0], [71.5, 24267.0], [71.6, 24310.0], [71.7, 24382.0], [71.8, 24468.0], [71.9, 24537.0], [72.0, 24620.0], [72.1, 24730.0], [72.2, 24820.0], [72.3, 24900.0], [72.4, 24987.0], [72.5, 25094.0], [72.6, 25151.0], [72.7, 25205.0], [72.8, 25363.0], [72.9, 25448.0], [73.0, 25546.0], [73.1, 25627.0], [73.2, 25717.0], [73.3, 25852.0], [73.4, 25927.0], [73.5, 25998.0], [73.6, 26068.0], [73.7, 26189.0], [73.8, 26324.0], [73.9, 26422.0], [74.0, 26501.0], [74.1, 26564.0], [74.2, 26648.0], [74.3, 26755.0], [74.4, 26825.0], [74.5, 26919.0], [74.6, 26994.0], [74.7, 27144.0], [74.8, 27272.0], [74.9, 27388.0], [75.0, 27541.0], [75.1, 27631.0], [75.2, 27725.0], [75.3, 27840.0], [75.4, 27973.0], [75.5, 28069.0], [75.6, 28170.0], [75.7, 28274.0], [75.8, 28422.0], [75.9, 28542.0], [76.0, 28656.0], [76.1, 28741.0], [76.2, 28909.0], [76.3, 28997.0], [76.4, 29081.0], [76.5, 29247.0], [76.6, 29351.0], [76.7, 29481.0], [76.8, 29592.0], [76.9, 29697.0], [77.0, 29867.0], [77.1, 29976.0], [77.2, 30149.0], [77.3, 30337.0], [77.4, 30447.0], [77.5, 30577.0], [77.6, 30840.0], [77.7, 30924.0], [77.8, 31004.0], [77.9, 31244.0], [78.0, 31361.0], [78.1, 31507.0], [78.2, 31601.0], [78.3, 31734.0], [78.4, 31899.0], [78.5, 32078.0], [78.6, 32254.0], [78.7, 32389.0], [78.8, 32511.0], [78.9, 32719.0], [79.0, 32939.0], [79.1, 33100.0], [79.2, 33168.0], [79.3, 33289.0], [79.4, 33481.0], [79.5, 33691.0], [79.6, 33923.0], [79.7, 34015.0], [79.8, 34234.0], [79.9, 34451.0], [80.0, 34645.0], [80.1, 34746.0], [80.2, 34940.0], [80.3, 35237.0], [80.4, 35365.0], [80.5, 35500.0], [80.6, 35629.0], [80.7, 35786.0], [80.8, 35901.0], [80.9, 36131.0], [81.0, 36425.0], [81.1, 36671.0], [81.2, 36800.0], [81.3, 36949.0], [81.4, 37151.0], [81.5, 37250.0], [81.6, 37398.0], [81.7, 37612.0], [81.8, 37784.0], [81.9, 37931.0], [82.0, 38184.0], [82.1, 38396.0], [82.2, 38580.0], [82.3, 38781.0], [82.4, 39023.0], [82.5, 39113.0], [82.6, 39378.0], [82.7, 39559.0], [82.8, 39723.0], [82.9, 40003.0], [83.0, 40260.0], [83.1, 40411.0], [83.2, 40534.0], [83.3, 40763.0], [83.4, 40963.0], [83.5, 41246.0], [83.6, 41376.0], [83.7, 41607.0], [83.8, 41788.0], [83.9, 42041.0], [84.0, 42194.0], [84.1, 42391.0], [84.2, 42624.0], [84.3, 42810.0], [84.4, 42985.0], [84.5, 43163.0], [84.6, 43413.0], [84.7, 43612.0], [84.8, 43861.0], [84.9, 44051.0], [85.0, 44348.0], [85.1, 44538.0], [85.2, 44738.0], [85.3, 44949.0], [85.4, 45112.0], [85.5, 45247.0], [85.6, 45445.0], [85.7, 45647.0], [85.8, 45935.0], [85.9, 46084.0], [86.0, 46265.0], [86.1, 46509.0], [86.2, 46678.0], [86.3, 46933.0], [86.4, 47128.0], [86.5, 47378.0], [86.6, 47551.0], [86.7, 47773.0], [86.8, 48029.0], [86.9, 48182.0], [87.0, 48411.0], [87.1, 48605.0], [87.2, 48837.0], [87.3, 49023.0], [87.4, 49286.0], [87.5, 49583.0], [87.6, 49737.0], [87.7, 49886.0], [87.8, 50150.0], [87.9, 50377.0], [88.0, 50643.0], [88.1, 50928.0], [88.2, 51131.0], [88.3, 51459.0], [88.4, 51584.0], [88.5, 51936.0], [88.6, 52109.0], [88.7, 52421.0], [88.8, 52644.0], [88.9, 52800.0], [89.0, 53044.0], [89.1, 53311.0], [89.2, 53473.0], [89.3, 53707.0], [89.4, 53939.0], [89.5, 54276.0], [89.6, 54527.0], [89.7, 54689.0], [89.8, 54924.0], [89.9, 55159.0], [90.0, 55373.0], [90.1, 55640.0], [90.2, 55993.0], [90.3, 56232.0], [90.4, 56423.0], [90.5, 56766.0], [90.6, 57034.0], [90.7, 57306.0], [90.8, 57570.0], [90.9, 57715.0], [91.0, 57929.0], [91.1, 58206.0], [91.2, 58573.0], [91.3, 58938.0], [91.4, 59173.0], [91.5, 59584.0], [91.6, 59816.0], [91.7, 60007.0], [91.8, 60007.0], [91.9, 60007.0], [92.0, 60007.0], [92.1, 60008.0], [92.2, 60008.0], [92.3, 60008.0], [92.4, 60008.0], [92.5, 60008.0], [92.6, 60008.0], [92.7, 60008.0], [92.8, 60008.0], [92.9, 60008.0], [93.0, 60008.0], [93.1, 60008.0], [93.2, 60008.0], [93.3, 60008.0], [93.4, 60008.0], [93.5, 60008.0], [93.6, 60009.0], [93.7, 60009.0], [93.8, 60009.0], [93.9, 60009.0], [94.0, 60009.0], [94.1, 60009.0], [94.2, 60009.0], [94.3, 60009.0], [94.4, 60009.0], [94.5, 60009.0], [94.6, 60009.0], [94.7, 60009.0], [94.8, 60009.0], [94.9, 60009.0], [95.0, 60009.0], [95.1, 60009.0], [95.2, 60009.0], [95.3, 60010.0], [95.4, 60010.0], [95.5, 60010.0], [95.6, 60010.0], [95.7, 60010.0], [95.8, 60011.0], [95.9, 60012.0], [96.0, 60012.0], [96.1, 60015.0], [96.2, 60139.0], [96.3, 60161.0], [96.4, 60165.0], [96.5, 60168.0], [96.6, 60171.0], [96.7, 60175.0], [96.8, 60177.0], [96.9, 60179.0], [97.0, 60181.0], [97.1, 60183.0], [97.2, 60186.0], [97.3, 60189.0], [97.4, 60192.0], [97.5, 60195.0], [97.6, 60203.0], [97.7, 60205.0], [97.8, 60209.0], [97.9, 60213.0], [98.0, 60215.0], [98.1, 60218.0], [98.2, 60221.0], [98.3, 60224.0], [98.4, 60226.0], [98.5, 60229.0], [98.6, 60231.0], [98.7, 60237.0], [98.8, 60242.0], [98.9, 60248.0], [99.0, 60252.0], [99.1, 60258.0], [99.2, 60264.0], [99.3, 60273.0], [99.4, 60285.0], [99.5, 60305.0], [99.6, 60323.0], [99.7, 60361.0], [99.8, 60380.0], [99.9, 60409.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 460.0, "series": [{"data": [[34500.0, 6.0], [32900.0, 8.0], [33700.0, 3.0], [35300.0, 6.0], [36100.0, 4.0], [36900.0, 9.0], [37700.0, 5.0], [38500.0, 4.0], [39300.0, 8.0], [40100.0, 3.0], [40900.0, 1.0], [41700.0, 6.0], [42500.0, 3.0], [44100.0, 4.0], [44900.0, 5.0], [43300.0, 5.0], [46500.0, 6.0], [45700.0, 2.0], [48100.0, 7.0], [48900.0, 7.0], [47300.0, 5.0], [50500.0, 5.0], [49700.0, 7.0], [52100.0, 7.0], [52900.0, 3.0], [51300.0, 5.0], [54500.0, 8.0], [53700.0, 7.0], [56900.0, 2.0], [56100.0, 3.0], [55300.0, 4.0], [58500.0, 6.0], [57700.0, 5.0], [59300.0, 2.0], [60100.0, 142.0], [500.0, 2.0], [600.0, 6.0], [700.0, 47.0], [800.0, 52.0], [900.0, 94.0], [1000.0, 78.0], [1100.0, 127.0], [1200.0, 91.0], [1300.0, 106.0], [1400.0, 96.0], [1500.0, 75.0], [1600.0, 56.0], [1700.0, 41.0], [1800.0, 46.0], [1900.0, 66.0], [2000.0, 41.0], [2100.0, 44.0], [2200.0, 53.0], [2300.0, 54.0], [2400.0, 40.0], [2500.0, 69.0], [2600.0, 45.0], [2700.0, 67.0], [2800.0, 62.0], [2900.0, 56.0], [3000.0, 42.0], [3100.0, 43.0], [3300.0, 49.0], [3200.0, 34.0], [3400.0, 42.0], [3500.0, 46.0], [3700.0, 57.0], [3600.0, 32.0], [3800.0, 55.0], [3900.0, 45.0], [4000.0, 40.0], [4300.0, 43.0], [4100.0, 46.0], [4200.0, 43.0], [4600.0, 47.0], [4500.0, 38.0], [4400.0, 44.0], [4800.0, 41.0], [4700.0, 44.0], [4900.0, 39.0], [5000.0, 33.0], [5100.0, 34.0], [5200.0, 48.0], [5300.0, 36.0], [5500.0, 46.0], [5400.0, 40.0], [5600.0, 31.0], [5700.0, 45.0], [5800.0, 52.0], [6100.0, 33.0], [6000.0, 35.0], [5900.0, 43.0], [6200.0, 40.0], [6300.0, 34.0], [6400.0, 34.0], [6600.0, 27.0], [6500.0, 29.0], [6900.0, 33.0], [6800.0, 33.0], [6700.0, 32.0], [7000.0, 54.0], [7100.0, 36.0], [7400.0, 40.0], [7200.0, 31.0], [7300.0, 39.0], [7600.0, 38.0], [7500.0, 27.0], [7700.0, 42.0], [7800.0, 34.0], [7900.0, 39.0], [8100.0, 32.0], [8000.0, 41.0], [8400.0, 36.0], [8200.0, 39.0], [8600.0, 28.0], [9000.0, 25.0], [9200.0, 31.0], [8800.0, 29.0], [9400.0, 35.0], [9600.0, 30.0], [9800.0, 33.0], [10200.0, 27.0], [10000.0, 31.0], [10600.0, 29.0], [10400.0, 32.0], [10800.0, 40.0], [11200.0, 29.0], [11000.0, 33.0], [11600.0, 23.0], [11400.0, 30.0], [12000.0, 34.0], [12200.0, 29.0], [11800.0, 29.0], [12400.0, 20.0], [12600.0, 33.0], [13000.0, 32.0], [12800.0, 29.0], [13200.0, 21.0], [13600.0, 30.0], [13800.0, 28.0], [13400.0, 17.0], [14000.0, 27.0], [14200.0, 29.0], [14600.0, 28.0], [14800.0, 26.0], [14400.0, 21.0], [15000.0, 19.0], [15200.0, 17.0], [15400.0, 20.0], [15800.0, 27.0], [15600.0, 28.0], [16000.0, 24.0], [16200.0, 26.0], [17200.0, 27.0], [16400.0, 26.0], [16800.0, 24.0], [17600.0, 21.0], [18000.0, 27.0], [18400.0, 26.0], [18800.0, 25.0], [19200.0, 23.0], [19600.0, 19.0], [20400.0, 18.0], [20000.0, 21.0], [21200.0, 18.0], [20800.0, 21.0], [22000.0, 10.0], [21600.0, 13.0], [22400.0, 17.0], [23200.0, 16.0], [22800.0, 15.0], [24400.0, 13.0], [24000.0, 6.0], [23600.0, 15.0], [24800.0, 11.0], [25200.0, 6.0], [25600.0, 10.0], [26000.0, 14.0], [26400.0, 11.0], [26800.0, 14.0], [27600.0, 9.0], [27200.0, 7.0], [28000.0, 7.0], [28400.0, 7.0], [29600.0, 11.0], [29200.0, 10.0], [28800.0, 4.0], [30400.0, 10.0], [30000.0, 3.0], [30800.0, 12.0], [31200.0, 6.0], [31600.0, 10.0], [32400.0, 9.0], [32000.0, 6.0], [33600.0, 10.0], [34400.0, 6.0], [32800.0, 5.0], [35200.0, 8.0], [36000.0, 5.0], [36800.0, 6.0], [37600.0, 6.0], [38400.0, 6.0], [40800.0, 7.0], [40000.0, 5.0], [39200.0, 1.0], [41600.0, 5.0], [42400.0, 7.0], [43200.0, 3.0], [44000.0, 4.0], [44800.0, 6.0], [45600.0, 5.0], [46400.0, 6.0], [47200.0, 5.0], [48800.0, 3.0], [48000.0, 6.0], [49600.0, 7.0], [50400.0, 3.0], [52800.0, 7.0], [52000.0, 2.0], [55200.0, 4.0], [53600.0, 3.0], [54400.0, 3.0], [56000.0, 6.0], [56800.0, 2.0], [57600.0, 8.0], [58400.0, 3.0], [59200.0, 3.0], [60000.0, 460.0], [33100.0, 13.0], [34700.0, 8.0], [33900.0, 8.0], [36300.0, 5.0], [35500.0, 5.0], [37100.0, 6.0], [38700.0, 9.0], [37900.0, 5.0], [40300.0, 6.0], [39500.0, 3.0], [42700.0, 5.0], [41900.0, 3.0], [41100.0, 2.0], [43500.0, 7.0], [44300.0, 8.0], [46700.0, 5.0], [45100.0, 8.0], [45900.0, 7.0], [49100.0, 3.0], [47500.0, 6.0], [48300.0, 4.0], [49900.0, 3.0], [50700.0, 3.0], [51500.0, 7.0], [52300.0, 3.0], [53100.0, 5.0], [54700.0, 3.0], [53900.0, 3.0], [57100.0, 4.0], [55500.0, 3.0], [56300.0, 6.0], [57900.0, 5.0], [58700.0, 2.0], [59500.0, 6.0], [60300.0, 38.0], [16500.0, 19.0], [17300.0, 24.0], [16900.0, 21.0], [18100.0, 23.0], [17700.0, 22.0], [18500.0, 18.0], [18900.0, 24.0], [19300.0, 25.0], [19700.0, 28.0], [20100.0, 16.0], [20500.0, 18.0], [20900.0, 18.0], [21300.0, 20.0], [22100.0, 25.0], [21700.0, 11.0], [22500.0, 12.0], [23300.0, 13.0], [22900.0, 11.0], [24500.0, 10.0], [23700.0, 14.0], [24100.0, 7.0], [25300.0, 12.0], [24900.0, 11.0], [26100.0, 9.0], [26500.0, 14.0], [25700.0, 13.0], [27300.0, 10.0], [26900.0, 11.0], [27700.0, 11.0], [28100.0, 12.0], [28500.0, 10.0], [28900.0, 13.0], [29300.0, 10.0], [30500.0, 6.0], [30100.0, 9.0], [29700.0, 3.0], [31700.0, 7.0], [31300.0, 8.0], [30900.0, 10.0], [32500.0, 3.0], [32100.0, 3.0], [33000.0, 6.0], [33800.0, 4.0], [34600.0, 4.0], [36200.0, 2.0], [35400.0, 7.0], [37800.0, 8.0], [37000.0, 5.0], [38600.0, 2.0], [39400.0, 7.0], [40200.0, 6.0], [41800.0, 6.0], [42600.0, 5.0], [41000.0, 4.0], [44200.0, 2.0], [45000.0, 7.0], [43400.0, 3.0], [46600.0, 6.0], [45800.0, 3.0], [48200.0, 3.0], [49000.0, 4.0], [47400.0, 3.0], [49800.0, 7.0], [50600.0, 4.0], [51400.0, 6.0], [53000.0, 3.0], [52200.0, 1.0], [53800.0, 4.0], [54600.0, 6.0], [56200.0, 3.0], [57000.0, 4.0], [55400.0, 5.0], [57800.0, 3.0], [60200.0, 197.0], [34100.0, 6.0], [33300.0, 3.0], [34900.0, 5.0], [35700.0, 8.0], [36500.0, 3.0], [37300.0, 8.0], [38100.0, 7.0], [38900.0, 5.0], [39700.0, 4.0], [40500.0, 2.0], [42900.0, 4.0], [42100.0, 8.0], [41300.0, 9.0], [43700.0, 6.0], [44500.0, 5.0], [45300.0, 4.0], [46900.0, 5.0], [46100.0, 3.0], [47700.0, 4.0], [48500.0, 3.0], [49300.0, 3.0], [50100.0, 4.0], [50900.0, 5.0], [51700.0, 4.0], [52500.0, 4.0], [53300.0, 5.0], [54900.0, 7.0], [54100.0, 3.0], [57300.0, 3.0], [56500.0, 3.0], [55700.0, 2.0], [58100.0, 4.0], [58900.0, 6.0], [59700.0, 4.0], [60500.0, 3.0], [8300.0, 32.0], [8500.0, 34.0], [8700.0, 31.0], [8900.0, 33.0], [9100.0, 31.0], [9700.0, 38.0], [9500.0, 35.0], [9300.0, 24.0], [9900.0, 32.0], [10100.0, 23.0], [10500.0, 25.0], [10700.0, 41.0], [10300.0, 23.0], [11100.0, 25.0], [10900.0, 24.0], [11500.0, 28.0], [11700.0, 26.0], [11300.0, 26.0], [12100.0, 32.0], [11900.0, 28.0], [12300.0, 16.0], [12500.0, 35.0], [12700.0, 31.0], [13100.0, 31.0], [13300.0, 27.0], [12900.0, 24.0], [13500.0, 27.0], [13700.0, 27.0], [14100.0, 30.0], [13900.0, 24.0], [14300.0, 30.0], [14700.0, 32.0], [14500.0, 15.0], [15300.0, 33.0], [15100.0, 18.0], [14900.0, 23.0], [15700.0, 26.0], [15500.0, 21.0], [15900.0, 18.0], [16100.0, 19.0], [16300.0, 28.0], [16600.0, 27.0], [17000.0, 25.0], [17400.0, 22.0], [17800.0, 30.0], [18200.0, 20.0], [19400.0, 14.0], [18600.0, 19.0], [19000.0, 12.0], [20200.0, 19.0], [19800.0, 16.0], [20600.0, 15.0], [21000.0, 18.0], [21400.0, 10.0], [21800.0, 16.0], [22200.0, 14.0], [22600.0, 18.0], [23400.0, 12.0], [23000.0, 20.0], [24200.0, 19.0], [23800.0, 18.0], [25000.0, 11.0], [25400.0, 11.0], [24600.0, 10.0], [25800.0, 8.0], [26600.0, 12.0], [26200.0, 5.0], [27000.0, 7.0], [27400.0, 4.0], [28600.0, 11.0], [27800.0, 8.0], [28200.0, 10.0], [29000.0, 12.0], [29400.0, 5.0], [29800.0, 10.0], [30200.0, 5.0], [30600.0, 2.0], [31000.0, 6.0], [31400.0, 7.0], [32200.0, 9.0], [31800.0, 6.0], [32600.0, 5.0], [33200.0, 9.0], [34800.0, 7.0], [34000.0, 6.0], [35600.0, 11.0], [36400.0, 3.0], [37200.0, 8.0], [38800.0, 3.0], [38000.0, 2.0], [40400.0, 11.0], [39600.0, 7.0], [42800.0, 7.0], [42000.0, 5.0], [41200.0, 8.0], [44400.0, 4.0], [43600.0, 4.0], [45200.0, 7.0], [46000.0, 7.0], [46800.0, 3.0], [47600.0, 7.0], [48400.0, 8.0], [49200.0, 5.0], [50000.0, 4.0], [50800.0, 2.0], [53200.0, 2.0], [52400.0, 2.0], [51600.0, 2.0], [54000.0, 2.0], [54800.0, 6.0], [57200.0, 3.0], [55600.0, 5.0], [56400.0, 3.0], [58800.0, 4.0], [58000.0, 4.0], [60400.0, 14.0], [59600.0, 4.0], [33500.0, 1.0], [34300.0, 3.0], [35100.0, 2.0], [36700.0, 8.0], [35900.0, 5.0], [38300.0, 5.0], [37500.0, 4.0], [39100.0, 5.0], [40700.0, 9.0], [39900.0, 2.0], [42300.0, 4.0], [41500.0, 5.0], [44700.0, 4.0], [43900.0, 5.0], [43100.0, 8.0], [47100.0, 4.0], [45500.0, 5.0], [46300.0, 4.0], [47900.0, 3.0], [48700.0, 4.0], [49500.0, 5.0], [51100.0, 8.0], [50300.0, 5.0], [51900.0, 8.0], [52700.0, 4.0], [54300.0, 3.0], [53500.0, 4.0], [55100.0, 6.0], [55900.0, 3.0], [56700.0, 7.0], [57500.0, 7.0], [58300.0, 2.0], [59100.0, 4.0], [59900.0, 4.0], [17100.0, 28.0], [16700.0, 23.0], [17500.0, 28.0], [18300.0, 25.0], [17900.0, 18.0], [19100.0, 21.0], [18700.0, 23.0], [19900.0, 26.0], [20300.0, 17.0], [19500.0, 19.0], [20700.0, 15.0], [21500.0, 17.0], [21100.0, 23.0], [21900.0, 14.0], [22300.0, 16.0], [23100.0, 21.0], [22700.0, 13.0], [23500.0, 14.0], [24300.0, 19.0], [23900.0, 13.0], [25100.0, 19.0], [24700.0, 13.0], [25500.0, 9.0], [25900.0, 14.0], [26300.0, 12.0], [27100.0, 9.0], [26700.0, 11.0], [27500.0, 12.0], [27900.0, 10.0], [28300.0, 6.0], [28700.0, 8.0], [29100.0, 5.0], [29500.0, 9.0], [30300.0, 10.0], [29900.0, 7.0], [30700.0, 3.0], [31500.0, 9.0], [31100.0, 5.0], [32700.0, 4.0], [31900.0, 5.0], [32300.0, 8.0], [34200.0, 7.0], [33400.0, 7.0], [35000.0, 4.0], [35800.0, 7.0], [36600.0, 6.0], [38200.0, 4.0], [37400.0, 6.0], [39000.0, 10.0], [39800.0, 4.0], [40600.0, 3.0], [42200.0, 5.0], [41400.0, 2.0], [43000.0, 4.0], [44600.0, 4.0], [43800.0, 3.0], [45400.0, 6.0], [46200.0, 6.0], [47000.0, 4.0], [47800.0, 5.0], [48600.0, 6.0], [50200.0, 4.0], [51000.0, 4.0], [49400.0, 3.0], [52600.0, 10.0], [51800.0, 2.0], [53400.0, 9.0], [54200.0, 3.0], [55000.0, 1.0], [56600.0, 3.0], [55800.0, 3.0], [59000.0, 5.0], [57400.0, 3.0], [58200.0, 1.0], [59800.0, 5.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 699.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8722.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 699.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8722.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 851.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65147264E12, "maxY": 74.0, "series": [{"data": [[1.65147456E12, 74.0], [1.65147618E12, 74.0], [1.65147276E12, 5.023529411764706], [1.65147396E12, 53.01775147928995], [1.65147336E12, 29.047058823529415], [1.65147558E12, 74.0], [1.65147498E12, 74.0], [1.65147438E12, 69.8529411764706], [1.65147378E12, 45.87573964497043], [1.651476E12, 74.0], [1.6514754E12, 74.0], [1.65147318E12, 21.853801169590636], [1.6514748E12, 74.0], [1.6514742E12, 62.65895953757224], [1.65147582E12, 74.0], [1.65147342E12, 31.38650306748467], [1.65147522E12, 74.0], [1.65147462E12, 74.0], [1.65147402E12, 55.40462427745664], [1.65147624E12, 74.0], [1.651473E12, 14.684848484848487], [1.65147564E12, 74.0], [1.6514736E12, 38.65294117647056], [1.65147504E12, 74.0], [1.65147324E12, 24.192982456140356], [1.65147444E12, 72.17647058823533], [1.65147606E12, 74.0], [1.65147384E12, 48.170588235294154], [1.65147546E12, 74.0], [1.65147282E12, 7.4], [1.65147486E12, 74.0], [1.65147426E12, 65.02339181286546], [1.65147306E12, 17.023529411764702], [1.65147366E12, 41.011834319526635], [1.65147588E12, 74.0], [1.65147528E12, 74.0], [1.65147468E12, 74.0], [1.6514763E12, 45.88297872340426], [1.65147264E12, 1.0], [1.65147408E12, 57.85964912280703], [1.6514757E12, 74.0], [1.65147288E12, 9.863095238095239], [1.6514751E12, 74.0], [1.6514745E12, 73.96571428571424], [1.65147348E12, 33.87647058823529], [1.6514739E12, 50.652694610778425], [1.65147612E12, 74.0], [1.65147552E12, 74.0], [1.65147492E12, 74.0], [1.65147432E12, 67.37951807228913], [1.65147594E12, 74.0], [1.6514727E12, 2.7412587412587412], [1.65147372E12, 43.4191616766467], [1.6514733E12, 26.670588235294122], [1.65147534E12, 74.0], [1.65147294E12, 12.198830409356729], [1.65147474E12, 74.0], [1.65147354E12, 36.20833333333333], [1.65147414E12, 60.184523809523824], [1.65147636E12, 1.0], [1.65147576E12, 74.0], [1.65147516E12, 74.0], [1.65147312E12, 19.383720930232567]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65147636E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2016.4444444444443, "minX": 1.0, "maxY": 27044.986301369863, "series": [{"data": [[2.0, 2016.4444444444443], [3.0, 2040.9393939393935], [4.0, 2271.628571428572], [5.0, 2485.465753424658], [6.0, 2896.9583333333344], [7.0, 3208.6111111111104], [8.0, 3592.859154929578], [9.0, 3980.140845070423], [10.0, 4334.828571428572], [11.0, 4633.185714285714], [12.0, 4725.026315789474], [13.0, 5283.371428571429], [14.0, 5960.529411764705], [15.0, 6036.833333333333], [16.0, 6363.055555555558], [17.0, 6570.366197183099], [18.0, 6774.702702702702], [19.0, 7119.438356164385], [20.0, 7640.166666666666], [21.0, 7982.2394366197195], [22.0, 8468.068493150686], [23.0, 8469.338028169015], [24.0, 8872.356164383564], [25.0, 9213.61111111111], [26.0, 9784.214285714284], [27.0, 10013.74324324325], [28.0, 10573.171428571426], [29.0, 10552.267605633804], [30.0, 10603.918918918922], [31.0, 11747.013888888887], [32.0, 12150.723076923081], [33.0, 12751.442857142858], [34.0, 12298.61111111111], [35.0, 12857.750000000002], [36.0, 13558.67142857143], [37.0, 12771.319999999996], [38.0, 14358.300000000001], [39.0, 13387.605633802817], [40.0, 14879.328767123288], [41.0, 13683.249999999996], [42.0, 15897.014492753628], [43.0, 16615.197183098586], [44.0, 15049.408450704228], [45.0, 16767.142857142855], [46.0, 16838.7323943662], [47.0, 15647.813333333332], [48.0, 16923.805555555562], [49.0, 17619.100000000006], [50.0, 19055.068493150688], [51.0, 19140.119402985074], [52.0, 18278.493150684935], [53.0, 19051.901408450703], [54.0, 19024.11111111111], [55.0, 19159.42465753424], [56.0, 19274.89041095891], [57.0, 20248.63888888889], [58.0, 19799.527777777777], [59.0, 19281.77777777778], [60.0, 20728.472222222215], [61.0, 21338.338028169008], [62.0, 22160.27777777779], [63.0, 21065.123287671227], [64.0, 22319.246575342466], [65.0, 24630.763888888898], [66.0, 22939.890410958906], [67.0, 20823.87671232877], [68.0, 21964.12121212121], [69.0, 24302.52777777778], [70.0, 27044.986301369863], [71.0, 24210.30666666666], [72.0, 20726.591549295776], [73.0, 23618.298701298696], [74.0, 26174.730497844033], [1.0, 2476.65625]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[55.63541666666664, 19773.403913551407]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2.6166666666666667, "minX": 1.65147264E12, "maxY": 798.3, "series": [{"data": [[1.65147456E12, 561.0666666666667], [1.65147618E12, 685.6], [1.65147276E12, 530.0166666666667], [1.65147396E12, 528.95], [1.65147336E12, 532.0], [1.65147558E12, 590.9666666666667], [1.65147498E12, 591.7833333333333], [1.65147438E12, 549.3166666666667], [1.65147378E12, 527.65], [1.651476E12, 626.2666666666667], [1.6514754E12, 565.3666666666667], [1.65147318E12, 534.05], [1.6514748E12, 664.9833333333333], [1.6514742E12, 539.8833333333333], [1.65147582E12, 701.0333333333333], [1.65147342E12, 508.5], [1.65147522E12, 604.6666666666666], [1.65147462E12, 599.2333333333333], [1.65147402E12, 540.9833333333333], [1.65147624E12, 617.2], [1.651473E12, 513.7166666666667], [1.65147564E12, 767.7166666666667], [1.6514736E12, 531.5], [1.65147504E12, 665.1666666666666], [1.65147324E12, 533.4], [1.65147444E12, 570.3833333333333], [1.65147606E12, 676.8833333333333], [1.65147384E12, 532.1833333333333], [1.65147546E12, 693.8833333333333], [1.65147282E12, 528.8333333333334], [1.65147486E12, 554.2166666666667], [1.65147426E12, 535.3], [1.65147306E12, 529.3166666666667], [1.65147366E12, 528.65], [1.65147588E12, 741.7], [1.65147528E12, 598.0833333333334], [1.65147468E12, 632.0333333333333], [1.6514763E12, 435.9], [1.65147264E12, 86.8], [1.65147408E12, 534.3333333333334], [1.6514757E12, 550.9], [1.65147288E12, 523.1166666666667], [1.6514751E12, 566.3], [1.6514745E12, 602.3666666666667], [1.65147348E12, 531.7333333333333], [1.6514739E12, 521.8], [1.65147612E12, 798.3], [1.65147552E12, 562.1666666666666], [1.65147492E12, 686.7166666666667], [1.65147432E12, 520.35], [1.65147594E12, 609.3166666666667], [1.6514727E12, 443.8666666666667], [1.65147372E12, 522.8833333333333], [1.6514733E12, 529.9166666666666], [1.65147534E12, 713.7333333333333], [1.65147294E12, 533.4833333333333], [1.65147474E12, 599.8166666666667], [1.65147354E12, 524.0666666666667], [1.65147414E12, 526.1166666666667], [1.65147636E12, 3.3333333333333335], [1.65147576E12, 620.5833333333334], [1.65147516E12, 668.2166666666667], [1.65147312E12, 536.5833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65147456E12, 429.01666666666665], [1.65147618E12, 431.6666666666667], [1.65147276E12, 442.03333333333336], [1.65147396E12, 439.4166666666667], [1.65147336E12, 442.06666666666666], [1.65147558E12, 434.25], [1.65147498E12, 415.76666666666665], [1.65147438E12, 441.8666666666667], [1.65147378E12, 439.31666666666666], [1.651476E12, 431.6], [1.6514754E12, 405.56666666666666], [1.65147318E12, 444.6166666666667], [1.6514748E12, 481.05], [1.6514742E12, 449.68333333333334], [1.65147582E12, 470.78333333333336], [1.65147342E12, 423.71666666666664], [1.65147522E12, 413.35], [1.65147462E12, 447.3], [1.65147402E12, 449.78333333333336], [1.65147624E12, 405.73333333333335], [1.651473E12, 428.95], [1.65147564E12, 496.65], [1.6514736E12, 442.0], [1.65147504E12, 473.26666666666665], [1.65147324E12, 444.55], [1.65147444E12, 441.9], [1.65147606E12, 455.18333333333334], [1.65147384E12, 442.03333333333336], [1.65147546E12, 473.1333333333333], [1.65147282E12, 441.93333333333334], [1.65147486E12, 400.2], [1.65147426E12, 444.6166666666667], [1.65147306E12, 441.93333333333334], [1.65147366E12, 439.4166666666667], [1.65147588E12, 470.5833333333333], [1.65147528E12, 439.51666666666665], [1.65147468E12, 460.0833333333333], [1.6514763E12, 244.2], [1.65147264E12, 72.8], [1.65147408E12, 444.55], [1.6514757E12, 376.9166666666667], [1.65147288E12, 436.76666666666665], [1.6514751E12, 410.73333333333335], [1.6514745E12, 455.0833333333333], [1.65147348E12, 442.03333333333336], [1.6514739E12, 434.15], [1.65147612E12, 478.2], [1.65147552E12, 405.6], [1.65147492E12, 486.48333333333335], [1.65147432E12, 431.6666666666667], [1.65147594E12, 400.2], [1.6514727E12, 371.75], [1.65147372E12, 434.25], [1.6514733E12, 441.9], [1.65147534E12, 473.2], [1.65147294E12, 444.65], [1.65147474E12, 429.0833333333333], [1.65147354E12, 436.7], [1.65147414E12, 436.8333333333333], [1.65147636E12, 2.6166666666666667], [1.65147576E12, 421.1666666666667], [1.65147516E12, 473.23333333333335], [1.65147312E12, 447.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65147636E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 796.3214285714287, "minX": 1.65147264E12, "maxY": 54658.0, "series": [{"data": [[1.65147456E12, 23473.58787878787], [1.65147618E12, 30402.704819277114], [1.65147276E12, 1751.1999999999998], [1.65147396E12, 18221.16568047337], [1.65147336E12, 10206.947058823534], [1.65147558E12, 23279.892215568856], [1.65147498E12, 23569.037499999988], [1.65147438E12, 23937.899999999983], [1.65147378E12, 16060.715976331367], [1.651476E12, 22708.373493975898], [1.6514754E12, 23747.01282051283], [1.65147318E12, 7590.988304093569], [1.6514748E12, 28403.221621621615], [1.6514742E12, 21424.341040462434], [1.65147582E12, 27079.082872928175], [1.65147342E12, 11281.190184049074], [1.65147522E12, 27401.610062893076], [1.65147462E12, 26975.430232558134], [1.65147402E12, 19189.03468208092], [1.65147624E12, 25928.833333333318], [1.651473E12, 5206.775757575757], [1.65147564E12, 29925.87434554976], [1.6514736E12, 13444.835294117642], [1.65147504E12, 27778.74175824177], [1.65147324E12, 8260.81286549708], [1.65147444E12, 25067.93529411764], [1.65147606E12, 25792.165714285715], [1.65147384E12, 16395.29411764706], [1.65147546E12, 28233.33516483517], [1.65147282E12, 2549.1294117647053], [1.65147486E12, 22859.09090909091], [1.65147426E12, 22523.374269005835], [1.65147306E12, 5892.135294117648], [1.65147366E12, 13897.51479289941], [1.65147588E12, 28589.303867403316], [1.65147528E12, 23604.02958579881], [1.65147468E12, 25792.7570621469], [1.6514763E12, 38957.04255319149], [1.65147264E12, 796.3214285714287], [1.65147408E12, 19111.07602339182], [1.6514757E12, 25274.641379310335], [1.65147288E12, 3467.4345238095243], [1.6514751E12, 24755.151898734177], [1.6514745E12, 27215.714285714283], [1.65147348E12, 11548.058823529413], [1.6514739E12, 18111.269461077827], [1.65147612E12, 29079.472826086978], [1.65147552E12, 25870.910256410247], [1.65147492E12, 27366.278074866314], [1.65147432E12, 23374.246987951814], [1.65147594E12, 24525.077922077922], [1.6514727E12, 1088.8181818181824], [1.65147372E12, 15401.862275449106], [1.6514733E12, 9337.147058823533], [1.65147534E12, 29022.340659340665], [1.65147294E12, 4215.964912280702], [1.65147474E12, 25460.866666666672], [1.65147354E12, 12585.184523809528], [1.65147414E12, 21223.33333333333], [1.65147636E12, 54658.0], [1.65147576E12, 23557.537037037044], [1.65147516E12, 25581.538461538457], [1.65147312E12, 6631.255813953491]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65147636E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 796.1785714285714, "minX": 1.65147264E12, "maxY": 54658.0, "series": [{"data": [[1.65147456E12, 23473.57575757576], [1.65147618E12, 30402.698795180717], [1.65147276E12, 1751.1470588235293], [1.65147396E12, 18221.15384615386], [1.65147336E12, 10206.935294117646], [1.65147558E12, 23279.880239520964], [1.65147498E12, 23569.037499999988], [1.65147438E12, 23937.88235294118], [1.65147378E12, 16060.710059171603], [1.651476E12, 22708.367469879504], [1.6514754E12, 23747.006410256407], [1.65147318E12, 7590.9707602339195], [1.6514748E12, 28403.199999999993], [1.6514742E12, 21424.335260115615], [1.65147582E12, 27079.066298342557], [1.65147342E12, 11281.16564417178], [1.65147522E12, 27401.597484276735], [1.65147462E12, 26975.42441860464], [1.65147402E12, 19189.028901734095], [1.65147624E12, 25928.820512820508], [1.651473E12, 5206.751515151517], [1.65147564E12, 29925.863874345556], [1.6514736E12, 13444.805882352946], [1.65147504E12, 27778.736263736268], [1.65147324E12, 8260.807017543857], [1.65147444E12, 25067.905882352945], [1.65147606E12, 25792.160000000007], [1.65147384E12, 16395.29411764706], [1.65147546E12, 28233.318681318684], [1.65147282E12, 2549.082352941176], [1.65147486E12, 22859.077922077922], [1.65147426E12, 22523.356725146205], [1.65147306E12, 5892.117647058826], [1.65147366E12, 13897.497041420123], [1.65147588E12, 28589.303867403316], [1.65147528E12, 23604.023668639038], [1.65147468E12, 25792.723163841805], [1.6514763E12, 38957.031914893625], [1.65147264E12, 796.1785714285714], [1.65147408E12, 19111.05847953216], [1.6514757E12, 25274.634482758614], [1.65147288E12, 3467.3988095238096], [1.6514751E12, 24755.151898734177], [1.6514745E12, 27215.708571428575], [1.65147348E12, 11548.052941176467], [1.6514739E12, 18111.25748502994], [1.65147612E12, 29079.46195652173], [1.65147552E12, 25870.910256410247], [1.65147492E12, 27366.267379679153], [1.65147432E12, 23374.228915662654], [1.65147594E12, 24525.077922077922], [1.6514727E12, 1088.7482517482515], [1.65147372E12, 15401.862275449106], [1.6514733E12, 9337.135294117648], [1.65147534E12, 29022.33516483517], [1.65147294E12, 4215.923976608187], [1.65147474E12, 25460.866666666672], [1.65147354E12, 12585.16666666667], [1.65147414E12, 21223.33333333333], [1.65147636E12, 54658.0], [1.65147576E12, 23557.51234567902], [1.65147516E12, 25581.538461538457], [1.65147312E12, 6631.238372093026]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65147636E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.4680851063829765, "minX": 1.65147264E12, "maxY": 29.03571428571429, "series": [{"data": [[1.65147456E12, 6.793939393939395], [1.65147618E12, 7.10240963855422], [1.65147276E12, 9.341176470588238], [1.65147396E12, 7.118343195266269], [1.65147336E12, 7.282352941176469], [1.65147558E12, 7.053892215568863], [1.65147498E12, 6.687500000000002], [1.65147438E12, 6.970588235294119], [1.65147378E12, 7.047337278106511], [1.651476E12, 6.698795180722894], [1.6514754E12, 7.352564102564105], [1.65147318E12, 7.660818713450289], [1.6514748E12, 6.935135135135133], [1.6514742E12, 7.046242774566477], [1.65147582E12, 6.690607734806628], [1.65147342E12, 7.441717791411043], [1.65147522E12, 6.999999999999998], [1.65147462E12, 7.273255813953485], [1.65147402E12, 6.780346820809249], [1.65147624E12, 6.641025641025641], [1.651473E12, 8.230303030303036], [1.65147564E12, 6.910994764397907], [1.6514736E12, 7.305882352941176], [1.65147504E12, 7.0989010989010985], [1.65147324E12, 7.649122807017543], [1.65147444E12, 6.899999999999999], [1.65147606E12, 6.805714285714284], [1.65147384E12, 7.158823529411767], [1.65147546E12, 6.9065934065934105], [1.65147282E12, 8.635294117647062], [1.65147486E12, 7.01948051948052], [1.65147426E12, 6.976608187134502], [1.65147306E12, 7.870588235294119], [1.65147366E12, 7.000000000000001], [1.65147588E12, 6.812154696132598], [1.65147528E12, 6.757396449704143], [1.65147468E12, 7.033898305084749], [1.6514763E12, 6.4680851063829765], [1.65147264E12, 29.03571428571429], [1.65147408E12, 6.923976608187138], [1.6514757E12, 6.848275862068963], [1.65147288E12, 8.946428571428568], [1.6514751E12, 6.886075949367086], [1.6514745E12, 7.285714285714285], [1.65147348E12, 7.076470588235293], [1.6514739E12, 7.041916167664671], [1.65147612E12, 6.847826086956523], [1.65147552E12, 6.730769230769234], [1.65147492E12, 6.87700534759358], [1.65147432E12, 7.02409638554217], [1.65147594E12, 6.870129870129872], [1.6514727E12, 10.930069930069932], [1.65147372E12, 6.856287425149698], [1.6514733E12, 7.864705882352938], [1.65147534E12, 6.8296703296703285], [1.65147294E12, 7.935672514619874], [1.65147474E12, 6.6606060606060655], [1.65147354E12, 6.940476190476187], [1.65147414E12, 7.3750000000000036], [1.65147636E12, 7.0], [1.65147576E12, 6.876543209876543], [1.65147516E12, 6.8516483516483495], [1.65147312E12, 7.784883720930233]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65147636E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 558.0, "minX": 1.65147264E12, "maxY": 60231.0, "series": [{"data": [[1.65147456E12, 59010.0], [1.65147618E12, 59899.0], [1.65147276E12, 3837.0], [1.65147396E12, 48148.0], [1.65147336E12, 20767.0], [1.65147558E12, 59241.0], [1.65147498E12, 59788.0], [1.65147438E12, 59985.0], [1.65147378E12, 38714.0], [1.651476E12, 59790.0], [1.6514754E12, 58515.0], [1.65147318E12, 15454.0], [1.6514748E12, 60231.0], [1.6514742E12, 56684.0], [1.65147582E12, 59225.0], [1.65147342E12, 25662.0], [1.65147522E12, 60107.0], [1.65147462E12, 59979.0], [1.65147402E12, 49256.0], [1.65147624E12, 58933.0], [1.651473E12, 10766.0], [1.65147564E12, 59677.0], [1.6514736E12, 33647.0], [1.65147504E12, 59011.0], [1.65147324E12, 17241.0], [1.65147444E12, 59562.0], [1.65147606E12, 59173.0], [1.65147384E12, 40271.0], [1.65147546E12, 59133.0], [1.65147282E12, 5734.0], [1.65147486E12, 59816.0], [1.65147426E12, 57695.0], [1.65147306E12, 12462.0], [1.65147366E12, 35622.0], [1.65147588E12, 59942.0], [1.65147528E12, 59816.0], [1.65147468E12, 59592.0], [1.6514763E12, 59167.0], [1.65147264E12, 980.0], [1.65147408E12, 53891.0], [1.6514757E12, 60176.0], [1.65147288E12, 7644.0], [1.6514751E12, 59692.0], [1.6514745E12, 59584.0], [1.65147348E12, 27144.0], [1.6514739E12, 47222.0], [1.65147612E12, 59831.0], [1.65147552E12, 59528.0], [1.65147492E12, 59194.0], [1.65147432E12, 58521.0], [1.65147594E12, 58983.0], [1.6514727E12, 2256.0], [1.65147372E12, 37363.0], [1.6514733E12, 18179.0], [1.65147534E12, 59660.0], [1.65147294E12, 8951.0], [1.65147474E12, 59581.0], [1.65147354E12, 29037.0], [1.65147414E12, 55913.0], [1.65147636E12, 54658.0], [1.65147576E12, 59928.0], [1.65147516E12, 58938.0], [1.65147312E12, 14072.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65147456E12, 38850.8], [1.65147618E12, 53996.700000000004], [1.65147276E12, 2789.0], [1.65147396E12, 35479.0], [1.65147336E12, 17623.0], [1.65147558E12, 41875.299999999996], [1.65147498E12, 44215.79999999999], [1.65147438E12, 48699.0], [1.65147378E12, 30597.0], [1.651476E12, 45201.0], [1.6514754E12, 41967.200000000004], [1.65147318E12, 13012.800000000001], [1.6514748E12, 48515.0], [1.6514742E12, 44814.799999999996], [1.65147582E12, 45359.8], [1.65147342E12, 19667.4], [1.65147522E12, 50592.6], [1.65147462E12, 50074.40000000001], [1.65147402E12, 41455.399999999994], [1.65147624E12, 48060.600000000006], [1.651473E12, 8904.8], [1.65147564E12, 50863.0], [1.6514736E12, 26784.7], [1.65147504E12, 46653.20000000001], [1.65147324E12, 14501.2], [1.65147444E12, 49418.90000000001], [1.65147606E12, 45519.2], [1.65147384E12, 33256.8], [1.65147546E12, 47082.00000000001], [1.65147282E12, 4312.800000000001], [1.65147486E12, 42306.20000000001], [1.65147426E12, 45297.8], [1.65147306E12, 10027.7], [1.65147366E12, 28197.0], [1.65147588E12, 52135.0], [1.65147528E12, 41011.10000000001], [1.65147468E12, 44925.3], [1.6514763E12, 53680.4], [1.65147264E12, 897.1], [1.65147408E12, 42571.000000000015], [1.6514757E12, 46500.50000000001], [1.65147288E12, 6005.8], [1.6514751E12, 47095.0], [1.6514745E12, 49015.0], [1.65147348E12, 21738.5], [1.6514739E12, 37946.8], [1.65147612E12, 49114.00000000001], [1.65147552E12, 49603.00000000001], [1.65147492E12, 47316.20000000001], [1.65147432E12, 47995.80000000002], [1.65147594E12, 45230.899999999994], [1.6514727E12, 1495.1999999999998], [1.65147372E12, 30458.8], [1.6514733E12, 16367.300000000001], [1.65147534E12, 50251.59999999999], [1.65147294E12, 7122.800000000001], [1.65147474E12, 49772.60000000001], [1.65147354E12, 23331.8], [1.65147414E12, 43902.19999999999], [1.65147636E12, 54658.0], [1.65147576E12, 44778.70000000001], [1.65147516E12, 43717.0], [1.65147312E12, 11404.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65147456E12, 58546.88], [1.65147618E12, 59888.36], [1.65147276E12, 3800.0799999999995], [1.65147396E12, 47415.80000000001], [1.65147336E12, 20368.689999999995], [1.65147558E12, 58584.39999999999], [1.65147498E12, 59785.36], [1.65147438E12, 59812.75], [1.65147378E12, 37764.80000000002], [1.651476E12, 59188.08000000001], [1.6514754E12, 58002.00000000001], [1.65147318E12, 14975.2], [1.6514748E12, 59669.899999999994], [1.6514742E12, 56219.27999999999], [1.65147582E12, 58600.31999999999], [1.65147342E12, 24971.439999999984], [1.65147522E12, 59821.74], [1.65147462E12, 59774.95], [1.65147402E12, 48494.53999999999], [1.65147624E12, 58854.03999999999], [1.651473E12, 10676.24], [1.65147564E12, 59507.170000000006], [1.6514736E12, 33314.719999999994], [1.65147504E12, 58223.64], [1.65147324E12, 17190.6], [1.65147444E12, 59259.439999999995], [1.65147606E12, 58768.59], [1.65147384E12, 39700.869999999995], [1.65147546E12, 58509.51999999999], [1.65147282E12, 5394.619999999996], [1.65147486E12, 59301.450000000004], [1.65147426E12, 57059.96], [1.65147306E12, 12185.809999999998], [1.65147366E12, 35206.90000000001], [1.65147588E12, 59839.2], [1.65147528E12, 58636.370000000024], [1.65147468E12, 58906.359999999986], [1.6514763E12, 59167.0], [1.65147264E12, 980.0], [1.65147408E12, 52973.72], [1.6514757E12, 59890.799999999996], [1.65147288E12, 7274.160000000002], [1.6514751E12, 59374.399999999994], [1.6514745E12, 59092.600000000006], [1.65147348E12, 27053.829999999998], [1.6514739E12, 45928.639999999985], [1.65147612E12, 59173.27999999998], [1.65147552E12, 59307.34], [1.65147492E12, 58185.87999999999], [1.65147432E12, 57992.37000000001], [1.65147594E12, 58664.130000000005], [1.6514727E12, 2172.8400000000006], [1.65147372E12, 37306.56], [1.6514733E12, 17965.289999999997], [1.65147534E12, 59304.259999999995], [1.65147294E12, 8679.560000000001], [1.65147474E12, 59217.22], [1.65147354E12, 28828.62], [1.65147414E12, 54809.69], [1.65147636E12, 54658.0], [1.65147576E12, 59544.23999999998], [1.65147516E12, 58167.00000000001], [1.65147312E12, 13783.650000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65147456E12, 49880.79999999999], [1.65147618E12, 57505.6], [1.65147276E12, 3019.2499999999995], [1.65147396E12, 42580.0], [1.65147336E12, 19001.249999999996], [1.65147558E12, 50754.99999999997], [1.65147498E12, 53806.99999999997], [1.65147438E12, 55134.5], [1.65147378E12, 34685.5], [1.651476E12, 52942.899999999994], [1.6514754E12, 50111.19999999999], [1.65147318E12, 13664.8], [1.6514748E12, 55137.0], [1.6514742E12, 51244.69999999999], [1.65147582E12, 51985.999999999985], [1.65147342E12, 21972.6], [1.65147522E12, 55425.6], [1.65147462E12, 55345.1], [1.65147402E12, 45594.799999999996], [1.65147624E12, 53932.69999999999], [1.651473E12, 9419.299999999997], [1.65147564E12, 55535.2], [1.6514736E12, 29630.399999999998], [1.65147504E12, 52194.59999999999], [1.65147324E12, 15817.800000000001], [1.65147444E12, 54877.64999999999], [1.65147606E12, 52736.600000000006], [1.65147384E12, 36920.35], [1.65147546E12, 51767.4], [1.65147282E12, 4793.9], [1.65147486E12, 51406.14999999999], [1.65147426E12, 51918.200000000004], [1.65147306E12, 10816.699999999999], [1.65147366E12, 32340.5], [1.65147588E12, 56326.0], [1.65147528E12, 49600.94999999998], [1.65147468E12, 50334.45], [1.6514763E12, 56761.799999999996], [1.65147264E12, 943.0999999999998], [1.65147408E12, 48284.40000000001], [1.6514757E12, 54257.049999999996], [1.65147288E12, 6485.65], [1.6514751E12, 55620.0], [1.6514745E12, 54824.0], [1.65147348E12, 24601.199999999997], [1.6514739E12, 41778.2], [1.65147612E12, 53069.399999999994], [1.65147552E12, 55302.9], [1.65147492E12, 53069.50000000001], [1.65147432E12, 53192.200000000004], [1.65147594E12, 52210.14999999999], [1.6514727E12, 1930.3999999999996], [1.65147372E12, 34599.399999999994], [1.6514733E12, 17120.8], [1.65147534E12, 54919.14999999999], [1.65147294E12, 7809.2], [1.65147474E12, 55637.55], [1.65147354E12, 26217.849999999995], [1.65147414E12, 49845.34999999999], [1.65147636E12, 54658.0], [1.65147576E12, 53031.14999999998], [1.65147516E12, 49786.0], [1.65147312E12, 12433.899999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65147456E12, 1156.0], [1.65147618E12, 573.0], [1.65147276E12, 775.0], [1.65147396E12, 1015.0], [1.65147336E12, 926.0], [1.65147558E12, 1076.0], [1.65147498E12, 1048.0], [1.65147438E12, 1114.0], [1.65147378E12, 1026.0], [1.651476E12, 858.0], [1.6514754E12, 1145.0], [1.65147318E12, 976.0], [1.6514748E12, 1106.0], [1.6514742E12, 725.0], [1.65147582E12, 786.0], [1.65147342E12, 910.0], [1.65147522E12, 926.0], [1.65147462E12, 927.0], [1.65147402E12, 947.0], [1.65147624E12, 558.0], [1.651473E12, 1123.0], [1.65147564E12, 798.0], [1.6514736E12, 986.0], [1.65147504E12, 935.0], [1.65147324E12, 942.0], [1.65147444E12, 806.0], [1.65147606E12, 761.0], [1.65147384E12, 1136.0], [1.65147546E12, 892.0], [1.65147282E12, 760.0], [1.65147486E12, 1029.0], [1.65147426E12, 976.0], [1.65147306E12, 1093.0], [1.65147366E12, 949.0], [1.65147588E12, 917.0], [1.65147528E12, 854.0], [1.65147468E12, 606.0], [1.6514763E12, 773.0], [1.65147264E12, 739.0], [1.65147408E12, 907.0], [1.6514757E12, 1345.0], [1.65147288E12, 835.0], [1.6514751E12, 801.0], [1.6514745E12, 780.0], [1.65147348E12, 797.0], [1.6514739E12, 974.0], [1.65147612E12, 633.0], [1.65147552E12, 1378.0], [1.65147492E12, 1050.0], [1.65147432E12, 1184.0], [1.65147594E12, 901.0], [1.6514727E12, 642.0], [1.65147372E12, 941.0], [1.6514733E12, 801.0], [1.65147534E12, 905.0], [1.65147294E12, 847.0], [1.65147474E12, 833.0], [1.65147354E12, 974.0], [1.65147414E12, 941.0], [1.65147636E12, 54658.0], [1.65147576E12, 1057.0], [1.65147516E12, 1049.0], [1.65147312E12, 796.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65147456E12, 19455.0], [1.65147618E12, 9432.0], [1.65147276E12, 1517.0], [1.65147396E12, 16738.0], [1.65147336E12, 9880.0], [1.65147558E12, 15409.0], [1.65147498E12, 16517.0], [1.65147438E12, 19639.5], [1.65147378E12, 15566.0], [1.651476E12, 7657.0], [1.6514754E12, 16551.0], [1.65147318E12, 7532.0], [1.6514748E12, 21410.0], [1.6514742E12, 19297.0], [1.65147582E12, 11519.0], [1.65147342E12, 11082.0], [1.65147522E12, 16124.0], [1.65147462E12, 18965.0], [1.65147402E12, 16750.0], [1.65147624E12, 8783.0], [1.651473E12, 5147.0], [1.65147564E12, 14065.5], [1.6514736E12, 12500.5], [1.65147504E12, 19789.0], [1.65147324E12, 8163.0], [1.65147444E12, 18905.0], [1.65147606E12, 8116.0], [1.65147384E12, 15362.5], [1.65147546E12, 17202.0], [1.65147282E12, 2448.0], [1.65147486E12, 16970.5], [1.65147426E12, 20083.0], [1.65147306E12, 5769.5], [1.65147366E12, 12743.0], [1.65147588E12, 10205.0], [1.65147528E12, 16351.0], [1.65147468E12, 19835.0], [1.6514763E12, 19315.0], [1.65147264E12, 781.5], [1.65147408E12, 16518.0], [1.6514757E12, 13014.0], [1.65147288E12, 3354.0], [1.6514751E12, 15998.0], [1.6514745E12, 22141.0], [1.65147348E12, 10987.5], [1.6514739E12, 15985.0], [1.65147612E12, 7782.0], [1.65147552E12, 14364.0], [1.65147492E12, 18500.0], [1.65147432E12, 21325.0], [1.65147594E12, 10994.0], [1.6514727E12, 1014.0], [1.65147372E12, 14290.0], [1.6514733E12, 9630.0], [1.65147534E12, 16062.0], [1.65147294E12, 4185.0], [1.65147474E12, 17155.5], [1.65147354E12, 12180.5], [1.65147414E12, 19204.0], [1.65147636E12, 54658.0], [1.65147576E12, 11939.5], [1.65147516E12, 17993.0], [1.65147312E12, 6675.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65147636E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10833.5, "minX": 1.0, "maxY": 60183.0, "series": [{"data": [[1.0, 10948.5], [2.0, 10833.5], [4.0, 12575.5], [8.0, 57802.0], [5.0, 22141.0], [3.0, 11712.0], [6.0, 29827.0], [7.0, 38216.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60183.0], [4.0, 60013.0], [8.0, 60009.0], [1.0, 60009.0], [5.0, 60011.0], [3.0, 60010.0], [6.0, 60012.0], [7.0, 60009.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10833.5, "minX": 1.0, "maxY": 60183.0, "series": [{"data": [[1.0, 10948.5], [2.0, 10833.5], [4.0, 12575.5], [8.0, 57802.0], [5.0, 22141.0], [3.0, 11712.0], [6.0, 29827.0], [7.0, 38216.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60183.0], [4.0, 60013.0], [8.0, 60009.0], [1.0, 60009.0], [5.0, 60011.0], [3.0, 60010.0], [6.0, 60012.0], [7.0, 60009.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.65147264E12, "maxY": 3.183333333333333, "series": [{"data": [[1.65147456E12, 2.75], [1.65147618E12, 2.7666666666666666], [1.65147276E12, 2.8666666666666667], [1.65147396E12, 2.85], [1.65147336E12, 2.8666666666666667], [1.65147558E12, 2.783333333333333], [1.65147498E12, 2.6666666666666665], [1.65147438E12, 2.8666666666666667], [1.65147378E12, 2.85], [1.651476E12, 2.7666666666666666], [1.6514754E12, 2.6], [1.65147318E12, 2.8833333333333333], [1.6514748E12, 3.0833333333333335], [1.6514742E12, 2.933333333333333], [1.65147582E12, 3.0166666666666666], [1.65147342E12, 2.7666666666666666], [1.65147522E12, 2.65], [1.65147462E12, 2.8666666666666667], [1.65147402E12, 2.933333333333333], [1.65147624E12, 2.6], [1.651473E12, 2.8], [1.65147564E12, 3.183333333333333], [1.6514736E12, 2.8833333333333333], [1.65147504E12, 3.033333333333333], [1.65147324E12, 2.8833333333333333], [1.65147444E12, 2.8666666666666667], [1.65147606E12, 2.9166666666666665], [1.65147384E12, 2.8666666666666667], [1.65147546E12, 3.033333333333333], [1.65147282E12, 2.8833333333333333], [1.65147486E12, 2.566666666666667], [1.65147426E12, 2.8833333333333333], [1.65147306E12, 2.8666666666666667], [1.65147366E12, 2.85], [1.65147588E12, 3.0166666666666666], [1.65147528E12, 2.816666666666667], [1.65147468E12, 2.95], [1.6514763E12, 0.35], [1.65147264E12, 0.48333333333333334], [1.65147408E12, 2.8833333333333333], [1.6514757E12, 2.4166666666666665], [1.65147288E12, 2.8333333333333335], [1.6514751E12, 2.6333333333333333], [1.6514745E12, 2.933333333333333], [1.65147348E12, 2.8666666666666667], [1.6514739E12, 2.8333333333333335], [1.65147612E12, 3.066666666666667], [1.65147552E12, 2.6], [1.65147492E12, 3.1166666666666667], [1.65147432E12, 2.816666666666667], [1.65147594E12, 2.566666666666667], [1.6514727E12, 2.433333333333333], [1.65147372E12, 2.8333333333333335], [1.6514733E12, 2.8833333333333333], [1.65147534E12, 3.033333333333333], [1.65147294E12, 2.8833333333333333], [1.65147474E12, 2.75], [1.65147354E12, 2.8333333333333335], [1.65147414E12, 2.8333333333333335], [1.65147576E12, 2.7], [1.65147516E12, 3.033333333333333], [1.65147312E12, 2.9166666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6514763E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65147264E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65147456E12, 2.5833333333333335], [1.65147618E12, 1.9666666666666666], [1.65147276E12, 2.8333333333333335], [1.65147396E12, 2.816666666666667], [1.65147336E12, 2.8333333333333335], [1.65147558E12, 2.466666666666667], [1.65147498E12, 2.3833333333333333], [1.65147438E12, 2.7333333333333334], [1.65147378E12, 2.816666666666667], [1.651476E12, 2.283333333333333], [1.6514754E12, 2.283333333333333], [1.65147318E12, 2.85], [1.6514748E12, 2.683333333333333], [1.6514742E12, 2.8833333333333333], [1.65147582E12, 2.4166666666666665], [1.65147342E12, 2.716666666666667], [1.65147522E12, 2.216666666666667], [1.65147462E12, 2.533333333333333], [1.65147402E12, 2.8833333333333333], [1.65147624E12, 2.0], [1.651473E12, 2.75], [1.65147564E12, 2.5], [1.6514736E12, 2.8333333333333335], [1.65147504E12, 2.5833333333333335], [1.65147324E12, 2.85], [1.65147444E12, 2.6666666666666665], [1.65147606E12, 2.2666666666666666], [1.65147384E12, 2.8333333333333335], [1.65147546E12, 2.5166666666666666], [1.65147282E12, 2.8333333333333335], [1.65147486E12, 2.3333333333333335], [1.65147426E12, 2.85], [1.65147306E12, 2.8333333333333335], [1.65147366E12, 2.816666666666667], [1.65147588E12, 2.316666666666667], [1.65147528E12, 2.5], [1.65147468E12, 2.6666666666666665], [1.6514763E12, 0.95], [1.65147264E12, 0.4666666666666667], [1.65147408E12, 2.85], [1.6514757E12, 2.033333333333333], [1.65147288E12, 2.8], [1.6514751E12, 2.316666666666667], [1.6514745E12, 2.65], [1.65147348E12, 2.8333333333333335], [1.6514739E12, 2.783333333333333], [1.65147612E12, 2.25], [1.65147552E12, 2.216666666666667], [1.65147492E12, 2.683333333333333], [1.65147432E12, 2.7666666666666666], [1.65147594E12, 2.1], [1.6514727E12, 2.3833333333333333], [1.65147372E12, 2.783333333333333], [1.6514733E12, 2.8333333333333335], [1.65147534E12, 2.466666666666667], [1.65147294E12, 2.85], [1.65147474E12, 2.433333333333333], [1.65147354E12, 2.8], [1.65147414E12, 2.8], [1.65147636E12, 0.016666666666666666], [1.65147576E12, 2.3], [1.65147516E12, 2.65], [1.65147312E12, 2.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65147456E12, 0.16666666666666666], [1.65147618E12, 0.8], [1.65147588E12, 0.7], [1.65147558E12, 0.31666666666666665], [1.65147528E12, 0.31666666666666665], [1.65147498E12, 0.2833333333333333], [1.65147468E12, 0.2833333333333333], [1.6514763E12, 0.6166666666666667], [1.65147438E12, 0.1], [1.651476E12, 0.48333333333333334], [1.6514757E12, 0.38333333333333336], [1.6514754E12, 0.31666666666666665], [1.6514751E12, 0.31666666666666665], [1.6514748E12, 0.4], [1.6514745E12, 0.26666666666666666], [1.65147582E12, 0.6], [1.65147612E12, 0.8166666666666667], [1.65147552E12, 0.38333333333333336], [1.65147522E12, 0.43333333333333335], [1.65147492E12, 0.43333333333333335], [1.65147462E12, 0.3333333333333333], [1.65147594E12, 0.4666666666666667], [1.65147624E12, 0.6], [1.65147564E12, 0.6833333333333333], [1.65147534E12, 0.5666666666666667], [1.65147504E12, 0.45], [1.65147474E12, 0.31666666666666665], [1.65147444E12, 0.16666666666666666], [1.65147606E12, 0.65], [1.65147576E12, 0.4], [1.65147546E12, 0.5166666666666667], [1.65147516E12, 0.38333333333333336], [1.65147486E12, 0.23333333333333334]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65147636E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65147264E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65147456E12, 2.5833333333333335], [1.65147618E12, 1.9666666666666666], [1.65147276E12, 2.8333333333333335], [1.65147396E12, 2.816666666666667], [1.65147336E12, 2.8333333333333335], [1.65147558E12, 2.466666666666667], [1.65147498E12, 2.3833333333333333], [1.65147438E12, 2.7333333333333334], [1.65147378E12, 2.816666666666667], [1.651476E12, 2.283333333333333], [1.6514754E12, 2.283333333333333], [1.65147318E12, 2.85], [1.6514748E12, 2.683333333333333], [1.6514742E12, 2.8833333333333333], [1.65147582E12, 2.4166666666666665], [1.65147342E12, 2.716666666666667], [1.65147522E12, 2.216666666666667], [1.65147462E12, 2.533333333333333], [1.65147402E12, 2.8833333333333333], [1.65147624E12, 2.0], [1.651473E12, 2.75], [1.65147564E12, 2.5], [1.6514736E12, 2.8333333333333335], [1.65147504E12, 2.5833333333333335], [1.65147324E12, 2.85], [1.65147444E12, 2.6666666666666665], [1.65147606E12, 2.2666666666666666], [1.65147384E12, 2.8333333333333335], [1.65147546E12, 2.5166666666666666], [1.65147282E12, 2.8333333333333335], [1.65147486E12, 2.3333333333333335], [1.65147426E12, 2.85], [1.65147306E12, 2.8333333333333335], [1.65147366E12, 2.816666666666667], [1.65147588E12, 2.316666666666667], [1.65147528E12, 2.5], [1.65147468E12, 2.6666666666666665], [1.6514763E12, 0.95], [1.65147264E12, 0.4666666666666667], [1.65147408E12, 2.85], [1.6514757E12, 2.033333333333333], [1.65147288E12, 2.8], [1.6514751E12, 2.316666666666667], [1.6514745E12, 2.65], [1.65147348E12, 2.8333333333333335], [1.6514739E12, 2.783333333333333], [1.65147612E12, 2.25], [1.65147552E12, 2.216666666666667], [1.65147492E12, 2.683333333333333], [1.65147432E12, 2.7666666666666666], [1.65147594E12, 2.1], [1.6514727E12, 2.3833333333333333], [1.65147372E12, 2.783333333333333], [1.6514733E12, 2.8333333333333335], [1.65147534E12, 2.466666666666667], [1.65147294E12, 2.85], [1.65147474E12, 2.433333333333333], [1.65147354E12, 2.8], [1.65147414E12, 2.8], [1.65147636E12, 0.016666666666666666], [1.65147576E12, 2.3], [1.65147516E12, 2.65], [1.65147312E12, 2.8666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65147456E12, 0.16666666666666666], [1.65147618E12, 0.8], [1.65147588E12, 0.7], [1.65147558E12, 0.31666666666666665], [1.65147528E12, 0.31666666666666665], [1.65147498E12, 0.2833333333333333], [1.65147468E12, 0.2833333333333333], [1.6514763E12, 0.6166666666666667], [1.65147438E12, 0.1], [1.651476E12, 0.48333333333333334], [1.6514757E12, 0.38333333333333336], [1.6514754E12, 0.31666666666666665], [1.6514751E12, 0.31666666666666665], [1.6514748E12, 0.4], [1.6514745E12, 0.26666666666666666], [1.65147582E12, 0.6], [1.65147612E12, 0.8166666666666667], [1.65147552E12, 0.38333333333333336], [1.65147522E12, 0.43333333333333335], [1.65147492E12, 0.43333333333333335], [1.65147462E12, 0.3333333333333333], [1.65147594E12, 0.4666666666666667], [1.65147624E12, 0.6], [1.65147564E12, 0.6833333333333333], [1.65147534E12, 0.5666666666666667], [1.65147504E12, 0.45], [1.65147474E12, 0.31666666666666665], [1.65147444E12, 0.16666666666666666], [1.65147606E12, 0.65], [1.65147576E12, 0.4], [1.65147546E12, 0.5166666666666667], [1.65147516E12, 0.38333333333333336], [1.65147486E12, 0.23333333333333334]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65147636E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65147264E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65147456E12, 2.5833333333333335], [1.65147618E12, 1.9666666666666666], [1.65147276E12, 2.8333333333333335], [1.65147396E12, 2.816666666666667], [1.65147336E12, 2.8333333333333335], [1.65147558E12, 2.466666666666667], [1.65147498E12, 2.3833333333333333], [1.65147438E12, 2.7333333333333334], [1.65147378E12, 2.816666666666667], [1.651476E12, 2.283333333333333], [1.6514754E12, 2.283333333333333], [1.65147318E12, 2.85], [1.6514748E12, 2.683333333333333], [1.6514742E12, 2.8833333333333333], [1.65147582E12, 2.4166666666666665], [1.65147342E12, 2.716666666666667], [1.65147522E12, 2.216666666666667], [1.65147462E12, 2.533333333333333], [1.65147402E12, 2.8833333333333333], [1.65147624E12, 2.0], [1.651473E12, 2.75], [1.65147564E12, 2.5], [1.6514736E12, 2.8333333333333335], [1.65147504E12, 2.5833333333333335], [1.65147324E12, 2.85], [1.65147444E12, 2.6666666666666665], [1.65147606E12, 2.2666666666666666], [1.65147384E12, 2.8333333333333335], [1.65147546E12, 2.5166666666666666], [1.65147282E12, 2.8333333333333335], [1.65147486E12, 2.3333333333333335], [1.65147426E12, 2.85], [1.65147306E12, 2.8333333333333335], [1.65147366E12, 2.816666666666667], [1.65147588E12, 2.316666666666667], [1.65147528E12, 2.5], [1.65147468E12, 2.6666666666666665], [1.6514763E12, 0.95], [1.65147264E12, 0.4666666666666667], [1.65147408E12, 2.85], [1.6514757E12, 2.033333333333333], [1.65147288E12, 2.8], [1.6514751E12, 2.316666666666667], [1.6514745E12, 2.65], [1.65147348E12, 2.8333333333333335], [1.6514739E12, 2.783333333333333], [1.65147612E12, 2.25], [1.65147552E12, 2.216666666666667], [1.65147492E12, 2.683333333333333], [1.65147432E12, 2.7666666666666666], [1.65147594E12, 2.1], [1.6514727E12, 2.3833333333333333], [1.65147372E12, 2.783333333333333], [1.6514733E12, 2.8333333333333335], [1.65147534E12, 2.466666666666667], [1.65147294E12, 2.85], [1.65147474E12, 2.433333333333333], [1.65147354E12, 2.8], [1.65147414E12, 2.8], [1.65147636E12, 0.016666666666666666], [1.65147576E12, 2.3], [1.65147516E12, 2.65], [1.65147312E12, 2.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65147456E12, 0.16666666666666666], [1.65147618E12, 0.8], [1.65147588E12, 0.7], [1.65147558E12, 0.31666666666666665], [1.65147528E12, 0.31666666666666665], [1.65147498E12, 0.2833333333333333], [1.65147468E12, 0.2833333333333333], [1.6514763E12, 0.6166666666666667], [1.65147438E12, 0.1], [1.651476E12, 0.48333333333333334], [1.6514757E12, 0.38333333333333336], [1.6514754E12, 0.31666666666666665], [1.6514751E12, 0.31666666666666665], [1.6514748E12, 0.4], [1.6514745E12, 0.26666666666666666], [1.65147582E12, 0.6], [1.65147612E12, 0.8166666666666667], [1.65147552E12, 0.38333333333333336], [1.65147522E12, 0.43333333333333335], [1.65147492E12, 0.43333333333333335], [1.65147462E12, 0.3333333333333333], [1.65147594E12, 0.4666666666666667], [1.65147624E12, 0.6], [1.65147564E12, 0.6833333333333333], [1.65147534E12, 0.5666666666666667], [1.65147504E12, 0.45], [1.65147474E12, 0.31666666666666665], [1.65147444E12, 0.16666666666666666], [1.65147606E12, 0.65], [1.65147576E12, 0.4], [1.65147546E12, 0.5166666666666667], [1.65147516E12, 0.38333333333333336], [1.65147486E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65147636E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


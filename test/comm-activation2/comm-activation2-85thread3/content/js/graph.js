/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 740.0, "minX": 0.0, "maxY": 60406.0, "series": [{"data": [[0.0, 740.0], [0.1, 740.0], [0.2, 847.0], [0.3, 854.0], [0.4, 855.0], [0.5, 879.0], [0.6, 907.0], [0.7, 907.0], [0.8, 949.0], [0.9, 978.0], [1.0, 990.0], [1.1, 997.0], [1.2, 1068.0], [1.3, 1068.0], [1.4, 1081.0], [1.5, 1124.0], [1.6, 1131.0], [1.7, 1153.0], [1.8, 1222.0], [1.9, 1222.0], [2.0, 1251.0], [2.1, 1259.0], [2.2, 1262.0], [2.3, 1271.0], [2.4, 1282.0], [2.5, 1282.0], [2.6, 1296.0], [2.7, 1296.0], [2.8, 1304.0], [2.9, 1305.0], [3.0, 1312.0], [3.1, 1312.0], [3.2, 1325.0], [3.3, 1352.0], [3.4, 1354.0], [3.5, 1355.0], [3.6, 1357.0], [3.7, 1373.0], [3.8, 1373.0], [3.9, 1374.0], [4.0, 1385.0], [4.1, 1396.0], [4.2, 1398.0], [4.3, 1402.0], [4.4, 1402.0], [4.5, 1413.0], [4.6, 1428.0], [4.7, 1467.0], [4.8, 1468.0], [4.9, 1496.0], [5.0, 1496.0], [5.1, 1547.0], [5.2, 1560.0], [5.3, 1617.0], [5.4, 1622.0], [5.5, 1656.0], [5.6, 1656.0], [5.7, 1685.0], [5.8, 1712.0], [5.9, 1712.0], [6.0, 1752.0], [6.1, 1769.0], [6.2, 1769.0], [6.3, 1788.0], [6.4, 1797.0], [6.5, 1843.0], [6.6, 1909.0], [6.7, 1914.0], [6.8, 1914.0], [6.9, 1927.0], [7.0, 1932.0], [7.1, 1934.0], [7.2, 1936.0], [7.3, 1995.0], [7.4, 2017.0], [7.5, 2017.0], [7.6, 2065.0], [7.7, 2099.0], [7.8, 2109.0], [7.9, 2146.0], [8.0, 2148.0], [8.1, 2148.0], [8.2, 2165.0], [8.3, 2194.0], [8.4, 2243.0], [8.5, 2270.0], [8.6, 2270.0], [8.7, 2270.0], [8.8, 2323.0], [8.9, 2336.0], [9.0, 2342.0], [9.1, 2349.0], [9.2, 2350.0], [9.3, 2350.0], [9.4, 2385.0], [9.5, 2387.0], [9.6, 2435.0], [9.7, 2460.0], [9.8, 2469.0], [9.9, 2469.0], [10.0, 2484.0], [10.1, 2511.0], [10.2, 2546.0], [10.3, 2552.0], [10.4, 2638.0], [10.5, 2638.0], [10.6, 2669.0], [10.7, 2703.0], [10.8, 2709.0], [10.9, 2724.0], [11.0, 2733.0], [11.1, 2751.0], [11.2, 2751.0], [11.3, 2765.0], [11.4, 2789.0], [11.5, 2794.0], [11.6, 2842.0], [11.7, 2921.0], [11.8, 2921.0], [11.9, 2939.0], [12.0, 2950.0], [12.1, 2957.0], [12.2, 3019.0], [12.3, 3025.0], [12.4, 3025.0], [12.5, 3034.0], [12.6, 3096.0], [12.7, 3103.0], [12.8, 3112.0], [12.9, 3172.0], [13.0, 3172.0], [13.1, 3206.0], [13.2, 3213.0], [13.3, 3214.0], [13.4, 3232.0], [13.5, 3233.0], [13.6, 3233.0], [13.7, 3278.0], [13.8, 3289.0], [13.9, 3316.0], [14.0, 3358.0], [14.1, 3376.0], [14.2, 3376.0], [14.3, 3438.0], [14.4, 3442.0], [14.5, 3486.0], [14.6, 3512.0], [14.7, 3530.0], [14.8, 3539.0], [14.9, 3539.0], [15.0, 3689.0], [15.1, 3709.0], [15.2, 3732.0], [15.3, 3738.0], [15.4, 3766.0], [15.5, 3766.0], [15.6, 3767.0], [15.7, 3818.0], [15.8, 3866.0], [15.9, 3868.0], [16.0, 3873.0], [16.1, 3873.0], [16.2, 3888.0], [16.3, 3892.0], [16.4, 3892.0], [16.5, 3929.0], [16.6, 3941.0], [16.7, 3941.0], [16.8, 4002.0], [16.9, 4030.0], [17.0, 4097.0], [17.1, 4101.0], [17.2, 4113.0], [17.3, 4113.0], [17.4, 4151.0], [17.5, 4153.0], [17.6, 4154.0], [17.7, 4168.0], [17.8, 4195.0], [17.9, 4208.0], [18.0, 4208.0], [18.1, 4211.0], [18.2, 4239.0], [18.3, 4252.0], [18.4, 4261.0], [18.5, 4274.0], [18.6, 4274.0], [18.7, 4280.0], [18.8, 4331.0], [18.9, 4374.0], [19.0, 4458.0], [19.1, 4529.0], [19.2, 4529.0], [19.3, 4539.0], [19.4, 4547.0], [19.5, 4580.0], [19.6, 4602.0], [19.7, 4616.0], [19.8, 4616.0], [19.9, 4647.0], [20.0, 4696.0], [20.1, 4726.0], [20.2, 4744.0], [20.3, 4855.0], [20.4, 4855.0], [20.5, 4860.0], [20.6, 4949.0], [20.7, 4952.0], [20.8, 4967.0], [20.9, 4973.0], [21.0, 4973.0], [21.1, 5005.0], [21.2, 5028.0], [21.3, 5043.0], [21.4, 5050.0], [21.5, 5067.0], [21.6, 5102.0], [21.7, 5102.0], [21.8, 5124.0], [21.9, 5167.0], [22.0, 5203.0], [22.1, 5284.0], [22.2, 5334.0], [22.3, 5334.0], [22.4, 5355.0], [22.5, 5358.0], [22.6, 5358.0], [22.7, 5373.0], [22.8, 5388.0], [22.9, 5388.0], [23.0, 5430.0], [23.1, 5449.0], [23.2, 5470.0], [23.3, 5475.0], [23.4, 5531.0], [23.5, 5531.0], [23.6, 5548.0], [23.7, 5582.0], [23.8, 5636.0], [23.9, 5682.0], [24.0, 5696.0], [24.1, 5696.0], [24.2, 5744.0], [24.3, 5778.0], [24.4, 5828.0], [24.5, 5834.0], [24.6, 5874.0], [24.7, 5874.0], [24.8, 5880.0], [24.9, 5916.0], [25.0, 5951.0], [25.1, 6031.0], [25.2, 6041.0], [25.3, 6096.0], [25.4, 6096.0], [25.5, 6143.0], [25.6, 6149.0], [25.7, 6343.0], [25.8, 6347.0], [25.9, 6378.0], [26.0, 6378.0], [26.1, 6386.0], [26.2, 6443.0], [26.3, 6648.0], [26.4, 6652.0], [26.5, 6677.0], [26.6, 6677.0], [26.7, 6686.0], [26.8, 6730.0], [26.9, 6741.0], [27.0, 6814.0], [27.1, 6831.0], [27.2, 6831.0], [27.3, 6923.0], [27.4, 6929.0], [27.5, 6941.0], [27.6, 6969.0], [27.7, 6998.0], [27.8, 6998.0], [27.9, 7075.0], [28.0, 7080.0], [28.1, 7081.0], [28.2, 7082.0], [28.3, 7123.0], [28.4, 7123.0], [28.5, 7167.0], [28.6, 7186.0], [28.7, 7225.0], [28.8, 7255.0], [28.9, 7261.0], [29.0, 7285.0], [29.1, 7285.0], [29.2, 7295.0], [29.3, 7312.0], [29.4, 7320.0], [29.5, 7327.0], [29.6, 7380.0], [29.7, 7380.0], [29.8, 7431.0], [29.9, 7456.0], [30.0, 7497.0], [30.1, 7559.0], [30.2, 7588.0], [30.3, 7588.0], [30.4, 7653.0], [30.5, 7749.0], [30.6, 7842.0], [30.7, 7851.0], [30.8, 7863.0], [30.9, 7863.0], [31.0, 7886.0], [31.1, 7899.0], [31.2, 7925.0], [31.3, 7928.0], [31.4, 8140.0], [31.5, 8140.0], [31.6, 8142.0], [31.7, 8148.0], [31.8, 8157.0], [31.9, 8185.0], [32.0, 8204.0], [32.1, 8204.0], [32.2, 8229.0], [32.3, 8262.0], [32.4, 8334.0], [32.5, 8351.0], [32.6, 8382.0], [32.7, 8413.0], [32.8, 8413.0], [32.9, 8440.0], [33.0, 8537.0], [33.1, 8567.0], [33.2, 8575.0], [33.3, 8614.0], [33.4, 8614.0], [33.5, 8772.0], [33.6, 8774.0], [33.7, 8800.0], [33.8, 8833.0], [33.9, 8836.0], [34.0, 8836.0], [34.1, 8885.0], [34.2, 8904.0], [34.3, 8957.0], [34.4, 9047.0], [34.5, 9076.0], [34.6, 9076.0], [34.7, 9113.0], [34.8, 9117.0], [34.9, 9343.0], [35.0, 9362.0], [35.1, 9398.0], [35.2, 9398.0], [35.3, 9429.0], [35.4, 9435.0], [35.5, 9467.0], [35.6, 9540.0], [35.7, 9545.0], [35.8, 9557.0], [35.9, 9557.0], [36.0, 9583.0], [36.1, 9588.0], [36.2, 9603.0], [36.3, 9653.0], [36.4, 9734.0], [36.5, 9734.0], [36.6, 9743.0], [36.7, 9757.0], [36.8, 9768.0], [36.9, 9829.0], [37.0, 9982.0], [37.1, 9982.0], [37.2, 10039.0], [37.3, 10089.0], [37.4, 10113.0], [37.5, 10124.0], [37.6, 10155.0], [37.7, 10155.0], [37.8, 10277.0], [37.9, 10291.0], [38.0, 10310.0], [38.1, 10361.0], [38.2, 10473.0], [38.3, 10473.0], [38.4, 10508.0], [38.5, 10545.0], [38.6, 10571.0], [38.7, 10588.0], [38.8, 10608.0], [38.9, 10608.0], [39.0, 10669.0], [39.1, 10680.0], [39.2, 10769.0], [39.3, 10779.0], [39.4, 10801.0], [39.5, 10843.0], [39.6, 10843.0], [39.7, 10875.0], [39.8, 10912.0], [39.9, 10973.0], [40.0, 11001.0], [40.1, 11024.0], [40.2, 11024.0], [40.3, 11112.0], [40.4, 11135.0], [40.5, 11196.0], [40.6, 11207.0], [40.7, 11323.0], [40.8, 11323.0], [40.9, 11373.0], [41.0, 11429.0], [41.1, 11542.0], [41.2, 11622.0], [41.3, 11630.0], [41.4, 11630.0], [41.5, 11718.0], [41.6, 11799.0], [41.7, 11892.0], [41.8, 11902.0], [41.9, 11936.0], [42.0, 11936.0], [42.1, 11937.0], [42.2, 11990.0], [42.3, 12008.0], [42.4, 12126.0], [42.5, 12191.0], [42.6, 12191.0], [42.7, 12211.0], [42.8, 12215.0], [42.9, 12335.0], [43.0, 12351.0], [43.1, 12419.0], [43.2, 12615.0], [43.3, 12615.0], [43.4, 12622.0], [43.5, 12652.0], [43.6, 12675.0], [43.7, 12679.0], [43.8, 12679.0], [43.9, 12679.0], [44.0, 12683.0], [44.1, 12689.0], [44.2, 12737.0], [44.3, 12760.0], [44.4, 12833.0], [44.5, 12833.0], [44.6, 12841.0], [44.7, 12997.0], [44.8, 13049.0], [44.9, 13167.0], [45.0, 13171.0], [45.1, 13171.0], [45.2, 13238.0], [45.3, 13286.0], [45.4, 13405.0], [45.5, 13526.0], [45.6, 13539.0], [45.7, 13539.0], [45.8, 13569.0], [45.9, 13571.0], [46.0, 13576.0], [46.1, 13638.0], [46.2, 13654.0], [46.3, 13654.0], [46.4, 13688.0], [46.5, 13759.0], [46.6, 13825.0], [46.7, 13841.0], [46.8, 13962.0], [46.9, 14057.0], [47.0, 14057.0], [47.1, 14069.0], [47.2, 14093.0], [47.3, 14103.0], [47.4, 14175.0], [47.5, 14211.0], [47.6, 14211.0], [47.7, 14238.0], [47.8, 14283.0], [47.9, 14304.0], [48.0, 14354.0], [48.1, 14375.0], [48.2, 14375.0], [48.3, 14400.0], [48.4, 14412.0], [48.5, 14417.0], [48.6, 14424.0], [48.7, 14492.0], [48.8, 14492.0], [48.9, 14503.0], [49.0, 14511.0], [49.1, 14577.0], [49.2, 14603.0], [49.3, 14645.0], [49.4, 14645.0], [49.5, 14689.0], [49.6, 14772.0], [49.7, 14814.0], [49.8, 14849.0], [49.9, 14997.0], [50.0, 14997.0], [50.1, 15189.0], [50.2, 15189.0], [50.3, 15198.0], [50.4, 15279.0], [50.5, 15346.0], [50.6, 15414.0], [50.7, 15414.0], [50.8, 15422.0], [50.9, 15509.0], [51.0, 15572.0], [51.1, 15606.0], [51.2, 15623.0], [51.3, 15623.0], [51.4, 15632.0], [51.5, 15645.0], [51.6, 15730.0], [51.7, 15733.0], [51.8, 15783.0], [51.9, 15783.0], [52.0, 15935.0], [52.1, 16085.0], [52.2, 16319.0], [52.3, 16358.0], [52.4, 16409.0], [52.5, 16409.0], [52.6, 16551.0], [52.7, 16576.0], [52.8, 16635.0], [52.9, 16666.0], [53.0, 16695.0], [53.1, 16695.0], [53.2, 16784.0], [53.3, 16819.0], [53.4, 16825.0], [53.5, 16863.0], [53.6, 16949.0], [53.7, 16978.0], [53.8, 16978.0], [53.9, 17051.0], [54.0, 17123.0], [54.1, 17125.0], [54.2, 17271.0], [54.3, 17337.0], [54.4, 17337.0], [54.5, 17406.0], [54.6, 17430.0], [54.7, 17454.0], [54.8, 17547.0], [54.9, 17689.0], [55.0, 17689.0], [55.1, 17852.0], [55.2, 17870.0], [55.3, 17921.0], [55.4, 17979.0], [55.5, 17980.0], [55.6, 17980.0], [55.7, 18032.0], [55.8, 18034.0], [55.9, 18050.0], [56.0, 18056.0], [56.1, 18071.0], [56.2, 18071.0], [56.3, 18268.0], [56.4, 18424.0], [56.5, 18526.0], [56.6, 18534.0], [56.7, 18588.0], [56.8, 18588.0], [56.9, 18631.0], [57.0, 18694.0], [57.1, 18790.0], [57.2, 18817.0], [57.3, 18850.0], [57.4, 18891.0], [57.5, 18891.0], [57.6, 18892.0], [57.7, 18896.0], [57.8, 18943.0], [57.9, 18984.0], [58.0, 19034.0], [58.1, 19034.0], [58.2, 19035.0], [58.3, 19312.0], [58.4, 19316.0], [58.5, 19409.0], [58.6, 19492.0], [58.7, 19492.0], [58.8, 19639.0], [58.9, 19766.0], [59.0, 19800.0], [59.1, 19896.0], [59.2, 20024.0], [59.3, 20024.0], [59.4, 20039.0], [59.5, 20045.0], [59.6, 20085.0], [59.7, 20156.0], [59.8, 20179.0], [59.9, 20179.0], [60.0, 20190.0], [60.1, 20258.0], [60.2, 20333.0], [60.3, 20358.0], [60.4, 20394.0], [60.5, 20394.0], [60.6, 20421.0], [60.7, 20484.0], [60.8, 20525.0], [60.9, 20579.0], [61.0, 20742.0], [61.1, 20765.0], [61.2, 20765.0], [61.3, 20811.0], [61.4, 20915.0], [61.5, 20940.0], [61.6, 21078.0], [61.7, 21138.0], [61.8, 21138.0], [61.9, 21265.0], [62.0, 21276.0], [62.1, 21282.0], [62.2, 21299.0], [62.3, 21370.0], [62.4, 21370.0], [62.5, 21392.0], [62.6, 21443.0], [62.7, 21534.0], [62.8, 21538.0], [62.9, 21661.0], [63.0, 21661.0], [63.1, 21862.0], [63.2, 21863.0], [63.3, 21915.0], [63.4, 21994.0], [63.5, 22056.0], [63.6, 22056.0], [63.7, 22068.0], [63.8, 22092.0], [63.9, 22162.0], [64.0, 22253.0], [64.1, 22452.0], [64.2, 22452.0], [64.3, 22532.0], [64.4, 22534.0], [64.5, 22635.0], [64.6, 22659.0], [64.7, 22803.0], [64.8, 22847.0], [64.9, 22847.0], [65.0, 22850.0], [65.1, 22858.0], [65.2, 23079.0], [65.3, 23146.0], [65.4, 23157.0], [65.5, 23157.0], [65.6, 23318.0], [65.7, 23343.0], [65.8, 23524.0], [65.9, 23546.0], [66.0, 23627.0], [66.1, 23627.0], [66.2, 23649.0], [66.3, 24087.0], [66.4, 24089.0], [66.5, 24143.0], [66.6, 24167.0], [66.7, 24167.0], [66.8, 24205.0], [66.9, 24328.0], [67.0, 24408.0], [67.1, 24418.0], [67.2, 24438.0], [67.3, 24438.0], [67.4, 24459.0], [67.5, 24506.0], [67.6, 24545.0], [67.7, 24556.0], [67.8, 24564.0], [67.9, 24602.0], [68.0, 24602.0], [68.1, 24664.0], [68.2, 24712.0], [68.3, 24753.0], [68.4, 24831.0], [68.5, 24838.0], [68.6, 24838.0], [68.7, 25212.0], [68.8, 25245.0], [68.9, 25323.0], [69.0, 25401.0], [69.1, 25424.0], [69.2, 25424.0], [69.3, 25439.0], [69.4, 25612.0], [69.5, 25678.0], [69.6, 25686.0], [69.7, 25712.0], [69.8, 25712.0], [69.9, 25740.0], [70.0, 25769.0], [70.1, 25924.0], [70.2, 26157.0], [70.3, 26289.0], [70.4, 26289.0], [70.5, 26322.0], [70.6, 26336.0], [70.7, 26488.0], [70.8, 26508.0], [70.9, 26595.0], [71.0, 26595.0], [71.1, 26816.0], [71.2, 26903.0], [71.3, 26911.0], [71.4, 26970.0], [71.5, 27108.0], [71.6, 27118.0], [71.7, 27118.0], [71.8, 27143.0], [71.9, 27175.0], [72.0, 27212.0], [72.1, 27278.0], [72.2, 27312.0], [72.3, 27312.0], [72.4, 27318.0], [72.5, 27378.0], [72.6, 27577.0], [72.7, 27711.0], [72.8, 27870.0], [72.9, 27870.0], [73.0, 27901.0], [73.1, 28066.0], [73.2, 28073.0], [73.3, 28082.0], [73.4, 28086.0], [73.5, 28086.0], [73.6, 28094.0], [73.7, 28143.0], [73.8, 28329.0], [73.9, 28424.0], [74.0, 28486.0], [74.1, 28486.0], [74.2, 28531.0], [74.3, 28585.0], [74.4, 28759.0], [74.5, 28836.0], [74.6, 29028.0], [74.7, 29028.0], [74.8, 29066.0], [74.9, 29104.0], [75.0, 29289.0], [75.1, 29378.0], [75.2, 29530.0], [75.3, 29642.0], [75.4, 29642.0], [75.5, 29694.0], [75.6, 29845.0], [75.7, 30004.0], [75.8, 30036.0], [75.9, 30068.0], [76.0, 30068.0], [76.1, 30141.0], [76.2, 30178.0], [76.3, 30202.0], [76.4, 30337.0], [76.5, 30570.0], [76.6, 30570.0], [76.7, 30751.0], [76.8, 30766.0], [76.9, 30819.0], [77.0, 30974.0], [77.1, 31111.0], [77.2, 31111.0], [77.3, 31174.0], [77.4, 31190.0], [77.5, 31377.0], [77.6, 31431.0], [77.7, 31656.0], [77.8, 31656.0], [77.9, 31659.0], [78.0, 31701.0], [78.1, 31763.0], [78.2, 31977.0], [78.3, 32001.0], [78.4, 32001.0], [78.5, 32006.0], [78.6, 32097.0], [78.7, 32144.0], [78.8, 32202.0], [78.9, 32214.0], [79.0, 32267.0], [79.1, 32267.0], [79.2, 32349.0], [79.3, 32378.0], [79.4, 32739.0], [79.5, 32807.0], [79.6, 32829.0], [79.7, 32829.0], [79.8, 32833.0], [79.9, 33024.0], [80.0, 33071.0], [80.1, 33146.0], [80.2, 33368.0], [80.3, 33368.0], [80.4, 33509.0], [80.5, 33573.0], [80.6, 33648.0], [80.7, 33758.0], [80.8, 33957.0], [80.9, 33957.0], [81.0, 34128.0], [81.1, 34216.0], [81.2, 34369.0], [81.3, 34648.0], [81.4, 34679.0], [81.5, 34679.0], [81.6, 34725.0], [81.7, 34745.0], [81.8, 34746.0], [81.9, 34805.0], [82.0, 34846.0], [82.1, 34846.0], [82.2, 34871.0], [82.3, 34970.0], [82.4, 35036.0], [82.5, 35086.0], [82.6, 35167.0], [82.7, 35420.0], [82.8, 35420.0], [82.9, 35663.0], [83.0, 35794.0], [83.1, 35927.0], [83.2, 35948.0], [83.3, 36007.0], [83.4, 36007.0], [83.5, 36084.0], [83.6, 36266.0], [83.7, 36347.0], [83.8, 36528.0], [83.9, 36552.0], [84.0, 36552.0], [84.1, 36584.0], [84.2, 36812.0], [84.3, 36962.0], [84.4, 36969.0], [84.5, 37128.0], [84.6, 37128.0], [84.7, 37175.0], [84.8, 37303.0], [84.9, 37458.0], [85.0, 37502.0], [85.1, 37576.0], [85.2, 37576.0], [85.3, 37704.0], [85.4, 37772.0], [85.5, 37878.0], [85.6, 38072.0], [85.7, 38190.0], [85.8, 38348.0], [85.9, 38348.0], [86.0, 38420.0], [86.1, 38901.0], [86.2, 38927.0], [86.3, 39016.0], [86.4, 39248.0], [86.5, 39248.0], [86.6, 39388.0], [86.7, 39431.0], [86.8, 39486.0], [86.9, 39539.0], [87.0, 39583.0], [87.1, 39583.0], [87.2, 39857.0], [87.3, 39860.0], [87.4, 39873.0], [87.5, 39876.0], [87.6, 40295.0], [87.7, 40295.0], [87.8, 40367.0], [87.9, 40402.0], [88.0, 40438.0], [88.1, 41040.0], [88.2, 41073.0], [88.3, 41073.0], [88.4, 41230.0], [88.5, 41351.0], [88.6, 41417.0], [88.7, 41615.0], [88.8, 41668.0], [88.9, 41668.0], [89.0, 41693.0], [89.1, 41736.0], [89.2, 41772.0], [89.3, 42158.0], [89.4, 42256.0], [89.5, 42517.0], [89.6, 42517.0], [89.7, 42552.0], [89.8, 42574.0], [89.9, 42907.0], [90.0, 43132.0], [90.1, 43564.0], [90.2, 43564.0], [90.3, 43583.0], [90.4, 43662.0], [90.5, 43831.0], [90.6, 43909.0], [90.7, 44102.0], [90.8, 44102.0], [90.9, 44694.0], [91.0, 44701.0], [91.1, 44818.0], [91.2, 44963.0], [91.3, 45076.0], [91.4, 45076.0], [91.5, 45238.0], [91.6, 45261.0], [91.7, 45322.0], [91.8, 45511.0], [91.9, 45653.0], [92.0, 45653.0], [92.1, 45688.0], [92.2, 46297.0], [92.3, 46392.0], [92.4, 46498.0], [92.5, 46566.0], [92.6, 46566.0], [92.7, 46818.0], [92.8, 46874.0], [92.9, 46946.0], [93.0, 47043.0], [93.1, 47357.0], [93.2, 47732.0], [93.3, 47732.0], [93.4, 47759.0], [93.5, 47908.0], [93.6, 48026.0], [93.7, 48062.0], [93.8, 48066.0], [93.9, 48066.0], [94.0, 48663.0], [94.1, 48727.0], [94.2, 48927.0], [94.3, 49135.0], [94.4, 49354.0], [94.5, 49354.0], [94.6, 49570.0], [94.7, 49680.0], [94.8, 50317.0], [94.9, 50361.0], [95.0, 50391.0], [95.1, 50391.0], [95.2, 50562.0], [95.3, 50977.0], [95.4, 51061.0], [95.5, 51219.0], [95.6, 51253.0], [95.7, 51253.0], [95.8, 51998.0], [95.9, 52138.0], [96.0, 52367.0], [96.1, 52536.0], [96.2, 52804.0], [96.3, 52804.0], [96.4, 52827.0], [96.5, 53013.0], [96.6, 53161.0], [96.7, 53504.0], [96.8, 53522.0], [96.9, 53687.0], [97.0, 53687.0], [97.1, 54079.0], [97.2, 54217.0], [97.3, 54697.0], [97.4, 54919.0], [97.5, 54939.0], [97.6, 54939.0], [97.7, 55163.0], [97.8, 55244.0], [97.9, 55612.0], [98.0, 56051.0], [98.1, 56238.0], [98.2, 56238.0], [98.3, 56296.0], [98.4, 56945.0], [98.5, 57098.0], [98.6, 57538.0], [98.7, 58058.0], [98.8, 58058.0], [98.9, 58535.0], [99.0, 58919.0], [99.1, 59776.0], [99.2, 59840.0], [99.3, 60009.0], [99.4, 60009.0], [99.5, 60010.0], [99.6, 60230.0], [99.7, 60232.0], [99.8, 60241.0], [99.9, 60406.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 13.0, "series": [{"data": [[33700.0, 1.0], [37700.0, 2.0], [36900.0, 2.0], [39300.0, 1.0], [42500.0, 3.0], [41700.0, 2.0], [44100.0, 1.0], [44900.0, 1.0], [46500.0, 1.0], [47300.0, 1.0], [48900.0, 1.0], [50500.0, 1.0], [52100.0, 1.0], [56900.0, 1.0], [58500.0, 1.0], [700.0, 1.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 8.0], [1300.0, 13.0], [1400.0, 6.0], [1500.0, 2.0], [1600.0, 4.0], [1700.0, 6.0], [1800.0, 1.0], [1900.0, 7.0], [2000.0, 3.0], [2100.0, 5.0], [2300.0, 7.0], [2200.0, 3.0], [2400.0, 4.0], [2500.0, 3.0], [2600.0, 2.0], [2800.0, 1.0], [2700.0, 8.0], [2900.0, 4.0], [3000.0, 4.0], [3100.0, 3.0], [3200.0, 7.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 3.0], [3600.0, 1.0], [3700.0, 5.0], [3800.0, 7.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 7.0], [4200.0, 7.0], [4300.0, 2.0], [4500.0, 4.0], [4600.0, 4.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [5000.0, 5.0], [5100.0, 3.0], [4900.0, 4.0], [5300.0, 6.0], [5200.0, 2.0], [5600.0, 3.0], [5500.0, 3.0], [5400.0, 4.0], [5800.0, 4.0], [5700.0, 2.0], [6000.0, 3.0], [5900.0, 2.0], [6100.0, 2.0], [6300.0, 4.0], [6600.0, 4.0], [6400.0, 1.0], [6900.0, 5.0], [6700.0, 2.0], [6800.0, 2.0], [7000.0, 4.0], [7100.0, 3.0], [7200.0, 5.0], [7300.0, 4.0], [7400.0, 3.0], [7500.0, 2.0], [7600.0, 1.0], [7800.0, 5.0], [7700.0, 1.0], [7900.0, 2.0], [8100.0, 5.0], [8200.0, 3.0], [8400.0, 2.0], [8600.0, 1.0], [8800.0, 4.0], [9000.0, 2.0], [9400.0, 3.0], [9600.0, 2.0], [10200.0, 2.0], [9800.0, 1.0], [10000.0, 2.0], [10600.0, 3.0], [10400.0, 1.0], [10800.0, 3.0], [11000.0, 2.0], [11200.0, 1.0], [11600.0, 2.0], [11400.0, 1.0], [11800.0, 1.0], [12000.0, 1.0], [12200.0, 2.0], [12600.0, 8.0], [12400.0, 1.0], [13200.0, 2.0], [12800.0, 2.0], [13000.0, 1.0], [13800.0, 2.0], [13600.0, 3.0], [13400.0, 1.0], [14200.0, 3.0], [14000.0, 3.0], [14600.0, 3.0], [14400.0, 5.0], [14800.0, 2.0], [15200.0, 1.0], [15600.0, 4.0], [15400.0, 2.0], [16000.0, 1.0], [16800.0, 3.0], [17200.0, 1.0], [16400.0, 1.0], [18000.0, 5.0], [17600.0, 1.0], [18400.0, 1.0], [18800.0, 5.0], [20000.0, 4.0], [19600.0, 1.0], [20400.0, 2.0], [21200.0, 4.0], [20800.0, 1.0], [22000.0, 3.0], [22400.0, 1.0], [21600.0, 1.0], [22800.0, 4.0], [24000.0, 2.0], [24400.0, 4.0], [23600.0, 2.0], [24800.0, 2.0], [25200.0, 2.0], [26400.0, 1.0], [25600.0, 3.0], [27200.0, 2.0], [26800.0, 1.0], [28000.0, 5.0], [28400.0, 2.0], [28800.0, 1.0], [29200.0, 1.0], [29600.0, 2.0], [30000.0, 3.0], [30800.0, 1.0], [31600.0, 2.0], [32000.0, 3.0], [32800.0, 3.0], [33600.0, 1.0], [36800.0, 1.0], [36000.0, 2.0], [38400.0, 1.0], [39200.0, 1.0], [41600.0, 3.0], [44800.0, 1.0], [45600.0, 2.0], [46400.0, 1.0], [48000.0, 3.0], [49600.0, 1.0], [51200.0, 2.0], [52800.0, 2.0], [53600.0, 1.0], [55200.0, 1.0], [56000.0, 1.0], [60000.0, 2.0], [34700.0, 3.0], [33900.0, 1.0], [33100.0, 1.0], [36300.0, 1.0], [37100.0, 2.0], [39500.0, 2.0], [40300.0, 1.0], [43500.0, 2.0], [49100.0, 1.0], [52300.0, 1.0], [53100.0, 1.0], [16500.0, 2.0], [16900.0, 2.0], [17300.0, 1.0], [19300.0, 2.0], [18500.0, 3.0], [18900.0, 2.0], [20100.0, 3.0], [19700.0, 1.0], [20900.0, 2.0], [20500.0, 2.0], [21300.0, 2.0], [22500.0, 2.0], [22100.0, 1.0], [23300.0, 2.0], [24500.0, 4.0], [24100.0, 2.0], [25300.0, 1.0], [25700.0, 3.0], [26500.0, 2.0], [26100.0, 1.0], [27300.0, 3.0], [26900.0, 3.0], [28500.0, 2.0], [27700.0, 1.0], [28100.0, 1.0], [29300.0, 1.0], [30100.0, 2.0], [30500.0, 1.0], [31700.0, 2.0], [30900.0, 1.0], [31300.0, 1.0], [32100.0, 1.0], [33000.0, 2.0], [34600.0, 2.0], [36200.0, 1.0], [35400.0, 1.0], [37800.0, 1.0], [39400.0, 2.0], [40200.0, 1.0], [41000.0, 2.0], [45000.0, 1.0], [53000.0, 1.0], [54600.0, 1.0], [56200.0, 2.0], [57000.0, 1.0], [60200.0, 3.0], [33300.0, 1.0], [34100.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [36500.0, 3.0], [38900.0, 2.0], [37300.0, 1.0], [38100.0, 1.0], [42100.0, 1.0], [41300.0, 1.0], [42900.0, 1.0], [46900.0, 1.0], [45300.0, 1.0], [47700.0, 2.0], [49300.0, 1.0], [50900.0, 1.0], [52500.0, 1.0], [54900.0, 2.0], [58900.0, 1.0], [59700.0, 1.0], [8300.0, 3.0], [8700.0, 2.0], [8500.0, 3.0], [8900.0, 2.0], [9100.0, 2.0], [9500.0, 5.0], [9700.0, 4.0], [9300.0, 3.0], [10100.0, 3.0], [9900.0, 1.0], [10500.0, 4.0], [10300.0, 2.0], [10700.0, 2.0], [11100.0, 3.0], [10900.0, 2.0], [11300.0, 2.0], [11700.0, 2.0], [11500.0, 1.0], [11900.0, 4.0], [12100.0, 2.0], [12700.0, 2.0], [12300.0, 2.0], [12900.0, 1.0], [13100.0, 2.0], [13500.0, 5.0], [13700.0, 1.0], [14100.0, 2.0], [14300.0, 3.0], [13900.0, 1.0], [14500.0, 3.0], [14700.0, 1.0], [15100.0, 3.0], [15300.0, 1.0], [14900.0, 1.0], [15700.0, 3.0], [15500.0, 2.0], [16300.0, 2.0], [15900.0, 1.0], [16600.0, 3.0], [17400.0, 3.0], [17000.0, 1.0], [18200.0, 1.0], [17800.0, 2.0], [19400.0, 2.0], [19000.0, 2.0], [18600.0, 2.0], [19800.0, 2.0], [20200.0, 1.0], [21000.0, 1.0], [21400.0, 1.0], [21800.0, 2.0], [22200.0, 1.0], [22600.0, 2.0], [23000.0, 1.0], [24200.0, 1.0], [24600.0, 2.0], [25400.0, 3.0], [26200.0, 1.0], [27800.0, 1.0], [29000.0, 2.0], [30200.0, 1.0], [29800.0, 1.0], [31400.0, 1.0], [32200.0, 3.0], [34800.0, 3.0], [35600.0, 1.0], [38000.0, 1.0], [40400.0, 2.0], [41200.0, 1.0], [43600.0, 1.0], [46800.0, 2.0], [45200.0, 2.0], [54000.0, 1.0], [55600.0, 1.0], [58000.0, 1.0], [60400.0, 1.0], [34300.0, 1.0], [33500.0, 2.0], [35900.0, 2.0], [35100.0, 1.0], [37500.0, 2.0], [38300.0, 1.0], [43100.0, 1.0], [44700.0, 1.0], [43900.0, 1.0], [46300.0, 1.0], [45500.0, 1.0], [48700.0, 1.0], [47900.0, 1.0], [50300.0, 3.0], [49500.0, 1.0], [51900.0, 1.0], [53500.0, 2.0], [55100.0, 1.0], [57500.0, 1.0], [17100.0, 2.0], [16700.0, 1.0], [17500.0, 1.0], [17900.0, 3.0], [18700.0, 1.0], [20300.0, 3.0], [20700.0, 2.0], [21100.0, 1.0], [21500.0, 2.0], [21900.0, 2.0], [23500.0, 2.0], [23100.0, 2.0], [24300.0, 1.0], [24700.0, 2.0], [26300.0, 2.0], [25900.0, 1.0], [27100.0, 4.0], [27500.0, 1.0], [27900.0, 1.0], [28300.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [30700.0, 2.0], [30300.0, 1.0], [31100.0, 3.0], [32700.0, 1.0], [31900.0, 1.0], [32300.0, 2.0], [34200.0, 1.0], [35000.0, 2.0], [37400.0, 1.0], [39000.0, 1.0], [39800.0, 4.0], [41400.0, 1.0], [42200.0, 1.0], [43800.0, 1.0], [44600.0, 1.0], [47000.0, 1.0], [46200.0, 1.0], [48600.0, 1.0], [51000.0, 1.0], [54200.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 790.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 42.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 790.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.296296296296296, "minX": 1.65124878E12, "maxY": 84.86826347305387, "series": [{"data": [[1.6512489E12, 48.33742331288343], [1.65124908E12, 52.42982456140349], [1.65124878E12, 9.296296296296296], [1.65124896E12, 71.74117647058821], [1.65124884E12, 23.676470588235297], [1.65124902E12, 84.86826347305387]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4051.2881355932204, "minX": 1.0, "maxY": 59840.0, "series": [{"data": [[2.0, 58535.0], [3.0, 29410.0], [4.0, 28162.5], [5.0, 18593.666666666668], [6.0, 27054.0], [7.0, 18075.666666666668], [8.0, 17118.333333333336], [9.0, 20092.5], [10.0, 4051.2881355932204], [11.0, 13740.666666666666], [12.0, 17858.0], [13.0, 19326.5], [14.0, 17258.333333333336], [15.0, 20604.0], [16.0, 15573.333333333334], [17.0, 17796.0], [18.0, 15996.0], [19.0, 11565.666666666666], [20.0, 6927.189655172415], [21.0, 17058.666666666668], [22.0, 20255.0], [23.0, 12702.666666666668], [24.0, 23381.5], [25.0, 11734.333333333332], [26.0, 14139.0], [27.0, 11031.0], [28.0, 20711.0], [29.0, 9682.0], [30.0, 9670.66666666667], [31.0, 9797.333333333334], [32.0, 18293.0], [33.0, 10322.333333333334], [34.0, 19920.0], [35.0, 26054.333333333336], [36.0, 19035.5], [37.0, 34718.5], [38.0, 17554.666666666668], [39.0, 28244.666666666664], [40.0, 12956.298245614027], [41.0, 22527.666666666664], [42.0, 19697.0], [43.0, 27122.0], [44.0, 14532.0], [45.0, 49570.0], [46.0, 14914.666666666666], [47.0, 27356.0], [48.0, 15578.0], [49.0, 34340.5], [50.0, 15488.2037037037], [51.0, 22834.333333333336], [52.0, 13584.666666666666], [53.0, 25416.0], [54.0, 16490.0], [55.0, 24484.0], [56.0, 9352.0], [57.0, 32100.5], [58.0, 14940.333333333334], [59.0, 25947.0], [60.0, 17578.701754385973], [61.0, 28243.0], [62.0, 14053.5], [63.0, 31823.0], [64.0, 29381.0], [65.0, 29535.0], [66.0, 30394.25], [67.0, 46007.5], [68.0, 43838.5], [69.0, 37057.5], [70.0, 18921.88135593221], [71.0, 44537.83333333333], [72.0, 39193.4], [73.0, 43335.0], [74.0, 35800.25], [75.0, 30999.0], [76.0, 35406.0], [77.0, 41639.666666666664], [78.0, 28304.5], [79.0, 42910.666666666664], [80.0, 19459.42372881356], [81.0, 32210.5], [82.0, 32779.333333333336], [83.0, 38639.0], [84.0, 29299.333333333336], [85.0, 28564.881355932182], [1.0, 59840.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[53.40334128878276, 19241.779236276834]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 85.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 140.33333333333334, "minX": 1.65124878E12, "maxY": 534.1666666666666, "series": [{"data": [[1.6512489E12, 507.6], [1.65124908E12, 375.25], [1.65124878E12, 167.43333333333334], [1.65124896E12, 528.4166666666666], [1.65124884E12, 528.5], [1.65124902E12, 534.1666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6512489E12, 423.6166666666667], [1.65124908E12, 296.6], [1.65124878E12, 140.33333333333334], [1.65124896E12, 441.7], [1.65124884E12, 441.8333333333333], [1.65124902E12, 434.0833333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2912.740740740741, "minX": 1.65124878E12, "maxY": 34752.34210526317, "series": [{"data": [[1.6512489E12, 15104.699386503067], [1.65124908E12, 34752.34210526317], [1.65124878E12, 2912.740740740741], [1.65124896E12, 20469.047058823522], [1.65124884E12, 7038.417647058823], [1.65124902E12, 29145.035928143727]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2912.6111111111113, "minX": 1.65124878E12, "maxY": 34752.315789473694, "series": [{"data": [[1.6512489E12, 15104.662576687115], [1.65124908E12, 34752.315789473694], [1.65124878E12, 2912.6111111111113], [1.65124896E12, 20469.023529411763], [1.65124884E12, 7038.370588235293], [1.65124902E12, 29145.01197604791]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.9912280701754375, "minX": 1.65124878E12, "maxY": 21.09259259259259, "series": [{"data": [[1.6512489E12, 9.07361963190184], [1.65124908E12, 7.9912280701754375], [1.65124878E12, 21.09259259259259], [1.65124896E12, 9.111764705882354], [1.65124884E12, 10.252941176470587], [1.65124902E12, 8.526946107784433]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 740.0, "minX": 1.65124878E12, "maxY": 59840.0, "series": [{"data": [[1.6512489E12, 35948.0], [1.65124908E12, 59840.0], [1.65124878E12, 7886.0], [1.65124896E12, 48062.0], [1.65124884E12, 20915.0], [1.65124902E12, 58919.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6512489E12, 27646.799999999996], [1.65124908E12, 55116.4], [1.65124878E12, 5452.0], [1.65124896E12, 36947.0], [1.65124884E12, 14075.2], [1.65124902E12, 50334.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6512489E12, 35178.71999999998], [1.65124908E12, 59832.96], [1.65124878E12, 7886.0], [1.65124896E12, 47269.63999999999], [1.65124884E12, 20325.699999999993], [1.65124902E12, 57616.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6512489E12, 30130.599999999995], [1.65124908E12, 57295.99999999999], [1.65124878E12, 6757.75], [1.65124896E12, 40708.899999999994], [1.65124884E12, 15941.149999999992], [1.65124902E12, 53356.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6512489E12, 847.0], [1.65124908E12, 1547.0], [1.65124878E12, 740.0], [1.65124896E12, 879.0], [1.65124884E12, 854.0], [1.65124902E12, 990.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6512489E12, 14492.0], [1.65124908E12, 34795.5], [1.65124878E12, 2367.5], [1.65124896E12, 19400.0], [1.65124884E12, 6189.0], [1.65124902E12, 28759.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124908E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14364.5, "minX": 1.0, "maxY": 60236.5, "series": [{"data": [[2.0, 16202.0], [4.0, 14503.0], [1.0, 41990.5], [5.0, 24167.0], [3.0, 14364.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60230.0], [5.0, 60236.5], [3.0, 60009.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14364.5, "minX": 1.0, "maxY": 60236.5, "series": [{"data": [[2.0, 16202.0], [4.0, 14503.0], [1.0, 41990.5], [5.0, 24167.0], [3.0, 14364.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60230.0], [5.0, 60236.5], [3.0, 60009.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.65124878E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.6512489E12, 3.05], [1.65124908E12, 0.48333333333333334], [1.65124878E12, 1.0666666666666667], [1.65124896E12, 3.1666666666666665], [1.65124884E12, 3.3333333333333335], [1.65124902E12, 2.8666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124908E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124878E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.6512489E12, 2.716666666666667], [1.65124908E12, 1.8333333333333333], [1.65124878E12, 0.9], [1.65124896E12, 2.8333333333333335], [1.65124884E12, 2.8333333333333335], [1.65124902E12, 2.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65124908E12, 0.06666666666666667], [1.65124902E12, 0.03333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124878E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.6512489E12, 2.716666666666667], [1.65124908E12, 1.8333333333333333], [1.65124878E12, 0.9], [1.65124896E12, 2.8333333333333335], [1.65124884E12, 2.8333333333333335], [1.65124902E12, 2.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65124908E12, 0.06666666666666667], [1.65124902E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65124878E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.6512489E12, 2.716666666666667], [1.65124908E12, 1.8333333333333333], [1.65124878E12, 0.9], [1.65124896E12, 2.8333333333333335], [1.65124884E12, 2.8333333333333335], [1.65124902E12, 2.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65124908E12, 0.06666666666666667], [1.65124902E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


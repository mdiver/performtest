/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 611.0, "minX": 0.0, "maxY": 52197.0, "series": [{"data": [[0.0, 611.0], [0.1, 611.0], [0.2, 644.0], [0.3, 738.0], [0.4, 906.0], [0.5, 906.0], [0.6, 912.0], [0.7, 920.0], [0.8, 930.0], [0.9, 930.0], [1.0, 938.0], [1.1, 972.0], [1.2, 984.0], [1.3, 984.0], [1.4, 988.0], [1.5, 989.0], [1.6, 1012.0], [1.7, 1012.0], [1.8, 1031.0], [1.9, 1060.0], [2.0, 1085.0], [2.1, 1128.0], [2.2, 1128.0], [2.3, 1133.0], [2.4, 1151.0], [2.5, 1205.0], [2.6, 1205.0], [2.7, 1221.0], [2.8, 1268.0], [2.9, 1271.0], [3.0, 1271.0], [3.1, 1313.0], [3.2, 1320.0], [3.3, 1332.0], [3.4, 1332.0], [3.5, 1335.0], [3.6, 1340.0], [3.7, 1348.0], [3.8, 1355.0], [3.9, 1355.0], [4.0, 1358.0], [4.1, 1369.0], [4.2, 1388.0], [4.3, 1388.0], [4.4, 1388.0], [4.5, 1391.0], [4.6, 1411.0], [4.7, 1411.0], [4.8, 1422.0], [4.9, 1530.0], [5.0, 1601.0], [5.1, 1601.0], [5.2, 1602.0], [5.3, 1625.0], [5.4, 1642.0], [5.5, 1653.0], [5.6, 1653.0], [5.7, 1666.0], [5.8, 1672.0], [5.9, 1686.0], [6.0, 1686.0], [6.1, 1716.0], [6.2, 1746.0], [6.3, 1748.0], [6.4, 1748.0], [6.5, 1763.0], [6.6, 1769.0], [6.7, 1788.0], [6.8, 1788.0], [6.9, 1804.0], [7.0, 1819.0], [7.1, 1824.0], [7.2, 1863.0], [7.3, 1863.0], [7.4, 1906.0], [7.5, 1923.0], [7.6, 1935.0], [7.7, 1935.0], [7.8, 2014.0], [7.9, 2018.0], [8.0, 2054.0], [8.1, 2054.0], [8.2, 2084.0], [8.3, 2100.0], [8.4, 2104.0], [8.5, 2104.0], [8.6, 2136.0], [8.7, 2142.0], [8.8, 2171.0], [8.9, 2171.0], [9.0, 2223.0], [9.1, 2306.0], [9.2, 2314.0], [9.3, 2314.0], [9.4, 2314.0], [9.5, 2334.0], [9.6, 2348.0], [9.7, 2359.0], [9.8, 2359.0], [9.9, 2364.0], [10.0, 2368.0], [10.1, 2368.0], [10.2, 2368.0], [10.3, 2382.0], [10.4, 2405.0], [10.5, 2405.0], [10.6, 2405.0], [10.7, 2420.0], [10.8, 2458.0], [10.9, 2462.0], [11.0, 2525.0], [11.1, 2525.0], [11.2, 2567.0], [11.3, 2653.0], [11.4, 2660.0], [11.5, 2660.0], [11.6, 2712.0], [11.7, 2723.0], [11.8, 2773.0], [11.9, 2773.0], [12.0, 2889.0], [12.1, 2900.0], [12.2, 2903.0], [12.3, 2903.0], [12.4, 2910.0], [12.5, 3037.0], [12.6, 3042.0], [12.7, 3050.0], [12.8, 3050.0], [12.9, 3071.0], [13.0, 3088.0], [13.1, 3143.0], [13.2, 3143.0], [13.3, 3186.0], [13.4, 3217.0], [13.5, 3266.0], [13.6, 3266.0], [13.7, 3281.0], [13.8, 3296.0], [13.9, 3325.0], [14.0, 3325.0], [14.1, 3326.0], [14.2, 3354.0], [14.3, 3367.0], [14.4, 3377.0], [14.5, 3377.0], [14.6, 3378.0], [14.7, 3411.0], [14.8, 3424.0], [14.9, 3424.0], [15.0, 3467.0], [15.1, 3545.0], [15.2, 3563.0], [15.3, 3563.0], [15.4, 3634.0], [15.5, 3636.0], [15.6, 3673.0], [15.7, 3673.0], [15.8, 3676.0], [15.9, 3706.0], [16.0, 3709.0], [16.1, 3712.0], [16.2, 3712.0], [16.3, 3742.0], [16.4, 3784.0], [16.5, 3794.0], [16.6, 3794.0], [16.7, 3826.0], [16.8, 3840.0], [16.9, 3845.0], [17.0, 3845.0], [17.1, 3893.0], [17.2, 3912.0], [17.3, 3918.0], [17.4, 3918.0], [17.5, 3931.0], [17.6, 3956.0], [17.7, 3982.0], [17.8, 3982.0], [17.9, 4004.0], [18.0, 4028.0], [18.1, 4039.0], [18.2, 4060.0], [18.3, 4060.0], [18.4, 4082.0], [18.5, 4115.0], [18.6, 4128.0], [18.7, 4128.0], [18.8, 4139.0], [18.9, 4188.0], [19.0, 4209.0], [19.1, 4209.0], [19.2, 4218.0], [19.3, 4267.0], [19.4, 4357.0], [19.5, 4357.0], [19.6, 4373.0], [19.7, 4385.0], [19.8, 4410.0], [19.9, 4519.0], [20.0, 4519.0], [20.1, 4555.0], [20.2, 4567.0], [20.3, 4568.0], [20.4, 4568.0], [20.5, 4577.0], [20.6, 4623.0], [20.7, 4645.0], [20.8, 4645.0], [20.9, 4673.0], [21.0, 4732.0], [21.1, 4742.0], [21.2, 4742.0], [21.3, 4763.0], [21.4, 4781.0], [21.5, 4800.0], [21.6, 4885.0], [21.7, 4885.0], [21.8, 4899.0], [21.9, 4915.0], [22.0, 4921.0], [22.1, 4921.0], [22.2, 4924.0], [22.3, 4928.0], [22.4, 4936.0], [22.5, 4936.0], [22.6, 4944.0], [22.7, 4981.0], [22.8, 4982.0], [22.9, 4982.0], [23.0, 5018.0], [23.1, 5068.0], [23.2, 5069.0], [23.3, 5089.0], [23.4, 5089.0], [23.5, 5112.0], [23.6, 5256.0], [23.7, 5386.0], [23.8, 5386.0], [23.9, 5411.0], [24.0, 5434.0], [24.1, 5437.0], [24.2, 5437.0], [24.3, 5535.0], [24.4, 5537.0], [24.5, 5595.0], [24.6, 5595.0], [24.7, 5644.0], [24.8, 5668.0], [24.9, 5696.0], [25.0, 5696.0], [25.1, 5716.0], [25.2, 5727.0], [25.3, 5737.0], [25.4, 5743.0], [25.5, 5743.0], [25.6, 5777.0], [25.7, 5816.0], [25.8, 5854.0], [25.9, 5854.0], [26.0, 5862.0], [26.1, 5864.0], [26.2, 5909.0], [26.3, 5909.0], [26.4, 6018.0], [26.5, 6057.0], [26.6, 6067.0], [26.7, 6067.0], [26.8, 6139.0], [26.9, 6188.0], [27.0, 6209.0], [27.1, 6253.0], [27.2, 6253.0], [27.3, 6285.0], [27.4, 6297.0], [27.5, 6338.0], [27.6, 6338.0], [27.7, 6338.0], [27.8, 6350.0], [27.9, 6351.0], [28.0, 6351.0], [28.1, 6379.0], [28.2, 6418.0], [28.3, 6427.0], [28.4, 6427.0], [28.5, 6495.0], [28.6, 6513.0], [28.7, 6533.0], [28.8, 6541.0], [28.9, 6541.0], [29.0, 6570.0], [29.1, 6637.0], [29.2, 6649.0], [29.3, 6649.0], [29.4, 6653.0], [29.5, 6757.0], [29.6, 6777.0], [29.7, 6777.0], [29.8, 6833.0], [29.9, 6880.0], [30.0, 6889.0], [30.1, 6889.0], [30.2, 6898.0], [30.3, 6944.0], [30.4, 6965.0], [30.5, 6997.0], [30.6, 6997.0], [30.7, 7056.0], [30.8, 7118.0], [30.9, 7120.0], [31.0, 7120.0], [31.1, 7202.0], [31.2, 7210.0], [31.3, 7391.0], [31.4, 7391.0], [31.5, 7433.0], [31.6, 7466.0], [31.7, 7476.0], [31.8, 7476.0], [31.9, 7521.0], [32.0, 7544.0], [32.1, 7632.0], [32.2, 7718.0], [32.3, 7718.0], [32.4, 7731.0], [32.5, 7767.0], [32.6, 7848.0], [32.7, 7848.0], [32.8, 7924.0], [32.9, 7941.0], [33.0, 8011.0], [33.1, 8011.0], [33.2, 8028.0], [33.3, 8048.0], [33.4, 8053.0], [33.5, 8053.0], [33.6, 8058.0], [33.7, 8104.0], [33.8, 8139.0], [33.9, 8139.0], [34.0, 8150.0], [34.1, 8172.0], [34.2, 8192.0], [34.3, 8193.0], [34.4, 8193.0], [34.5, 8213.0], [34.6, 8355.0], [34.7, 8412.0], [34.8, 8412.0], [34.9, 8415.0], [35.0, 8424.0], [35.1, 8461.0], [35.2, 8461.0], [35.3, 8564.0], [35.4, 8575.0], [35.5, 8591.0], [35.6, 8591.0], [35.7, 8609.0], [35.8, 8658.0], [35.9, 8713.0], [36.0, 8761.0], [36.1, 8761.0], [36.2, 8813.0], [36.3, 8834.0], [36.4, 8842.0], [36.5, 8842.0], [36.6, 8869.0], [36.7, 8880.0], [36.8, 8885.0], [36.9, 8885.0], [37.0, 8910.0], [37.1, 9029.0], [37.2, 9119.0], [37.3, 9119.0], [37.4, 9196.0], [37.5, 9377.0], [37.6, 9405.0], [37.7, 9431.0], [37.8, 9431.0], [37.9, 9473.0], [38.0, 9486.0], [38.1, 9557.0], [38.2, 9557.0], [38.3, 9645.0], [38.4, 9650.0], [38.5, 9650.0], [38.6, 9650.0], [38.7, 9702.0], [38.8, 9743.0], [38.9, 9813.0], [39.0, 9813.0], [39.1, 9855.0], [39.2, 9933.0], [39.3, 9993.0], [39.4, 10146.0], [39.5, 10146.0], [39.6, 10273.0], [39.7, 10307.0], [39.8, 10358.0], [39.9, 10358.0], [40.0, 10381.0], [40.1, 10381.0], [40.2, 10409.0], [40.3, 10409.0], [40.4, 10420.0], [40.5, 10445.0], [40.6, 10453.0], [40.7, 10453.0], [40.8, 10501.0], [40.9, 10664.0], [41.0, 10674.0], [41.1, 10694.0], [41.2, 10694.0], [41.3, 10772.0], [41.4, 10802.0], [41.5, 10806.0], [41.6, 10806.0], [41.7, 10855.0], [41.8, 10884.0], [41.9, 10884.0], [42.0, 10884.0], [42.1, 10916.0], [42.2, 10981.0], [42.3, 10985.0], [42.4, 10985.0], [42.5, 11032.0], [42.6, 11039.0], [42.7, 11154.0], [42.8, 11154.0], [42.9, 11229.0], [43.0, 11241.0], [43.1, 11242.0], [43.2, 11292.0], [43.3, 11292.0], [43.4, 11304.0], [43.5, 11350.0], [43.6, 11379.0], [43.7, 11379.0], [43.8, 11431.0], [43.9, 11474.0], [44.0, 11704.0], [44.1, 11704.0], [44.2, 11734.0], [44.3, 11818.0], [44.4, 11845.0], [44.5, 11845.0], [44.6, 11951.0], [44.7, 11969.0], [44.8, 12027.0], [44.9, 12087.0], [45.0, 12087.0], [45.1, 12218.0], [45.2, 12294.0], [45.3, 12318.0], [45.4, 12318.0], [45.5, 12326.0], [45.6, 12335.0], [45.7, 12450.0], [45.8, 12450.0], [45.9, 12454.0], [46.0, 12478.0], [46.1, 12487.0], [46.2, 12487.0], [46.3, 12522.0], [46.4, 12550.0], [46.5, 12553.0], [46.6, 12596.0], [46.7, 12596.0], [46.8, 12731.0], [46.9, 12810.0], [47.0, 12890.0], [47.1, 12890.0], [47.2, 13010.0], [47.3, 13061.0], [47.4, 13068.0], [47.5, 13068.0], [47.6, 13096.0], [47.7, 13099.0], [47.8, 13102.0], [47.9, 13102.0], [48.0, 13118.0], [48.1, 13126.0], [48.2, 13137.0], [48.3, 13211.0], [48.4, 13211.0], [48.5, 13228.0], [48.6, 13246.0], [48.7, 13284.0], [48.8, 13284.0], [48.9, 13354.0], [49.0, 13392.0], [49.1, 13412.0], [49.2, 13412.0], [49.3, 13429.0], [49.4, 13630.0], [49.5, 13788.0], [49.6, 13788.0], [49.7, 13866.0], [49.8, 13946.0], [49.9, 13956.0], [50.0, 13956.0], [50.1, 13959.0], [50.2, 14039.0], [50.3, 14041.0], [50.4, 14069.0], [50.5, 14069.0], [50.6, 14109.0], [50.7, 14136.0], [50.8, 14140.0], [50.9, 14140.0], [51.0, 14144.0], [51.1, 14164.0], [51.2, 14250.0], [51.3, 14250.0], [51.4, 14314.0], [51.5, 14460.0], [51.6, 14461.0], [51.7, 14461.0], [51.8, 14470.0], [51.9, 14488.0], [52.0, 14491.0], [52.1, 14565.0], [52.2, 14565.0], [52.3, 14584.0], [52.4, 14664.0], [52.5, 14672.0], [52.6, 14672.0], [52.7, 14700.0], [52.8, 14703.0], [52.9, 14775.0], [53.0, 14775.0], [53.1, 15163.0], [53.2, 15223.0], [53.3, 15254.0], [53.4, 15254.0], [53.5, 15258.0], [53.6, 15265.0], [53.7, 15445.0], [53.8, 15473.0], [53.9, 15473.0], [54.0, 15496.0], [54.1, 15506.0], [54.2, 15538.0], [54.3, 15538.0], [54.4, 15550.0], [54.5, 15797.0], [54.6, 15873.0], [54.7, 15873.0], [54.8, 15899.0], [54.9, 15908.0], [55.0, 15981.0], [55.1, 15981.0], [55.2, 16039.0], [55.3, 16086.0], [55.4, 16136.0], [55.5, 16162.0], [55.6, 16162.0], [55.7, 16181.0], [55.8, 16259.0], [55.9, 16336.0], [56.0, 16336.0], [56.1, 16472.0], [56.2, 16514.0], [56.3, 16569.0], [56.4, 16569.0], [56.5, 16591.0], [56.6, 16763.0], [56.7, 16805.0], [56.8, 16805.0], [56.9, 16855.0], [57.0, 16862.0], [57.1, 16904.0], [57.2, 16915.0], [57.3, 16915.0], [57.4, 16919.0], [57.5, 16978.0], [57.6, 17011.0], [57.7, 17011.0], [57.8, 17015.0], [57.9, 17033.0], [58.0, 17163.0], [58.1, 17163.0], [58.2, 17185.0], [58.3, 17224.0], [58.4, 17260.0], [58.5, 17260.0], [58.6, 17294.0], [58.7, 17369.0], [58.8, 17385.0], [58.9, 17385.0], [59.0, 17415.0], [59.1, 17560.0], [59.2, 17713.0], [59.3, 17734.0], [59.4, 17734.0], [59.5, 17777.0], [59.6, 17789.0], [59.7, 17874.0], [59.8, 17874.0], [59.9, 17929.0], [60.0, 17939.0], [60.1, 18011.0], [60.2, 18011.0], [60.3, 18063.0], [60.4, 18358.0], [60.5, 18485.0], [60.6, 18485.0], [60.7, 18506.0], [60.8, 18529.0], [60.9, 18580.0], [61.0, 18595.0], [61.1, 18595.0], [61.2, 18649.0], [61.3, 18690.0], [61.4, 18782.0], [61.5, 18782.0], [61.6, 18789.0], [61.7, 18866.0], [61.8, 18901.0], [61.9, 18901.0], [62.0, 18929.0], [62.1, 19009.0], [62.2, 19075.0], [62.3, 19075.0], [62.4, 19075.0], [62.5, 19082.0], [62.6, 19169.0], [62.7, 19192.0], [62.8, 19192.0], [62.9, 19251.0], [63.0, 19340.0], [63.1, 19486.0], [63.2, 19486.0], [63.3, 19600.0], [63.4, 19692.0], [63.5, 19696.0], [63.6, 19696.0], [63.7, 19737.0], [63.8, 19776.0], [63.9, 19893.0], [64.0, 19893.0], [64.1, 19995.0], [64.2, 20090.0], [64.3, 20114.0], [64.4, 20121.0], [64.5, 20121.0], [64.6, 20168.0], [64.7, 20213.0], [64.8, 20372.0], [64.9, 20372.0], [65.0, 20473.0], [65.1, 20491.0], [65.2, 20496.0], [65.3, 20496.0], [65.4, 20503.0], [65.5, 20615.0], [65.6, 20684.0], [65.7, 20684.0], [65.8, 20762.0], [65.9, 20897.0], [66.0, 20998.0], [66.1, 21059.0], [66.2, 21059.0], [66.3, 21127.0], [66.4, 21155.0], [66.5, 21168.0], [66.6, 21168.0], [66.7, 21169.0], [66.8, 21179.0], [66.9, 21206.0], [67.0, 21206.0], [67.1, 21352.0], [67.2, 21592.0], [67.3, 21638.0], [67.4, 21638.0], [67.5, 21828.0], [67.6, 21886.0], [67.7, 21948.0], [67.8, 21948.0], [67.9, 22004.0], [68.0, 22027.0], [68.1, 22171.0], [68.2, 22188.0], [68.3, 22188.0], [68.4, 22204.0], [68.5, 22265.0], [68.6, 22277.0], [68.7, 22277.0], [68.8, 22299.0], [68.9, 22357.0], [69.0, 22534.0], [69.1, 22534.0], [69.2, 22540.0], [69.3, 22619.0], [69.4, 22632.0], [69.5, 22632.0], [69.6, 22719.0], [69.7, 22733.0], [69.8, 22933.0], [69.9, 23154.0], [70.0, 23154.0], [70.1, 23176.0], [70.2, 23295.0], [70.3, 23427.0], [70.4, 23427.0], [70.5, 23538.0], [70.6, 23696.0], [70.7, 23760.0], [70.8, 23760.0], [70.9, 23809.0], [71.0, 23815.0], [71.1, 23817.0], [71.2, 23817.0], [71.3, 23920.0], [71.4, 23946.0], [71.5, 23957.0], [71.6, 24023.0], [71.7, 24023.0], [71.8, 24028.0], [71.9, 24130.0], [72.0, 24234.0], [72.1, 24234.0], [72.2, 24290.0], [72.3, 24437.0], [72.4, 24516.0], [72.5, 24516.0], [72.6, 24616.0], [72.7, 24749.0], [72.8, 24793.0], [72.9, 24793.0], [73.0, 24873.0], [73.1, 24890.0], [73.2, 24897.0], [73.3, 24946.0], [73.4, 24946.0], [73.5, 24966.0], [73.6, 24990.0], [73.7, 25112.0], [73.8, 25112.0], [73.9, 25257.0], [74.0, 25261.0], [74.1, 25325.0], [74.2, 25325.0], [74.3, 25365.0], [74.4, 25420.0], [74.5, 25434.0], [74.6, 25434.0], [74.7, 25682.0], [74.8, 25702.0], [74.9, 25760.0], [75.0, 25760.0], [75.1, 25827.0], [75.2, 25911.0], [75.3, 26052.0], [75.4, 26134.0], [75.5, 26134.0], [75.6, 26366.0], [75.7, 26470.0], [75.8, 26566.0], [75.9, 26566.0], [76.0, 26597.0], [76.1, 26627.0], [76.2, 26818.0], [76.3, 26818.0], [76.4, 26826.0], [76.5, 26941.0], [76.6, 26988.0], [76.7, 26988.0], [76.8, 27015.0], [76.9, 27104.0], [77.0, 27264.0], [77.1, 27443.0], [77.2, 27443.0], [77.3, 27538.0], [77.4, 27551.0], [77.5, 27842.0], [77.6, 27842.0], [77.7, 27908.0], [77.8, 27922.0], [77.9, 27973.0], [78.0, 27973.0], [78.1, 28043.0], [78.2, 28117.0], [78.3, 28122.0], [78.4, 28122.0], [78.5, 28383.0], [78.6, 28497.0], [78.7, 28553.0], [78.8, 28586.0], [78.9, 28586.0], [79.0, 28669.0], [79.1, 28718.0], [79.2, 28770.0], [79.3, 28770.0], [79.4, 28854.0], [79.5, 28939.0], [79.6, 29156.0], [79.7, 29156.0], [79.8, 29347.0], [79.9, 29402.0], [80.0, 29499.0], [80.1, 29499.0], [80.2, 29512.0], [80.3, 29748.0], [80.4, 29801.0], [80.5, 29900.0], [80.6, 29900.0], [80.7, 29906.0], [80.8, 29930.0], [80.9, 30303.0], [81.0, 30303.0], [81.1, 30407.0], [81.2, 30473.0], [81.3, 30662.0], [81.4, 30662.0], [81.5, 30719.0], [81.6, 30754.0], [81.7, 30761.0], [81.8, 30761.0], [81.9, 30780.0], [82.0, 30803.0], [82.1, 31095.0], [82.2, 31301.0], [82.3, 31301.0], [82.4, 31423.0], [82.5, 31431.0], [82.6, 31618.0], [82.7, 31618.0], [82.8, 31688.0], [82.9, 31775.0], [83.0, 31866.0], [83.1, 31866.0], [83.2, 31889.0], [83.3, 32056.0], [83.4, 32140.0], [83.5, 32140.0], [83.6, 32200.0], [83.7, 32322.0], [83.8, 32637.0], [83.9, 32637.0], [84.0, 32860.0], [84.1, 32896.0], [84.2, 33058.0], [84.3, 33169.0], [84.4, 33169.0], [84.5, 33303.0], [84.6, 33368.0], [84.7, 33403.0], [84.8, 33403.0], [84.9, 33422.0], [85.0, 33548.0], [85.1, 33806.0], [85.2, 33806.0], [85.3, 33835.0], [85.4, 33992.0], [85.5, 34046.0], [85.6, 34046.0], [85.7, 34067.0], [85.8, 34161.0], [85.9, 34488.0], [86.0, 34607.0], [86.1, 34607.0], [86.2, 34648.0], [86.3, 34702.0], [86.4, 34728.0], [86.5, 34728.0], [86.6, 34825.0], [86.7, 35007.0], [86.8, 35054.0], [86.9, 35054.0], [87.0, 35294.0], [87.1, 35309.0], [87.2, 35510.0], [87.3, 35510.0], [87.4, 35622.0], [87.5, 35674.0], [87.6, 35803.0], [87.7, 35813.0], [87.8, 35813.0], [87.9, 35830.0], [88.0, 35890.0], [88.1, 35961.0], [88.2, 35961.0], [88.3, 36138.0], [88.4, 36414.0], [88.5, 36571.0], [88.6, 36571.0], [88.7, 36648.0], [88.8, 36764.0], [88.9, 36819.0], [89.0, 36819.0], [89.1, 36882.0], [89.2, 36936.0], [89.3, 37063.0], [89.4, 37222.0], [89.5, 37222.0], [89.6, 37290.0], [89.7, 37313.0], [89.8, 37507.0], [89.9, 37507.0], [90.0, 37754.0], [90.1, 37837.0], [90.2, 37852.0], [90.3, 37852.0], [90.4, 38111.0], [90.5, 38138.0], [90.6, 38553.0], [90.7, 38553.0], [90.8, 38696.0], [90.9, 38702.0], [91.0, 38732.0], [91.1, 38757.0], [91.2, 38757.0], [91.3, 38820.0], [91.4, 39057.0], [91.5, 39332.0], [91.6, 39332.0], [91.7, 39455.0], [91.8, 39495.0], [91.9, 39539.0], [92.0, 39539.0], [92.1, 39897.0], [92.2, 39954.0], [92.3, 40072.0], [92.4, 40072.0], [92.5, 40126.0], [92.6, 40246.0], [92.7, 40253.0], [92.8, 40253.0], [92.9, 40699.0], [93.0, 41025.0], [93.1, 41195.0], [93.2, 41225.0], [93.3, 41225.0], [93.4, 41247.0], [93.5, 41295.0], [93.6, 41349.0], [93.7, 41349.0], [93.8, 41452.0], [93.9, 41484.0], [94.0, 41629.0], [94.1, 41629.0], [94.2, 41990.0], [94.3, 42112.0], [94.4, 42408.0], [94.5, 42408.0], [94.6, 42433.0], [94.7, 42643.0], [94.8, 42766.0], [94.9, 42772.0], [95.0, 42772.0], [95.1, 42830.0], [95.2, 42901.0], [95.3, 43276.0], [95.4, 43276.0], [95.5, 43295.0], [95.6, 43710.0], [95.7, 43748.0], [95.8, 43748.0], [95.9, 44080.0], [96.0, 44337.0], [96.1, 44681.0], [96.2, 44681.0], [96.3, 44798.0], [96.4, 44857.0], [96.5, 45024.0], [96.6, 45069.0], [96.7, 45069.0], [96.8, 45512.0], [96.9, 45685.0], [97.0, 45986.0], [97.1, 45986.0], [97.2, 46041.0], [97.3, 46231.0], [97.4, 46448.0], [97.5, 46448.0], [97.6, 46849.0], [97.7, 46919.0], [97.8, 46977.0], [97.9, 46977.0], [98.0, 47140.0], [98.1, 47157.0], [98.2, 47277.0], [98.3, 47541.0], [98.4, 47541.0], [98.5, 48270.0], [98.6, 48375.0], [98.7, 48635.0], [98.8, 48635.0], [98.9, 48733.0], [99.0, 49604.0], [99.1, 49906.0], [99.2, 49906.0], [99.3, 50076.0], [99.4, 50417.0], [99.5, 50852.0], [99.6, 50852.0], [99.7, 51102.0], [99.8, 51723.0], [99.9, 52197.0], [100.0, 52197.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 12.0, "series": [{"data": [[33300.0, 2.0], [34100.0, 1.0], [36100.0, 1.0], [35300.0, 1.0], [36500.0, 1.0], [37300.0, 1.0], [38100.0, 2.0], [36900.0, 1.0], [37700.0, 1.0], [38500.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [42900.0, 1.0], [41300.0, 1.0], [42100.0, 1.0], [43700.0, 2.0], [46900.0, 2.0], [52100.0, 1.0], [51700.0, 1.0], [600.0, 2.0], [700.0, 1.0], [900.0, 9.0], [1000.0, 4.0], [1100.0, 3.0], [1200.0, 4.0], [1300.0, 12.0], [1400.0, 2.0], [1500.0, 1.0], [1600.0, 8.0], [1700.0, 6.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 4.0], [2100.0, 5.0], [2300.0, 10.0], [2200.0, 1.0], [2400.0, 5.0], [2500.0, 2.0], [2600.0, 2.0], [2700.0, 3.0], [2800.0, 1.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 2.0], [3200.0, 4.0], [3300.0, 6.0], [3400.0, 3.0], [3500.0, 2.0], [3600.0, 4.0], [3700.0, 6.0], [3800.0, 4.0], [3900.0, 5.0], [4000.0, 5.0], [4200.0, 3.0], [4100.0, 4.0], [4300.0, 3.0], [4500.0, 5.0], [4400.0, 1.0], [4600.0, 3.0], [4700.0, 4.0], [4800.0, 3.0], [4900.0, 8.0], [5000.0, 4.0], [5100.0, 1.0], [5300.0, 1.0], [5200.0, 1.0], [5500.0, 3.0], [5400.0, 3.0], [5600.0, 3.0], [5700.0, 5.0], [5800.0, 4.0], [6100.0, 2.0], [6000.0, 3.0], [5900.0, 1.0], [6200.0, 4.0], [6300.0, 5.0], [6500.0, 4.0], [6600.0, 3.0], [6400.0, 3.0], [6900.0, 3.0], [6700.0, 2.0], [6800.0, 4.0], [7100.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7400.0, 3.0], [7300.0, 1.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 3.0], [7900.0, 2.0], [7800.0, 1.0], [8000.0, 5.0], [8100.0, 6.0], [8300.0, 1.0], [8600.0, 2.0], [8700.0, 2.0], [8400.0, 4.0], [8500.0, 3.0], [8200.0, 1.0], [8800.0, 6.0], [9000.0, 1.0], [9100.0, 2.0], [8900.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9600.0, 3.0], [9700.0, 2.0], [9400.0, 4.0], [9900.0, 2.0], [10100.0, 1.0], [9800.0, 2.0], [10200.0, 1.0], [10600.0, 3.0], [10300.0, 4.0], [10500.0, 1.0], [10700.0, 1.0], [10400.0, 4.0], [10900.0, 3.0], [11200.0, 4.0], [10800.0, 5.0], [11000.0, 2.0], [11100.0, 1.0], [11400.0, 2.0], [11300.0, 3.0], [11700.0, 2.0], [11900.0, 2.0], [11800.0, 2.0], [12000.0, 2.0], [12200.0, 2.0], [12300.0, 3.0], [12400.0, 4.0], [12500.0, 4.0], [12700.0, 1.0], [13000.0, 5.0], [13100.0, 4.0], [13300.0, 2.0], [13200.0, 4.0], [12800.0, 2.0], [13800.0, 1.0], [13600.0, 1.0], [13700.0, 1.0], [13400.0, 2.0], [14000.0, 3.0], [14100.0, 5.0], [13900.0, 3.0], [14200.0, 1.0], [14300.0, 1.0], [14700.0, 3.0], [14500.0, 2.0], [14400.0, 5.0], [14600.0, 2.0], [15200.0, 4.0], [15100.0, 1.0], [15400.0, 3.0], [15500.0, 3.0], [15800.0, 2.0], [15700.0, 1.0], [16000.0, 2.0], [15900.0, 2.0], [16100.0, 3.0], [16300.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [17200.0, 3.0], [17400.0, 1.0], [17000.0, 3.0], [16800.0, 3.0], [18400.0, 1.0], [17800.0, 1.0], [18000.0, 2.0], [19000.0, 4.0], [18600.0, 2.0], [18800.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [19600.0, 3.0], [20400.0, 3.0], [19800.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [21200.0, 1.0], [21000.0, 1.0], [20600.0, 2.0], [20800.0, 1.0], [22000.0, 2.0], [21800.0, 2.0], [22200.0, 4.0], [21600.0, 1.0], [22600.0, 2.0], [23200.0, 1.0], [23400.0, 1.0], [24000.0, 2.0], [23800.0, 3.0], [23600.0, 1.0], [24400.0, 1.0], [24200.0, 2.0], [24800.0, 3.0], [25200.0, 2.0], [25400.0, 2.0], [24600.0, 1.0], [25600.0, 1.0], [26600.0, 1.0], [25800.0, 1.0], [26000.0, 1.0], [26400.0, 1.0], [27000.0, 1.0], [26800.0, 2.0], [27400.0, 1.0], [27200.0, 1.0], [28000.0, 1.0], [27800.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [29400.0, 2.0], [28800.0, 1.0], [30600.0, 1.0], [29800.0, 1.0], [30400.0, 2.0], [31400.0, 2.0], [31000.0, 1.0], [30800.0, 1.0], [31600.0, 2.0], [32200.0, 1.0], [31800.0, 2.0], [32000.0, 1.0], [32600.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [34000.0, 2.0], [34800.0, 1.0], [36400.0, 1.0], [35600.0, 2.0], [36800.0, 2.0], [35200.0, 1.0], [37200.0, 2.0], [38800.0, 1.0], [40000.0, 1.0], [42800.0, 1.0], [41200.0, 3.0], [42400.0, 2.0], [41600.0, 1.0], [43200.0, 2.0], [44000.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [46000.0, 1.0], [46400.0, 1.0], [46800.0, 1.0], [47200.0, 1.0], [50800.0, 1.0], [50000.0, 1.0], [49600.0, 1.0], [50400.0, 1.0], [33100.0, 1.0], [34700.0, 2.0], [33500.0, 1.0], [33900.0, 1.0], [36700.0, 1.0], [35500.0, 1.0], [35900.0, 1.0], [38700.0, 3.0], [37500.0, 1.0], [39900.0, 1.0], [39500.0, 1.0], [41900.0, 1.0], [41100.0, 1.0], [42700.0, 2.0], [44300.0, 1.0], [44700.0, 1.0], [47100.0, 2.0], [45900.0, 1.0], [45500.0, 1.0], [48300.0, 1.0], [48700.0, 1.0], [47500.0, 1.0], [49900.0, 1.0], [51100.0, 1.0], [16500.0, 3.0], [16900.0, 4.0], [17100.0, 2.0], [16700.0, 1.0], [17300.0, 2.0], [17700.0, 4.0], [17900.0, 2.0], [17500.0, 1.0], [18300.0, 1.0], [19100.0, 2.0], [18700.0, 2.0], [18500.0, 4.0], [18900.0, 2.0], [19300.0, 1.0], [20300.0, 1.0], [19700.0, 2.0], [19900.0, 1.0], [20100.0, 3.0], [21100.0, 5.0], [20700.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [20500.0, 1.0], [21500.0, 1.0], [22500.0, 2.0], [21900.0, 1.0], [22300.0, 1.0], [22100.0, 2.0], [22700.0, 2.0], [23100.0, 2.0], [22900.0, 1.0], [23500.0, 1.0], [23900.0, 3.0], [24500.0, 1.0], [24100.0, 1.0], [23700.0, 1.0], [24900.0, 3.0], [24700.0, 2.0], [25300.0, 2.0], [25100.0, 1.0], [26100.0, 1.0], [25700.0, 2.0], [25900.0, 1.0], [26300.0, 1.0], [26500.0, 2.0], [26900.0, 2.0], [27100.0, 1.0], [27500.0, 2.0], [27900.0, 3.0], [28100.0, 2.0], [28500.0, 2.0], [28300.0, 1.0], [28900.0, 1.0], [28700.0, 2.0], [29100.0, 1.0], [29300.0, 1.0], [29500.0, 1.0], [29900.0, 3.0], [30700.0, 4.0], [29700.0, 1.0], [30300.0, 1.0], [31700.0, 1.0], [31300.0, 1.0], [32300.0, 1.0], [32100.0, 1.0], [33800.0, 2.0], [34600.0, 2.0], [33400.0, 2.0], [33000.0, 1.0], [35000.0, 2.0], [35800.0, 4.0], [36600.0, 1.0], [38600.0, 1.0], [37000.0, 1.0], [37800.0, 2.0], [39400.0, 2.0], [40600.0, 1.0], [39000.0, 1.0], [40200.0, 2.0], [39800.0, 1.0], [41400.0, 2.0], [41000.0, 1.0], [42600.0, 1.0], [45000.0, 2.0], [44600.0, 1.0], [46200.0, 1.0], [48200.0, 1.0], [48600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 52100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 727.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 37.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 727.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.833333333333332, "minX": 1.65124974E12, "maxY": 72.1488095238095, "series": [{"data": [[1.65124986E12, 45.88953488372095], [1.65124974E12, 8.833333333333332], [1.65125004E12, 26.0], [1.65124992E12, 68.23976608187125], [1.65124998E12, 72.1488095238095], [1.6512498E12, 21.3855421686747]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125004E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4010.322033898305, "minX": 1.0, "maxY": 52197.0, "series": [{"data": [[2.0, 46849.0], [3.0, 12874.5], [4.0, 15612.333333333334], [5.0, 11455.0], [6.0, 14935.666666666666], [7.0, 18174.333333333332], [8.0, 21328.5], [9.0, 17819.666666666664], [10.0, 4010.322033898305], [11.0, 48635.0], [12.0, 14901.666666666666], [13.0, 26304.5], [14.0, 20557.5], [15.0, 17989.333333333336], [16.0, 13117.0], [17.0, 24398.0], [18.0, 18314.5], [19.0, 16858.333333333336], [20.0, 6866.166666666667], [21.0, 20437.0], [22.0, 16718.0], [23.0, 16334.333333333334], [24.0, 19036.0], [25.0, 21069.5], [26.0, 14873.666666666668], [27.0, 24452.5], [28.0, 17245.0], [29.0, 19099.0], [30.0, 9785.566666666666], [31.0, 21274.5], [32.0, 23777.333333333332], [33.0, 22164.5], [34.0, 11524.0], [35.0, 21592.0], [36.0, 11460.666666666666], [37.0, 12097.5], [38.0, 15831.0], [39.0, 9607.666666666668], [40.0, 13515.830508474577], [41.0, 20439.0], [42.0, 17161.333333333332], [43.0, 6296.666666666667], [44.0, 13777.5], [45.0, 8147.0], [46.0, 10333.333333333332], [47.0, 7922.0], [48.0, 11355.666666666668], [49.0, 7879.0], [50.0, 14273.881355932204], [51.0, 8213.0], [52.0, 20386.333333333332], [53.0, 17638.333333333332], [54.0, 21083.666666666668], [55.0, 52197.0], [56.0, 21450.333333333332], [57.0, 37996.0], [58.0, 22051.333333333332], [59.0, 34758.0], [60.0, 17372.672413793105], [61.0, 30850.0], [62.0, 38858.0], [63.0, 26785.333333333336], [64.0, 22645.75], [65.0, 22689.5], [66.0, 21934.5], [67.0, 15619.666666666666], [68.0, 21482.5], [69.0, 19204.333333333336], [70.0, 22284.166666666668], [71.0, 28127.0], [72.0, 28062.666666666668], [73.0, 32181.083333333332], [74.0, 23894.09444444444], [1.0, 27551.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[48.26832460732979, 17070.20549738219]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 93.5, "minX": 1.65124974E12, "maxY": 534.6666666666666, "series": [{"data": [[1.65124986E12, 534.6666666666666], [1.65124974E12, 110.9], [1.65125004E12, 161.16666666666666], [1.65124992E12, 531.3833333333333], [1.65124998E12, 525.8333333333334], [1.6512498E12, 517.4666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124986E12, 446.93333333333334], [1.65124974E12, 93.5], [1.65125004E12, 132.71666666666667], [1.65124992E12, 444.28333333333336], [1.65124998E12, 436.8], [1.6512498E12, 431.56666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125004E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2453.027777777778, "minX": 1.65124974E12, "maxY": 31170.431372549025, "series": [{"data": [[1.65124986E12, 13826.168604651164], [1.65124974E12, 2453.027777777778], [1.65125004E12, 31170.431372549025], [1.65124992E12, 20905.66081871343], [1.65124998E12, 25729.94047619047], [1.6512498E12, 6554.439759036145]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125004E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2452.9166666666665, "minX": 1.65124974E12, "maxY": 31170.41176470589, "series": [{"data": [[1.65124986E12, 13826.127906976753], [1.65124974E12, 2452.9166666666665], [1.65125004E12, 31170.41176470589], [1.65124992E12, 20905.596491228072], [1.65124998E12, 25729.92857142857], [1.6512498E12, 6554.397590361446]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125004E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.946428571428571, "minX": 1.65124974E12, "maxY": 26.388888888888886, "series": [{"data": [[1.65124986E12, 9.22093023255814], [1.65124974E12, 26.388888888888886], [1.65125004E12, 10.313725490196076], [1.65124992E12, 9.362573099415203], [1.65124998E12, 8.946428571428571], [1.6512498E12, 11.138554216867469]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125004E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 611.0, "minX": 1.65124974E12, "maxY": 52197.0, "series": [{"data": [[1.65124986E12, 31423.0], [1.65124974E12, 5595.0], [1.65125004E12, 51723.0], [1.65124992E12, 42901.0], [1.65124998E12, 52197.0], [1.6512498E12, 18485.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124986E12, 24849.0], [1.65124974E12, 4735.0], [1.65125004E12, 46768.8], [1.65124992E12, 36694.00000000001], [1.65124998E12, 45991.5], [1.6512498E12, 13102.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124986E12, 30333.110000000015], [1.65124974E12, 5595.0], [1.65125004E12, 51723.0], [1.65124992E12, 42245.08], [1.65124998E12, 51441.450000000004], [1.6512498E12, 17433.10000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124986E12, 27327.549999999996], [1.65124974E12, 4903.0999999999985], [1.65125004E12, 49347.799999999996], [1.65124992E12, 39216.200000000004], [1.65124998E12, 48327.75], [1.6512498E12, 14095.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124986E12, 989.0], [1.65124974E12, 611.0], [1.65125004E12, 8213.0], [1.65124992E12, 1268.0], [1.65124998E12, 938.0], [1.6512498E12, 738.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124986E12, 14312.0], [1.65124974E12, 2075.0], [1.65125004E12, 31301.0], [1.65124992E12, 20491.0], [1.65124998E12, 25427.0], [1.6512498E12, 5760.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125004E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1133.0, "minX": 1.0, "maxY": 15966.5, "series": [{"data": [[1.0, 1133.0], [4.0, 15020.0], [2.0, 15966.5], [3.0, 13099.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1131.0, "minX": 1.0, "maxY": 15966.5, "series": [{"data": [[1.0, 1131.0], [4.0, 15020.0], [2.0, 15966.5], [3.0, 13099.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.65124974E12, "maxY": 3.3666666666666667, "series": [{"data": [[1.65124986E12, 3.3666666666666667], [1.65124974E12, 0.7666666666666667], [1.65124992E12, 3.0833333333333335], [1.65124998E12, 2.4166666666666665], [1.6512498E12, 3.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124998E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.65124974E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65124986E12, 2.8666666666666667], [1.65124974E12, 0.6], [1.65125004E12, 0.85], [1.65124992E12, 2.85], [1.65124998E12, 2.8], [1.6512498E12, 2.7666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125004E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.65124974E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65124986E12, 2.8666666666666667], [1.65124974E12, 0.6], [1.65125004E12, 0.85], [1.65124992E12, 2.85], [1.65124998E12, 2.8], [1.6512498E12, 2.7666666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125004E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.65124974E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65124986E12, 2.8666666666666667], [1.65124974E12, 0.6], [1.65125004E12, 0.85], [1.65124992E12, 2.85], [1.65124998E12, 2.8], [1.6512498E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125004E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 690.0, "minX": 0.0, "maxY": 60376.0, "series": [{"data": [[0.0, 690.0], [0.1, 690.0], [0.2, 790.0], [0.3, 859.0], [0.4, 865.0], [0.5, 890.0], [0.6, 920.0], [0.7, 936.0], [0.8, 936.0], [0.9, 978.0], [1.0, 982.0], [1.1, 986.0], [1.2, 1019.0], [1.3, 1022.0], [1.4, 1034.0], [1.5, 1034.0], [1.6, 1084.0], [1.7, 1089.0], [1.8, 1094.0], [1.9, 1116.0], [2.0, 1117.0], [2.1, 1138.0], [2.2, 1160.0], [2.3, 1160.0], [2.4, 1166.0], [2.5, 1174.0], [2.6, 1183.0], [2.7, 1187.0], [2.8, 1194.0], [2.9, 1195.0], [3.0, 1195.0], [3.1, 1232.0], [3.2, 1260.0], [3.3, 1286.0], [3.4, 1321.0], [3.5, 1331.0], [3.6, 1339.0], [3.7, 1339.0], [3.8, 1344.0], [3.9, 1363.0], [4.0, 1386.0], [4.1, 1417.0], [4.2, 1435.0], [4.3, 1468.0], [4.4, 1482.0], [4.5, 1482.0], [4.6, 1489.0], [4.7, 1516.0], [4.8, 1522.0], [4.9, 1526.0], [5.0, 1564.0], [5.1, 1602.0], [5.2, 1602.0], [5.3, 1606.0], [5.4, 1615.0], [5.5, 1633.0], [5.6, 1647.0], [5.7, 1680.0], [5.8, 1685.0], [5.9, 1685.0], [6.0, 1754.0], [6.1, 1777.0], [6.2, 1778.0], [6.3, 1811.0], [6.4, 1845.0], [6.5, 1861.0], [6.6, 1863.0], [6.7, 1863.0], [6.8, 1931.0], [6.9, 1988.0], [7.0, 2067.0], [7.1, 2079.0], [7.2, 2198.0], [7.3, 2203.0], [7.4, 2203.0], [7.5, 2206.0], [7.6, 2254.0], [7.7, 2291.0], [7.8, 2293.0], [7.9, 2295.0], [8.0, 2311.0], [8.1, 2311.0], [8.2, 2323.0], [8.3, 2359.0], [8.4, 2461.0], [8.5, 2463.0], [8.6, 2468.0], [8.7, 2477.0], [8.8, 2481.0], [8.9, 2481.0], [9.0, 2486.0], [9.1, 2495.0], [9.2, 2496.0], [9.3, 2507.0], [9.4, 2528.0], [9.5, 2567.0], [9.6, 2567.0], [9.7, 2578.0], [9.8, 2635.0], [9.9, 2643.0], [10.0, 2662.0], [10.1, 2686.0], [10.2, 2701.0], [10.3, 2701.0], [10.4, 2714.0], [10.5, 2716.0], [10.6, 2757.0], [10.7, 2758.0], [10.8, 2761.0], [10.9, 2771.0], [11.0, 2837.0], [11.1, 2837.0], [11.2, 2838.0], [11.3, 2849.0], [11.4, 2849.0], [11.5, 2857.0], [11.6, 2863.0], [11.7, 2930.0], [11.8, 2930.0], [11.9, 2931.0], [12.0, 2950.0], [12.1, 2954.0], [12.2, 3042.0], [12.3, 3099.0], [12.4, 3137.0], [12.5, 3176.0], [12.6, 3176.0], [12.7, 3200.0], [12.8, 3256.0], [12.9, 3265.0], [13.0, 3269.0], [13.1, 3306.0], [13.2, 3316.0], [13.3, 3316.0], [13.4, 3398.0], [13.5, 3449.0], [13.6, 3462.0], [13.7, 3468.0], [13.8, 3482.0], [13.9, 3497.0], [14.0, 3497.0], [14.1, 3502.0], [14.2, 3508.0], [14.3, 3520.0], [14.4, 3523.0], [14.5, 3547.0], [14.6, 3623.0], [14.7, 3627.0], [14.8, 3627.0], [14.9, 3634.0], [15.0, 3647.0], [15.1, 3672.0], [15.2, 3750.0], [15.3, 3786.0], [15.4, 3809.0], [15.5, 3809.0], [15.6, 3835.0], [15.7, 3906.0], [15.8, 3907.0], [15.9, 3921.0], [16.0, 3932.0], [16.1, 3935.0], [16.2, 3935.0], [16.3, 3957.0], [16.4, 3997.0], [16.5, 4013.0], [16.6, 4017.0], [16.7, 4051.0], [16.8, 4090.0], [16.9, 4098.0], [17.0, 4098.0], [17.1, 4215.0], [17.2, 4237.0], [17.3, 4279.0], [17.4, 4284.0], [17.5, 4312.0], [17.6, 4357.0], [17.7, 4357.0], [17.8, 4395.0], [17.9, 4404.0], [18.0, 4458.0], [18.1, 4466.0], [18.2, 4499.0], [18.3, 4529.0], [18.4, 4529.0], [18.5, 4537.0], [18.6, 4564.0], [18.7, 4566.0], [18.8, 4643.0], [18.9, 4654.0], [19.0, 4718.0], [19.1, 4718.0], [19.2, 4718.0], [19.3, 4782.0], [19.4, 4784.0], [19.5, 4793.0], [19.6, 4807.0], [19.7, 4836.0], [19.8, 4841.0], [19.9, 4841.0], [20.0, 4865.0], [20.1, 4879.0], [20.2, 4919.0], [20.3, 4924.0], [20.4, 4927.0], [20.5, 4930.0], [20.6, 4930.0], [20.7, 4934.0], [20.8, 4954.0], [20.9, 4955.0], [21.0, 4993.0], [21.1, 5008.0], [21.2, 5085.0], [21.3, 5114.0], [21.4, 5114.0], [21.5, 5121.0], [21.6, 5143.0], [21.7, 5153.0], [21.8, 5210.0], [21.9, 5264.0], [22.0, 5287.0], [22.1, 5287.0], [22.2, 5307.0], [22.3, 5345.0], [22.4, 5355.0], [22.5, 5490.0], [22.6, 5515.0], [22.7, 5536.0], [22.8, 5536.0], [22.9, 5588.0], [23.0, 5609.0], [23.1, 5618.0], [23.2, 5695.0], [23.3, 5707.0], [23.4, 5734.0], [23.5, 5771.0], [23.6, 5771.0], [23.7, 5787.0], [23.8, 5794.0], [23.9, 5834.0], [24.0, 5898.0], [24.1, 5914.0], [24.2, 5958.0], [24.3, 5958.0], [24.4, 6023.0], [24.5, 6032.0], [24.6, 6057.0], [24.7, 6061.0], [24.8, 6134.0], [24.9, 6149.0], [25.0, 6166.0], [25.1, 6166.0], [25.2, 6196.0], [25.3, 6248.0], [25.4, 6262.0], [25.5, 6332.0], [25.6, 6332.0], [25.7, 6416.0], [25.8, 6416.0], [25.9, 6428.0], [26.0, 6456.0], [26.1, 6466.0], [26.2, 6494.0], [26.3, 6495.0], [26.4, 6510.0], [26.5, 6510.0], [26.6, 6521.0], [26.7, 6532.0], [26.8, 6599.0], [26.9, 6644.0], [27.0, 6652.0], [27.1, 6717.0], [27.2, 6759.0], [27.3, 6759.0], [27.4, 6776.0], [27.5, 6789.0], [27.6, 6822.0], [27.7, 6912.0], [27.8, 6943.0], [27.9, 6966.0], [28.0, 6966.0], [28.1, 6969.0], [28.2, 7045.0], [28.3, 7131.0], [28.4, 7142.0], [28.5, 7174.0], [28.6, 7194.0], [28.7, 7194.0], [28.8, 7230.0], [28.9, 7291.0], [29.0, 7321.0], [29.1, 7364.0], [29.2, 7394.0], [29.3, 7415.0], [29.4, 7428.0], [29.5, 7428.0], [29.6, 7517.0], [29.7, 7552.0], [29.8, 7572.0], [29.9, 7576.0], [30.0, 7643.0], [30.1, 7659.0], [30.2, 7659.0], [30.3, 7688.0], [30.4, 7714.0], [30.5, 7824.0], [30.6, 7826.0], [30.7, 7833.0], [30.8, 7893.0], [30.9, 7893.0], [31.0, 7933.0], [31.1, 8027.0], [31.2, 8031.0], [31.3, 8054.0], [31.4, 8064.0], [31.5, 8111.0], [31.6, 8164.0], [31.7, 8164.0], [31.8, 8267.0], [31.9, 8339.0], [32.0, 8341.0], [32.1, 8421.0], [32.2, 8427.0], [32.3, 8452.0], [32.4, 8452.0], [32.5, 8497.0], [32.6, 8507.0], [32.7, 8539.0], [32.8, 8633.0], [32.9, 8687.0], [33.0, 8729.0], [33.1, 8729.0], [33.2, 8754.0], [33.3, 8761.0], [33.4, 8761.0], [33.5, 8775.0], [33.6, 8790.0], [33.7, 8826.0], [33.8, 8894.0], [33.9, 8894.0], [34.0, 8915.0], [34.1, 9033.0], [34.2, 9039.0], [34.3, 9044.0], [34.4, 9103.0], [34.5, 9120.0], [34.6, 9120.0], [34.7, 9227.0], [34.8, 9425.0], [34.9, 9446.0], [35.0, 9473.0], [35.1, 9483.0], [35.2, 9529.0], [35.3, 9529.0], [35.4, 9546.0], [35.5, 9559.0], [35.6, 9684.0], [35.7, 9696.0], [35.8, 9716.0], [35.9, 9732.0], [36.0, 9743.0], [36.1, 9743.0], [36.2, 9855.0], [36.3, 9929.0], [36.4, 9957.0], [36.5, 10005.0], [36.6, 10007.0], [36.7, 10021.0], [36.8, 10021.0], [36.9, 10054.0], [37.0, 10063.0], [37.1, 10073.0], [37.2, 10084.0], [37.3, 10119.0], [37.4, 10231.0], [37.5, 10272.0], [37.6, 10272.0], [37.7, 10357.0], [37.8, 10369.0], [37.9, 10399.0], [38.0, 10452.0], [38.1, 10472.0], [38.2, 10506.0], [38.3, 10506.0], [38.4, 10630.0], [38.5, 10679.0], [38.6, 10752.0], [38.7, 10774.0], [38.8, 10802.0], [38.9, 10810.0], [39.0, 10810.0], [39.1, 10811.0], [39.2, 10914.0], [39.3, 10936.0], [39.4, 10971.0], [39.5, 11002.0], [39.6, 11014.0], [39.7, 11017.0], [39.8, 11017.0], [39.9, 11036.0], [40.0, 11086.0], [40.1, 11123.0], [40.2, 11185.0], [40.3, 11195.0], [40.4, 11256.0], [40.5, 11256.0], [40.6, 11264.0], [40.7, 11274.0], [40.8, 11338.0], [40.9, 11461.0], [41.0, 11465.0], [41.1, 11570.0], [41.2, 11570.0], [41.3, 11575.0], [41.4, 11596.0], [41.5, 11624.0], [41.6, 11804.0], [41.7, 11809.0], [41.8, 11835.0], [41.9, 11841.0], [42.0, 11841.0], [42.1, 11918.0], [42.2, 11921.0], [42.3, 12035.0], [42.4, 12087.0], [42.5, 12131.0], [42.6, 12135.0], [42.7, 12135.0], [42.8, 12202.0], [42.9, 12212.0], [43.0, 12302.0], [43.1, 12379.0], [43.2, 12499.0], [43.3, 12566.0], [43.4, 12566.0], [43.5, 12577.0], [43.6, 12606.0], [43.7, 12615.0], [43.8, 12634.0], [43.9, 12650.0], [44.0, 12660.0], [44.1, 12707.0], [44.2, 12707.0], [44.3, 12803.0], [44.4, 12803.0], [44.5, 12805.0], [44.6, 12917.0], [44.7, 12997.0], [44.8, 13074.0], [44.9, 13074.0], [45.0, 13149.0], [45.1, 13287.0], [45.2, 13303.0], [45.3, 13402.0], [45.4, 13453.0], [45.5, 13470.0], [45.6, 13470.0], [45.7, 13507.0], [45.8, 13562.0], [45.9, 13601.0], [46.0, 13673.0], [46.1, 13693.0], [46.2, 13758.0], [46.3, 13759.0], [46.4, 13759.0], [46.5, 13764.0], [46.6, 13808.0], [46.7, 13876.0], [46.8, 14012.0], [46.9, 14083.0], [47.0, 14110.0], [47.1, 14110.0], [47.2, 14116.0], [47.3, 14130.0], [47.4, 14219.0], [47.5, 14220.0], [47.6, 14296.0], [47.7, 14338.0], [47.8, 14338.0], [47.9, 14347.0], [48.0, 14372.0], [48.1, 14446.0], [48.2, 14485.0], [48.3, 14543.0], [48.4, 14563.0], [48.5, 14572.0], [48.6, 14572.0], [48.7, 14729.0], [48.8, 14749.0], [48.9, 14865.0], [49.0, 14939.0], [49.1, 14984.0], [49.2, 15004.0], [49.3, 15004.0], [49.4, 15006.0], [49.5, 15098.0], [49.6, 15105.0], [49.7, 15108.0], [49.8, 15112.0], [49.9, 15201.0], [50.0, 15235.0], [50.1, 15235.0], [50.2, 15308.0], [50.3, 15347.0], [50.4, 15404.0], [50.5, 15559.0], [50.6, 15578.0], [50.7, 15621.0], [50.8, 15621.0], [50.9, 15624.0], [51.0, 15736.0], [51.1, 15745.0], [51.2, 15747.0], [51.3, 15833.0], [51.4, 16149.0], [51.5, 16149.0], [51.6, 16151.0], [51.7, 16156.0], [51.8, 16177.0], [51.9, 16179.0], [52.0, 16192.0], [52.1, 16247.0], [52.2, 16263.0], [52.3, 16263.0], [52.4, 16315.0], [52.5, 16328.0], [52.6, 16350.0], [52.7, 16408.0], [52.8, 16423.0], [52.9, 16477.0], [53.0, 16477.0], [53.1, 16506.0], [53.2, 16570.0], [53.3, 16585.0], [53.4, 16750.0], [53.5, 16765.0], [53.6, 16808.0], [53.7, 16808.0], [53.8, 17023.0], [53.9, 17118.0], [54.0, 17182.0], [54.1, 17201.0], [54.2, 17277.0], [54.3, 17408.0], [54.4, 17410.0], [54.5, 17410.0], [54.6, 17426.0], [54.7, 17501.0], [54.8, 17560.0], [54.9, 17619.0], [55.0, 17661.0], [55.1, 17764.0], [55.2, 17764.0], [55.3, 17844.0], [55.4, 17894.0], [55.5, 17930.0], [55.6, 17978.0], [55.7, 18004.0], [55.8, 18016.0], [55.9, 18016.0], [56.0, 18026.0], [56.1, 18040.0], [56.2, 18106.0], [56.3, 18124.0], [56.4, 18182.0], [56.5, 18271.0], [56.6, 18363.0], [56.7, 18363.0], [56.8, 18389.0], [56.9, 18458.0], [57.0, 18488.0], [57.1, 18580.0], [57.2, 18658.0], [57.3, 18666.0], [57.4, 18666.0], [57.5, 18886.0], [57.6, 18919.0], [57.7, 19086.0], [57.8, 19116.0], [57.9, 19227.0], [58.0, 19234.0], [58.1, 19234.0], [58.2, 19278.0], [58.3, 19346.0], [58.4, 19366.0], [58.5, 19409.0], [58.6, 19445.0], [58.7, 19520.0], [58.8, 19689.0], [58.9, 19689.0], [59.0, 19735.0], [59.1, 19749.0], [59.2, 19750.0], [59.3, 19770.0], [59.4, 19944.0], [59.5, 19957.0], [59.6, 19957.0], [59.7, 19996.0], [59.8, 19996.0], [59.9, 20119.0], [60.0, 20129.0], [60.1, 20231.0], [60.2, 20276.0], [60.3, 20276.0], [60.4, 20324.0], [60.5, 20369.0], [60.6, 20444.0], [60.7, 20482.0], [60.8, 20591.0], [60.9, 20657.0], [61.0, 20746.0], [61.1, 20746.0], [61.2, 20835.0], [61.3, 20882.0], [61.4, 20926.0], [61.5, 21068.0], [61.6, 21122.0], [61.7, 21122.0], [61.8, 21122.0], [61.9, 21140.0], [62.0, 21172.0], [62.1, 21203.0], [62.2, 21229.0], [62.3, 21295.0], [62.4, 21303.0], [62.5, 21368.0], [62.6, 21368.0], [62.7, 21455.0], [62.8, 21569.0], [62.9, 21590.0], [63.0, 21614.0], [63.1, 21675.0], [63.2, 21762.0], [63.3, 21762.0], [63.4, 21854.0], [63.5, 22059.0], [63.6, 22084.0], [63.7, 22200.0], [63.8, 22223.0], [63.9, 22259.0], [64.0, 22259.0], [64.1, 22449.0], [64.2, 22466.0], [64.3, 22646.0], [64.4, 22693.0], [64.5, 22710.0], [64.6, 22788.0], [64.7, 22814.0], [64.8, 22814.0], [64.9, 22842.0], [65.0, 22917.0], [65.1, 22951.0], [65.2, 22959.0], [65.3, 22983.0], [65.4, 23066.0], [65.5, 23066.0], [65.6, 23264.0], [65.7, 23384.0], [65.8, 23394.0], [65.9, 23441.0], [66.0, 23476.0], [66.1, 23589.0], [66.2, 23589.0], [66.3, 23699.0], [66.4, 23809.0], [66.5, 23823.0], [66.6, 23922.0], [66.7, 24055.0], [66.8, 24136.0], [66.9, 24268.0], [67.0, 24268.0], [67.1, 24298.0], [67.2, 24341.0], [67.3, 24489.0], [67.4, 24556.0], [67.5, 24697.0], [67.6, 24820.0], [67.7, 24820.0], [67.8, 24822.0], [67.9, 24861.0], [68.0, 24894.0], [68.1, 25092.0], [68.2, 25165.0], [68.3, 25233.0], [68.4, 25233.0], [68.5, 25247.0], [68.6, 25350.0], [68.7, 25389.0], [68.8, 25392.0], [68.9, 25452.0], [69.0, 25604.0], [69.1, 25671.0], [69.2, 25671.0], [69.3, 25737.0], [69.4, 25924.0], [69.5, 25999.0], [69.6, 26048.0], [69.7, 26056.0], [69.8, 26096.0], [69.9, 26096.0], [70.0, 26119.0], [70.1, 26175.0], [70.2, 26185.0], [70.3, 26198.0], [70.4, 26359.0], [70.5, 26462.0], [70.6, 26462.0], [70.7, 26485.0], [70.8, 26536.0], [70.9, 26756.0], [71.0, 26892.0], [71.1, 26951.0], [71.2, 26969.0], [71.3, 27095.0], [71.4, 27095.0], [71.5, 27107.0], [71.6, 27319.0], [71.7, 27346.0], [71.8, 27432.0], [71.9, 27524.0], [72.0, 27559.0], [72.1, 27559.0], [72.2, 27561.0], [72.3, 27636.0], [72.4, 27669.0], [72.5, 27764.0], [72.6, 27798.0], [72.7, 27804.0], [72.8, 27804.0], [72.9, 28037.0], [73.0, 28130.0], [73.1, 28273.0], [73.2, 28275.0], [73.3, 28295.0], [73.4, 28313.0], [73.5, 28456.0], [73.6, 28456.0], [73.7, 28598.0], [73.8, 28674.0], [73.9, 28701.0], [74.0, 28840.0], [74.1, 28845.0], [74.2, 28984.0], [74.3, 28984.0], [74.4, 29018.0], [74.5, 29170.0], [74.6, 29195.0], [74.7, 29360.0], [74.8, 29463.0], [74.9, 29665.0], [75.0, 29665.0], [75.1, 29682.0], [75.2, 29770.0], [75.3, 29797.0], [75.4, 29936.0], [75.5, 29998.0], [75.6, 30032.0], [75.7, 30354.0], [75.8, 30354.0], [75.9, 30391.0], [76.0, 30449.0], [76.1, 30639.0], [76.2, 30664.0], [76.3, 30737.0], [76.4, 30800.0], [76.5, 30800.0], [76.6, 30811.0], [76.7, 30883.0], [76.8, 30886.0], [76.9, 30905.0], [77.0, 30965.0], [77.1, 31071.0], [77.2, 31346.0], [77.3, 31346.0], [77.4, 31495.0], [77.5, 31626.0], [77.6, 31634.0], [77.7, 31768.0], [77.8, 31790.0], [77.9, 31878.0], [78.0, 31878.0], [78.1, 32002.0], [78.2, 32044.0], [78.3, 32061.0], [78.4, 32144.0], [78.5, 32224.0], [78.6, 32343.0], [78.7, 32343.0], [78.8, 32385.0], [78.9, 32600.0], [79.0, 32695.0], [79.1, 32704.0], [79.2, 32992.0], [79.3, 33204.0], [79.4, 33399.0], [79.5, 33399.0], [79.6, 33467.0], [79.7, 33546.0], [79.8, 33665.0], [79.9, 33733.0], [80.0, 33772.0], [80.1, 33878.0], [80.2, 33878.0], [80.3, 33980.0], [80.4, 34048.0], [80.5, 34214.0], [80.6, 34438.0], [80.7, 34502.0], [80.8, 34555.0], [80.9, 34555.0], [81.0, 34711.0], [81.1, 34720.0], [81.2, 34799.0], [81.3, 34850.0], [81.4, 34923.0], [81.5, 35016.0], [81.6, 35076.0], [81.7, 35076.0], [81.8, 35219.0], [81.9, 35248.0], [82.0, 35416.0], [82.1, 35418.0], [82.2, 35630.0], [82.3, 35775.0], [82.4, 35775.0], [82.5, 35885.0], [82.6, 35927.0], [82.7, 35939.0], [82.8, 36052.0], [82.9, 36134.0], [83.0, 36294.0], [83.1, 36294.0], [83.2, 36427.0], [83.3, 36445.0], [83.4, 36598.0], [83.5, 36684.0], [83.6, 36864.0], [83.7, 37132.0], [83.8, 37197.0], [83.9, 37197.0], [84.0, 37557.0], [84.1, 37606.0], [84.2, 37738.0], [84.3, 37888.0], [84.4, 37962.0], [84.5, 38030.0], [84.6, 38030.0], [84.7, 38259.0], [84.8, 38327.0], [84.9, 38345.0], [85.0, 38727.0], [85.1, 38919.0], [85.2, 38982.0], [85.3, 38982.0], [85.4, 39095.0], [85.5, 39103.0], [85.6, 39118.0], [85.7, 39240.0], [85.8, 39260.0], [85.9, 39315.0], [86.0, 39585.0], [86.1, 39585.0], [86.2, 39782.0], [86.3, 39998.0], [86.4, 40276.0], [86.5, 40367.0], [86.6, 40460.0], [86.7, 40495.0], [86.8, 40495.0], [86.9, 40563.0], [87.0, 40837.0], [87.1, 40888.0], [87.2, 41086.0], [87.3, 41113.0], [87.4, 41279.0], [87.5, 41279.0], [87.6, 41395.0], [87.7, 41421.0], [87.8, 41579.0], [87.9, 42009.0], [88.0, 42402.0], [88.1, 42413.0], [88.2, 42546.0], [88.3, 42546.0], [88.4, 42884.0], [88.5, 42967.0], [88.6, 43028.0], [88.7, 43398.0], [88.8, 43630.0], [88.9, 43796.0], [89.0, 43796.0], [89.1, 43817.0], [89.2, 43915.0], [89.3, 43954.0], [89.4, 44147.0], [89.5, 44190.0], [89.6, 44504.0], [89.7, 44590.0], [89.8, 44590.0], [89.9, 44651.0], [90.0, 44789.0], [90.1, 45218.0], [90.2, 45310.0], [90.3, 45395.0], [90.4, 45447.0], [90.5, 45447.0], [90.6, 45864.0], [90.7, 45952.0], [90.8, 46096.0], [90.9, 46106.0], [91.0, 46156.0], [91.1, 46217.0], [91.2, 46217.0], [91.3, 46485.0], [91.4, 46640.0], [91.5, 46697.0], [91.6, 47119.0], [91.7, 47342.0], [91.8, 47562.0], [91.9, 47656.0], [92.0, 47656.0], [92.1, 47673.0], [92.2, 47864.0], [92.3, 48012.0], [92.4, 48354.0], [92.5, 48583.0], [92.6, 48901.0], [92.7, 48901.0], [92.8, 48901.0], [92.9, 49076.0], [93.0, 49351.0], [93.1, 49528.0], [93.2, 49926.0], [93.3, 50094.0], [93.4, 50094.0], [93.5, 50182.0], [93.6, 50923.0], [93.7, 50943.0], [93.8, 51058.0], [93.9, 51084.0], [94.0, 51152.0], [94.1, 51160.0], [94.2, 51160.0], [94.3, 51667.0], [94.4, 52039.0], [94.5, 52103.0], [94.6, 52280.0], [94.7, 52499.0], [94.8, 52538.0], [94.9, 52538.0], [95.0, 52872.0], [95.1, 53246.0], [95.2, 53333.0], [95.3, 53632.0], [95.4, 53906.0], [95.5, 54040.0], [95.6, 54040.0], [95.7, 54445.0], [95.8, 54510.0], [95.9, 54648.0], [96.0, 54760.0], [96.1, 54939.0], [96.2, 55633.0], [96.3, 55649.0], [96.4, 55649.0], [96.5, 56105.0], [96.6, 56306.0], [96.7, 56339.0], [96.8, 56394.0], [96.9, 56785.0], [97.0, 57053.0], [97.1, 57053.0], [97.2, 57467.0], [97.3, 57780.0], [97.4, 58262.0], [97.5, 58435.0], [97.6, 58723.0], [97.7, 59019.0], [97.8, 59019.0], [97.9, 59188.0], [98.0, 59908.0], [98.1, 59918.0], [98.2, 60008.0], [98.3, 60010.0], [98.4, 60010.0], [98.5, 60010.0], [98.6, 60010.0], [98.7, 60010.0], [98.8, 60013.0], [98.9, 60013.0], [99.0, 60034.0], [99.1, 60067.0], [99.2, 60162.0], [99.3, 60162.0], [99.4, 60173.0], [99.5, 60188.0], [99.6, 60197.0], [99.7, 60221.0], [99.8, 60227.0], [99.9, 60376.0], [100.0, 60376.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 10.0, "series": [{"data": [[33700.0, 2.0], [32900.0, 1.0], [34500.0, 2.0], [36100.0, 1.0], [37700.0, 1.0], [39300.0, 1.0], [42500.0, 1.0], [44100.0, 2.0], [43300.0, 1.0], [47300.0, 1.0], [48900.0, 2.0], [52100.0, 1.0], [54500.0, 1.0], [56100.0, 1.0], [57700.0, 1.0], [60100.0, 4.0], [600.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 10.0], [1200.0, 3.0], [1300.0, 6.0], [1400.0, 5.0], [1500.0, 4.0], [1600.0, 7.0], [1700.0, 3.0], [1800.0, 4.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 1.0], [2200.0, 6.0], [2300.0, 3.0], [2400.0, 8.0], [2500.0, 4.0], [2600.0, 4.0], [2800.0, 6.0], [2700.0, 7.0], [2900.0, 4.0], [3000.0, 2.0], [3100.0, 2.0], [3300.0, 3.0], [3200.0, 4.0], [3400.0, 5.0], [3500.0, 5.0], [3700.0, 2.0], [3600.0, 5.0], [3800.0, 2.0], [3900.0, 7.0], [4000.0, 5.0], [4300.0, 3.0], [4200.0, 4.0], [4400.0, 4.0], [4500.0, 4.0], [4600.0, 2.0], [4700.0, 5.0], [4800.0, 5.0], [5100.0, 4.0], [4900.0, 8.0], [5000.0, 2.0], [5300.0, 3.0], [5200.0, 3.0], [5600.0, 3.0], [5500.0, 3.0], [5400.0, 1.0], [5800.0, 2.0], [5700.0, 5.0], [5900.0, 2.0], [6000.0, 4.0], [6100.0, 4.0], [6200.0, 2.0], [6300.0, 2.0], [6500.0, 4.0], [6400.0, 6.0], [6600.0, 2.0], [6800.0, 1.0], [6700.0, 4.0], [6900.0, 4.0], [7100.0, 4.0], [7000.0, 1.0], [7300.0, 3.0], [7400.0, 2.0], [7200.0, 2.0], [7600.0, 3.0], [7500.0, 4.0], [7700.0, 1.0], [7800.0, 4.0], [7900.0, 1.0], [8000.0, 4.0], [8100.0, 2.0], [8400.0, 4.0], [8600.0, 2.0], [8200.0, 1.0], [9000.0, 3.0], [8800.0, 2.0], [9200.0, 1.0], [9400.0, 4.0], [9600.0, 2.0], [10000.0, 7.0], [10200.0, 2.0], [9800.0, 1.0], [10600.0, 2.0], [10400.0, 2.0], [11000.0, 5.0], [10800.0, 3.0], [11200.0, 3.0], [11600.0, 1.0], [11400.0, 2.0], [11800.0, 4.0], [12200.0, 2.0], [12000.0, 2.0], [12600.0, 5.0], [12400.0, 1.0], [13200.0, 1.0], [12800.0, 3.0], [13000.0, 1.0], [13800.0, 2.0], [13400.0, 3.0], [13600.0, 3.0], [14200.0, 3.0], [14000.0, 2.0], [14800.0, 1.0], [14400.0, 2.0], [15000.0, 3.0], [15200.0, 2.0], [15600.0, 2.0], [15400.0, 1.0], [15800.0, 1.0], [16200.0, 2.0], [17200.0, 2.0], [16800.0, 1.0], [16400.0, 3.0], [17600.0, 2.0], [18000.0, 4.0], [18400.0, 2.0], [18800.0, 1.0], [19200.0, 3.0], [20400.0, 2.0], [19600.0, 1.0], [21200.0, 3.0], [20800.0, 2.0], [22000.0, 2.0], [21600.0, 2.0], [22400.0, 2.0], [22800.0, 2.0], [23200.0, 1.0], [24400.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [25200.0, 2.0], [24800.0, 4.0], [26000.0, 3.0], [26400.0, 2.0], [25600.0, 2.0], [27600.0, 2.0], [26800.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [29600.0, 2.0], [28800.0, 2.0], [30400.0, 1.0], [30000.0, 1.0], [31600.0, 2.0], [30800.0, 4.0], [32000.0, 3.0], [33600.0, 1.0], [34400.0, 1.0], [35200.0, 2.0], [36000.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [39200.0, 2.0], [40800.0, 2.0], [42400.0, 2.0], [46400.0, 1.0], [48000.0, 1.0], [52000.0, 1.0], [52800.0, 1.0], [53600.0, 1.0], [54400.0, 1.0], [58400.0, 1.0], [60000.0, 9.0], [33900.0, 1.0], [34700.0, 3.0], [37100.0, 2.0], [38700.0, 1.0], [37900.0, 1.0], [39500.0, 1.0], [40300.0, 1.0], [41100.0, 1.0], [45900.0, 1.0], [48300.0, 1.0], [47500.0, 1.0], [49900.0, 1.0], [53900.0, 1.0], [54700.0, 1.0], [56300.0, 3.0], [58700.0, 1.0], [60300.0, 1.0], [16500.0, 3.0], [18100.0, 3.0], [17700.0, 1.0], [18500.0, 1.0], [19300.0, 2.0], [18900.0, 1.0], [19700.0, 4.0], [20100.0, 2.0], [20900.0, 1.0], [21300.0, 2.0], [20500.0, 1.0], [21700.0, 1.0], [22900.0, 4.0], [23300.0, 2.0], [24100.0, 1.0], [24500.0, 1.0], [25300.0, 3.0], [26100.0, 4.0], [26500.0, 1.0], [25700.0, 1.0], [26900.0, 2.0], [27300.0, 2.0], [27700.0, 2.0], [28100.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [29700.0, 2.0], [30900.0, 2.0], [31700.0, 2.0], [31300.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [35400.0, 2.0], [36200.0, 1.0], [37800.0, 1.0], [40200.0, 1.0], [41000.0, 1.0], [46600.0, 2.0], [45800.0, 1.0], [49000.0, 1.0], [52200.0, 1.0], [54600.0, 1.0], [57000.0, 1.0], [60200.0, 2.0], [33300.0, 1.0], [34900.0, 1.0], [36500.0, 1.0], [35700.0, 1.0], [38900.0, 2.0], [39700.0, 1.0], [40500.0, 1.0], [42900.0, 1.0], [41300.0, 1.0], [44500.0, 2.0], [43700.0, 1.0], [45300.0, 2.0], [46100.0, 2.0], [48500.0, 1.0], [50900.0, 2.0], [49300.0, 1.0], [50100.0, 1.0], [52500.0, 1.0], [54900.0, 1.0], [53300.0, 1.0], [8700.0, 6.0], [8300.0, 2.0], [8500.0, 2.0], [9100.0, 2.0], [8900.0, 1.0], [9500.0, 3.0], [9700.0, 3.0], [9900.0, 2.0], [10100.0, 1.0], [10700.0, 2.0], [10300.0, 3.0], [10500.0, 1.0], [10900.0, 3.0], [11100.0, 3.0], [11500.0, 3.0], [11300.0, 1.0], [11900.0, 2.0], [12100.0, 2.0], [12300.0, 2.0], [12700.0, 1.0], [12500.0, 2.0], [12900.0, 2.0], [13300.0, 1.0], [13100.0, 1.0], [13500.0, 2.0], [13700.0, 3.0], [14300.0, 3.0], [14100.0, 3.0], [14500.0, 3.0], [14700.0, 2.0], [14900.0, 2.0], [15100.0, 3.0], [15300.0, 2.0], [15700.0, 3.0], [15500.0, 2.0], [16300.0, 3.0], [16100.0, 6.0], [17000.0, 1.0], [17400.0, 3.0], [17800.0, 2.0], [18200.0, 1.0], [18600.0, 2.0], [19400.0, 2.0], [19000.0, 1.0], [20200.0, 2.0], [21000.0, 1.0], [21400.0, 1.0], [20600.0, 1.0], [21800.0, 1.0], [22200.0, 3.0], [23000.0, 1.0], [23400.0, 2.0], [22600.0, 2.0], [23800.0, 2.0], [24200.0, 2.0], [25400.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28200.0, 3.0], [28600.0, 1.0], [27800.0, 1.0], [29400.0, 1.0], [29000.0, 1.0], [30600.0, 2.0], [31000.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [32600.0, 2.0], [34800.0, 1.0], [34000.0, 1.0], [33200.0, 1.0], [36400.0, 2.0], [35600.0, 1.0], [38000.0, 1.0], [40400.0, 2.0], [41200.0, 1.0], [42800.0, 1.0], [42000.0, 1.0], [43600.0, 1.0], [46000.0, 1.0], [45200.0, 1.0], [47600.0, 2.0], [50000.0, 1.0], [53200.0, 1.0], [51600.0, 1.0], [52400.0, 1.0], [54000.0, 1.0], [55600.0, 2.0], [33500.0, 1.0], [35900.0, 2.0], [37500.0, 1.0], [38300.0, 2.0], [39100.0, 2.0], [39900.0, 1.0], [41500.0, 1.0], [43900.0, 2.0], [44700.0, 1.0], [47100.0, 1.0], [49500.0, 1.0], [51100.0, 2.0], [56700.0, 1.0], [59100.0, 1.0], [59900.0, 2.0], [16700.0, 2.0], [17100.0, 2.0], [17500.0, 2.0], [17900.0, 2.0], [18300.0, 2.0], [19100.0, 1.0], [19900.0, 4.0], [19500.0, 1.0], [20300.0, 2.0], [20700.0, 1.0], [21100.0, 4.0], [21500.0, 2.0], [23500.0, 1.0], [22700.0, 2.0], [24300.0, 1.0], [23900.0, 1.0], [25100.0, 1.0], [26300.0, 1.0], [25900.0, 2.0], [27500.0, 3.0], [26700.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [29100.0, 2.0], [28700.0, 1.0], [29900.0, 2.0], [30300.0, 2.0], [30700.0, 1.0], [32300.0, 2.0], [32700.0, 1.0], [33400.0, 1.0], [34200.0, 1.0], [35000.0, 2.0], [36600.0, 1.0], [35800.0, 1.0], [38200.0, 1.0], [39000.0, 1.0], [41400.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [47800.0, 1.0], [51000.0, 2.0], [57400.0, 1.0], [59000.0, 1.0], [58200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 809.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 40.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 809.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 15.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.439716312056737, "minX": 1.65125136E12, "maxY": 83.60869565217394, "series": [{"data": [[1.65125148E12, 60.444444444444464], [1.65125166E12, 24.0], [1.6512516E12, 83.60869565217394], [1.65125142E12, 36.61627906976743], [1.65125136E12, 14.439716312056737], [1.65125154E12, 83.56976744186053]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4155.661016949152, "minX": 1.0, "maxY": 60173.0, "series": [{"data": [[2.0, 60173.0], [3.0, 29706.5], [4.0, 18621.5], [5.0, 20874.333333333332], [6.0, 29142.5], [7.0, 17766.0], [8.0, 19726.333333333332], [9.0, 11617.666666666666], [10.0, 4155.661016949152], [11.0, 17524.5], [12.0, 19719.333333333336], [13.0, 12796.0], [14.0, 27096.0], [15.0, 11253.666666666668], [16.0, 25111.0], [17.0, 10312.0], [18.0, 17864.333333333336], [19.0, 14756.0], [20.0, 6853.5], [21.0, 19521.0], [22.0, 20186.333333333336], [23.0, 25078.5], [24.0, 26987.666666666668], [25.0, 30649.5], [26.0, 17787.333333333336], [27.0, 36757.0], [28.0, 25476.0], [29.0, 14593.333333333334], [30.0, 10255.157894736843], [31.0, 31725.333333333336], [32.0, 29359.0], [33.0, 27971.5], [34.0, 13030.666666666666], [35.0, 19678.333333333332], [36.0, 13835.666666666666], [37.0, 20348.333333333336], [39.0, 21176.666666666664], [38.0, 32044.0], [40.0, 12352.27118644068], [41.0, 26677.0], [42.0, 20799.666666666668], [43.0, 36294.5], [44.0, 21509.0], [45.0, 28717.0], [46.0, 13509.0], [47.0, 23078.5], [48.0, 14410.666666666668], [49.0, 29289.5], [50.0, 15125.210526315794], [51.0, 18389.0], [52.0, 13131.666666666668], [53.0, 39315.0], [54.0, 13487.0], [55.0, 19937.0], [56.0, 12236.0], [57.0, 20593.0], [58.0, 14917.333333333334], [59.0, 28109.0], [60.0, 18069.728813559323], [61.0, 26324.0], [62.0, 17372.0], [63.0, 26943.0], [65.0, 26963.666666666668], [66.0, 18276.5], [67.0, 27589.333333333332], [64.0, 11017.0], [68.0, 17511.5], [69.0, 28443.5], [70.0, 18794.40322580645], [71.0, 29037.0], [73.0, 29889.666666666668], [74.0, 30094.0], [75.0, 28950.5], [72.0, 4566.0], [76.0, 27342.0], [77.0, 30574.333333333332], [78.0, 26644.0], [79.0, 42887.75], [80.0, 19696.816666666662], [81.0, 33107.5], [82.0, 43206.666666666664], [83.0, 48743.333333333336], [84.0, 23677.0], [85.0, 42311.0], [86.0, 31865.124999999996], [87.0, 33420.0], [88.0, 27409.666666666664], [89.0, 44803.0], [90.0, 30019.468571428573], [1.0, 60010.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[55.13078703703704, 19644.03703703702]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 90.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 122.28333333333333, "minX": 1.65125136E12, "maxY": 541.9166666666666, "series": [{"data": [[1.65125148E12, 532.0166666666667], [1.65125166E12, 172.01666666666668], [1.6512516E12, 541.9166666666666], [1.65125142E12, 535.5166666666667], [1.65125136E12, 436.8666666666667], [1.65125154E12, 536.8166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125148E12, 444.35], [1.65125166E12, 122.28333333333333], [1.6512516E12, 418.5833333333333], [1.65125142E12, 447.03333333333336], [1.65125136E12, 366.3833333333333], [1.65125154E12, 447.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4355.418439716311, "minX": 1.65125136E12, "maxY": 44768.957446808505, "series": [{"data": [[1.65125148E12, 17344.09941520469], [1.65125166E12, 44768.957446808505], [1.6512516E12, 32327.677018633523], [1.65125142E12, 10599.720930232565], [1.65125136E12, 4355.418439716311], [1.65125154E12, 24770.02325581398]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4355.354609929077, "minX": 1.65125136E12, "maxY": 44768.957446808505, "series": [{"data": [[1.65125148E12, 17344.070175438592], [1.65125166E12, 44768.957446808505], [1.6512516E12, 32327.62732919253], [1.65125142E12, 10599.697674418607], [1.65125136E12, 4355.354609929077], [1.65125154E12, 24769.970930232557]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.360465116279073, "minX": 1.65125136E12, "maxY": 16.028368794326248, "series": [{"data": [[1.65125148E12, 8.807017543859649], [1.65125166E12, 8.553191489361701], [1.6512516E12, 9.54037267080745], [1.65125142E12, 10.063953488372093], [1.65125136E12, 16.028368794326248], [1.65125154E12, 8.360465116279073]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 690.0, "minX": 1.65125136E12, "maxY": 60034.0, "series": [{"data": [[1.65125148E12, 39095.0], [1.65125166E12, 59908.0], [1.6512516E12, 60034.0], [1.65125142E12, 26198.0], [1.65125136E12, 14865.0], [1.65125154E12, 53906.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125148E12, 30836.600000000002], [1.65125166E12, 56903.600000000006], [1.6512516E12, 54369.00000000001], [1.65125142E12, 19672.500000000007], [1.65125136E12, 8749.0], [1.65125154E12, 43009.700000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125148E12, 37987.64], [1.65125166E12, 59908.0], [1.6512516E12, 59972.52], [1.65125142E12, 25503.77000000001], [1.65125136E12, 14421.060000000014], [1.65125154E12, 52907.360000000015]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125148E12, 33182.0], [1.65125166E12, 58694.2], [1.6512516E12, 57023.7], [1.65125142E12, 21925.75], [1.65125136E12, 10969.700000000003], [1.65125154E12, 46286.399999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125148E12, 986.0], [1.65125166E12, 25233.0], [1.6512516E12, 1117.0], [1.65125142E12, 890.0], [1.65125136E12, 690.0], [1.65125154E12, 1019.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125148E12, 17023.0], [1.65125166E12, 43954.0], [1.6512516E12, 31295.0], [1.65125142E12, 10078.5], [1.65125136E12, 3634.0], [1.65125154E12, 25257.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14338.0, "minX": 1.0, "maxY": 60179.5, "series": [{"data": [[1.0, 20129.0], [2.0, 16457.0], [4.0, 14934.5], [5.0, 54040.0], [3.0, 14338.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60179.5], [2.0, 60091.5], [5.0, 60099.0], [3.0, 60013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14338.0, "minX": 1.0, "maxY": 60179.5, "series": [{"data": [[1.0, 20129.0], [2.0, 16457.0], [4.0, 14934.5], [5.0, 54040.0], [3.0, 14338.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60179.5], [2.0, 60091.5], [5.0, 60099.0], [3.0, 60013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9666666666666666, "minX": 1.65125136E12, "maxY": 3.35, "series": [{"data": [[1.65125148E12, 3.183333333333333], [1.6512516E12, 1.9666666666666666], [1.65125142E12, 3.35], [1.65125136E12, 2.7], [1.65125154E12, 3.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.65125136E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125148E12, 2.85], [1.65125166E12, 0.6833333333333333], [1.6512516E12, 2.533333333333333], [1.65125142E12, 2.8666666666666667], [1.65125136E12, 2.35], [1.65125154E12, 2.8666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65125166E12, 0.1], [1.6512516E12, 0.15]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.65125136E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125148E12, 2.85], [1.65125166E12, 0.6833333333333333], [1.6512516E12, 2.533333333333333], [1.65125142E12, 2.8666666666666667], [1.65125136E12, 2.35], [1.65125154E12, 2.8666666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65125166E12, 0.1], [1.6512516E12, 0.15]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.65125136E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125148E12, 2.85], [1.65125166E12, 0.6833333333333333], [1.6512516E12, 2.533333333333333], [1.65125142E12, 2.8666666666666667], [1.65125136E12, 2.35], [1.65125154E12, 2.8666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65125166E12, 0.1], [1.6512516E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


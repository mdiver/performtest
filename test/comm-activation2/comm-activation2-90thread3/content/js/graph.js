/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 622.0, "minX": 0.0, "maxY": 60349.0, "series": [{"data": [[0.0, 622.0], [0.1, 622.0], [0.2, 675.0], [0.3, 726.0], [0.4, 783.0], [0.5, 870.0], [0.6, 887.0], [0.7, 887.0], [0.8, 932.0], [0.9, 955.0], [1.0, 996.0], [1.1, 998.0], [1.2, 1008.0], [1.3, 1021.0], [1.4, 1021.0], [1.5, 1039.0], [1.6, 1041.0], [1.7, 1067.0], [1.8, 1080.0], [1.9, 1095.0], [2.0, 1136.0], [2.1, 1136.0], [2.2, 1136.0], [2.3, 1139.0], [2.4, 1145.0], [2.5, 1145.0], [2.6, 1164.0], [2.7, 1164.0], [2.8, 1171.0], [2.9, 1197.0], [3.0, 1211.0], [3.1, 1237.0], [3.2, 1240.0], [3.3, 1248.0], [3.4, 1248.0], [3.5, 1259.0], [3.6, 1293.0], [3.7, 1360.0], [3.8, 1360.0], [3.9, 1363.0], [4.0, 1391.0], [4.1, 1391.0], [4.2, 1431.0], [4.3, 1482.0], [4.4, 1483.0], [4.5, 1496.0], [4.6, 1532.0], [4.7, 1532.0], [4.8, 1547.0], [4.9, 1548.0], [5.0, 1577.0], [5.1, 1579.0], [5.2, 1581.0], [5.3, 1585.0], [5.4, 1585.0], [5.5, 1588.0], [5.6, 1589.0], [5.7, 1590.0], [5.8, 1617.0], [5.9, 1641.0], [6.0, 1654.0], [6.1, 1654.0], [6.2, 1719.0], [6.3, 1754.0], [6.4, 1827.0], [6.5, 1831.0], [6.6, 1855.0], [6.7, 1875.0], [6.8, 1875.0], [6.9, 1876.0], [7.0, 1905.0], [7.1, 1957.0], [7.2, 1983.0], [7.3, 2040.0], [7.4, 2040.0], [7.5, 2070.0], [7.6, 2085.0], [7.7, 2089.0], [7.8, 2090.0], [7.9, 2119.0], [8.0, 2197.0], [8.1, 2197.0], [8.2, 2281.0], [8.3, 2281.0], [8.4, 2330.0], [8.5, 2451.0], [8.6, 2464.0], [8.7, 2466.0], [8.8, 2466.0], [8.9, 2485.0], [9.0, 2513.0], [9.1, 2562.0], [9.2, 2576.0], [9.3, 2585.0], [9.4, 2585.0], [9.5, 2586.0], [9.6, 2628.0], [9.7, 2648.0], [9.8, 2683.0], [9.9, 2693.0], [10.0, 2701.0], [10.1, 2701.0], [10.2, 2706.0], [10.3, 2730.0], [10.4, 2779.0], [10.5, 2823.0], [10.6, 2845.0], [10.7, 2905.0], [10.8, 2905.0], [10.9, 2918.0], [11.0, 2984.0], [11.1, 2988.0], [11.2, 3002.0], [11.3, 3002.0], [11.4, 3025.0], [11.5, 3025.0], [11.6, 3028.0], [11.7, 3036.0], [11.8, 3050.0], [11.9, 3055.0], [12.0, 3128.0], [12.1, 3128.0], [12.2, 3184.0], [12.3, 3191.0], [12.4, 3204.0], [12.5, 3225.0], [12.6, 3228.0], [12.7, 3238.0], [12.8, 3238.0], [12.9, 3256.0], [13.0, 3289.0], [13.1, 3309.0], [13.2, 3322.0], [13.3, 3352.0], [13.4, 3387.0], [13.5, 3387.0], [13.6, 3414.0], [13.7, 3415.0], [13.8, 3474.0], [13.9, 3475.0], [14.0, 3557.0], [14.1, 3557.0], [14.2, 3620.0], [14.3, 3622.0], [14.4, 3706.0], [14.5, 3743.0], [14.6, 3805.0], [14.7, 3817.0], [14.8, 3817.0], [14.9, 3823.0], [15.0, 3839.0], [15.1, 3848.0], [15.2, 3851.0], [15.3, 3854.0], [15.4, 3854.0], [15.5, 3854.0], [15.6, 3924.0], [15.7, 3956.0], [15.8, 3966.0], [15.9, 3981.0], [16.0, 3999.0], [16.1, 4013.0], [16.2, 4013.0], [16.3, 4027.0], [16.4, 4097.0], [16.5, 4166.0], [16.6, 4170.0], [16.7, 4203.0], [16.8, 4203.0], [16.9, 4213.0], [17.0, 4272.0], [17.1, 4289.0], [17.2, 4314.0], [17.3, 4315.0], [17.4, 4338.0], [17.5, 4338.0], [17.6, 4366.0], [17.7, 4372.0], [17.8, 4396.0], [17.9, 4433.0], [18.0, 4461.0], [18.1, 4484.0], [18.2, 4484.0], [18.3, 4514.0], [18.4, 4541.0], [18.5, 4594.0], [18.6, 4626.0], [18.7, 4631.0], [18.8, 4631.0], [18.9, 4700.0], [19.0, 4733.0], [19.1, 4751.0], [19.2, 4774.0], [19.3, 4782.0], [19.4, 4819.0], [19.5, 4819.0], [19.6, 4940.0], [19.7, 4972.0], [19.8, 4994.0], [19.9, 5029.0], [20.0, 5069.0], [20.1, 5093.0], [20.2, 5093.0], [20.3, 5102.0], [20.4, 5174.0], [20.5, 5191.0], [20.6, 5197.0], [20.7, 5202.0], [20.8, 5249.0], [20.9, 5249.0], [21.0, 5251.0], [21.1, 5324.0], [21.2, 5329.0], [21.3, 5347.0], [21.4, 5364.0], [21.5, 5364.0], [21.6, 5462.0], [21.7, 5473.0], [21.8, 5524.0], [21.9, 5531.0], [22.0, 5626.0], [22.1, 5692.0], [22.2, 5692.0], [22.3, 5768.0], [22.4, 5795.0], [22.5, 5795.0], [22.6, 5821.0], [22.7, 5886.0], [22.8, 5924.0], [22.9, 5924.0], [23.0, 5948.0], [23.1, 6047.0], [23.2, 6052.0], [23.3, 6085.0], [23.4, 6111.0], [23.5, 6111.0], [23.6, 6120.0], [23.7, 6171.0], [23.8, 6246.0], [23.9, 6249.0], [24.0, 6279.0], [24.1, 6285.0], [24.2, 6285.0], [24.3, 6287.0], [24.4, 6293.0], [24.5, 6323.0], [24.6, 6449.0], [24.7, 6463.0], [24.8, 6501.0], [24.9, 6501.0], [25.0, 6513.0], [25.1, 6539.0], [25.2, 6594.0], [25.3, 6611.0], [25.4, 6740.0], [25.5, 6746.0], [25.6, 6746.0], [25.7, 6824.0], [25.8, 6923.0], [25.9, 6937.0], [26.0, 6953.0], [26.1, 6991.0], [26.2, 6991.0], [26.3, 7020.0], [26.4, 7098.0], [26.5, 7103.0], [26.6, 7119.0], [26.7, 7132.0], [26.8, 7159.0], [26.9, 7159.0], [27.0, 7174.0], [27.1, 7179.0], [27.2, 7192.0], [27.3, 7206.0], [27.4, 7232.0], [27.5, 7307.0], [27.6, 7307.0], [27.7, 7404.0], [27.8, 7439.0], [27.9, 7460.0], [28.0, 7534.0], [28.1, 7538.0], [28.2, 7538.0], [28.3, 7543.0], [28.4, 7569.0], [28.5, 7578.0], [28.6, 7601.0], [28.7, 7640.0], [28.8, 7653.0], [28.9, 7653.0], [29.0, 7668.0], [29.1, 7687.0], [29.2, 7803.0], [29.3, 7952.0], [29.4, 8036.0], [29.5, 8062.0], [29.6, 8062.0], [29.7, 8086.0], [29.8, 8125.0], [29.9, 8173.0], [30.0, 8223.0], [30.1, 8236.0], [30.2, 8243.0], [30.3, 8243.0], [30.4, 8299.0], [30.5, 8302.0], [30.6, 8309.0], [30.7, 8365.0], [30.8, 8372.0], [30.9, 8372.0], [31.0, 8395.0], [31.1, 8420.0], [31.2, 8446.0], [31.3, 8543.0], [31.4, 8543.0], [31.5, 8621.0], [31.6, 8621.0], [31.7, 8625.0], [31.8, 8652.0], [31.9, 8652.0], [32.0, 8750.0], [32.1, 8787.0], [32.2, 8794.0], [32.3, 8794.0], [32.4, 8848.0], [32.5, 8939.0], [32.6, 8980.0], [32.7, 9118.0], [32.8, 9199.0], [32.9, 9199.0], [33.0, 9221.0], [33.1, 9237.0], [33.2, 9258.0], [33.3, 9309.0], [33.4, 9509.0], [33.5, 9524.0], [33.6, 9524.0], [33.7, 9526.0], [33.8, 9527.0], [33.9, 9554.0], [34.0, 9563.0], [34.1, 9576.0], [34.2, 9595.0], [34.3, 9595.0], [34.4, 9597.0], [34.5, 9612.0], [34.6, 9683.0], [34.7, 9703.0], [34.8, 9705.0], [34.9, 9705.0], [35.0, 9733.0], [35.1, 9739.0], [35.2, 9832.0], [35.3, 9885.0], [35.4, 9990.0], [35.5, 10019.0], [35.6, 10019.0], [35.7, 10078.0], [35.8, 10194.0], [35.9, 10258.0], [36.0, 10356.0], [36.1, 10412.0], [36.2, 10445.0], [36.3, 10445.0], [36.4, 10600.0], [36.5, 10656.0], [36.6, 10669.0], [36.7, 10778.0], [36.8, 10851.0], [36.9, 10875.0], [37.0, 10875.0], [37.1, 10929.0], [37.2, 10936.0], [37.3, 10942.0], [37.4, 10957.0], [37.5, 10993.0], [37.6, 10993.0], [37.7, 11005.0], [37.8, 11059.0], [37.9, 11077.0], [38.0, 11088.0], [38.1, 11096.0], [38.2, 11113.0], [38.3, 11113.0], [38.4, 11148.0], [38.5, 11194.0], [38.6, 11258.0], [38.7, 11339.0], [38.8, 11384.0], [38.9, 11394.0], [39.0, 11394.0], [39.1, 11431.0], [39.2, 11436.0], [39.3, 11529.0], [39.4, 11554.0], [39.5, 11557.0], [39.6, 11557.0], [39.7, 11584.0], [39.8, 11612.0], [39.9, 11726.0], [40.0, 11792.0], [40.1, 11917.0], [40.2, 11949.0], [40.3, 11949.0], [40.4, 11949.0], [40.5, 12025.0], [40.6, 12142.0], [40.7, 12219.0], [40.8, 12219.0], [40.9, 12310.0], [41.0, 12310.0], [41.1, 12380.0], [41.2, 12458.0], [41.3, 12472.0], [41.4, 12478.0], [41.5, 12506.0], [41.6, 12510.0], [41.7, 12510.0], [41.8, 12520.0], [41.9, 12552.0], [42.0, 12560.0], [42.1, 12580.0], [42.2, 12723.0], [42.3, 12723.0], [42.4, 12781.0], [42.5, 12833.0], [42.6, 12846.0], [42.7, 12873.0], [42.8, 12915.0], [42.9, 12969.0], [43.0, 12969.0], [43.1, 12978.0], [43.2, 13148.0], [43.3, 13185.0], [43.4, 13291.0], [43.5, 13358.0], [43.6, 13368.0], [43.7, 13368.0], [43.8, 13378.0], [43.9, 13408.0], [44.0, 13477.0], [44.1, 13488.0], [44.2, 13524.0], [44.3, 13524.0], [44.4, 13626.0], [44.5, 13680.0], [44.6, 13708.0], [44.7, 13817.0], [44.8, 13822.0], [44.9, 13848.0], [45.0, 13848.0], [45.1, 13911.0], [45.2, 13915.0], [45.3, 13932.0], [45.4, 14123.0], [45.5, 14156.0], [45.6, 14164.0], [45.7, 14164.0], [45.8, 14177.0], [45.9, 14208.0], [46.0, 14254.0], [46.1, 14307.0], [46.2, 14332.0], [46.3, 14335.0], [46.4, 14335.0], [46.5, 14371.0], [46.6, 14376.0], [46.7, 14386.0], [46.8, 14393.0], [46.9, 14484.0], [47.0, 14484.0], [47.1, 14518.0], [47.2, 14642.0], [47.3, 14680.0], [47.4, 14706.0], [47.5, 14740.0], [47.6, 14823.0], [47.7, 14823.0], [47.8, 14954.0], [47.9, 15042.0], [48.0, 15065.0], [48.1, 15096.0], [48.2, 15104.0], [48.3, 15156.0], [48.4, 15156.0], [48.5, 15192.0], [48.6, 15193.0], [48.7, 15295.0], [48.8, 15325.0], [48.9, 15402.0], [49.0, 15402.0], [49.1, 15495.0], [49.2, 15511.0], [49.3, 15516.0], [49.4, 15565.0], [49.5, 15590.0], [49.6, 15852.0], [49.7, 15852.0], [49.8, 15880.0], [49.9, 15917.0], [50.0, 15934.0], [50.1, 15984.0], [50.2, 16086.0], [50.3, 16136.0], [50.4, 16136.0], [50.5, 16143.0], [50.6, 16192.0], [50.7, 16212.0], [50.8, 16219.0], [50.9, 16259.0], [51.0, 16355.0], [51.1, 16355.0], [51.2, 16413.0], [51.3, 16558.0], [51.4, 16569.0], [51.5, 16613.0], [51.6, 16797.0], [51.7, 16797.0], [51.8, 16844.0], [51.9, 16862.0], [52.0, 16865.0], [52.1, 16875.0], [52.2, 16886.0], [52.3, 16970.0], [52.4, 16970.0], [52.5, 17041.0], [52.6, 17084.0], [52.7, 17099.0], [52.8, 17118.0], [52.9, 17137.0], [53.0, 17323.0], [53.1, 17323.0], [53.2, 17647.0], [53.3, 17648.0], [53.4, 17675.0], [53.5, 17685.0], [53.6, 17685.0], [53.7, 17685.0], [53.8, 17737.0], [53.9, 17740.0], [54.0, 17832.0], [54.1, 17873.0], [54.2, 17915.0], [54.3, 17938.0], [54.4, 17938.0], [54.5, 17982.0], [54.6, 18038.0], [54.7, 18126.0], [54.8, 18178.0], [54.9, 18215.0], [55.0, 18335.0], [55.1, 18335.0], [55.2, 18434.0], [55.3, 18447.0], [55.4, 18498.0], [55.5, 18625.0], [55.6, 18812.0], [55.7, 18871.0], [55.8, 18871.0], [55.9, 18872.0], [56.0, 18888.0], [56.1, 18907.0], [56.2, 19002.0], [56.3, 19024.0], [56.4, 19024.0], [56.5, 19077.0], [56.6, 19101.0], [56.7, 19137.0], [56.8, 19307.0], [56.9, 19360.0], [57.0, 19363.0], [57.1, 19363.0], [57.2, 19390.0], [57.3, 19421.0], [57.4, 19549.0], [57.5, 19676.0], [57.6, 19791.0], [57.7, 19795.0], [57.8, 19795.0], [57.9, 19900.0], [58.0, 19927.0], [58.1, 19968.0], [58.2, 19979.0], [58.3, 20041.0], [58.4, 20041.0], [58.5, 20068.0], [58.6, 20084.0], [58.7, 20112.0], [58.8, 20140.0], [58.9, 20321.0], [59.0, 20330.0], [59.1, 20330.0], [59.2, 20496.0], [59.3, 20585.0], [59.4, 20608.0], [59.5, 20756.0], [59.6, 20767.0], [59.7, 20770.0], [59.8, 20770.0], [59.9, 20863.0], [60.0, 20937.0], [60.1, 20980.0], [60.2, 21062.0], [60.3, 21102.0], [60.4, 21152.0], [60.5, 21152.0], [60.6, 21168.0], [60.7, 21211.0], [60.8, 21254.0], [60.9, 21293.0], [61.0, 21356.0], [61.1, 21356.0], [61.2, 21503.0], [61.3, 21507.0], [61.4, 21541.0], [61.5, 21821.0], [61.6, 21835.0], [61.7, 21919.0], [61.8, 21919.0], [61.9, 21937.0], [62.0, 22002.0], [62.1, 22075.0], [62.2, 22134.0], [62.3, 22179.0], [62.4, 22210.0], [62.5, 22210.0], [62.6, 22211.0], [62.7, 22225.0], [62.8, 22291.0], [62.9, 22299.0], [63.0, 22352.0], [63.1, 22352.0], [63.2, 22401.0], [63.3, 22467.0], [63.4, 22480.0], [63.5, 22734.0], [63.6, 22908.0], [63.7, 22913.0], [63.8, 22913.0], [63.9, 22920.0], [64.0, 22965.0], [64.1, 22993.0], [64.2, 23161.0], [64.3, 23200.0], [64.4, 23209.0], [64.5, 23209.0], [64.6, 23216.0], [64.7, 23225.0], [64.8, 23398.0], [64.9, 23437.0], [65.0, 23547.0], [65.1, 23682.0], [65.2, 23682.0], [65.3, 23699.0], [65.4, 23803.0], [65.5, 23810.0], [65.6, 23927.0], [65.7, 23947.0], [65.8, 23947.0], [65.9, 23991.0], [66.0, 24061.0], [66.1, 24096.0], [66.2, 24224.0], [66.3, 24231.0], [66.4, 24265.0], [66.5, 24265.0], [66.6, 24360.0], [66.7, 24371.0], [66.8, 24708.0], [66.9, 24765.0], [67.0, 24832.0], [67.1, 24853.0], [67.2, 24853.0], [67.3, 24902.0], [67.4, 24990.0], [67.5, 25112.0], [67.6, 25125.0], [67.7, 25182.0], [67.8, 25182.0], [67.9, 25198.0], [68.0, 25272.0], [68.1, 25275.0], [68.2, 25291.0], [68.3, 25299.0], [68.4, 25324.0], [68.5, 25324.0], [68.6, 25512.0], [68.7, 25701.0], [68.8, 26013.0], [68.9, 26018.0], [69.0, 26083.0], [69.1, 26116.0], [69.2, 26116.0], [69.3, 26149.0], [69.4, 26180.0], [69.5, 26216.0], [69.6, 26364.0], [69.7, 26370.0], [69.8, 26370.0], [69.9, 26397.0], [70.0, 26407.0], [70.1, 26489.0], [70.2, 26596.0], [70.3, 26602.0], [70.4, 26638.0], [70.5, 26638.0], [70.6, 26831.0], [70.7, 26848.0], [70.8, 26994.0], [70.9, 27044.0], [71.0, 27105.0], [71.1, 27183.0], [71.2, 27183.0], [71.3, 27262.0], [71.4, 27273.0], [71.5, 27392.0], [71.6, 27445.0], [71.7, 27492.0], [71.8, 27545.0], [71.9, 27545.0], [72.0, 27590.0], [72.1, 27849.0], [72.2, 27941.0], [72.3, 27974.0], [72.4, 28212.0], [72.5, 28212.0], [72.6, 28215.0], [72.7, 28218.0], [72.8, 28336.0], [72.9, 28555.0], [73.0, 28628.0], [73.1, 28644.0], [73.2, 28644.0], [73.3, 28738.0], [73.4, 28767.0], [73.5, 28770.0], [73.6, 28907.0], [73.7, 28930.0], [73.8, 28949.0], [73.9, 28949.0], [74.0, 29024.0], [74.1, 29107.0], [74.2, 29412.0], [74.3, 29541.0], [74.4, 29620.0], [74.5, 29620.0], [74.6, 29630.0], [74.7, 29814.0], [74.8, 29945.0], [74.9, 30027.0], [75.0, 30135.0], [75.1, 30140.0], [75.2, 30140.0], [75.3, 30214.0], [75.4, 30378.0], [75.5, 30473.0], [75.6, 30514.0], [75.7, 30667.0], [75.8, 30742.0], [75.9, 30742.0], [76.0, 30777.0], [76.1, 30794.0], [76.2, 30853.0], [76.3, 30938.0], [76.4, 31107.0], [76.5, 31174.0], [76.6, 31174.0], [76.7, 31294.0], [76.8, 31424.0], [76.9, 31554.0], [77.0, 31639.0], [77.1, 31711.0], [77.2, 31711.0], [77.3, 31886.0], [77.4, 31945.0], [77.5, 32031.0], [77.6, 32098.0], [77.7, 32296.0], [77.8, 32339.0], [77.9, 32339.0], [78.0, 32433.0], [78.1, 32435.0], [78.2, 32449.0], [78.3, 32512.0], [78.4, 32559.0], [78.5, 32701.0], [78.6, 32701.0], [78.7, 32815.0], [78.8, 32866.0], [78.9, 33313.0], [79.0, 33324.0], [79.1, 33430.0], [79.2, 33430.0], [79.3, 33432.0], [79.4, 33473.0], [79.5, 33488.0], [79.6, 33621.0], [79.7, 33629.0], [79.8, 33895.0], [79.9, 33895.0], [80.0, 33953.0], [80.1, 34065.0], [80.2, 34229.0], [80.3, 34307.0], [80.4, 34347.0], [80.5, 34505.0], [80.6, 34505.0], [80.7, 34522.0], [80.8, 34531.0], [80.9, 34535.0], [81.0, 34696.0], [81.1, 34759.0], [81.2, 34801.0], [81.3, 34801.0], [81.4, 34950.0], [81.5, 35088.0], [81.6, 35148.0], [81.7, 35175.0], [81.8, 35340.0], [81.9, 35340.0], [82.0, 35379.0], [82.1, 35641.0], [82.2, 35901.0], [82.3, 36130.0], [82.4, 36155.0], [82.5, 36288.0], [82.6, 36288.0], [82.7, 36320.0], [82.8, 36492.0], [82.9, 36581.0], [83.0, 36584.0], [83.1, 36592.0], [83.2, 36891.0], [83.3, 36891.0], [83.4, 36947.0], [83.5, 36997.0], [83.6, 37136.0], [83.7, 37217.0], [83.8, 37505.0], [83.9, 37505.0], [84.0, 37598.0], [84.1, 37634.0], [84.2, 37733.0], [84.3, 37828.0], [84.4, 38156.0], [84.5, 38214.0], [84.6, 38214.0], [84.7, 38306.0], [84.8, 38338.0], [84.9, 38457.0], [85.0, 38648.0], [85.1, 38653.0], [85.2, 38901.0], [85.3, 38901.0], [85.4, 38939.0], [85.5, 39062.0], [85.6, 39184.0], [85.7, 39196.0], [85.8, 39418.0], [85.9, 39480.0], [86.0, 39480.0], [86.1, 39674.0], [86.2, 39786.0], [86.3, 39803.0], [86.4, 40033.0], [86.5, 40186.0], [86.6, 40186.0], [86.7, 40283.0], [86.8, 40335.0], [86.9, 40375.0], [87.0, 40378.0], [87.1, 40401.0], [87.2, 40806.0], [87.3, 40806.0], [87.4, 41148.0], [87.5, 41476.0], [87.6, 41491.0], [87.7, 41544.0], [87.8, 41607.0], [87.9, 41776.0], [88.0, 41776.0], [88.1, 41838.0], [88.2, 42255.0], [88.3, 42264.0], [88.4, 42578.0], [88.5, 42614.0], [88.6, 42614.0], [88.7, 42854.0], [88.8, 43167.0], [88.9, 43218.0], [89.0, 43288.0], [89.1, 43377.0], [89.2, 43405.0], [89.3, 43405.0], [89.4, 43572.0], [89.5, 43679.0], [89.6, 43745.0], [89.7, 44192.0], [89.8, 44336.0], [89.9, 44386.0], [90.0, 44386.0], [90.1, 44407.0], [90.2, 44537.0], [90.3, 44973.0], [90.4, 45041.0], [90.5, 45128.0], [90.6, 45296.0], [90.7, 45296.0], [90.8, 45333.0], [90.9, 45376.0], [91.0, 45462.0], [91.1, 45491.0], [91.2, 46028.0], [91.3, 46028.0], [91.4, 46141.0], [91.5, 46172.0], [91.6, 46609.0], [91.7, 46648.0], [91.8, 46926.0], [91.9, 46974.0], [92.0, 46974.0], [92.1, 47406.0], [92.2, 47717.0], [92.3, 47785.0], [92.4, 47876.0], [92.5, 48193.0], [92.6, 48279.0], [92.7, 48279.0], [92.8, 48750.0], [92.9, 48755.0], [93.0, 48917.0], [93.1, 49166.0], [93.2, 49480.0], [93.3, 49480.0], [93.4, 49703.0], [93.5, 49738.0], [93.6, 49808.0], [93.7, 50065.0], [93.8, 50262.0], [93.9, 50269.0], [94.0, 50269.0], [94.1, 50683.0], [94.2, 50777.0], [94.3, 51146.0], [94.4, 51149.0], [94.5, 51355.0], [94.6, 51515.0], [94.7, 51515.0], [94.8, 51667.0], [94.9, 52185.0], [95.0, 52259.0], [95.1, 52475.0], [95.2, 52585.0], [95.3, 53134.0], [95.4, 53134.0], [95.5, 53245.0], [95.6, 53279.0], [95.7, 53286.0], [95.8, 53478.0], [95.9, 54404.0], [96.0, 54404.0], [96.1, 54419.0], [96.2, 54536.0], [96.3, 54643.0], [96.4, 54726.0], [96.5, 54737.0], [96.6, 55333.0], [96.7, 55333.0], [96.8, 55894.0], [96.9, 55953.0], [97.0, 55957.0], [97.1, 56447.0], [97.2, 56635.0], [97.3, 56947.0], [97.4, 56947.0], [97.5, 57441.0], [97.6, 57744.0], [97.7, 57823.0], [97.8, 57906.0], [97.9, 58429.0], [98.0, 58429.0], [98.1, 58607.0], [98.2, 59014.0], [98.3, 59299.0], [98.4, 59647.0], [98.5, 59836.0], [98.6, 59989.0], [98.7, 59989.0], [98.8, 60008.0], [98.9, 60009.0], [99.0, 60010.0], [99.1, 60010.0], [99.2, 60010.0], [99.3, 60010.0], [99.4, 60010.0], [99.5, 60011.0], [99.6, 60019.0], [99.7, 60185.0], [99.8, 60201.0], [99.9, 60349.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 10.0, "series": [{"data": [[34500.0, 4.0], [35300.0, 2.0], [36100.0, 2.0], [36900.0, 2.0], [37700.0, 1.0], [40100.0, 1.0], [41700.0, 1.0], [42500.0, 1.0], [44900.0, 1.0], [43300.0, 1.0], [44100.0, 1.0], [48100.0, 1.0], [48900.0, 1.0], [49700.0, 2.0], [52100.0, 1.0], [51300.0, 1.0], [54500.0, 1.0], [55300.0, 1.0], [56900.0, 1.0], [57700.0, 1.0], [60100.0, 1.0], [600.0, 2.0], [700.0, 2.0], [800.0, 2.0], [900.0, 4.0], [1000.0, 7.0], [1100.0, 8.0], [1200.0, 6.0], [1300.0, 4.0], [1400.0, 4.0], [1500.0, 10.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 5.0], [1900.0, 3.0], [2000.0, 5.0], [2100.0, 2.0], [2200.0, 2.0], [2300.0, 1.0], [2400.0, 4.0], [2500.0, 5.0], [2600.0, 4.0], [2800.0, 2.0], [2700.0, 4.0], [2900.0, 4.0], [3000.0, 7.0], [3100.0, 3.0], [3200.0, 6.0], [3300.0, 4.0], [3400.0, 4.0], [3500.0, 1.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 8.0], [3900.0, 5.0], [4000.0, 3.0], [4300.0, 6.0], [4200.0, 4.0], [4100.0, 2.0], [4600.0, 2.0], [4400.0, 3.0], [4500.0, 3.0], [4700.0, 5.0], [4800.0, 1.0], [5100.0, 4.0], [5000.0, 3.0], [4900.0, 3.0], [5200.0, 3.0], [5300.0, 4.0], [5400.0, 2.0], [5500.0, 2.0], [5600.0, 2.0], [5800.0, 2.0], [5700.0, 3.0], [5900.0, 2.0], [6000.0, 3.0], [6100.0, 3.0], [6200.0, 6.0], [6300.0, 1.0], [6400.0, 2.0], [6600.0, 1.0], [6500.0, 4.0], [6900.0, 4.0], [6700.0, 2.0], [6800.0, 1.0], [7100.0, 7.0], [7000.0, 2.0], [7400.0, 3.0], [7200.0, 2.0], [7300.0, 1.0], [7500.0, 5.0], [7600.0, 5.0], [7900.0, 1.0], [7800.0, 1.0], [8100.0, 2.0], [8000.0, 3.0], [8600.0, 4.0], [8400.0, 2.0], [8200.0, 4.0], [8800.0, 1.0], [9200.0, 3.0], [9600.0, 2.0], [10200.0, 1.0], [10000.0, 2.0], [9800.0, 2.0], [10600.0, 3.0], [10400.0, 2.0], [11000.0, 5.0], [10800.0, 2.0], [11200.0, 1.0], [11400.0, 2.0], [11600.0, 1.0], [12200.0, 2.0], [12000.0, 1.0], [12400.0, 3.0], [13200.0, 1.0], [12800.0, 3.0], [13400.0, 3.0], [13600.0, 2.0], [13800.0, 3.0], [14200.0, 2.0], [14600.0, 2.0], [14400.0, 1.0], [14800.0, 1.0], [15200.0, 1.0], [15000.0, 3.0], [15400.0, 2.0], [15800.0, 2.0], [16200.0, 3.0], [16000.0, 1.0], [16800.0, 5.0], [16400.0, 1.0], [18000.0, 1.0], [17600.0, 5.0], [18400.0, 3.0], [18800.0, 4.0], [20000.0, 3.0], [20400.0, 1.0], [19600.0, 1.0], [20800.0, 1.0], [21200.0, 3.0], [22400.0, 3.0], [22000.0, 2.0], [23200.0, 4.0], [24000.0, 2.0], [23600.0, 2.0], [24800.0, 2.0], [25200.0, 4.0], [26400.0, 2.0], [26000.0, 3.0], [27200.0, 2.0], [26800.0, 2.0], [29600.0, 2.0], [30400.0, 1.0], [30000.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [30800.0, 1.0], [32400.0, 3.0], [32000.0, 2.0], [33600.0, 2.0], [32800.0, 2.0], [36800.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [40000.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [43200.0, 2.0], [54400.0, 2.0], [58400.0, 1.0], [59200.0, 1.0], [60000.0, 8.0], [33900.0, 1.0], [34700.0, 1.0], [36300.0, 1.0], [37100.0, 1.0], [40300.0, 3.0], [41100.0, 1.0], [44300.0, 2.0], [43500.0, 1.0], [45100.0, 1.0], [49100.0, 1.0], [50700.0, 1.0], [53100.0, 1.0], [51500.0, 1.0], [54700.0, 2.0], [57900.0, 1.0], [60300.0, 1.0], [16500.0, 2.0], [16900.0, 1.0], [17300.0, 1.0], [17700.0, 2.0], [18100.0, 2.0], [19300.0, 4.0], [18900.0, 1.0], [20100.0, 2.0], [19700.0, 2.0], [20500.0, 1.0], [21300.0, 1.0], [20900.0, 2.0], [22100.0, 2.0], [22900.0, 5.0], [23300.0, 1.0], [24900.0, 2.0], [25300.0, 1.0], [26100.0, 3.0], [25700.0, 1.0], [26500.0, 1.0], [26900.0, 1.0], [27300.0, 1.0], [28500.0, 1.0], [28900.0, 3.0], [30100.0, 2.0], [30500.0, 1.0], [31700.0, 1.0], [30900.0, 1.0], [32500.0, 2.0], [34600.0, 1.0], [33800.0, 1.0], [36200.0, 1.0], [37800.0, 1.0], [38600.0, 2.0], [40200.0, 1.0], [39400.0, 2.0], [41800.0, 1.0], [42600.0, 1.0], [43400.0, 1.0], [45000.0, 1.0], [46600.0, 2.0], [48200.0, 1.0], [47400.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [52200.0, 1.0], [54600.0, 1.0], [57800.0, 1.0], [58600.0, 1.0], [60200.0, 1.0], [33300.0, 2.0], [34900.0, 1.0], [36500.0, 3.0], [38900.0, 2.0], [38100.0, 1.0], [39700.0, 1.0], [44500.0, 1.0], [43700.0, 1.0], [45300.0, 2.0], [46900.0, 2.0], [46100.0, 2.0], [47700.0, 2.0], [52500.0, 1.0], [8300.0, 5.0], [8700.0, 3.0], [8500.0, 2.0], [8900.0, 2.0], [9100.0, 2.0], [9700.0, 4.0], [9500.0, 9.0], [9300.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [10900.0, 5.0], [11100.0, 3.0], [11300.0, 3.0], [11500.0, 4.0], [11700.0, 2.0], [11900.0, 3.0], [12100.0, 1.0], [12500.0, 6.0], [12300.0, 2.0], [12700.0, 2.0], [12900.0, 3.0], [13100.0, 2.0], [13300.0, 3.0], [13500.0, 1.0], [13700.0, 1.0], [13900.0, 3.0], [14300.0, 7.0], [14100.0, 4.0], [14700.0, 2.0], [14500.0, 1.0], [14900.0, 1.0], [15300.0, 1.0], [15100.0, 4.0], [15500.0, 4.0], [16100.0, 3.0], [15900.0, 3.0], [16300.0, 1.0], [17000.0, 3.0], [16600.0, 1.0], [17800.0, 2.0], [18200.0, 1.0], [19000.0, 3.0], [19400.0, 1.0], [18600.0, 1.0], [21000.0, 1.0], [20600.0, 1.0], [21800.0, 2.0], [22200.0, 5.0], [23400.0, 1.0], [23800.0, 2.0], [24200.0, 3.0], [26600.0, 2.0], [26200.0, 1.0], [27400.0, 2.0], [27000.0, 1.0], [27800.0, 1.0], [28600.0, 2.0], [28200.0, 3.0], [29400.0, 1.0], [29000.0, 1.0], [30600.0, 1.0], [29800.0, 1.0], [30200.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [34000.0, 1.0], [34800.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [40400.0, 1.0], [39600.0, 1.0], [42800.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [46000.0, 1.0], [45200.0, 1.0], [50000.0, 1.0], [51600.0, 1.0], [53200.0, 3.0], [52400.0, 1.0], [56400.0, 1.0], [59600.0, 1.0], [34300.0, 2.0], [35100.0, 2.0], [35900.0, 1.0], [38300.0, 2.0], [37500.0, 2.0], [39100.0, 2.0], [41500.0, 1.0], [43100.0, 1.0], [48700.0, 2.0], [51100.0, 2.0], [55900.0, 2.0], [59900.0, 1.0], [16700.0, 1.0], [17100.0, 2.0], [17900.0, 3.0], [18300.0, 1.0], [19100.0, 2.0], [19500.0, 1.0], [19900.0, 4.0], [20300.0, 2.0], [20700.0, 3.0], [21100.0, 3.0], [21500.0, 3.0], [21900.0, 2.0], [22300.0, 1.0], [22700.0, 1.0], [23100.0, 1.0], [23500.0, 1.0], [23900.0, 3.0], [24300.0, 2.0], [25100.0, 4.0], [24700.0, 2.0], [25500.0, 1.0], [26300.0, 3.0], [27100.0, 2.0], [27500.0, 2.0], [27900.0, 2.0], [28300.0, 1.0], [28700.0, 3.0], [29500.0, 1.0], [29100.0, 1.0], [30700.0, 3.0], [30300.0, 1.0], [29900.0, 1.0], [31500.0, 1.0], [31100.0, 2.0], [31900.0, 1.0], [32700.0, 1.0], [32300.0, 1.0], [33400.0, 4.0], [34200.0, 1.0], [35000.0, 1.0], [38200.0, 1.0], [39000.0, 1.0], [39800.0, 1.0], [42200.0, 2.0], [41400.0, 2.0], [45400.0, 2.0], [47800.0, 1.0], [50200.0, 2.0], [49400.0, 1.0], [53400.0, 1.0], [56600.0, 1.0], [55800.0, 1.0], [59000.0, 1.0], [57400.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 801.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 39.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 801.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.65124836E12, "maxY": 87.32544378698226, "series": [{"data": [[1.65124872E12, 2.0], [1.65124842E12, 18.82208588957056], [1.6512486E12, 87.32544378698226], [1.65124848E12, 42.3076923076923], [1.65124866E12, 66.39506172839509], [1.65124836E12, 7.6], [1.65124854E12, 66.96470588235296]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124872E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4296.534482758621, "minX": 1.0, "maxY": 59989.0, "series": [{"data": [[2.0, 59989.0], [3.0, 30455.5], [4.0, 30124.0], [5.0, 30722.0], [6.0, 20281.333333333332], [7.0, 20132.0], [8.0, 30603.0], [9.0, 20652.666666666668], [10.0, 4296.534482758621], [11.0, 28773.5], [12.0, 20246.666666666668], [13.0, 21216.333333333332], [14.0, 30188.5], [15.0, 18142.0], [16.0, 26566.0], [17.0, 18592.333333333332], [18.0, 18714.333333333336], [19.0, 26944.0], [20.0, 7667.461538461538], [21.0, 26134.5], [22.0, 29514.0], [23.0, 22374.0], [24.0, 26361.5], [25.0, 18297.0], [26.0, 23496.0], [27.0, 19132.666666666664], [28.0, 19769.666666666664], [29.0, 27826.5], [30.0, 9798.103448275862], [31.0, 25337.666666666668], [32.0, 28990.5], [33.0, 29382.5], [34.0, 19646.0], [35.0, 20424.0], [36.0, 18918.0], [37.0, 13935.333333333334], [38.0, 19657.5], [39.0, 18912.0], [40.0, 12834.847457627116], [41.0, 18579.0], [42.0, 17498.5], [43.0, 27199.5], [44.0, 19560.666666666668], [45.0, 20527.666666666668], [46.0, 17808.0], [47.0, 27473.5], [48.0, 17613.0], [49.0, 14216.5], [50.0, 14614.55], [51.0, 19432.0], [52.0, 24223.5], [53.0, 20062.666666666668], [54.0, 20124.666666666668], [55.0, 18052.5], [56.0, 21090.0], [57.0, 11062.5], [58.0, 12596.666666666666], [59.0, 18807.5], [60.0, 17370.103448275866], [61.0, 15334.0], [62.0, 20418.0], [63.0, 11922.5], [64.0, 16386.333333333332], [65.0, 20446.5], [66.0, 17268.0], [67.0, 12546.0], [68.0, 17470.333333333332], [69.0, 20272.5], [70.0, 19538.525423728817], [71.0, 16998.333333333332], [72.0, 12735.5], [73.0, 17864.333333333332], [74.0, 18469.0], [75.0, 18625.666666666668], [76.0, 12168.0], [77.0, 39086.333333333336], [78.0, 53403.25], [79.0, 39155.333333333336], [80.0, 23426.54999999999], [81.0, 41461.5], [82.0, 44514.666666666664], [83.0, 43172.25], [84.0, 36532.0], [85.0, 42517.0], [86.0, 49936.75], [87.0, 36930.666666666664], [88.0, 45900.666666666664], [89.0, 44134.71428571428], [90.0, 29410.73888888888], [1.0, 26018.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[55.506462984723846, 19912.112808460635]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 90.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.816666666666666, "minX": 1.65124836E12, "maxY": 536.8333333333334, "series": [{"data": [[1.65124872E12, 15.983333333333333], [1.65124842E12, 506.26666666666665], [1.6512486E12, 526.8333333333334], [1.65124848E12, 526.5166666666667], [1.65124866E12, 536.8333333333334], [1.65124836E12, 45.666666666666664], [1.65124854E12, 530.4166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124872E12, 7.816666666666666], [1.65124842E12, 423.6166666666667], [1.6512486E12, 439.0833333333333], [1.65124848E12, 439.25], [1.65124866E12, 421.3], [1.65124836E12, 38.916666666666664], [1.65124854E12, 441.8666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124872E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1484.5333333333333, "minX": 1.65124836E12, "maxY": 48730.666666666664, "series": [{"data": [[1.65124872E12, 48730.666666666664], [1.65124842E12, 6053.828220858893], [1.6512486E12, 28360.28402366864], [1.65124848E12, 12598.029585798813], [1.65124866E12, 33248.074074074066], [1.65124836E12, 1484.5333333333333], [1.65124854E12, 20481.358823529416]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124872E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1484.0666666666666, "minX": 1.65124836E12, "maxY": 48730.666666666664, "series": [{"data": [[1.65124872E12, 48730.666666666664], [1.65124842E12, 6053.760736196319], [1.6512486E12, 28360.26035502958], [1.65124848E12, 12597.982248520713], [1.65124866E12, 33248.01851851852], [1.65124836E12, 1484.0666666666666], [1.65124854E12, 20481.329411764706]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124872E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.142011834319524, "minX": 1.65124836E12, "maxY": 51.20000000000001, "series": [{"data": [[1.65124872E12, 10.333333333333334], [1.65124842E12, 11.58895705521472], [1.6512486E12, 8.142011834319524], [1.65124848E12, 9.816568047337274], [1.65124866E12, 8.851851851851851], [1.65124836E12, 51.20000000000001], [1.65124854E12, 9.164705882352935]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124872E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 622.0, "minX": 1.65124836E12, "maxY": 59989.0, "series": [{"data": [[1.65124872E12, 59989.0], [1.65124842E12, 17915.0], [1.6512486E12, 59014.0], [1.65124848E12, 31639.0], [1.65124866E12, 59836.0], [1.65124836E12, 2823.0], [1.65124854E12, 46028.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124872E12, 59989.0], [1.65124842E12, 12539.2], [1.6512486E12, 49223.2], [1.65124848E12, 22913.0], [1.65124866E12, 54656.6], [1.65124836E12, 2745.0], [1.65124854E12, 34924.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124872E12, 59989.0], [1.65124842E12, 17256.439999999984], [1.6512486E12, 58192.21], [1.65124848E12, 31035.60000000001], [1.65124866E12, 59733.94], [1.65124836E12, 2823.0], [1.65124854E12, 45278.94999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124872E12, 59989.0], [1.65124842E12, 14349.799999999996], [1.6512486E12, 52801.29999999998], [1.65124848E12, 25155.0], [1.65124866E12, 57531.899999999994], [1.65124836E12, 2823.0], [1.65124854E12, 38057.49999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124872E12, 26018.0], [1.65124842E12, 887.0], [1.6512486E12, 1039.0], [1.65124848E12, 783.0], [1.65124866E12, 1139.0], [1.65124836E12, 675.0], [1.65124854E12, 622.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124872E12, 43003.5], [1.65124842E12, 4782.0], [1.6512486E12, 28275.5], [1.65124848E12, 12025.0], [1.65124866E12, 31424.0], [1.65124836E12, 1391.0], [1.65124854E12, 20961.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124872E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2024.0, "minX": 1.0, "maxY": 60104.5, "series": [{"data": [[1.0, 2024.0], [2.0, 13762.5], [4.0, 21102.0], [3.0, 15516.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60010.0], [2.0, 60104.5], [3.0, 60015.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2022.5, "minX": 1.0, "maxY": 60104.5, "series": [{"data": [[1.0, 2022.5], [2.0, 13762.5], [4.0, 21102.0], [3.0, 15516.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60010.0], [2.0, 60104.5], [3.0, 60015.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.65124836E12, "maxY": 3.283333333333333, "series": [{"data": [[1.65124842E12, 3.05], [1.6512486E12, 2.9833333333333334], [1.65124848E12, 3.2], [1.65124866E12, 1.25], [1.65124836E12, 0.4166666666666667], [1.65124854E12, 3.283333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124866E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65124836E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124872E12, 0.03333333333333333], [1.65124842E12, 2.716666666666667], [1.6512486E12, 2.8], [1.65124848E12, 2.816666666666667], [1.65124866E12, 2.55], [1.65124836E12, 0.25], [1.65124854E12, 2.8333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65124872E12, 0.016666666666666666], [1.6512486E12, 0.016666666666666666], [1.65124866E12, 0.15]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124872E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65124836E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124872E12, 0.03333333333333333], [1.65124842E12, 2.716666666666667], [1.6512486E12, 2.8], [1.65124848E12, 2.816666666666667], [1.65124866E12, 2.55], [1.65124836E12, 0.25], [1.65124854E12, 2.8333333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65124872E12, 0.016666666666666666], [1.6512486E12, 0.016666666666666666], [1.65124866E12, 0.15]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124872E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65124836E12, "maxY": 2.8333333333333335, "series": [{"data": [[1.65124872E12, 0.03333333333333333], [1.65124842E12, 2.716666666666667], [1.6512486E12, 2.8], [1.65124848E12, 2.816666666666667], [1.65124866E12, 2.55], [1.65124836E12, 0.25], [1.65124854E12, 2.8333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65124872E12, 0.016666666666666666], [1.6512486E12, 0.016666666666666666], [1.65124866E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124872E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


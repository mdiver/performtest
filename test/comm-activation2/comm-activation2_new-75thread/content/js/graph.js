/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 730.0, "minX": 0.0, "maxY": 60245.0, "series": [{"data": [[0.0, 730.0], [0.1, 730.0], [0.2, 767.0], [0.3, 772.0], [0.4, 831.0], [0.5, 831.0], [0.6, 842.0], [0.7, 854.0], [0.8, 896.0], [0.9, 896.0], [1.0, 899.0], [1.1, 920.0], [1.2, 961.0], [1.3, 961.0], [1.4, 971.0], [1.5, 987.0], [1.6, 997.0], [1.7, 1008.0], [1.8, 1008.0], [1.9, 1014.0], [2.0, 1016.0], [2.1, 1020.0], [2.2, 1020.0], [2.3, 1029.0], [2.4, 1106.0], [2.5, 1117.0], [2.6, 1117.0], [2.7, 1128.0], [2.8, 1141.0], [2.9, 1161.0], [3.0, 1185.0], [3.1, 1185.0], [3.2, 1187.0], [3.3, 1207.0], [3.4, 1209.0], [3.5, 1209.0], [3.6, 1214.0], [3.7, 1220.0], [3.8, 1263.0], [3.9, 1263.0], [4.0, 1281.0], [4.1, 1282.0], [4.2, 1319.0], [4.3, 1319.0], [4.4, 1344.0], [4.5, 1356.0], [4.6, 1369.0], [4.7, 1370.0], [4.8, 1370.0], [4.9, 1379.0], [5.0, 1382.0], [5.1, 1405.0], [5.2, 1405.0], [5.3, 1409.0], [5.4, 1409.0], [5.5, 1412.0], [5.6, 1412.0], [5.7, 1448.0], [5.8, 1452.0], [5.9, 1452.0], [6.0, 1544.0], [6.1, 1544.0], [6.2, 1596.0], [6.3, 1630.0], [6.4, 1794.0], [6.5, 1794.0], [6.6, 1807.0], [6.7, 1817.0], [6.8, 1830.0], [6.9, 1830.0], [7.0, 1833.0], [7.1, 1845.0], [7.2, 1846.0], [7.3, 1846.0], [7.4, 1869.0], [7.5, 1895.0], [7.6, 1899.0], [7.7, 1906.0], [7.8, 1906.0], [7.9, 1926.0], [8.0, 1968.0], [8.1, 1971.0], [8.2, 1971.0], [8.3, 2000.0], [8.4, 2007.0], [8.5, 2033.0], [8.6, 2033.0], [8.7, 2156.0], [8.8, 2159.0], [8.9, 2182.0], [9.0, 2189.0], [9.1, 2189.0], [9.2, 2201.0], [9.3, 2211.0], [9.4, 2227.0], [9.5, 2227.0], [9.6, 2245.0], [9.7, 2256.0], [9.8, 2263.0], [9.9, 2263.0], [10.0, 2303.0], [10.1, 2321.0], [10.2, 2374.0], [10.3, 2376.0], [10.4, 2376.0], [10.5, 2378.0], [10.6, 2395.0], [10.7, 2402.0], [10.8, 2402.0], [10.9, 2413.0], [11.0, 2421.0], [11.1, 2459.0], [11.2, 2459.0], [11.3, 2524.0], [11.4, 2529.0], [11.5, 2530.0], [11.6, 2530.0], [11.7, 2536.0], [11.8, 2566.0], [11.9, 2580.0], [12.0, 2588.0], [12.1, 2588.0], [12.2, 2653.0], [12.3, 2765.0], [12.4, 2797.0], [12.5, 2797.0], [12.6, 2805.0], [12.7, 2883.0], [12.8, 2898.0], [12.9, 2898.0], [13.0, 2899.0], [13.1, 2923.0], [13.2, 2925.0], [13.3, 2942.0], [13.4, 2942.0], [13.5, 2955.0], [13.6, 2962.0], [13.7, 3003.0], [13.8, 3003.0], [13.9, 3048.0], [14.0, 3077.0], [14.1, 3110.0], [14.2, 3110.0], [14.3, 3136.0], [14.4, 3149.0], [14.5, 3175.0], [14.6, 3175.0], [14.7, 3235.0], [14.8, 3262.0], [14.9, 3270.0], [15.0, 3274.0], [15.1, 3274.0], [15.2, 3371.0], [15.3, 3387.0], [15.4, 3406.0], [15.5, 3406.0], [15.6, 3420.0], [15.7, 3450.0], [15.8, 3458.0], [15.9, 3458.0], [16.0, 3480.0], [16.1, 3507.0], [16.2, 3534.0], [16.3, 3552.0], [16.4, 3552.0], [16.5, 3559.0], [16.6, 3590.0], [16.7, 3595.0], [16.8, 3595.0], [16.9, 3607.0], [17.0, 3619.0], [17.1, 3649.0], [17.2, 3649.0], [17.3, 3752.0], [17.4, 3789.0], [17.5, 3795.0], [17.6, 3795.0], [17.7, 3823.0], [17.8, 3843.0], [17.9, 3876.0], [18.0, 3876.0], [18.1, 3876.0], [18.2, 3888.0], [18.3, 3894.0], [18.4, 3922.0], [18.5, 3922.0], [18.6, 3931.0], [18.7, 3933.0], [18.8, 3974.0], [18.9, 3974.0], [19.0, 3976.0], [19.1, 4025.0], [19.2, 4029.0], [19.3, 4049.0], [19.4, 4049.0], [19.5, 4125.0], [19.6, 4129.0], [19.7, 4134.0], [19.8, 4134.0], [19.9, 4136.0], [20.0, 4166.0], [20.1, 4177.0], [20.2, 4177.0], [20.3, 4227.0], [20.4, 4296.0], [20.5, 4332.0], [20.6, 4422.0], [20.7, 4422.0], [20.8, 4456.0], [20.9, 4474.0], [21.0, 4516.0], [21.1, 4516.0], [21.2, 4517.0], [21.3, 4618.0], [21.4, 4660.0], [21.5, 4660.0], [21.6, 4670.0], [21.7, 4759.0], [21.8, 4789.0], [21.9, 4789.0], [22.0, 4795.0], [22.1, 4812.0], [22.2, 4838.0], [22.3, 4863.0], [22.4, 4863.0], [22.5, 4890.0], [22.6, 4973.0], [22.7, 4976.0], [22.8, 4976.0], [22.9, 5016.0], [23.0, 5088.0], [23.1, 5091.0], [23.2, 5091.0], [23.3, 5148.0], [23.4, 5155.0], [23.5, 5216.0], [23.6, 5217.0], [23.7, 5217.0], [23.8, 5264.0], [23.9, 5270.0], [24.0, 5397.0], [24.1, 5397.0], [24.2, 5484.0], [24.3, 5497.0], [24.4, 5558.0], [24.5, 5558.0], [24.6, 5559.0], [24.7, 5625.0], [24.8, 5639.0], [24.9, 5639.0], [25.0, 5676.0], [25.1, 5722.0], [25.2, 5776.0], [25.3, 5790.0], [25.4, 5790.0], [25.5, 5844.0], [25.6, 5856.0], [25.7, 5872.0], [25.8, 5872.0], [25.9, 5879.0], [26.0, 5913.0], [26.1, 5955.0], [26.2, 5955.0], [26.3, 5975.0], [26.4, 6017.0], [26.5, 6021.0], [26.6, 6023.0], [26.7, 6023.0], [26.8, 6039.0], [26.9, 6087.0], [27.0, 6115.0], [27.1, 6115.0], [27.2, 6121.0], [27.3, 6208.0], [27.4, 6221.0], [27.5, 6221.0], [27.6, 6262.0], [27.7, 6271.0], [27.8, 6293.0], [27.9, 6293.0], [28.0, 6382.0], [28.1, 6399.0], [28.2, 6422.0], [28.3, 6499.0], [28.4, 6499.0], [28.5, 6570.0], [28.6, 6580.0], [28.7, 6621.0], [28.8, 6621.0], [28.9, 6713.0], [29.0, 6765.0], [29.1, 6769.0], [29.2, 6769.0], [29.3, 6783.0], [29.4, 6793.0], [29.5, 6818.0], [29.6, 6823.0], [29.7, 6823.0], [29.8, 6837.0], [29.9, 6858.0], [30.0, 6944.0], [30.1, 6944.0], [30.2, 6996.0], [30.3, 7009.0], [30.4, 7017.0], [30.5, 7017.0], [30.6, 7022.0], [30.7, 7038.0], [30.8, 7092.0], [30.9, 7107.0], [31.0, 7107.0], [31.1, 7127.0], [31.2, 7265.0], [31.3, 7313.0], [31.4, 7313.0], [31.5, 7329.0], [31.6, 7336.0], [31.7, 7391.0], [31.8, 7391.0], [31.9, 7395.0], [32.0, 7397.0], [32.1, 7412.0], [32.2, 7412.0], [32.3, 7423.0], [32.4, 7499.0], [32.5, 7511.0], [32.6, 7517.0], [32.7, 7517.0], [32.8, 7570.0], [32.9, 7635.0], [33.0, 7706.0], [33.1, 7706.0], [33.2, 7875.0], [33.3, 7883.0], [33.4, 7978.0], [33.5, 7978.0], [33.6, 7997.0], [33.7, 8023.0], [33.8, 8029.0], [33.9, 8030.0], [34.0, 8030.0], [34.1, 8055.0], [34.2, 8078.0], [34.3, 8104.0], [34.4, 8104.0], [34.5, 8107.0], [34.6, 8197.0], [34.7, 8215.0], [34.8, 8215.0], [34.9, 8254.0], [35.0, 8269.0], [35.1, 8372.0], [35.2, 8372.0], [35.3, 8384.0], [35.4, 8443.0], [35.5, 8478.0], [35.6, 8499.0], [35.7, 8499.0], [35.8, 8530.0], [35.9, 8642.0], [36.0, 8646.0], [36.1, 8646.0], [36.2, 8691.0], [36.3, 8699.0], [36.4, 8703.0], [36.5, 8703.0], [36.6, 8711.0], [36.7, 8715.0], [36.8, 8764.0], [36.9, 8793.0], [37.0, 8793.0], [37.1, 8810.0], [37.2, 8842.0], [37.3, 8907.0], [37.4, 8907.0], [37.5, 8932.0], [37.6, 9052.0], [37.7, 9055.0], [37.8, 9055.0], [37.9, 9071.0], [38.0, 9079.0], [38.1, 9207.0], [38.2, 9207.0], [38.3, 9305.0], [38.4, 9325.0], [38.5, 9441.0], [38.6, 9473.0], [38.7, 9473.0], [38.8, 9537.0], [38.9, 9537.0], [39.0, 9598.0], [39.1, 9598.0], [39.2, 9651.0], [39.3, 9664.0], [39.4, 9723.0], [39.5, 9723.0], [39.6, 9756.0], [39.7, 9789.0], [39.8, 9794.0], [39.9, 9813.0], [40.0, 9813.0], [40.1, 9855.0], [40.2, 9865.0], [40.3, 9926.0], [40.4, 9926.0], [40.5, 9950.0], [40.6, 9966.0], [40.7, 9987.0], [40.8, 9987.0], [40.9, 10074.0], [41.0, 10103.0], [41.1, 10171.0], [41.2, 10184.0], [41.3, 10184.0], [41.4, 10236.0], [41.5, 10327.0], [41.6, 10401.0], [41.7, 10401.0], [41.8, 10406.0], [41.9, 10428.0], [42.0, 10627.0], [42.1, 10627.0], [42.2, 10632.0], [42.3, 10667.0], [42.4, 10684.0], [42.5, 10684.0], [42.6, 10724.0], [42.7, 10733.0], [42.8, 10770.0], [42.9, 10777.0], [43.0, 10777.0], [43.1, 10850.0], [43.2, 10864.0], [43.3, 10881.0], [43.4, 10881.0], [43.5, 10934.0], [43.6, 10979.0], [43.7, 11098.0], [43.8, 11098.0], [43.9, 11107.0], [44.0, 11194.0], [44.1, 11225.0], [44.2, 11400.0], [44.3, 11400.0], [44.4, 11435.0], [44.5, 11468.0], [44.6, 11498.0], [44.7, 11498.0], [44.8, 11520.0], [44.9, 11573.0], [45.0, 11609.0], [45.1, 11609.0], [45.2, 11629.0], [45.3, 11672.0], [45.4, 11727.0], [45.5, 11727.0], [45.6, 11774.0], [45.7, 11855.0], [45.8, 11898.0], [45.9, 11934.0], [46.0, 11934.0], [46.1, 11955.0], [46.2, 12066.0], [46.3, 12234.0], [46.4, 12234.0], [46.5, 12254.0], [46.6, 12269.0], [46.7, 12334.0], [46.8, 12334.0], [46.9, 12441.0], [47.0, 12535.0], [47.1, 12549.0], [47.2, 12561.0], [47.3, 12561.0], [47.4, 12850.0], [47.5, 12913.0], [47.6, 12995.0], [47.7, 12995.0], [47.8, 13026.0], [47.9, 13078.0], [48.0, 13087.0], [48.1, 13087.0], [48.2, 13131.0], [48.3, 13144.0], [48.4, 13168.0], [48.5, 13168.0], [48.6, 13176.0], [48.7, 13187.0], [48.8, 13194.0], [48.9, 13203.0], [49.0, 13203.0], [49.1, 13236.0], [49.2, 13324.0], [49.3, 13346.0], [49.4, 13346.0], [49.5, 13422.0], [49.6, 13433.0], [49.7, 13435.0], [49.8, 13435.0], [49.9, 13439.0], [50.0, 13474.0], [50.1, 13509.0], [50.2, 13550.0], [50.3, 13550.0], [50.4, 13712.0], [50.5, 13722.0], [50.6, 13790.0], [50.7, 13790.0], [50.8, 13870.0], [50.9, 14109.0], [51.0, 14219.0], [51.1, 14219.0], [51.2, 14220.0], [51.3, 14272.0], [51.4, 14298.0], [51.5, 14326.0], [51.6, 14326.0], [51.7, 14363.0], [51.8, 14415.0], [51.9, 14443.0], [52.0, 14443.0], [52.1, 14444.0], [52.2, 14476.0], [52.3, 14607.0], [52.4, 14607.0], [52.5, 14629.0], [52.6, 14637.0], [52.7, 14648.0], [52.8, 14648.0], [52.9, 14690.0], [53.0, 14726.0], [53.1, 14743.0], [53.2, 14818.0], [53.3, 14818.0], [53.4, 14877.0], [53.5, 14926.0], [53.6, 14962.0], [53.7, 14962.0], [53.8, 14971.0], [53.9, 14984.0], [54.0, 14991.0], [54.1, 14991.0], [54.2, 15000.0], [54.3, 15072.0], [54.4, 15074.0], [54.5, 15138.0], [54.6, 15138.0], [54.7, 15188.0], [54.8, 15281.0], [54.9, 15543.0], [55.0, 15543.0], [55.1, 15609.0], [55.2, 15664.0], [55.3, 15668.0], [55.4, 15668.0], [55.5, 15687.0], [55.6, 15782.0], [55.7, 15835.0], [55.8, 15835.0], [55.9, 15932.0], [56.0, 15933.0], [56.1, 15983.0], [56.2, 16047.0], [56.3, 16047.0], [56.4, 16060.0], [56.5, 16066.0], [56.6, 16090.0], [56.7, 16090.0], [56.8, 16162.0], [56.9, 16206.0], [57.0, 16280.0], [57.1, 16280.0], [57.2, 16336.0], [57.3, 16357.0], [57.4, 16420.0], [57.5, 16583.0], [57.6, 16583.0], [57.7, 16612.0], [57.8, 16617.0], [57.9, 16620.0], [58.0, 16620.0], [58.1, 16878.0], [58.2, 16894.0], [58.3, 16920.0], [58.4, 16920.0], [58.5, 16952.0], [58.6, 16975.0], [58.7, 16979.0], [58.8, 16979.0], [58.9, 17008.0], [59.0, 17102.0], [59.1, 17119.0], [59.2, 17200.0], [59.3, 17200.0], [59.4, 17337.0], [59.5, 17418.0], [59.6, 17425.0], [59.7, 17425.0], [59.8, 17505.0], [59.9, 17561.0], [60.0, 17665.0], [60.1, 17665.0], [60.2, 17688.0], [60.3, 17775.0], [60.4, 17783.0], [60.5, 17979.0], [60.6, 17979.0], [60.7, 18135.0], [60.8, 18268.0], [60.9, 18270.0], [61.0, 18270.0], [61.1, 18319.0], [61.2, 18371.0], [61.3, 18377.0], [61.4, 18377.0], [61.5, 18391.0], [61.6, 18481.0], [61.7, 18494.0], [61.8, 18502.0], [61.9, 18502.0], [62.0, 18535.0], [62.1, 18563.0], [62.2, 18564.0], [62.3, 18564.0], [62.4, 18620.0], [62.5, 18730.0], [62.6, 18886.0], [62.7, 18886.0], [62.8, 18944.0], [62.9, 18996.0], [63.0, 19080.0], [63.1, 19080.0], [63.2, 19164.0], [63.3, 19230.0], [63.4, 19368.0], [63.5, 19447.0], [63.6, 19447.0], [63.7, 19566.0], [63.8, 19587.0], [63.9, 19605.0], [64.0, 19605.0], [64.1, 19637.0], [64.2, 19682.0], [64.3, 19757.0], [64.4, 19757.0], [64.5, 19757.0], [64.6, 19847.0], [64.7, 19848.0], [64.8, 19952.0], [64.9, 19952.0], [65.0, 20089.0], [65.1, 20144.0], [65.2, 20162.0], [65.3, 20162.0], [65.4, 20265.0], [65.5, 20342.0], [65.6, 20441.0], [65.7, 20441.0], [65.8, 20495.0], [65.9, 20499.0], [66.0, 20546.0], [66.1, 20546.0], [66.2, 20556.0], [66.3, 20601.0], [66.4, 20622.0], [66.5, 20706.0], [66.6, 20706.0], [66.7, 20718.0], [66.8, 20834.0], [66.9, 21136.0], [67.0, 21136.0], [67.1, 21149.0], [67.2, 21236.0], [67.3, 21300.0], [67.4, 21300.0], [67.5, 21306.0], [67.6, 21321.0], [67.7, 21444.0], [67.8, 21496.0], [67.9, 21496.0], [68.0, 21546.0], [68.1, 21554.0], [68.2, 21653.0], [68.3, 21653.0], [68.4, 21818.0], [68.5, 21846.0], [68.6, 21869.0], [68.7, 21869.0], [68.8, 22152.0], [68.9, 22253.0], [69.0, 22263.0], [69.1, 22263.0], [69.2, 22376.0], [69.3, 22446.0], [69.4, 22450.0], [69.5, 22530.0], [69.6, 22530.0], [69.7, 22545.0], [69.8, 22555.0], [69.9, 22606.0], [70.0, 22606.0], [70.1, 22636.0], [70.2, 22669.0], [70.3, 22829.0], [70.4, 22829.0], [70.5, 22910.0], [70.6, 22918.0], [70.7, 23019.0], [70.8, 23025.0], [70.9, 23025.0], [71.0, 23238.0], [71.1, 23246.0], [71.2, 23313.0], [71.3, 23313.0], [71.4, 23380.0], [71.5, 23534.0], [71.6, 23540.0], [71.7, 23540.0], [71.8, 23575.0], [71.9, 23663.0], [72.0, 23733.0], [72.1, 23905.0], [72.2, 23905.0], [72.3, 23961.0], [72.4, 24109.0], [72.5, 24129.0], [72.6, 24129.0], [72.7, 24168.0], [72.8, 24185.0], [72.9, 24397.0], [73.0, 24397.0], [73.1, 24422.0], [73.2, 24437.0], [73.3, 24518.0], [73.4, 24518.0], [73.5, 24854.0], [73.6, 25068.0], [73.7, 25084.0], [73.8, 25102.0], [73.9, 25102.0], [74.0, 25156.0], [74.1, 25249.0], [74.2, 25270.0], [74.3, 25270.0], [74.4, 25290.0], [74.5, 25326.0], [74.6, 25344.0], [74.7, 25344.0], [74.8, 25364.0], [74.9, 25575.0], [75.0, 25628.0], [75.1, 25755.0], [75.2, 25755.0], [75.3, 25834.0], [75.4, 26331.0], [75.5, 26339.0], [75.6, 26339.0], [75.7, 26356.0], [75.8, 26404.0], [75.9, 26425.0], [76.0, 26425.0], [76.1, 26459.0], [76.2, 26627.0], [76.3, 26710.0], [76.4, 26710.0], [76.5, 26714.0], [76.6, 26733.0], [76.7, 26768.0], [76.8, 27047.0], [76.9, 27047.0], [77.0, 27127.0], [77.1, 27173.0], [77.2, 27331.0], [77.3, 27331.0], [77.4, 27406.0], [77.5, 27509.0], [77.6, 27509.0], [77.7, 27509.0], [77.8, 27681.0], [77.9, 27842.0], [78.0, 28002.0], [78.1, 28008.0], [78.2, 28008.0], [78.3, 28010.0], [78.4, 28021.0], [78.5, 28204.0], [78.6, 28204.0], [78.7, 28292.0], [78.8, 28435.0], [78.9, 28511.0], [79.0, 28511.0], [79.1, 28634.0], [79.2, 28675.0], [79.3, 28873.0], [79.4, 28873.0], [79.5, 28879.0], [79.6, 28930.0], [79.7, 29429.0], [79.8, 29458.0], [79.9, 29458.0], [80.0, 29524.0], [80.1, 29581.0], [80.2, 29618.0], [80.3, 29618.0], [80.4, 29651.0], [80.5, 29737.0], [80.6, 29769.0], [80.7, 29769.0], [80.8, 29814.0], [80.9, 29850.0], [81.0, 29893.0], [81.1, 30089.0], [81.2, 30089.0], [81.3, 30285.0], [81.4, 30416.0], [81.5, 30598.0], [81.6, 30598.0], [81.7, 30671.0], [81.8, 30785.0], [81.9, 30858.0], [82.0, 30858.0], [82.1, 30903.0], [82.2, 31083.0], [82.3, 31163.0], [82.4, 31165.0], [82.5, 31165.0], [82.6, 31184.0], [82.7, 31186.0], [82.8, 31195.0], [82.9, 31195.0], [83.0, 31323.0], [83.1, 31565.0], [83.2, 31813.0], [83.3, 31813.0], [83.4, 31834.0], [83.5, 31866.0], [83.6, 32027.0], [83.7, 32027.0], [83.8, 32155.0], [83.9, 32308.0], [84.0, 32311.0], [84.1, 32476.0], [84.2, 32476.0], [84.3, 32498.0], [84.4, 32580.0], [84.5, 32869.0], [84.6, 32869.0], [84.7, 33177.0], [84.8, 33190.0], [84.9, 33308.0], [85.0, 33308.0], [85.1, 33397.0], [85.2, 33515.0], [85.3, 33724.0], [85.4, 33856.0], [85.5, 33856.0], [85.6, 34269.0], [85.7, 34314.0], [85.8, 34601.0], [85.9, 34601.0], [86.0, 34679.0], [86.1, 34771.0], [86.2, 34799.0], [86.3, 34799.0], [86.4, 34799.0], [86.5, 34802.0], [86.6, 34808.0], [86.7, 34808.0], [86.8, 35137.0], [86.9, 35233.0], [87.0, 35685.0], [87.1, 35738.0], [87.2, 35738.0], [87.3, 36002.0], [87.4, 36052.0], [87.5, 36098.0], [87.6, 36098.0], [87.7, 36209.0], [87.8, 36234.0], [87.9, 36242.0], [88.0, 36242.0], [88.1, 36872.0], [88.2, 36956.0], [88.3, 37058.0], [88.4, 37104.0], [88.5, 37104.0], [88.6, 37316.0], [88.7, 37412.0], [88.8, 37628.0], [88.9, 37628.0], [89.0, 37850.0], [89.1, 38093.0], [89.2, 38130.0], [89.3, 38130.0], [89.4, 38284.0], [89.5, 38586.0], [89.6, 38658.0], [89.7, 38658.0], [89.8, 38745.0], [89.9, 38987.0], [90.0, 38990.0], [90.1, 39118.0], [90.2, 39118.0], [90.3, 39263.0], [90.4, 39288.0], [90.5, 39499.0], [90.6, 39499.0], [90.7, 39978.0], [90.8, 40057.0], [90.9, 40405.0], [91.0, 40405.0], [91.1, 40405.0], [91.2, 40422.0], [91.3, 40488.0], [91.4, 40682.0], [91.5, 40682.0], [91.6, 40919.0], [91.7, 40961.0], [91.8, 41041.0], [91.9, 41041.0], [92.0, 41358.0], [92.1, 41603.0], [92.2, 41640.0], [92.3, 41640.0], [92.4, 41840.0], [92.5, 41912.0], [92.6, 42010.0], [92.7, 42435.0], [92.8, 42435.0], [92.9, 42495.0], [93.0, 42594.0], [93.1, 42813.0], [93.2, 42813.0], [93.3, 42993.0], [93.4, 43045.0], [93.5, 43501.0], [93.6, 43501.0], [93.7, 43910.0], [93.8, 43957.0], [93.9, 44118.0], [94.0, 44118.0], [94.1, 44272.0], [94.2, 44838.0], [94.3, 45069.0], [94.4, 45196.0], [94.5, 45196.0], [94.6, 45220.0], [94.7, 45236.0], [94.8, 45238.0], [94.9, 45238.0], [95.0, 45983.0], [95.1, 46118.0], [95.2, 46202.0], [95.3, 46202.0], [95.4, 46290.0], [95.5, 46357.0], [95.6, 46660.0], [95.7, 47042.0], [95.8, 47042.0], [95.9, 47087.0], [96.0, 47786.0], [96.1, 47944.0], [96.2, 47944.0], [96.3, 48158.0], [96.4, 48582.0], [96.5, 48718.0], [96.6, 48718.0], [96.7, 49145.0], [96.8, 49427.0], [96.9, 49770.0], [97.0, 49770.0], [97.1, 50004.0], [97.2, 50150.0], [97.3, 50995.0], [97.4, 51165.0], [97.5, 51165.0], [97.6, 52276.0], [97.7, 53117.0], [97.8, 53353.0], [97.9, 53353.0], [98.0, 53822.0], [98.1, 54341.0], [98.2, 54464.0], [98.3, 54464.0], [98.4, 54825.0], [98.5, 55702.0], [98.6, 55949.0], [98.7, 56430.0], [98.8, 56430.0], [98.9, 57330.0], [99.0, 57340.0], [99.1, 57926.0], [99.2, 57926.0], [99.3, 58496.0], [99.4, 58605.0], [99.5, 59800.0], [99.6, 59800.0], [99.7, 59991.0], [99.8, 60182.0], [99.9, 60245.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 9.0, "series": [{"data": [[33700.0, 1.0], [33300.0, 2.0], [35700.0, 1.0], [38900.0, 2.0], [38500.0, 1.0], [36900.0, 1.0], [37300.0, 1.0], [38100.0, 1.0], [40900.0, 2.0], [41300.0, 1.0], [42500.0, 1.0], [42900.0, 1.0], [44100.0, 1.0], [46100.0, 1.0], [48100.0, 1.0], [47700.0, 1.0], [48500.0, 1.0], [49700.0, 1.0], [50900.0, 1.0], [50100.0, 1.0], [53300.0, 1.0], [57300.0, 2.0], [55700.0, 1.0], [60100.0, 1.0], [700.0, 3.0], [800.0, 5.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 7.0], [1200.0, 7.0], [1300.0, 7.0], [1400.0, 7.0], [1500.0, 2.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 9.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 4.0], [2300.0, 6.0], [2200.0, 6.0], [2400.0, 4.0], [2500.0, 7.0], [2600.0, 1.0], [2800.0, 4.0], [2700.0, 2.0], [2900.0, 5.0], [3000.0, 3.0], [3100.0, 4.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 5.0], [3500.0, 6.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 3.0], [4100.0, 6.0], [4300.0, 1.0], [4200.0, 2.0], [4400.0, 3.0], [4500.0, 2.0], [4600.0, 3.0], [4700.0, 3.0], [4800.0, 4.0], [5000.0, 3.0], [4900.0, 2.0], [5100.0, 2.0], [5200.0, 4.0], [5300.0, 1.0], [5500.0, 2.0], [5600.0, 3.0], [5400.0, 2.0], [5800.0, 4.0], [5700.0, 3.0], [6100.0, 2.0], [5900.0, 3.0], [6000.0, 5.0], [6200.0, 5.0], [6300.0, 2.0], [6400.0, 2.0], [6500.0, 2.0], [6600.0, 1.0], [6800.0, 4.0], [6700.0, 5.0], [6900.0, 2.0], [7000.0, 5.0], [7100.0, 2.0], [7400.0, 3.0], [7300.0, 6.0], [7200.0, 1.0], [7600.0, 1.0], [7500.0, 3.0], [7900.0, 2.0], [7800.0, 2.0], [7700.0, 1.0], [8000.0, 5.0], [8100.0, 3.0], [8600.0, 4.0], [8500.0, 1.0], [8300.0, 2.0], [8400.0, 3.0], [8700.0, 5.0], [8200.0, 3.0], [9000.0, 4.0], [8800.0, 2.0], [8900.0, 2.0], [9200.0, 1.0], [9500.0, 3.0], [9600.0, 2.0], [9700.0, 4.0], [9300.0, 2.0], [9400.0, 2.0], [10200.0, 1.0], [10100.0, 3.0], [9800.0, 3.0], [9900.0, 4.0], [10000.0, 1.0], [10700.0, 4.0], [10400.0, 3.0], [10600.0, 4.0], [10300.0, 1.0], [11200.0, 1.0], [10900.0, 2.0], [11100.0, 2.0], [10800.0, 3.0], [11000.0, 1.0], [11400.0, 4.0], [11600.0, 3.0], [11700.0, 2.0], [11500.0, 2.0], [11800.0, 2.0], [12200.0, 3.0], [12000.0, 1.0], [11900.0, 2.0], [12500.0, 3.0], [12300.0, 1.0], [12400.0, 1.0], [13100.0, 6.0], [12900.0, 2.0], [13000.0, 3.0], [12800.0, 1.0], [13300.0, 2.0], [13200.0, 2.0], [13700.0, 3.0], [13400.0, 5.0], [13800.0, 1.0], [13500.0, 2.0], [14200.0, 4.0], [14300.0, 2.0], [14100.0, 1.0], [14400.0, 4.0], [14600.0, 5.0], [14700.0, 2.0], [14800.0, 2.0], [15200.0, 1.0], [15000.0, 3.0], [14900.0, 5.0], [15100.0, 2.0], [15600.0, 4.0], [15700.0, 1.0], [15500.0, 1.0], [15800.0, 1.0], [16000.0, 4.0], [15900.0, 3.0], [16100.0, 1.0], [16200.0, 2.0], [16300.0, 2.0], [16400.0, 1.0], [17200.0, 1.0], [16600.0, 3.0], [17400.0, 2.0], [16800.0, 2.0], [17000.0, 1.0], [18400.0, 2.0], [18200.0, 2.0], [17600.0, 2.0], [18800.0, 1.0], [19000.0, 1.0], [19200.0, 1.0], [18600.0, 1.0], [19400.0, 1.0], [19600.0, 3.0], [19800.0, 2.0], [20000.0, 1.0], [20400.0, 3.0], [20200.0, 1.0], [20800.0, 1.0], [21400.0, 2.0], [20600.0, 2.0], [21200.0, 1.0], [22400.0, 2.0], [21800.0, 3.0], [22200.0, 2.0], [21600.0, 1.0], [23000.0, 2.0], [22800.0, 1.0], [22600.0, 3.0], [23200.0, 2.0], [23600.0, 1.0], [24400.0, 2.0], [25000.0, 2.0], [25200.0, 3.0], [24800.0, 1.0], [26600.0, 1.0], [25800.0, 1.0], [25600.0, 1.0], [26400.0, 3.0], [27600.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [28000.0, 4.0], [27800.0, 1.0], [28600.0, 2.0], [28200.0, 2.0], [28400.0, 1.0], [28800.0, 2.0], [29400.0, 2.0], [29600.0, 2.0], [30200.0, 1.0], [30000.0, 1.0], [29800.0, 3.0], [30400.0, 1.0], [30600.0, 1.0], [30800.0, 1.0], [31000.0, 1.0], [32000.0, 1.0], [32400.0, 2.0], [31800.0, 3.0], [32800.0, 1.0], [34800.0, 2.0], [36000.0, 3.0], [36800.0, 1.0], [35600.0, 1.0], [35200.0, 1.0], [37600.0, 1.0], [38000.0, 1.0], [40400.0, 4.0], [40000.0, 1.0], [39200.0, 2.0], [42000.0, 1.0], [41600.0, 2.0], [42400.0, 2.0], [42800.0, 1.0], [44800.0, 1.0], [45200.0, 3.0], [50000.0, 1.0], [54400.0, 1.0], [54800.0, 1.0], [56400.0, 1.0], [58400.0, 1.0], [33100.0, 2.0], [34300.0, 1.0], [34700.0, 3.0], [33500.0, 1.0], [35100.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [39900.0, 1.0], [39100.0, 1.0], [41900.0, 1.0], [43500.0, 1.0], [43900.0, 2.0], [46300.0, 1.0], [45900.0, 1.0], [45100.0, 1.0], [48700.0, 1.0], [47900.0, 1.0], [49100.0, 1.0], [51100.0, 1.0], [53100.0, 1.0], [54300.0, 1.0], [55900.0, 1.0], [57900.0, 1.0], [59900.0, 1.0], [16900.0, 4.0], [17300.0, 1.0], [17100.0, 2.0], [16500.0, 1.0], [18300.0, 4.0], [17900.0, 1.0], [17700.0, 2.0], [17500.0, 2.0], [18100.0, 1.0], [18500.0, 4.0], [18900.0, 2.0], [18700.0, 1.0], [19100.0, 1.0], [19300.0, 1.0], [19500.0, 2.0], [20300.0, 1.0], [19700.0, 2.0], [19900.0, 1.0], [20100.0, 2.0], [21100.0, 2.0], [20700.0, 2.0], [21300.0, 3.0], [20500.0, 2.0], [21500.0, 2.0], [22100.0, 1.0], [22500.0, 3.0], [22300.0, 1.0], [22900.0, 2.0], [23500.0, 3.0], [23300.0, 2.0], [24100.0, 4.0], [23700.0, 1.0], [23900.0, 2.0], [24300.0, 1.0], [24500.0, 1.0], [25300.0, 3.0], [25100.0, 2.0], [25500.0, 1.0], [26300.0, 3.0], [25700.0, 1.0], [26700.0, 4.0], [27500.0, 2.0], [27300.0, 1.0], [27100.0, 2.0], [28500.0, 1.0], [29500.0, 2.0], [28900.0, 1.0], [29700.0, 2.0], [30700.0, 1.0], [30500.0, 1.0], [31100.0, 5.0], [31300.0, 1.0], [30900.0, 1.0], [31500.0, 1.0], [32300.0, 2.0], [32500.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [34600.0, 2.0], [34200.0, 1.0], [36200.0, 3.0], [37800.0, 1.0], [37000.0, 1.0], [38200.0, 1.0], [37400.0, 1.0], [38600.0, 1.0], [39400.0, 1.0], [40600.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [41800.0, 1.0], [44200.0, 1.0], [45000.0, 1.0], [46200.0, 2.0], [46600.0, 1.0], [47000.0, 2.0], [49400.0, 1.0], [52200.0, 1.0], [53800.0, 1.0], [58600.0, 1.0], [60200.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 719.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 46.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 719.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.948717948717949, "minX": 1.65125004E12, "maxY": 73.48765432098764, "series": [{"data": [[1.65125034E12, 27.5], [1.65125016E12, 45.876470588235314], [1.65125022E12, 68.47368421052634], [1.65125004E12, 8.948717948717949], [1.6512501E12, 21.473684210526326], [1.65125028E12, 73.48765432098764]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125034E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4033.766666666666, "minX": 1.0, "maxY": 60182.0, "series": [{"data": [[2.0, 60182.0], [3.0, 30321.0], [4.0, 20123.0], [5.0, 28460.0], [6.0, 18925.666666666668], [7.0, 27276.0], [8.0, 18371.333333333332], [9.0, 9769.0], [10.0, 4033.766666666666], [11.0, 12797.5], [12.0, 19562.333333333336], [13.0, 11806.0], [14.0, 24957.5], [15.0, 17731.666666666664], [16.0, 18279.333333333336], [17.0, 25456.0], [18.0, 17898.666666666664], [19.0, 15643.333333333334], [20.0, 6814.189655172413], [21.0, 27301.0], [22.0, 21022.0], [23.0, 25141.0], [24.0, 27236.0], [25.0, 18434.0], [26.0, 14214.0], [27.0, 20514.5], [28.0, 19555.0], [29.0, 14592.333333333334], [30.0, 9822.450000000003], [31.0, 19890.5], [32.0, 19350.666666666668], [33.0, 13807.333333333334], [34.0, 17510.0], [35.0, 14368.333333333334], [36.0, 20889.5], [37.0, 17130.5], [38.0, 15518.333333333332], [39.0, 21350.0], [40.0, 13412.862068965516], [41.0, 11161.666666666668], [42.0, 15035.5], [43.0, 12141.666666666668], [44.0, 16248.0], [45.0, 15404.5], [46.0, 13342.333333333332], [47.0, 16535.0], [48.0, 14525.0], [49.0, 15878.0], [50.0, 15464.610169491527], [51.0, 22489.0], [52.0, 10801.0], [53.0, 14580.0], [54.0, 20262.0], [55.0, 10850.0], [56.0, 15543.666666666666], [57.0, 20182.0], [58.0, 16238.666666666666], [59.0, 10752.0], [60.0, 17054.65517241379], [61.0, 20583.666666666668], [62.0, 21432.666666666668], [63.0, 16970.0], [64.0, 20636.5], [65.0, 21546.0], [66.0, 22602.666666666668], [67.0, 11941.0], [68.0, 22717.333333333336], [69.0, 23144.333333333336], [70.0, 17844.661016949158], [71.0, 22823.666666666664], [72.0, 12506.666666666668], [73.0, 29834.75], [74.0, 47626.35294117646], [75.0, 25506.76023391813], [1.0, 31163.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[48.13428943937416, 17272.457627118645]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 75.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 101.31666666666666, "minX": 1.65125004E12, "maxY": 534.4666666666667, "series": [{"data": [[1.65125034E12, 175.98333333333332], [1.65125016E12, 529.2333333333333], [1.65125022E12, 534.4666666666667], [1.65125004E12, 120.43333333333334], [1.6512501E12, 530.8333333333334], [1.65125028E12, 513.4333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125034E12, 140.43333333333334], [1.65125016E12, 441.8], [1.65125022E12, 444.55], [1.65125004E12, 101.31666666666666], [1.6512501E12, 444.3833333333333], [1.65125028E12, 421.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125034E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2495.076923076923, "minX": 1.65125004E12, "maxY": 35945.88888888888, "series": [{"data": [[1.65125034E12, 35945.88888888888], [1.65125016E12, 13773.552941176471], [1.65125022E12, 19666.912280701752], [1.65125004E12, 2495.076923076923], [1.6512501E12, 6525.251461988301], [1.65125028E12, 27093.981481481485]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125034E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2494.871794871796, "minX": 1.65125004E12, "maxY": 35945.851851851854, "series": [{"data": [[1.65125034E12, 35945.851851851854], [1.65125016E12, 13773.523529411765], [1.65125022E12, 19666.894736842092], [1.65125004E12, 2494.871794871796], [1.6512501E12, 6525.192982456139], [1.65125028E12, 27093.944444444445]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125034E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.962962962962965, "minX": 1.65125004E12, "maxY": 24.487179487179493, "series": [{"data": [[1.65125034E12, 8.962962962962965], [1.65125016E12, 9.535294117647053], [1.65125022E12, 9.058479532163748], [1.65125004E12, 24.487179487179493], [1.6512501E12, 11.257309941520466], [1.65125028E12, 9.092592592592592]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125034E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 730.0, "minX": 1.65125004E12, "maxY": 59991.0, "series": [{"data": [[1.65125034E12, 59800.0], [1.65125016E12, 33177.0], [1.65125022E12, 49427.0], [1.65125004E12, 7423.0], [1.6512501E12, 20342.0], [1.65125028E12, 59991.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125034E12, 53203.600000000006], [1.65125016E12, 24974.100000000006], [1.65125022E12, 36015.4], [1.65125004E12, 4789.0], [1.6512501E12, 13430.8], [1.65125028E12, 48690.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125034E12, 59800.0], [1.65125016E12, 32560.009999999995], [1.65125022E12, 48513.32], [1.65125004E12, 7423.0], [1.6512501E12, 19783.280000000002], [1.65125028E12, 59131.67999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125034E12, 56542.09999999999], [1.65125016E12, 27828.149999999998], [1.65125022E12, 40669.600000000006], [1.65125004E12, 6121.0], [1.6512501E12, 15443.400000000001], [1.65125028E12, 54451.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125034E12, 17505.0], [1.65125016E12, 1008.0], [1.65125022E12, 1117.0], [1.65125004E12, 730.0], [1.6512501E12, 772.0], [1.65125028E12, 1128.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125034E12, 34802.0], [1.65125016E12, 13717.0], [1.65125022E12, 18730.0], [1.65125004E12, 2007.0], [1.6512501E12, 5676.0], [1.65125028E12, 26459.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125034E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11194.0, "minX": 1.0, "maxY": 60245.0, "series": [{"data": [[4.0, 16979.0], [2.0, 17104.0], [1.0, 54825.0], [3.0, 11194.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60245.0], [3.0, 60182.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11194.0, "minX": 1.0, "maxY": 60245.0, "series": [{"data": [[4.0, 16979.0], [2.0, 17104.0], [1.0, 54825.0], [3.0, 11194.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60245.0], [3.0, 60182.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8166666666666667, "minX": 1.65125004E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.65125016E12, 3.3333333333333335], [1.65125022E12, 3.1], [1.65125004E12, 0.8166666666666667], [1.6512501E12, 3.183333333333333], [1.65125028E12, 2.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125028E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125004E12, "maxY": 2.85, "series": [{"data": [[1.65125034E12, 0.8833333333333333], [1.65125016E12, 2.8333333333333335], [1.65125022E12, 2.85], [1.65125004E12, 0.65], [1.6512501E12, 2.85], [1.65125028E12, 2.683333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65125034E12, 0.016666666666666666], [1.65125028E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125034E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125004E12, "maxY": 2.85, "series": [{"data": [[1.65125034E12, 0.8833333333333333], [1.65125016E12, 2.8333333333333335], [1.65125022E12, 2.85], [1.65125004E12, 0.65], [1.6512501E12, 2.85], [1.65125028E12, 2.683333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65125034E12, 0.016666666666666666], [1.65125028E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125034E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125004E12, "maxY": 2.85, "series": [{"data": [[1.65125034E12, 0.8833333333333333], [1.65125016E12, 2.8333333333333335], [1.65125022E12, 2.85], [1.65125004E12, 0.65], [1.6512501E12, 2.85], [1.65125028E12, 2.683333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65125034E12, 0.016666666666666666], [1.65125028E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125034E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


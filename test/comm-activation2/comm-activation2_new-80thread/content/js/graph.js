/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 736.0, "minX": 0.0, "maxY": 60177.0, "series": [{"data": [[0.0, 736.0], [0.1, 736.0], [0.2, 862.0], [0.3, 865.0], [0.4, 879.0], [0.5, 879.0], [0.6, 920.0], [0.7, 926.0], [0.8, 976.0], [0.9, 976.0], [1.0, 976.0], [1.1, 983.0], [1.2, 992.0], [1.3, 993.0], [1.4, 993.0], [1.5, 1000.0], [1.6, 1014.0], [1.7, 1024.0], [1.8, 1025.0], [1.9, 1025.0], [2.0, 1030.0], [2.1, 1041.0], [2.2, 1091.0], [2.3, 1091.0], [2.4, 1108.0], [2.5, 1117.0], [2.6, 1163.0], [2.7, 1167.0], [2.8, 1167.0], [2.9, 1184.0], [3.0, 1190.0], [3.1, 1197.0], [3.2, 1197.0], [3.3, 1216.0], [3.4, 1217.0], [3.5, 1225.0], [3.6, 1228.0], [3.7, 1228.0], [3.8, 1248.0], [3.9, 1329.0], [4.0, 1333.0], [4.1, 1333.0], [4.2, 1345.0], [4.3, 1358.0], [4.4, 1381.0], [4.5, 1401.0], [4.6, 1401.0], [4.7, 1409.0], [4.8, 1460.0], [4.9, 1477.0], [5.0, 1477.0], [5.1, 1479.0], [5.2, 1491.0], [5.3, 1505.0], [5.4, 1507.0], [5.5, 1507.0], [5.6, 1568.0], [5.7, 1588.0], [5.8, 1590.0], [5.9, 1590.0], [6.0, 1631.0], [6.1, 1632.0], [6.2, 1658.0], [6.3, 1663.0], [6.4, 1663.0], [6.5, 1668.0], [6.6, 1669.0], [6.7, 1671.0], [6.8, 1671.0], [6.9, 1701.0], [7.0, 1799.0], [7.1, 1865.0], [7.2, 1881.0], [7.3, 1881.0], [7.4, 1919.0], [7.5, 1965.0], [7.6, 1966.0], [7.7, 1966.0], [7.8, 1977.0], [7.9, 1982.0], [8.0, 1983.0], [8.1, 2020.0], [8.2, 2020.0], [8.3, 2029.0], [8.4, 2073.0], [8.5, 2078.0], [8.6, 2078.0], [8.7, 2137.0], [8.8, 2148.0], [8.9, 2178.0], [9.0, 2192.0], [9.1, 2192.0], [9.2, 2294.0], [9.3, 2296.0], [9.4, 2307.0], [9.5, 2307.0], [9.6, 2318.0], [9.7, 2344.0], [9.8, 2387.0], [9.9, 2442.0], [10.0, 2442.0], [10.1, 2442.0], [10.2, 2451.0], [10.3, 2490.0], [10.4, 2490.0], [10.5, 2499.0], [10.6, 2508.0], [10.7, 2511.0], [10.8, 2557.0], [10.9, 2557.0], [11.0, 2559.0], [11.1, 2578.0], [11.2, 2666.0], [11.3, 2666.0], [11.4, 2680.0], [11.5, 2731.0], [11.6, 2744.0], [11.7, 2784.0], [11.8, 2784.0], [11.9, 2788.0], [12.0, 2810.0], [12.1, 2814.0], [12.2, 2814.0], [12.3, 2872.0], [12.4, 2875.0], [12.5, 2898.0], [12.6, 2904.0], [12.7, 2904.0], [12.8, 2916.0], [12.9, 2969.0], [13.0, 3037.0], [13.1, 3037.0], [13.2, 3067.0], [13.3, 3136.0], [13.4, 3141.0], [13.5, 3185.0], [13.6, 3185.0], [13.7, 3190.0], [13.8, 3195.0], [13.9, 3203.0], [14.0, 3203.0], [14.1, 3234.0], [14.2, 3271.0], [14.3, 3313.0], [14.4, 3314.0], [14.5, 3314.0], [14.6, 3325.0], [14.7, 3335.0], [14.8, 3353.0], [14.9, 3353.0], [15.0, 3378.0], [15.1, 3386.0], [15.2, 3401.0], [15.3, 3420.0], [15.4, 3420.0], [15.5, 3459.0], [15.6, 3489.0], [15.7, 3542.0], [15.8, 3542.0], [15.9, 3543.0], [16.0, 3580.0], [16.1, 3622.0], [16.2, 3639.0], [16.3, 3639.0], [16.4, 3669.0], [16.5, 3705.0], [16.6, 3746.0], [16.7, 3746.0], [16.8, 3782.0], [16.9, 3798.0], [17.0, 3828.0], [17.1, 3845.0], [17.2, 3845.0], [17.3, 3879.0], [17.4, 3898.0], [17.5, 3936.0], [17.6, 3936.0], [17.7, 3953.0], [17.8, 3990.0], [17.9, 3991.0], [18.0, 4053.0], [18.1, 4053.0], [18.2, 4064.0], [18.3, 4076.0], [18.4, 4083.0], [18.5, 4083.0], [18.6, 4083.0], [18.7, 4097.0], [18.8, 4140.0], [18.9, 4225.0], [19.0, 4225.0], [19.1, 4234.0], [19.2, 4257.0], [19.3, 4258.0], [19.4, 4258.0], [19.5, 4267.0], [19.6, 4287.0], [19.7, 4293.0], [19.8, 4313.0], [19.9, 4313.0], [20.0, 4334.0], [20.1, 4391.0], [20.2, 4486.0], [20.3, 4486.0], [20.4, 4519.0], [20.5, 4526.0], [20.6, 4530.0], [20.7, 4552.0], [20.8, 4552.0], [20.9, 4579.0], [21.0, 4601.0], [21.1, 4654.0], [21.2, 4654.0], [21.3, 4708.0], [21.4, 4750.0], [21.5, 4830.0], [21.6, 4873.0], [21.7, 4873.0], [21.8, 4909.0], [21.9, 4924.0], [22.0, 4976.0], [22.1, 4976.0], [22.2, 4996.0], [22.3, 5006.0], [22.4, 5117.0], [22.5, 5128.0], [22.6, 5128.0], [22.7, 5131.0], [22.8, 5179.0], [22.9, 5210.0], [23.0, 5210.0], [23.1, 5222.0], [23.2, 5235.0], [23.3, 5248.0], [23.4, 5288.0], [23.5, 5288.0], [23.6, 5441.0], [23.7, 5443.0], [23.8, 5456.0], [23.9, 5456.0], [24.0, 5477.0], [24.1, 5489.0], [24.2, 5492.0], [24.3, 5501.0], [24.4, 5501.0], [24.5, 5504.0], [24.6, 5514.0], [24.7, 5564.0], [24.8, 5564.0], [24.9, 5606.0], [25.0, 5626.0], [25.1, 5639.0], [25.2, 5781.0], [25.3, 5781.0], [25.4, 5899.0], [25.5, 5961.0], [25.6, 6007.0], [25.7, 6007.0], [25.8, 6012.0], [25.9, 6013.0], [26.0, 6050.0], [26.1, 6059.0], [26.2, 6059.0], [26.3, 6141.0], [26.4, 6176.0], [26.5, 6184.0], [26.6, 6184.0], [26.7, 6195.0], [26.8, 6320.0], [26.9, 6347.0], [27.0, 6368.0], [27.1, 6368.0], [27.2, 6379.0], [27.3, 6404.0], [27.4, 6464.0], [27.5, 6464.0], [27.6, 6558.0], [27.7, 6607.0], [27.8, 6610.0], [27.9, 6634.0], [28.0, 6634.0], [28.1, 6664.0], [28.2, 6675.0], [28.3, 6706.0], [28.4, 6706.0], [28.5, 6721.0], [28.6, 6723.0], [28.7, 6777.0], [28.8, 6789.0], [28.9, 6789.0], [29.0, 6852.0], [29.1, 6863.0], [29.2, 6910.0], [29.3, 6910.0], [29.4, 6945.0], [29.5, 6976.0], [29.6, 6986.0], [29.7, 6992.0], [29.8, 6992.0], [29.9, 7051.0], [30.0, 7115.0], [30.1, 7122.0], [30.2, 7122.0], [30.3, 7179.0], [30.4, 7267.0], [30.5, 7290.0], [30.6, 7308.0], [30.7, 7308.0], [30.8, 7329.0], [30.9, 7334.0], [31.0, 7365.0], [31.1, 7365.0], [31.2, 7371.0], [31.3, 7413.0], [31.4, 7428.0], [31.5, 7520.0], [31.6, 7520.0], [31.7, 7579.0], [31.8, 7672.0], [31.9, 7765.0], [32.0, 7765.0], [32.1, 7785.0], [32.2, 7840.0], [32.3, 7848.0], [32.4, 7849.0], [32.5, 7849.0], [32.6, 7874.0], [32.7, 7876.0], [32.8, 7916.0], [32.9, 7916.0], [33.0, 7939.0], [33.1, 7965.0], [33.2, 8032.0], [33.3, 8054.0], [33.4, 8054.0], [33.5, 8079.0], [33.6, 8098.0], [33.7, 8108.0], [33.8, 8108.0], [33.9, 8119.0], [34.0, 8144.0], [34.1, 8248.0], [34.2, 8284.0], [34.3, 8284.0], [34.4, 8298.0], [34.5, 8309.0], [34.6, 8484.0], [34.7, 8484.0], [34.8, 8625.0], [34.9, 8658.0], [35.0, 8678.0], [35.1, 8701.0], [35.2, 8701.0], [35.3, 8721.0], [35.4, 8835.0], [35.5, 8852.0], [35.6, 8852.0], [35.7, 8889.0], [35.8, 8896.0], [35.9, 8904.0], [36.0, 8933.0], [36.1, 8933.0], [36.2, 8934.0], [36.3, 8962.0], [36.4, 9031.0], [36.5, 9031.0], [36.6, 9057.0], [36.7, 9087.0], [36.8, 9108.0], [36.9, 9119.0], [37.0, 9119.0], [37.1, 9168.0], [37.2, 9238.0], [37.3, 9253.0], [37.4, 9253.0], [37.5, 9310.0], [37.6, 9324.0], [37.7, 9472.0], [37.8, 9516.0], [37.9, 9516.0], [38.0, 9628.0], [38.1, 9695.0], [38.2, 9742.0], [38.3, 9742.0], [38.4, 9769.0], [38.5, 9779.0], [38.6, 9782.0], [38.7, 9901.0], [38.8, 9901.0], [38.9, 9902.0], [39.0, 9908.0], [39.1, 9956.0], [39.2, 9956.0], [39.3, 9976.0], [39.4, 10000.0], [39.5, 10017.0], [39.6, 10022.0], [39.7, 10022.0], [39.8, 10071.0], [39.9, 10084.0], [40.0, 10126.0], [40.1, 10126.0], [40.2, 10182.0], [40.3, 10240.0], [40.4, 10253.0], [40.5, 10364.0], [40.6, 10364.0], [40.7, 10374.0], [40.8, 10449.0], [40.9, 10484.0], [41.0, 10484.0], [41.1, 10543.0], [41.2, 10710.0], [41.3, 10750.0], [41.4, 10760.0], [41.5, 10760.0], [41.6, 10768.0], [41.7, 10774.0], [41.8, 10930.0], [41.9, 10930.0], [42.0, 10934.0], [42.1, 10944.0], [42.2, 10973.0], [42.3, 10995.0], [42.4, 10995.0], [42.5, 11106.0], [42.6, 11149.0], [42.7, 11208.0], [42.8, 11208.0], [42.9, 11266.0], [43.0, 11276.0], [43.1, 11303.0], [43.2, 11478.0], [43.3, 11478.0], [43.4, 11544.0], [43.5, 11570.0], [43.6, 11586.0], [43.7, 11586.0], [43.8, 11634.0], [43.9, 11686.0], [44.0, 11700.0], [44.1, 11825.0], [44.2, 11825.0], [44.3, 11904.0], [44.4, 11911.0], [44.5, 11974.0], [44.6, 11974.0], [44.7, 11999.0], [44.8, 12024.0], [44.9, 12121.0], [45.0, 12121.0], [45.1, 12121.0], [45.2, 12137.0], [45.3, 12188.0], [45.4, 12196.0], [45.5, 12196.0], [45.6, 12235.0], [45.7, 12266.0], [45.8, 12266.0], [45.9, 12327.0], [46.0, 12327.0], [46.1, 12432.0], [46.2, 12468.0], [46.3, 12500.0], [46.4, 12500.0], [46.5, 12543.0], [46.6, 12717.0], [46.7, 12752.0], [46.8, 12840.0], [46.9, 12840.0], [47.0, 12933.0], [47.1, 12950.0], [47.2, 12958.0], [47.3, 12958.0], [47.4, 13031.0], [47.5, 13086.0], [47.6, 13111.0], [47.7, 13124.0], [47.8, 13124.0], [47.9, 13168.0], [48.0, 13254.0], [48.1, 13263.0], [48.2, 13263.0], [48.3, 13297.0], [48.4, 13298.0], [48.5, 13351.0], [48.6, 13407.0], [48.7, 13407.0], [48.8, 13431.0], [48.9, 13472.0], [49.0, 13503.0], [49.1, 13503.0], [49.2, 13520.0], [49.3, 13631.0], [49.4, 13632.0], [49.5, 13656.0], [49.6, 13656.0], [49.7, 13688.0], [49.8, 13688.0], [49.9, 13795.0], [50.0, 13795.0], [50.1, 13801.0], [50.2, 13898.0], [50.3, 14013.0], [50.4, 14067.0], [50.5, 14067.0], [50.6, 14137.0], [50.7, 14287.0], [50.8, 14363.0], [50.9, 14373.0], [51.0, 14373.0], [51.1, 14447.0], [51.2, 14547.0], [51.3, 14662.0], [51.4, 14662.0], [51.5, 14708.0], [51.6, 14721.0], [51.7, 14724.0], [51.8, 14741.0], [51.9, 14741.0], [52.0, 14767.0], [52.1, 14829.0], [52.2, 14835.0], [52.3, 14835.0], [52.4, 14881.0], [52.5, 14975.0], [52.6, 14993.0], [52.7, 15020.0], [52.8, 15020.0], [52.9, 15094.0], [53.0, 15119.0], [53.1, 15168.0], [53.2, 15168.0], [53.3, 15261.0], [53.4, 15285.0], [53.5, 15423.0], [53.6, 15425.0], [53.7, 15425.0], [53.8, 15518.0], [53.9, 15538.0], [54.0, 15570.0], [54.1, 15570.0], [54.2, 15637.0], [54.3, 15647.0], [54.4, 15679.0], [54.5, 15703.0], [54.6, 15703.0], [54.7, 15722.0], [54.8, 15946.0], [54.9, 16024.0], [55.0, 16024.0], [55.1, 16099.0], [55.2, 16115.0], [55.3, 16201.0], [55.4, 16210.0], [55.5, 16210.0], [55.6, 16240.0], [55.7, 16250.0], [55.8, 16331.0], [55.9, 16331.0], [56.0, 16376.0], [56.1, 16414.0], [56.2, 16428.0], [56.3, 16436.0], [56.4, 16436.0], [56.5, 16507.0], [56.6, 16525.0], [56.7, 16563.0], [56.8, 16563.0], [56.9, 16591.0], [57.0, 16671.0], [57.1, 16695.0], [57.2, 16937.0], [57.3, 16937.0], [57.4, 17049.0], [57.5, 17118.0], [57.6, 17129.0], [57.7, 17129.0], [57.8, 17209.0], [57.9, 17330.0], [58.0, 17437.0], [58.1, 17553.0], [58.2, 17553.0], [58.3, 17561.0], [58.4, 17565.0], [58.5, 17623.0], [58.6, 17623.0], [58.7, 17716.0], [58.8, 17723.0], [58.9, 17803.0], [59.0, 17807.0], [59.1, 17807.0], [59.2, 17844.0], [59.3, 17895.0], [59.4, 17910.0], [59.5, 17910.0], [59.6, 18022.0], [59.7, 18218.0], [59.8, 18300.0], [59.9, 18308.0], [60.0, 18308.0], [60.1, 18391.0], [60.2, 18490.0], [60.3, 18504.0], [60.4, 18504.0], [60.5, 18541.0], [60.6, 18610.0], [60.7, 18644.0], [60.8, 18655.0], [60.9, 18655.0], [61.0, 18683.0], [61.1, 18893.0], [61.2, 19101.0], [61.3, 19101.0], [61.4, 19138.0], [61.5, 19143.0], [61.6, 19172.0], [61.7, 19227.0], [61.8, 19227.0], [61.9, 19276.0], [62.0, 19302.0], [62.1, 19340.0], [62.2, 19340.0], [62.3, 19427.0], [62.4, 19623.0], [62.5, 19636.0], [62.6, 19690.0], [62.7, 19690.0], [62.8, 19700.0], [62.9, 19726.0], [63.0, 19753.0], [63.1, 19753.0], [63.2, 19858.0], [63.3, 20005.0], [63.4, 20078.0], [63.5, 20253.0], [63.6, 20253.0], [63.7, 20275.0], [63.8, 20320.0], [63.9, 20395.0], [64.0, 20395.0], [64.1, 20442.0], [64.2, 20504.0], [64.3, 20505.0], [64.4, 20557.0], [64.5, 20557.0], [64.6, 20807.0], [64.7, 20867.0], [64.8, 20916.0], [64.9, 20916.0], [65.0, 20931.0], [65.1, 20972.0], [65.2, 20982.0], [65.3, 21024.0], [65.4, 21024.0], [65.5, 21037.0], [65.6, 21261.0], [65.7, 21274.0], [65.8, 21274.0], [65.9, 21315.0], [66.0, 21481.0], [66.1, 21517.0], [66.2, 21605.0], [66.3, 21605.0], [66.4, 21853.0], [66.5, 21861.0], [66.6, 22000.0], [66.7, 22000.0], [66.8, 22028.0], [66.9, 22077.0], [67.0, 22086.0], [67.1, 22098.0], [67.2, 22098.0], [67.3, 22111.0], [67.4, 22146.0], [67.5, 22359.0], [67.6, 22359.0], [67.7, 22415.0], [67.8, 22494.0], [67.9, 22500.0], [68.0, 22548.0], [68.1, 22548.0], [68.2, 22650.0], [68.3, 22710.0], [68.4, 22877.0], [68.5, 22877.0], [68.6, 22900.0], [68.7, 22998.0], [68.8, 23118.0], [68.9, 23144.0], [69.0, 23144.0], [69.1, 23206.0], [69.2, 23217.0], [69.3, 23332.0], [69.4, 23332.0], [69.5, 23381.0], [69.6, 23394.0], [69.7, 23522.0], [69.8, 23634.0], [69.9, 23634.0], [70.0, 23774.0], [70.1, 23783.0], [70.2, 23808.0], [70.3, 23808.0], [70.4, 23817.0], [70.5, 23829.0], [70.6, 23843.0], [70.7, 24047.0], [70.8, 24047.0], [70.9, 24047.0], [71.0, 24256.0], [71.1, 24347.0], [71.2, 24347.0], [71.3, 24510.0], [71.4, 24553.0], [71.5, 24654.0], [71.6, 24674.0], [71.7, 24674.0], [71.8, 24751.0], [71.9, 24759.0], [72.0, 25069.0], [72.1, 25069.0], [72.2, 25084.0], [72.3, 25112.0], [72.4, 25276.0], [72.5, 25290.0], [72.6, 25290.0], [72.7, 25319.0], [72.8, 25458.0], [72.9, 25488.0], [73.0, 25488.0], [73.1, 25667.0], [73.2, 25747.0], [73.3, 25846.0], [73.4, 25967.0], [73.5, 25967.0], [73.6, 26019.0], [73.7, 26062.0], [73.8, 26096.0], [73.9, 26096.0], [74.0, 26178.0], [74.1, 26183.0], [74.2, 26228.0], [74.3, 26277.0], [74.4, 26277.0], [74.5, 26344.0], [74.6, 26427.0], [74.7, 26466.0], [74.8, 26466.0], [74.9, 26755.0], [75.0, 26825.0], [75.1, 26839.0], [75.2, 26954.0], [75.3, 26954.0], [75.4, 27028.0], [75.5, 27204.0], [75.6, 27441.0], [75.7, 27441.0], [75.8, 27454.0], [75.9, 27457.0], [76.0, 27513.0], [76.1, 27553.0], [76.2, 27553.0], [76.3, 27565.0], [76.4, 27755.0], [76.5, 28013.0], [76.6, 28013.0], [76.7, 28031.0], [76.8, 28436.0], [76.9, 28542.0], [77.0, 28566.0], [77.1, 28566.0], [77.2, 28609.0], [77.3, 28708.0], [77.4, 28716.0], [77.5, 28716.0], [77.6, 28730.0], [77.7, 28921.0], [77.8, 28928.0], [77.9, 29056.0], [78.0, 29056.0], [78.1, 29066.0], [78.2, 29218.0], [78.3, 29360.0], [78.4, 29360.0], [78.5, 29450.0], [78.6, 29468.0], [78.7, 29735.0], [78.8, 29759.0], [78.9, 29759.0], [79.0, 29803.0], [79.1, 29922.0], [79.2, 29980.0], [79.3, 29980.0], [79.4, 30008.0], [79.5, 30021.0], [79.6, 30087.0], [79.7, 30149.0], [79.8, 30149.0], [79.9, 30327.0], [80.0, 30357.0], [80.1, 30560.0], [80.2, 30560.0], [80.3, 30580.0], [80.4, 30595.0], [80.5, 30785.0], [80.6, 30925.0], [80.7, 30925.0], [80.8, 30968.0], [80.9, 31036.0], [81.0, 31079.0], [81.1, 31079.0], [81.2, 31187.0], [81.3, 31427.0], [81.4, 31629.0], [81.5, 31662.0], [81.6, 31662.0], [81.7, 31844.0], [81.8, 31864.0], [81.9, 31909.0], [82.0, 31909.0], [82.1, 32026.0], [82.2, 32073.0], [82.3, 32105.0], [82.4, 32239.0], [82.5, 32239.0], [82.6, 32265.0], [82.7, 32395.0], [82.8, 32611.0], [82.9, 32611.0], [83.0, 32802.0], [83.1, 32860.0], [83.2, 33056.0], [83.3, 33189.0], [83.4, 33189.0], [83.5, 33490.0], [83.6, 33559.0], [83.7, 33580.0], [83.8, 33580.0], [83.9, 33640.0], [84.0, 33640.0], [84.1, 33945.0], [84.2, 33972.0], [84.3, 33972.0], [84.4, 34096.0], [84.5, 34120.0], [84.6, 34126.0], [84.7, 34126.0], [84.8, 34307.0], [84.9, 34372.0], [85.0, 34814.0], [85.1, 34849.0], [85.2, 34849.0], [85.3, 34956.0], [85.4, 35119.0], [85.5, 35181.0], [85.6, 35181.0], [85.7, 35210.0], [85.8, 35241.0], [85.9, 35282.0], [86.0, 35426.0], [86.1, 35426.0], [86.2, 35496.0], [86.3, 36067.0], [86.4, 36092.0], [86.5, 36092.0], [86.6, 36146.0], [86.7, 36216.0], [86.8, 36396.0], [86.9, 36398.0], [87.0, 36398.0], [87.1, 36756.0], [87.2, 36763.0], [87.3, 36781.0], [87.4, 36781.0], [87.5, 36781.0], [87.6, 36931.0], [87.7, 37199.0], [87.8, 37294.0], [87.9, 37294.0], [88.0, 37307.0], [88.1, 37389.0], [88.2, 37506.0], [88.3, 37506.0], [88.4, 37708.0], [88.5, 37891.0], [88.6, 38096.0], [88.7, 38143.0], [88.8, 38143.0], [88.9, 38175.0], [89.0, 38264.0], [89.1, 38443.0], [89.2, 38443.0], [89.3, 38612.0], [89.4, 38842.0], [89.5, 38888.0], [89.6, 39061.0], [89.7, 39061.0], [89.8, 39102.0], [89.9, 39362.0], [90.0, 39451.0], [90.1, 39451.0], [90.2, 39456.0], [90.3, 39457.0], [90.4, 39659.0], [90.5, 39828.0], [90.6, 39828.0], [90.7, 39896.0], [90.8, 39905.0], [90.9, 40115.0], [91.0, 40115.0], [91.1, 40371.0], [91.2, 40610.0], [91.3, 40756.0], [91.4, 40875.0], [91.5, 40875.0], [91.6, 40938.0], [91.7, 41030.0], [91.8, 41067.0], [91.9, 41067.0], [92.0, 41133.0], [92.1, 41480.0], [92.2, 41553.0], [92.3, 41643.0], [92.4, 41643.0], [92.5, 41796.0], [92.6, 42277.0], [92.7, 42385.0], [92.8, 42385.0], [92.9, 42404.0], [93.0, 42620.0], [93.1, 42904.0], [93.2, 42906.0], [93.3, 42906.0], [93.4, 43030.0], [93.5, 43151.0], [93.6, 43860.0], [93.7, 43860.0], [93.8, 43943.0], [93.9, 44125.0], [94.0, 44229.0], [94.1, 44294.0], [94.2, 44294.0], [94.3, 44419.0], [94.4, 44477.0], [94.5, 44613.0], [94.6, 44613.0], [94.7, 44974.0], [94.8, 45009.0], [94.9, 45696.0], [95.0, 45719.0], [95.1, 45719.0], [95.2, 45726.0], [95.3, 45877.0], [95.4, 45907.0], [95.5, 45907.0], [95.6, 46026.0], [95.7, 46666.0], [95.8, 46999.0], [95.9, 47077.0], [96.0, 47077.0], [96.1, 47101.0], [96.2, 47214.0], [96.3, 47646.0], [96.4, 47646.0], [96.5, 48197.0], [96.6, 48223.0], [96.7, 48383.0], [96.8, 48572.0], [96.9, 48572.0], [97.0, 49424.0], [97.1, 49656.0], [97.2, 49848.0], [97.3, 49848.0], [97.4, 50689.0], [97.5, 51126.0], [97.6, 51156.0], [97.7, 51637.0], [97.8, 51637.0], [97.9, 51832.0], [98.0, 52232.0], [98.1, 52784.0], [98.2, 52784.0], [98.3, 53695.0], [98.4, 54556.0], [98.5, 55085.0], [98.6, 55393.0], [98.7, 55393.0], [98.8, 56252.0], [98.9, 56665.0], [99.0, 58154.0], [99.1, 58154.0], [99.2, 58568.0], [99.3, 59217.0], [99.4, 59701.0], [99.5, 60008.0], [99.6, 60008.0], [99.7, 60010.0], [99.8, 60011.0], [99.9, 60177.0], [100.0, 60177.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 7.0, "series": [{"data": [[34100.0, 2.0], [34900.0, 1.0], [36100.0, 1.0], [37300.0, 2.0], [38100.0, 2.0], [37700.0, 1.0], [36900.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [40900.0, 1.0], [42900.0, 2.0], [41700.0, 1.0], [44100.0, 1.0], [44900.0, 1.0], [45700.0, 2.0], [46900.0, 1.0], [48500.0, 1.0], [48100.0, 1.0], [54500.0, 1.0], [55300.0, 1.0], [58100.0, 1.0], [58500.0, 1.0], [60100.0, 1.0], [59700.0, 1.0], [700.0, 1.0], [800.0, 3.0], [900.0, 7.0], [1000.0, 7.0], [1100.0, 7.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 6.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 6.0], [2000.0, 4.0], [2100.0, 4.0], [2200.0, 2.0], [2300.0, 4.0], [2400.0, 5.0], [2500.0, 5.0], [2600.0, 2.0], [2700.0, 4.0], [2800.0, 5.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 5.0], [3200.0, 3.0], [3300.0, 7.0], [3400.0, 4.0], [3500.0, 3.0], [3700.0, 4.0], [3600.0, 3.0], [3800.0, 4.0], [3900.0, 4.0], [4000.0, 6.0], [4300.0, 3.0], [4200.0, 7.0], [4100.0, 1.0], [4500.0, 5.0], [4400.0, 1.0], [4600.0, 2.0], [4800.0, 2.0], [4700.0, 2.0], [5100.0, 4.0], [4900.0, 4.0], [5000.0, 1.0], [5200.0, 5.0], [5400.0, 6.0], [5600.0, 3.0], [5500.0, 4.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 4.0], [6000.0, 5.0], [5900.0, 1.0], [6300.0, 4.0], [6600.0, 5.0], [6500.0, 1.0], [6400.0, 2.0], [6700.0, 5.0], [6900.0, 5.0], [6800.0, 2.0], [7100.0, 3.0], [7000.0, 1.0], [7200.0, 2.0], [7300.0, 5.0], [7400.0, 2.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 2.0], [7900.0, 3.0], [7800.0, 5.0], [8000.0, 4.0], [8100.0, 3.0], [8200.0, 3.0], [8600.0, 3.0], [8700.0, 2.0], [8400.0, 1.0], [8300.0, 1.0], [8900.0, 4.0], [9000.0, 3.0], [9100.0, 3.0], [8800.0, 4.0], [9200.0, 2.0], [9600.0, 2.0], [9700.0, 4.0], [9300.0, 2.0], [9500.0, 1.0], [9400.0, 1.0], [10100.0, 2.0], [10000.0, 5.0], [9900.0, 5.0], [10200.0, 2.0], [10500.0, 1.0], [10700.0, 5.0], [10300.0, 2.0], [10400.0, 2.0], [10900.0, 5.0], [11100.0, 2.0], [11200.0, 3.0], [11700.0, 1.0], [11600.0, 2.0], [11300.0, 1.0], [11500.0, 3.0], [11400.0, 1.0], [12200.0, 3.0], [11900.0, 4.0], [12100.0, 5.0], [11800.0, 1.0], [12000.0, 1.0], [12700.0, 2.0], [12500.0, 2.0], [12400.0, 2.0], [12300.0, 1.0], [12800.0, 1.0], [13200.0, 4.0], [13000.0, 2.0], [12900.0, 3.0], [13100.0, 3.0], [13300.0, 1.0], [13800.0, 2.0], [13400.0, 3.0], [13600.0, 5.0], [13700.0, 1.0], [13500.0, 2.0], [14000.0, 2.0], [14200.0, 1.0], [14300.0, 2.0], [14100.0, 1.0], [14800.0, 3.0], [14700.0, 5.0], [14400.0, 1.0], [14600.0, 1.0], [14500.0, 1.0], [15000.0, 2.0], [15100.0, 2.0], [14900.0, 2.0], [15200.0, 2.0], [15400.0, 2.0], [15500.0, 3.0], [15700.0, 2.0], [15600.0, 3.0], [15900.0, 1.0], [16100.0, 1.0], [16200.0, 4.0], [16300.0, 2.0], [16000.0, 2.0], [16400.0, 3.0], [17000.0, 1.0], [17200.0, 1.0], [16600.0, 2.0], [17400.0, 1.0], [17800.0, 4.0], [18200.0, 1.0], [18000.0, 1.0], [18400.0, 1.0], [17600.0, 1.0], [18600.0, 4.0], [19200.0, 2.0], [18800.0, 1.0], [19400.0, 1.0], [20000.0, 2.0], [19800.0, 1.0], [19600.0, 3.0], [20200.0, 2.0], [20400.0, 1.0], [20800.0, 2.0], [21000.0, 2.0], [21200.0, 2.0], [21400.0, 1.0], [22000.0, 5.0], [21800.0, 2.0], [21600.0, 1.0], [22400.0, 2.0], [23200.0, 2.0], [22800.0, 1.0], [22600.0, 1.0], [23800.0, 4.0], [23600.0, 1.0], [24000.0, 2.0], [24200.0, 1.0], [25400.0, 2.0], [25200.0, 2.0], [24600.0, 2.0], [25000.0, 2.0], [26400.0, 2.0], [26000.0, 3.0], [25800.0, 1.0], [25600.0, 1.0], [26200.0, 2.0], [27400.0, 3.0], [26800.0, 2.0], [27200.0, 1.0], [27000.0, 1.0], [28000.0, 2.0], [28400.0, 1.0], [28600.0, 1.0], [29400.0, 2.0], [29200.0, 1.0], [29000.0, 2.0], [30000.0, 3.0], [29800.0, 1.0], [31600.0, 2.0], [31400.0, 1.0], [31000.0, 2.0], [31800.0, 2.0], [32000.0, 2.0], [32200.0, 2.0], [32600.0, 1.0], [32800.0, 2.0], [33600.0, 2.0], [34800.0, 2.0], [34000.0, 1.0], [35200.0, 3.0], [36000.0, 2.0], [38800.0, 2.0], [38000.0, 1.0], [37200.0, 1.0], [38400.0, 1.0], [39600.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [42400.0, 1.0], [44400.0, 2.0], [45600.0, 1.0], [46000.0, 1.0], [47200.0, 1.0], [47600.0, 1.0], [49600.0, 1.0], [51600.0, 1.0], [53600.0, 1.0], [59200.0, 1.0], [60000.0, 3.0], [33500.0, 2.0], [33100.0, 1.0], [34300.0, 2.0], [33900.0, 2.0], [36700.0, 4.0], [35100.0, 2.0], [36300.0, 2.0], [37100.0, 1.0], [37500.0, 1.0], [40700.0, 1.0], [39100.0, 1.0], [39900.0, 1.0], [40300.0, 1.0], [42300.0, 1.0], [41100.0, 1.0], [41500.0, 1.0], [43900.0, 1.0], [43100.0, 1.0], [47100.0, 1.0], [45900.0, 1.0], [48300.0, 1.0], [51100.0, 2.0], [52700.0, 1.0], [16500.0, 4.0], [16900.0, 1.0], [17300.0, 1.0], [17100.0, 2.0], [18300.0, 3.0], [17700.0, 2.0], [17500.0, 3.0], [17900.0, 1.0], [18500.0, 2.0], [19100.0, 4.0], [19300.0, 2.0], [19700.0, 3.0], [20300.0, 2.0], [20500.0, 3.0], [20900.0, 4.0], [21500.0, 1.0], [21300.0, 1.0], [22300.0, 1.0], [22100.0, 2.0], [22500.0, 2.0], [23100.0, 2.0], [22900.0, 2.0], [23300.0, 3.0], [23500.0, 1.0], [22700.0, 1.0], [24300.0, 1.0], [23700.0, 2.0], [24500.0, 2.0], [25300.0, 1.0], [25100.0, 1.0], [24700.0, 2.0], [26100.0, 2.0], [25900.0, 1.0], [25700.0, 1.0], [26300.0, 1.0], [26900.0, 1.0], [27500.0, 3.0], [26700.0, 1.0], [28500.0, 2.0], [27700.0, 1.0], [28700.0, 3.0], [29300.0, 1.0], [28900.0, 2.0], [29700.0, 2.0], [30300.0, 2.0], [30700.0, 1.0], [29900.0, 2.0], [30100.0, 1.0], [30500.0, 3.0], [31100.0, 1.0], [30900.0, 2.0], [31900.0, 1.0], [32300.0, 1.0], [32100.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [36200.0, 1.0], [35400.0, 2.0], [37800.0, 1.0], [38200.0, 1.0], [38600.0, 1.0], [39000.0, 1.0], [39400.0, 3.0], [39800.0, 2.0], [40600.0, 1.0], [41000.0, 2.0], [41400.0, 1.0], [42200.0, 1.0], [42600.0, 1.0], [43000.0, 1.0], [44200.0, 2.0], [43800.0, 1.0], [45000.0, 1.0], [44600.0, 1.0], [45800.0, 1.0], [46600.0, 1.0], [47000.0, 1.0], [48200.0, 1.0], [50600.0, 1.0], [49800.0, 1.0], [49400.0, 1.0], [51800.0, 1.0], [52200.0, 1.0], [55000.0, 1.0], [56200.0, 1.0], [56600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 733.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 41.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 733.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.666666666666668, "minX": 1.65125034E12, "maxY": 79.8235294117647, "series": [{"data": [[1.65125034E12, 7.666666666666668], [1.65125064E12, 40.74390243902439], [1.65125052E12, 66.88372093023261], [1.65125058E12, 79.8235294117647], [1.6512504E12, 18.75294117647059], [1.65125046E12, 42.31952662721891]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125064E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3752.233333333332, "minX": 1.0, "maxY": 47646.0, "series": [{"data": [[2.0, 46026.0], [3.0, 44613.0], [4.0, 14973.333333333334], [5.0, 21934.5], [6.0, 14232.666666666666], [7.0, 13987.0], [8.0, 19684.5], [9.0, 13556.666666666666], [10.0, 3752.233333333332], [11.0, 14797.666666666666], [12.0, 17121.5], [13.0, 11821.0], [14.0, 15902.5], [15.0, 15198.5], [16.0, 12443.0], [17.0, 11794.333333333332], [18.0, 14955.5], [19.0, 12449.5], [20.0, 6696.77966101695], [21.0, 20982.0], [22.0, 10532.0], [23.0, 11955.0], [24.0, 11200.333333333332], [25.0, 11522.0], [26.0, 13929.0], [27.0, 21730.666666666664], [28.0, 12523.333333333334], [29.0, 47077.0], [30.0, 9210.1186440678], [31.0, 30223.5], [32.0, 20958.666666666664], [33.0, 23402.0], [34.0, 21231.666666666664], [35.0, 39192.0], [36.0, 23077.5], [37.0, 29606.333333333336], [38.0, 30794.666666666664], [39.0, 34664.0], [40.0, 11340.948275862069], [41.0, 35961.0], [42.0, 34888.0], [43.0, 21167.0], [44.0, 34896.5], [45.0, 22421.666666666668], [46.0, 35061.5], [47.0, 25713.0], [48.0, 29808.333333333336], [49.0, 26212.5], [50.0, 15685.475409836066], [51.0, 19222.0], [52.0, 29262.666666666664], [53.0, 19417.5], [54.0, 39155.0], [55.0, 23765.666666666668], [56.0, 31159.666666666668], [57.0, 20064.5], [58.0, 20842.333333333336], [59.0, 13414.0], [60.0, 19182.084745762717], [61.0, 23218.0], [62.0, 23574.0], [63.0, 23836.333333333336], [64.0, 12816.0], [65.0, 25222.0], [66.0, 29135.0], [67.0, 19257.0], [68.0, 26235.666666666668], [69.0, 13751.0], [70.0, 21894.915254237283], [71.0, 15701.0], [72.0, 12949.5], [73.0, 13810.666666666668], [74.0, 9708.5], [75.0, 15889.142857142857], [76.0, 13841.333333333332], [77.0, 8380.5], [78.0, 13728.2], [79.0, 4550.333333333333], [80.0, 26910.49720670391], [1.0, 47646.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[49.96143958868893, 17697.71979434448]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 38.88333333333333, "minX": 1.65125034E12, "maxY": 538.1333333333333, "series": [{"data": [[1.65125034E12, 45.25], [1.65125064E12, 265.15], [1.65125052E12, 538.1333333333333], [1.65125058E12, 532.85], [1.6512504E12, 528.6], [1.65125046E12, 524.9833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125034E12, 38.88333333333333], [1.65125064E12, 213.1], [1.65125052E12, 447.2], [1.65125058E12, 441.93333333333334], [1.6512504E12, 441.8666666666667], [1.65125046E12, 439.1166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125064E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1592.9333333333334, "minX": 1.65125034E12, "maxY": 34598.10975609757, "series": [{"data": [[1.65125034E12, 1592.9333333333334], [1.65125064E12, 34598.10975609757], [1.65125052E12, 18673.168604651164], [1.65125058E12, 26940.81764705882], [1.6512504E12, 5608.029411764707], [1.65125046E12, 12797.621301775145]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125064E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1592.6666666666667, "minX": 1.65125034E12, "maxY": 34598.060975609755, "series": [{"data": [[1.65125034E12, 1592.6666666666667], [1.65125064E12, 34598.060975609755], [1.65125052E12, 18673.145348837217], [1.65125058E12, 26940.800000000014], [1.6512504E12, 5607.976470588235], [1.65125046E12, 12797.579881656804]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125064E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.926829268292684, "minX": 1.65125034E12, "maxY": 52.53333333333334, "series": [{"data": [[1.65125034E12, 52.53333333333334], [1.65125064E12, 7.926829268292684], [1.65125052E12, 9.249999999999998], [1.65125058E12, 8.494117647058818], [1.6512504E12, 11.517647058823538], [1.65125046E12, 9.10650887573965]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125064E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 736.0, "minX": 1.65125034E12, "maxY": 59701.0, "series": [{"data": [[1.65125034E12, 3234.0], [1.65125064E12, 59701.0], [1.65125052E12, 44229.0], [1.65125058E12, 59217.0], [1.6512504E12, 15538.0], [1.65125046E12, 30357.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125034E12, 2829.0], [1.65125064E12, 49424.0], [1.65125052E12, 33854.40000000001], [1.65125058E12, 46999.0], [1.6512504E12, 11585.500000000004], [1.65125046E12, 23217.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125034E12, 3234.0], [1.65125064E12, 59701.0], [1.65125052E12, 43261.750000000015], [1.65125058E12, 58472.90000000001], [1.6512504E12, 15456.349999999999], [1.65125046E12, 29938.400000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125034E12, 3234.0], [1.65125064E12, 55085.0], [1.65125052E12, 37990.4], [1.65125058E12, 51396.5], [1.6512504E12, 13124.399999999992], [1.65125046E12, 26137.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125034E12, 736.0], [1.65125064E12, 8852.0], [1.65125052E12, 920.0], [1.65125058E12, 1401.0], [1.6512504E12, 862.0], [1.65125046E12, 1000.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125034E12, 1190.0], [1.65125064E12, 34096.0], [1.65125052E12, 18206.5], [1.65125058E12, 27755.0], [1.6512504E12, 4565.5], [1.65125046E12, 12196.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125064E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11986.5, "minX": 1.0, "maxY": 60093.5, "series": [{"data": [[2.0, 14455.0], [4.0, 11986.5], [1.0, 42413.0], [5.0, 56665.0], [3.0, 13631.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 60009.5], [3.0, 60093.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 11986.5, "minX": 1.0, "maxY": 60093.5, "series": [{"data": [[2.0, 14455.0], [4.0, 11986.5], [1.0, 42413.0], [5.0, 56665.0], [3.0, 13631.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 60009.5], [3.0, 60093.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.65125034E12, "maxY": 3.316666666666667, "series": [{"data": [[1.65125034E12, 0.4166666666666667], [1.65125064E12, 0.11666666666666667], [1.65125052E12, 3.316666666666667], [1.65125058E12, 2.75], [1.6512504E12, 3.1666666666666665], [1.65125046E12, 3.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125064E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125034E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125034E12, 0.25], [1.65125064E12, 1.3166666666666667], [1.65125052E12, 2.8666666666666667], [1.65125058E12, 2.816666666666667], [1.6512504E12, 2.8333333333333335], [1.65125046E12, 2.816666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65125064E12, 0.05], [1.65125058E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125064E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125034E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125034E12, 0.25], [1.65125064E12, 1.3166666666666667], [1.65125052E12, 2.8666666666666667], [1.65125058E12, 2.816666666666667], [1.6512504E12, 2.8333333333333335], [1.65125046E12, 2.816666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65125064E12, 0.05], [1.65125058E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125064E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125034E12, "maxY": 2.8666666666666667, "series": [{"data": [[1.65125034E12, 0.25], [1.65125064E12, 1.3166666666666667], [1.65125052E12, 2.8666666666666667], [1.65125058E12, 2.816666666666667], [1.6512504E12, 2.8333333333333335], [1.65125046E12, 2.816666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65125064E12, 0.05], [1.65125058E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125064E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 770.0, "minX": 0.0, "maxY": 51721.0, "series": [{"data": [[0.0, 770.0], [0.1, 770.0], [0.2, 792.0], [0.3, 811.0], [0.4, 811.0], [0.5, 840.0], [0.6, 878.0], [0.7, 878.0], [0.8, 942.0], [0.9, 981.0], [1.0, 981.0], [1.1, 1022.0], [1.2, 1022.0], [1.3, 1022.0], [1.4, 1029.0], [1.5, 1029.0], [1.6, 1029.0], [1.7, 1052.0], [1.8, 1067.0], [1.9, 1080.0], [2.0, 1080.0], [2.1, 1091.0], [2.2, 1106.0], [2.3, 1106.0], [2.4, 1189.0], [2.5, 1211.0], [2.6, 1211.0], [2.7, 1221.0], [2.8, 1239.0], [2.9, 1239.0], [3.0, 1247.0], [3.1, 1254.0], [3.2, 1254.0], [3.3, 1266.0], [3.4, 1287.0], [3.5, 1291.0], [3.6, 1291.0], [3.7, 1294.0], [3.8, 1355.0], [3.9, 1355.0], [4.0, 1362.0], [4.1, 1376.0], [4.2, 1376.0], [4.3, 1416.0], [4.4, 1421.0], [4.5, 1421.0], [4.6, 1428.0], [4.7, 1438.0], [4.8, 1438.0], [4.9, 1443.0], [5.0, 1458.0], [5.1, 1458.0], [5.2, 1519.0], [5.3, 1573.0], [5.4, 1599.0], [5.5, 1599.0], [5.6, 1632.0], [5.7, 1656.0], [5.8, 1656.0], [5.9, 1676.0], [6.0, 1717.0], [6.1, 1717.0], [6.2, 1743.0], [6.3, 1799.0], [6.4, 1799.0], [6.5, 1874.0], [6.6, 1890.0], [6.7, 1890.0], [6.8, 1891.0], [6.9, 1933.0], [7.0, 1938.0], [7.1, 1938.0], [7.2, 1975.0], [7.3, 1983.0], [7.4, 1983.0], [7.5, 2002.0], [7.6, 2015.0], [7.7, 2015.0], [7.8, 2038.0], [7.9, 2102.0], [8.0, 2102.0], [8.1, 2122.0], [8.2, 2143.0], [8.3, 2143.0], [8.4, 2146.0], [8.5, 2254.0], [8.6, 2254.0], [8.7, 2256.0], [8.8, 2268.0], [8.9, 2289.0], [9.0, 2289.0], [9.1, 2355.0], [9.2, 2414.0], [9.3, 2414.0], [9.4, 2414.0], [9.5, 2421.0], [9.6, 2421.0], [9.7, 2437.0], [9.8, 2450.0], [9.9, 2450.0], [10.0, 2464.0], [10.1, 2485.0], [10.2, 2485.0], [10.3, 2542.0], [10.4, 2553.0], [10.5, 2605.0], [10.6, 2605.0], [10.7, 2627.0], [10.8, 2657.0], [10.9, 2657.0], [11.0, 2684.0], [11.1, 2693.0], [11.2, 2693.0], [11.3, 2706.0], [11.4, 2747.0], [11.5, 2747.0], [11.6, 2764.0], [11.7, 2770.0], [11.8, 2770.0], [11.9, 2787.0], [12.0, 2856.0], [12.1, 2866.0], [12.2, 2866.0], [12.3, 2870.0], [12.4, 2893.0], [12.5, 2893.0], [12.6, 2940.0], [12.7, 2964.0], [12.8, 2964.0], [12.9, 2970.0], [13.0, 3019.0], [13.1, 3019.0], [13.2, 3024.0], [13.3, 3071.0], [13.4, 3071.0], [13.5, 3073.0], [13.6, 3109.0], [13.7, 3109.0], [13.8, 3109.0], [13.9, 3165.0], [14.0, 3210.0], [14.1, 3210.0], [14.2, 3213.0], [14.3, 3251.0], [14.4, 3251.0], [14.5, 3297.0], [14.6, 3337.0], [14.7, 3337.0], [14.8, 3347.0], [14.9, 3368.0], [15.0, 3368.0], [15.1, 3453.0], [15.2, 3492.0], [15.3, 3492.0], [15.4, 3501.0], [15.5, 3515.0], [15.6, 3596.0], [15.7, 3596.0], [15.8, 3640.0], [15.9, 3650.0], [16.0, 3650.0], [16.1, 3713.0], [16.2, 3756.0], [16.3, 3756.0], [16.4, 3820.0], [16.5, 3844.0], [16.6, 3844.0], [16.7, 3866.0], [16.8, 3876.0], [16.9, 3876.0], [17.0, 3886.0], [17.1, 3900.0], [17.2, 3900.0], [17.3, 3923.0], [17.4, 3932.0], [17.5, 3935.0], [17.6, 3935.0], [17.7, 4033.0], [17.8, 4053.0], [17.9, 4053.0], [18.0, 4055.0], [18.1, 4087.0], [18.2, 4087.0], [18.3, 4088.0], [18.4, 4178.0], [18.5, 4178.0], [18.6, 4231.0], [18.7, 4259.0], [18.8, 4259.0], [18.9, 4260.0], [19.0, 4271.0], [19.1, 4276.0], [19.2, 4276.0], [19.3, 4283.0], [19.4, 4302.0], [19.5, 4302.0], [19.6, 4328.0], [19.7, 4344.0], [19.8, 4344.0], [19.9, 4370.0], [20.0, 4383.0], [20.1, 4383.0], [20.2, 4402.0], [20.3, 4443.0], [20.4, 4443.0], [20.5, 4461.0], [20.6, 4462.0], [20.7, 4515.0], [20.8, 4515.0], [20.9, 4524.0], [21.0, 4557.0], [21.1, 4557.0], [21.2, 4576.0], [21.3, 4649.0], [21.4, 4649.0], [21.5, 4657.0], [21.6, 4682.0], [21.7, 4682.0], [21.8, 4742.0], [21.9, 4790.0], [22.0, 4790.0], [22.1, 4792.0], [22.2, 4871.0], [22.3, 4871.0], [22.4, 4897.0], [22.5, 4923.0], [22.6, 4932.0], [22.7, 4932.0], [22.8, 4977.0], [22.9, 4979.0], [23.0, 4979.0], [23.1, 4990.0], [23.2, 5012.0], [23.3, 5012.0], [23.4, 5019.0], [23.5, 5101.0], [23.6, 5101.0], [23.7, 5107.0], [23.8, 5125.0], [23.9, 5125.0], [24.0, 5157.0], [24.1, 5182.0], [24.2, 5188.0], [24.3, 5188.0], [24.4, 5291.0], [24.5, 5294.0], [24.6, 5294.0], [24.7, 5333.0], [24.8, 5395.0], [24.9, 5395.0], [25.0, 5440.0], [25.1, 5538.0], [25.2, 5538.0], [25.3, 5613.0], [25.4, 5649.0], [25.5, 5649.0], [25.6, 5653.0], [25.7, 5655.0], [25.8, 5655.0], [25.9, 5663.0], [26.0, 5683.0], [26.1, 5686.0], [26.2, 5686.0], [26.3, 5714.0], [26.4, 5719.0], [26.5, 5719.0], [26.6, 5800.0], [26.7, 5800.0], [26.8, 5800.0], [26.9, 5809.0], [27.0, 5811.0], [27.1, 5811.0], [27.2, 5870.0], [27.3, 5937.0], [27.4, 5937.0], [27.5, 5958.0], [27.6, 5982.0], [27.7, 6012.0], [27.8, 6012.0], [27.9, 6026.0], [28.0, 6033.0], [28.1, 6033.0], [28.2, 6038.0], [28.3, 6122.0], [28.4, 6122.0], [28.5, 6135.0], [28.6, 6158.0], [28.7, 6158.0], [28.8, 6170.0], [28.9, 6186.0], [29.0, 6186.0], [29.1, 6189.0], [29.2, 6216.0], [29.3, 6216.0], [29.4, 6228.0], [29.5, 6274.0], [29.6, 6290.0], [29.7, 6290.0], [29.8, 6371.0], [29.9, 6483.0], [30.0, 6483.0], [30.1, 6547.0], [30.2, 6558.0], [30.3, 6558.0], [30.4, 6582.0], [30.5, 6593.0], [30.6, 6593.0], [30.7, 6609.0], [30.8, 6716.0], [30.9, 6716.0], [31.0, 6732.0], [31.1, 6829.0], [31.2, 7050.0], [31.3, 7050.0], [31.4, 7073.0], [31.5, 7151.0], [31.6, 7151.0], [31.7, 7185.0], [31.8, 7292.0], [31.9, 7292.0], [32.0, 7313.0], [32.1, 7399.0], [32.2, 7399.0], [32.3, 7413.0], [32.4, 7431.0], [32.5, 7431.0], [32.6, 7449.0], [32.7, 7462.0], [32.8, 7518.0], [32.9, 7518.0], [33.0, 7519.0], [33.1, 7523.0], [33.2, 7523.0], [33.3, 7574.0], [33.4, 7600.0], [33.5, 7600.0], [33.6, 7673.0], [33.7, 7687.0], [33.8, 7687.0], [33.9, 7801.0], [34.0, 7837.0], [34.1, 7837.0], [34.2, 7842.0], [34.3, 7845.0], [34.4, 7845.0], [34.5, 7858.0], [34.6, 7873.0], [34.7, 7918.0], [34.8, 7918.0], [34.9, 7962.0], [35.0, 7981.0], [35.1, 7981.0], [35.2, 7996.0], [35.3, 8031.0], [35.4, 8031.0], [35.5, 8052.0], [35.6, 8147.0], [35.7, 8147.0], [35.8, 8158.0], [35.9, 8369.0], [36.0, 8369.0], [36.1, 8491.0], [36.2, 8556.0], [36.3, 8563.0], [36.4, 8563.0], [36.5, 8647.0], [36.6, 8683.0], [36.7, 8683.0], [36.8, 8837.0], [36.9, 8852.0], [37.0, 8852.0], [37.1, 8856.0], [37.2, 8856.0], [37.3, 8856.0], [37.4, 8902.0], [37.5, 8910.0], [37.6, 8910.0], [37.7, 8919.0], [37.8, 8954.0], [37.9, 8954.0], [38.0, 8984.0], [38.1, 9033.0], [38.2, 9047.0], [38.3, 9047.0], [38.4, 9083.0], [38.5, 9116.0], [38.6, 9116.0], [38.7, 9127.0], [38.8, 9175.0], [38.9, 9175.0], [39.0, 9176.0], [39.1, 9196.0], [39.2, 9196.0], [39.3, 9221.0], [39.4, 9280.0], [39.5, 9280.0], [39.6, 9289.0], [39.7, 9393.0], [39.8, 9473.0], [39.9, 9473.0], [40.0, 9528.0], [40.1, 9548.0], [40.2, 9548.0], [40.3, 9555.0], [40.4, 9627.0], [40.5, 9627.0], [40.6, 9707.0], [40.7, 9752.0], [40.8, 9752.0], [40.9, 9761.0], [41.0, 9802.0], [41.1, 9802.0], [41.2, 9829.0], [41.3, 9912.0], [41.4, 9914.0], [41.5, 9914.0], [41.6, 10009.0], [41.7, 10042.0], [41.8, 10042.0], [41.9, 10185.0], [42.0, 10267.0], [42.1, 10267.0], [42.2, 10328.0], [42.3, 10383.0], [42.4, 10383.0], [42.5, 10405.0], [42.6, 10417.0], [42.7, 10417.0], [42.8, 10424.0], [42.9, 10435.0], [43.0, 10435.0], [43.1, 10443.0], [43.2, 10452.0], [43.3, 10546.0], [43.4, 10546.0], [43.5, 10571.0], [43.6, 10579.0], [43.7, 10579.0], [43.8, 10665.0], [43.9, 10685.0], [44.0, 10685.0], [44.1, 10742.0], [44.2, 10790.0], [44.3, 10790.0], [44.4, 10822.0], [44.5, 10927.0], [44.6, 10927.0], [44.7, 11048.0], [44.8, 11165.0], [44.9, 11167.0], [45.0, 11167.0], [45.1, 11171.0], [45.2, 11191.0], [45.3, 11191.0], [45.4, 11209.0], [45.5, 11225.0], [45.6, 11225.0], [45.7, 11247.0], [45.8, 11358.0], [45.9, 11358.0], [46.0, 11393.0], [46.1, 11494.0], [46.2, 11494.0], [46.3, 11503.0], [46.4, 11575.0], [46.5, 11575.0], [46.6, 11583.0], [46.7, 11632.0], [46.8, 11725.0], [46.9, 11725.0], [47.0, 11898.0], [47.1, 11925.0], [47.2, 11925.0], [47.3, 11940.0], [47.4, 11989.0], [47.5, 11989.0], [47.6, 12068.0], [47.7, 12088.0], [47.8, 12088.0], [47.9, 12090.0], [48.0, 12133.0], [48.1, 12133.0], [48.2, 12229.0], [48.3, 12311.0], [48.4, 12319.0], [48.5, 12319.0], [48.6, 12320.0], [48.7, 12335.0], [48.8, 12335.0], [48.9, 12433.0], [49.0, 12470.0], [49.1, 12470.0], [49.2, 12525.0], [49.3, 12536.0], [49.4, 12536.0], [49.5, 12581.0], [49.6, 12678.0], [49.7, 12678.0], [49.8, 12727.0], [49.9, 12811.0], [50.0, 12811.0], [50.1, 12851.0], [50.2, 12923.0], [50.3, 12984.0], [50.4, 12984.0], [50.5, 13089.0], [50.6, 13132.0], [50.7, 13132.0], [50.8, 13139.0], [50.9, 13177.0], [51.0, 13177.0], [51.1, 13314.0], [51.2, 13329.0], [51.3, 13329.0], [51.4, 13346.0], [51.5, 13362.0], [51.6, 13362.0], [51.7, 13369.0], [51.8, 13434.0], [51.9, 13523.0], [52.0, 13523.0], [52.1, 13538.0], [52.2, 13632.0], [52.3, 13632.0], [52.4, 13759.0], [52.5, 13782.0], [52.6, 13782.0], [52.7, 13795.0], [52.8, 13917.0], [52.9, 13917.0], [53.0, 14010.0], [53.1, 14059.0], [53.2, 14059.0], [53.3, 14134.0], [53.4, 14171.0], [53.5, 14186.0], [53.6, 14186.0], [53.7, 14317.0], [53.8, 14330.0], [53.9, 14330.0], [54.0, 14336.0], [54.1, 14397.0], [54.2, 14397.0], [54.3, 14398.0], [54.4, 14427.0], [54.5, 14427.0], [54.6, 14458.0], [54.7, 14516.0], [54.8, 14516.0], [54.9, 14535.0], [55.0, 14535.0], [55.1, 14535.0], [55.2, 14655.0], [55.3, 14694.0], [55.4, 14700.0], [55.5, 14700.0], [55.6, 14770.0], [55.7, 14834.0], [55.8, 14834.0], [55.9, 14885.0], [56.0, 14973.0], [56.1, 14973.0], [56.2, 15087.0], [56.3, 15113.0], [56.4, 15113.0], [56.5, 15131.0], [56.6, 15137.0], [56.7, 15137.0], [56.8, 15185.0], [56.9, 15254.0], [57.0, 15292.0], [57.1, 15292.0], [57.2, 15388.0], [57.3, 15423.0], [57.4, 15423.0], [57.5, 15427.0], [57.6, 15505.0], [57.7, 15505.0], [57.8, 15574.0], [57.9, 15602.0], [58.0, 15602.0], [58.1, 15726.0], [58.2, 15764.0], [58.3, 15764.0], [58.4, 15890.0], [58.5, 15916.0], [58.6, 15916.0], [58.7, 16011.0], [58.8, 16143.0], [58.9, 16244.0], [59.0, 16244.0], [59.1, 16246.0], [59.2, 16248.0], [59.3, 16248.0], [59.4, 16385.0], [59.5, 16422.0], [59.6, 16422.0], [59.7, 16500.0], [59.8, 16509.0], [59.9, 16509.0], [60.0, 16607.0], [60.1, 16633.0], [60.2, 16633.0], [60.3, 16690.0], [60.4, 16706.0], [60.5, 16751.0], [60.6, 16751.0], [60.7, 16854.0], [60.8, 16900.0], [60.9, 16900.0], [61.0, 16976.0], [61.1, 17098.0], [61.2, 17098.0], [61.3, 17100.0], [61.4, 17200.0], [61.5, 17200.0], [61.6, 17358.0], [61.7, 17460.0], [61.8, 17460.0], [61.9, 17568.0], [62.0, 17637.0], [62.1, 17637.0], [62.2, 17637.0], [62.3, 17718.0], [62.4, 17787.0], [62.5, 17787.0], [62.6, 17800.0], [62.7, 17833.0], [62.8, 17833.0], [62.9, 17863.0], [63.0, 17878.0], [63.1, 17878.0], [63.2, 17957.0], [63.3, 17978.0], [63.4, 17978.0], [63.5, 18017.0], [63.6, 18089.0], [63.7, 18089.0], [63.8, 18130.0], [63.9, 18327.0], [64.0, 18445.0], [64.1, 18445.0], [64.2, 18472.0], [64.3, 18569.0], [64.4, 18569.0], [64.5, 18597.0], [64.6, 18649.0], [64.7, 18649.0], [64.8, 18727.0], [64.9, 18848.0], [65.0, 18848.0], [65.1, 18933.0], [65.2, 18973.0], [65.3, 18973.0], [65.4, 19146.0], [65.5, 19160.0], [65.6, 19190.0], [65.7, 19190.0], [65.8, 19305.0], [65.9, 19361.0], [66.0, 19361.0], [66.1, 19367.0], [66.2, 19443.0], [66.3, 19443.0], [66.4, 19604.0], [66.5, 19760.0], [66.6, 19760.0], [66.7, 19843.0], [66.8, 19848.0], [66.9, 19848.0], [67.0, 19859.0], [67.1, 19985.0], [67.2, 19985.0], [67.3, 20008.0], [67.4, 20010.0], [67.5, 20058.0], [67.6, 20058.0], [67.7, 20145.0], [67.8, 20147.0], [67.9, 20147.0], [68.0, 20165.0], [68.1, 20182.0], [68.2, 20182.0], [68.3, 20332.0], [68.4, 20643.0], [68.5, 20643.0], [68.6, 20681.0], [68.7, 20807.0], [68.8, 20807.0], [68.9, 20860.0], [69.0, 20882.0], [69.1, 21026.0], [69.2, 21026.0], [69.3, 21081.0], [69.4, 21119.0], [69.5, 21119.0], [69.6, 21192.0], [69.7, 21209.0], [69.8, 21209.0], [69.9, 21286.0], [70.0, 21321.0], [70.1, 21321.0], [70.2, 21368.0], [70.3, 21434.0], [70.4, 21434.0], [70.5, 21480.0], [70.6, 21560.0], [70.7, 21671.0], [70.8, 21671.0], [70.9, 21702.0], [71.0, 21735.0], [71.1, 21735.0], [71.2, 21836.0], [71.3, 21883.0], [71.4, 21883.0], [71.5, 22140.0], [71.6, 22256.0], [71.7, 22256.0], [71.8, 22371.0], [71.9, 22409.0], [72.0, 22409.0], [72.1, 22426.0], [72.2, 22485.0], [72.3, 22485.0], [72.4, 22528.0], [72.5, 22622.0], [72.6, 22849.0], [72.7, 22849.0], [72.8, 23015.0], [72.9, 23041.0], [73.0, 23041.0], [73.1, 23197.0], [73.2, 23451.0], [73.3, 23451.0], [73.4, 23470.0], [73.5, 23499.0], [73.6, 23499.0], [73.7, 23544.0], [73.8, 23545.0], [73.9, 23545.0], [74.0, 23674.0], [74.1, 23786.0], [74.2, 23816.0], [74.3, 23816.0], [74.4, 23837.0], [74.5, 23876.0], [74.6, 23876.0], [74.7, 23905.0], [74.8, 24163.0], [74.9, 24163.0], [75.0, 24225.0], [75.1, 24502.0], [75.2, 24502.0], [75.3, 24613.0], [75.4, 24678.0], [75.5, 24678.0], [75.6, 24691.0], [75.7, 24732.0], [75.8, 24732.0], [75.9, 24837.0], [76.0, 24861.0], [76.1, 24900.0], [76.2, 24900.0], [76.3, 24953.0], [76.4, 24988.0], [76.5, 24988.0], [76.6, 25066.0], [76.7, 25086.0], [76.8, 25086.0], [76.9, 25158.0], [77.0, 25309.0], [77.1, 25309.0], [77.2, 25345.0], [77.3, 25407.0], [77.4, 25407.0], [77.5, 25419.0], [77.6, 25744.0], [77.7, 25788.0], [77.8, 25788.0], [77.9, 25836.0], [78.0, 26007.0], [78.1, 26007.0], [78.2, 26009.0], [78.3, 26051.0], [78.4, 26051.0], [78.5, 26066.0], [78.6, 26176.0], [78.7, 26176.0], [78.8, 26225.0], [78.9, 26411.0], [79.0, 26411.0], [79.1, 26474.0], [79.2, 26610.0], [79.3, 26610.0], [79.4, 26660.0], [79.5, 26689.0], [79.6, 26776.0], [79.7, 26776.0], [79.8, 26912.0], [79.9, 27056.0], [80.0, 27056.0], [80.1, 27484.0], [80.2, 27530.0], [80.3, 27530.0], [80.4, 27749.0], [80.5, 27791.0], [80.6, 27791.0], [80.7, 27881.0], [80.8, 27909.0], [80.9, 27909.0], [81.0, 27982.0], [81.1, 27994.0], [81.2, 28164.0], [81.3, 28164.0], [81.4, 28389.0], [81.5, 28409.0], [81.6, 28409.0], [81.7, 28414.0], [81.8, 28436.0], [81.9, 28436.0], [82.0, 28484.0], [82.1, 28625.0], [82.2, 28625.0], [82.3, 28780.0], [82.4, 28847.0], [82.5, 28847.0], [82.6, 28966.0], [82.7, 29040.0], [82.8, 29108.0], [82.9, 29108.0], [83.0, 29118.0], [83.1, 29304.0], [83.2, 29304.0], [83.3, 29341.0], [83.4, 29606.0], [83.5, 29606.0], [83.6, 29639.0], [83.7, 29658.0], [83.8, 29658.0], [83.9, 29671.0], [84.0, 29792.0], [84.1, 29792.0], [84.2, 30069.0], [84.3, 30223.0], [84.4, 30223.0], [84.5, 30233.0], [84.6, 30354.0], [84.7, 30469.0], [84.8, 30469.0], [84.9, 30487.0], [85.0, 30857.0], [85.1, 30857.0], [85.2, 30866.0], [85.3, 30989.0], [85.4, 30989.0], [85.5, 30998.0], [85.6, 31036.0], [85.7, 31036.0], [85.8, 31262.0], [85.9, 31390.0], [86.0, 31390.0], [86.1, 31686.0], [86.2, 31764.0], [86.3, 31830.0], [86.4, 31830.0], [86.5, 31957.0], [86.6, 32202.0], [86.7, 32202.0], [86.8, 32222.0], [86.9, 32395.0], [87.0, 32395.0], [87.1, 32479.0], [87.2, 32545.0], [87.3, 32545.0], [87.4, 32607.0], [87.5, 32905.0], [87.6, 32905.0], [87.7, 33125.0], [87.8, 33150.0], [87.9, 33150.0], [88.0, 33236.0], [88.1, 33585.0], [88.2, 33672.0], [88.3, 33672.0], [88.4, 33675.0], [88.5, 34070.0], [88.6, 34070.0], [88.7, 34268.0], [88.8, 34400.0], [88.9, 34400.0], [89.0, 34468.0], [89.1, 34820.0], [89.2, 34820.0], [89.3, 34854.0], [89.4, 34988.0], [89.5, 34988.0], [89.6, 35081.0], [89.7, 35141.0], [89.8, 35188.0], [89.9, 35188.0], [90.0, 35622.0], [90.1, 35663.0], [90.2, 35663.0], [90.3, 35958.0], [90.4, 36018.0], [90.5, 36018.0], [90.6, 36030.0], [90.7, 36035.0], [90.8, 36035.0], [90.9, 36093.0], [91.0, 36343.0], [91.1, 36343.0], [91.2, 36566.0], [91.3, 36904.0], [91.4, 36942.0], [91.5, 36942.0], [91.6, 37056.0], [91.7, 37505.0], [91.8, 37505.0], [91.9, 37521.0], [92.0, 37743.0], [92.1, 37743.0], [92.2, 37794.0], [92.3, 37860.0], [92.4, 37860.0], [92.5, 38138.0], [92.6, 38212.0], [92.7, 38212.0], [92.8, 38229.0], [92.9, 38622.0], [93.0, 38622.0], [93.1, 38769.0], [93.2, 39174.0], [93.3, 39230.0], [93.4, 39230.0], [93.5, 39441.0], [93.6, 39528.0], [93.7, 39528.0], [93.8, 39732.0], [93.9, 39957.0], [94.0, 39957.0], [94.1, 39993.0], [94.2, 39994.0], [94.3, 39994.0], [94.4, 40122.0], [94.5, 40131.0], [94.6, 40131.0], [94.7, 40703.0], [94.8, 40839.0], [94.9, 40855.0], [95.0, 40855.0], [95.1, 41014.0], [95.2, 41075.0], [95.3, 41075.0], [95.4, 41109.0], [95.5, 41364.0], [95.6, 41364.0], [95.7, 41491.0], [95.8, 42105.0], [95.9, 42105.0], [96.0, 42215.0], [96.1, 42384.0], [96.2, 42384.0], [96.3, 42396.0], [96.4, 42625.0], [96.5, 42625.0], [96.6, 42856.0], [96.7, 42981.0], [96.8, 43295.0], [96.9, 43295.0], [97.0, 43641.0], [97.1, 43653.0], [97.2, 43653.0], [97.3, 43823.0], [97.4, 43883.0], [97.5, 43883.0], [97.6, 44481.0], [97.7, 44526.0], [97.8, 44526.0], [97.9, 44615.0], [98.0, 44685.0], [98.1, 44685.0], [98.2, 45138.0], [98.3, 45587.0], [98.4, 45682.0], [98.5, 45682.0], [98.6, 45727.0], [98.7, 45966.0], [98.8, 45966.0], [98.9, 46703.0], [99.0, 47396.0], [99.1, 47396.0], [99.2, 47927.0], [99.3, 48944.0], [99.4, 48944.0], [99.5, 49049.0], [99.6, 50373.0], [99.7, 50373.0], [99.8, 50625.0], [99.9, 51721.0], [100.0, 51721.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 9.0, "series": [{"data": [[32900.0, 1.0], [34900.0, 1.0], [36500.0, 1.0], [37700.0, 2.0], [36900.0, 2.0], [38100.0, 1.0], [40100.0, 2.0], [39700.0, 1.0], [42100.0, 1.0], [42900.0, 1.0], [41300.0, 1.0], [44500.0, 1.0], [45700.0, 1.0], [47300.0, 1.0], [48900.0, 1.0], [51700.0, 1.0], [700.0, 2.0], [800.0, 3.0], [900.0, 2.0], [1000.0, 8.0], [1100.0, 2.0], [1200.0, 9.0], [1300.0, 3.0], [1400.0, 6.0], [1500.0, 3.0], [1600.0, 3.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 4.0], [2300.0, 1.0], [2200.0, 4.0], [2400.0, 7.0], [2500.0, 2.0], [2600.0, 5.0], [2700.0, 5.0], [2800.0, 4.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 3.0], [3300.0, 3.0], [3200.0, 4.0], [3400.0, 2.0], [3500.0, 3.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 5.0], [3900.0, 4.0], [4000.0, 5.0], [4200.0, 6.0], [4300.0, 5.0], [4100.0, 1.0], [4600.0, 3.0], [4500.0, 4.0], [4400.0, 4.0], [4700.0, 3.0], [4800.0, 2.0], [4900.0, 5.0], [5100.0, 6.0], [5000.0, 2.0], [5200.0, 2.0], [5300.0, 2.0], [5600.0, 7.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 2.0], [5800.0, 5.0], [6100.0, 6.0], [6000.0, 4.0], [5900.0, 3.0], [6200.0, 4.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 4.0], [6600.0, 1.0], [6700.0, 2.0], [6800.0, 1.0], [7100.0, 2.0], [7000.0, 2.0], [7300.0, 2.0], [7400.0, 4.0], [7200.0, 1.0], [7600.0, 3.0], [7500.0, 4.0], [7900.0, 4.0], [7800.0, 6.0], [8100.0, 2.0], [8000.0, 2.0], [8300.0, 1.0], [8500.0, 2.0], [8600.0, 2.0], [8400.0, 1.0], [9100.0, 5.0], [9000.0, 3.0], [8800.0, 4.0], [8900.0, 5.0], [9200.0, 3.0], [9300.0, 1.0], [9500.0, 3.0], [9400.0, 1.0], [9700.0, 3.0], [9600.0, 1.0], [10100.0, 1.0], [9900.0, 2.0], [10200.0, 1.0], [9800.0, 2.0], [10000.0, 2.0], [10500.0, 3.0], [10400.0, 6.0], [10600.0, 2.0], [10300.0, 2.0], [10700.0, 2.0], [11100.0, 4.0], [11200.0, 3.0], [11000.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [11500.0, 3.0], [11600.0, 1.0], [11400.0, 1.0], [11300.0, 2.0], [11700.0, 1.0], [11800.0, 1.0], [12000.0, 3.0], [12200.0, 1.0], [11900.0, 3.0], [12100.0, 1.0], [12400.0, 2.0], [12500.0, 3.0], [12700.0, 1.0], [12300.0, 4.0], [12600.0, 1.0], [12800.0, 2.0], [13300.0, 5.0], [13100.0, 3.0], [12900.0, 2.0], [13000.0, 1.0], [13700.0, 3.0], [13500.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [13900.0, 1.0], [14100.0, 3.0], [14300.0, 5.0], [14000.0, 2.0], [14600.0, 2.0], [14700.0, 2.0], [14400.0, 2.0], [14500.0, 3.0], [14800.0, 2.0], [15000.0, 1.0], [15300.0, 1.0], [15100.0, 4.0], [15200.0, 2.0], [14900.0, 1.0], [15600.0, 1.0], [15500.0, 2.0], [15700.0, 2.0], [15400.0, 2.0], [15800.0, 1.0], [16000.0, 1.0], [15900.0, 1.0], [16200.0, 3.0], [16300.0, 1.0], [16100.0, 1.0], [17200.0, 1.0], [16600.0, 3.0], [16800.0, 1.0], [17000.0, 1.0], [17400.0, 1.0], [16400.0, 1.0], [18400.0, 2.0], [17800.0, 4.0], [17600.0, 2.0], [18000.0, 2.0], [18600.0, 1.0], [18800.0, 1.0], [19400.0, 1.0], [19800.0, 3.0], [19600.0, 1.0], [20000.0, 3.0], [21000.0, 2.0], [20800.0, 3.0], [20600.0, 2.0], [21400.0, 2.0], [21200.0, 2.0], [21800.0, 2.0], [21600.0, 1.0], [22200.0, 1.0], [22400.0, 3.0], [22800.0, 1.0], [23000.0, 2.0], [22600.0, 1.0], [23400.0, 3.0], [24200.0, 1.0], [23800.0, 3.0], [23600.0, 1.0], [24600.0, 3.0], [25000.0, 2.0], [25400.0, 2.0], [24800.0, 2.0], [26200.0, 1.0], [26000.0, 4.0], [25800.0, 1.0], [26600.0, 3.0], [26400.0, 2.0], [27000.0, 1.0], [27400.0, 1.0], [28400.0, 4.0], [28600.0, 1.0], [27800.0, 1.0], [29600.0, 4.0], [28800.0, 1.0], [29000.0, 1.0], [30400.0, 2.0], [30200.0, 2.0], [30000.0, 1.0], [30800.0, 2.0], [31000.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [32400.0, 1.0], [32200.0, 2.0], [32600.0, 1.0], [31800.0, 1.0], [33600.0, 2.0], [33200.0, 1.0], [34800.0, 2.0], [34000.0, 1.0], [34400.0, 2.0], [36000.0, 4.0], [35600.0, 2.0], [40800.0, 2.0], [39200.0, 1.0], [42800.0, 1.0], [43200.0, 1.0], [43600.0, 2.0], [44400.0, 1.0], [45600.0, 1.0], [33500.0, 1.0], [33100.0, 2.0], [35100.0, 2.0], [35900.0, 1.0], [36300.0, 1.0], [37500.0, 2.0], [38700.0, 1.0], [39500.0, 1.0], [40700.0, 1.0], [39100.0, 1.0], [39900.0, 3.0], [42300.0, 2.0], [41100.0, 1.0], [45500.0, 1.0], [46700.0, 1.0], [45100.0, 1.0], [45900.0, 1.0], [47900.0, 1.0], [50300.0, 1.0], [16900.0, 2.0], [17100.0, 1.0], [16700.0, 2.0], [17300.0, 1.0], [16500.0, 2.0], [17900.0, 2.0], [18300.0, 1.0], [17700.0, 2.0], [18100.0, 1.0], [17500.0, 1.0], [18700.0, 1.0], [18900.0, 2.0], [19300.0, 3.0], [19100.0, 3.0], [18500.0, 2.0], [20100.0, 4.0], [20300.0, 1.0], [19900.0, 1.0], [19700.0, 1.0], [21100.0, 2.0], [21300.0, 2.0], [21500.0, 1.0], [21700.0, 2.0], [22300.0, 1.0], [22500.0, 1.0], [22100.0, 1.0], [23500.0, 2.0], [23100.0, 1.0], [23900.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [23700.0, 1.0], [24900.0, 3.0], [25300.0, 2.0], [24700.0, 1.0], [25100.0, 1.0], [25700.0, 2.0], [26100.0, 1.0], [27500.0, 1.0], [26700.0, 1.0], [26900.0, 1.0], [28300.0, 1.0], [28100.0, 1.0], [27700.0, 2.0], [27900.0, 3.0], [28700.0, 1.0], [29300.0, 2.0], [29100.0, 2.0], [28900.0, 1.0], [29700.0, 1.0], [30300.0, 1.0], [30900.0, 2.0], [31700.0, 1.0], [31300.0, 1.0], [32500.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [34200.0, 1.0], [35000.0, 1.0], [38200.0, 2.0], [37800.0, 1.0], [38600.0, 1.0], [37000.0, 1.0], [39400.0, 1.0], [41000.0, 2.0], [41400.0, 1.0], [42600.0, 1.0], [42200.0, 1.0], [43800.0, 2.0], [44600.0, 2.0], [49000.0, 1.0], [50600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 51700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 651.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 35.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 651.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.21621621621622, "minX": 1.6512495E12, "maxY": 69.86309523809527, "series": [{"data": [[1.65124968E12, 69.86309523809527], [1.65124974E12, 34.470588235294116], [1.65124956E12, 32.17261904761902], [1.65124962E12, 57.245614035087705], [1.6512495E12, 13.21621621621622]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124974E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4025.4137931034484, "minX": 1.0, "maxY": 44526.0, "series": [{"data": [[2.0, 42856.0], [3.0, 21121.0], [4.0, 22402.0], [5.0, 20402.5], [6.0, 22378.5], [7.0, 19663.5], [8.0, 14833.333333333334], [9.0, 13347.333333333334], [10.0, 4025.4137931034484], [11.0, 19151.5], [12.0, 15081.666666666666], [13.0, 19687.5], [14.0, 20772.5], [15.0, 13468.333333333334], [16.0, 18685.0], [17.0, 11713.0], [18.0, 17957.0], [19.0, 12424.0], [20.0, 6910.245614035088], [21.0, 13271.666666666668], [22.0, 14955.333333333332], [23.0, 15575.0], [24.0, 16035.333333333332], [25.0, 25345.0], [26.0, 12378.0], [27.0, 16279.5], [28.0, 13167.666666666668], [29.0, 12636.5], [30.0, 9476.084745762713], [31.0, 10230.666666666668], [32.0, 12836.0], [33.0, 11418.333333333334], [35.0, 11862.666666666666], [34.0, 21434.0], [36.0, 13627.5], [37.0, 12838.666666666666], [38.0, 16930.0], [39.0, 12168.5], [40.0, 12295.406779661014], [41.0, 13632.0], [42.0, 10354.0], [43.0, 9352.0], [44.0, 12738.5], [45.0, 9951.666666666666], [46.0, 11859.5], [47.0, 32758.0], [48.0, 12537.0], [49.0, 32379.5], [50.0, 16240.499999999996], [51.0, 33756.0], [52.0, 4514.0], [53.0, 25124.333333333336], [54.0, 15863.0], [55.0, 25708.333333333336], [56.0, 5085.0], [57.0, 26940.0], [58.0, 27662.0], [59.0, 27621.0], [60.0, 17949.542372881362], [61.0, 31247.0], [62.0, 33755.0], [63.0, 38893.5], [64.0, 34825.666666666664], [65.0, 31617.5], [66.0, 35793.25], [67.0, 30936.142857142855], [68.0, 30795.333333333332], [69.0, 25563.833333333332], [70.0, 21700.876404494385], [1.0, 44526.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[44.81341107871719, 15974.794460641393]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 70.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 176.73333333333332, "minX": 1.6512495E12, "maxY": 532.75, "series": [{"data": [[1.65124968E12, 525.8833333333333], [1.65124974E12, 212.18333333333334], [1.65124956E12, 522.8833333333333], [1.65124962E12, 532.75], [1.6512495E12, 343.68333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65124968E12, 436.8], [1.65124974E12, 176.73333333333332], [1.65124956E12, 436.6333333333333], [1.65124962E12, 444.4166666666667], [1.6512495E12, 288.4166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124974E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3870.2702702702727, "minX": 1.6512495E12, "maxY": 30279.808823529413, "series": [{"data": [[1.65124968E12, 23708.678571428558], [1.65124974E12, 30279.808823529413], [1.65124956E12, 9729.91071428571], [1.65124962E12, 16680.69590643275], [1.6512495E12, 3870.2702702702727]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124974E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3870.234234234235, "minX": 1.6512495E12, "maxY": 30279.79411764706, "series": [{"data": [[1.65124968E12, 23708.625000000007], [1.65124974E12, 30279.79411764706], [1.65124956E12, 9729.833333333328], [1.65124962E12, 16680.6432748538], [1.6512495E12, 3870.234234234235]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124974E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.911764705882352, "minX": 1.6512495E12, "maxY": 16.414414414414406, "series": [{"data": [[1.65124968E12, 8.416666666666664], [1.65124974E12, 7.911764705882352], [1.65124956E12, 9.892857142857146], [1.65124962E12, 9.058479532163748], [1.6512495E12, 16.414414414414406]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124974E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 770.0, "minX": 1.6512495E12, "maxY": 51721.0, "series": [{"data": [[1.65124968E12, 50373.0], [1.65124974E12, 51721.0], [1.65124956E12, 26225.0], [1.65124962E12, 40855.0], [1.6512495E12, 11503.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65124968E12, 41078.4], [1.65124974E12, 45196.9], [1.65124956E12, 17885.899999999998], [1.65124962E12, 29553.000000000004], [1.6512495E12, 7193.5999999999985]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65124968E12, 49459.44], [1.65124974E12, 51721.0], [1.65124956E12, 25166.540000000005], [1.65124962E12, 39836.92], [1.6512495E12, 11388.159999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65124968E12, 44554.7], [1.65124974E12, 48247.399999999994], [1.65124956E12, 20509.99999999999], [1.65124962E12, 32505.4], [1.6512495E12, 8667.799999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65124968E12, 1029.0], [1.65124974E12, 4515.0], [1.65124956E12, 1022.0], [1.65124962E12, 770.0], [1.6512495E12, 792.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65124968E12, 23586.5], [1.65124974E12, 32477.5], [1.65124956E12, 9284.5], [1.65124962E12, 16246.0], [1.6512495E12, 3640.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124974E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9278.0, "minX": 1.0, "maxY": 44526.0, "series": [{"data": [[2.0, 12744.5], [4.0, 9278.0], [1.0, 44526.0], [3.0, 14397.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9278.0, "minX": 1.0, "maxY": 44526.0, "series": [{"data": [[2.0, 12744.5], [4.0, 9278.0], [1.0, 44526.0], [3.0, 14397.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6512495E12, "maxY": 3.3, "series": [{"data": [[1.65124968E12, 2.75], [1.65124974E12, 0.016666666666666666], [1.65124956E12, 3.183333333333333], [1.65124962E12, 3.3], [1.6512495E12, 2.183333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124974E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.6512495E12, "maxY": 2.85, "series": [{"data": [[1.65124968E12, 2.8], [1.65124974E12, 1.1333333333333333], [1.65124956E12, 2.8], [1.65124962E12, 2.85], [1.6512495E12, 1.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65124974E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.6512495E12, "maxY": 2.85, "series": [{"data": [[1.65124968E12, 2.8], [1.65124974E12, 1.1333333333333333], [1.65124956E12, 2.8], [1.65124962E12, 2.85], [1.6512495E12, 1.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124974E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.6512495E12, "maxY": 2.85, "series": [{"data": [[1.65124968E12, 2.8], [1.65124974E12, 1.1333333333333333], [1.65124956E12, 2.8], [1.65124962E12, 2.85], [1.6512495E12, 1.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65124974E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


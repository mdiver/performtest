/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 431.0, "minX": 0.0, "maxY": 60259.0, "series": [{"data": [[0.0, 431.0], [0.1, 830.0], [0.2, 934.0], [0.3, 952.0], [0.4, 997.0], [0.5, 1022.0], [0.6, 1054.0], [0.7, 1098.0], [0.8, 1147.0], [0.9, 1155.0], [1.0, 1178.0], [1.1, 1191.0], [1.2, 1228.0], [1.3, 1270.0], [1.4, 1307.0], [1.5, 1326.0], [1.6, 1336.0], [1.7, 1361.0], [1.8, 1380.0], [1.9, 1394.0], [2.0, 1429.0], [2.1, 1460.0], [2.2, 1512.0], [2.3, 1550.0], [2.4, 1580.0], [2.5, 1585.0], [2.6, 1607.0], [2.7, 1649.0], [2.8, 1707.0], [2.9, 1757.0], [3.0, 1795.0], [3.1, 1882.0], [3.2, 1967.0], [3.3, 2056.0], [3.4, 2140.0], [3.5, 2158.0], [3.6, 2190.0], [3.7, 2269.0], [3.8, 2315.0], [3.9, 2333.0], [4.0, 2352.0], [4.1, 2403.0], [4.2, 2434.0], [4.3, 2489.0], [4.4, 2513.0], [4.5, 2543.0], [4.6, 2561.0], [4.7, 2618.0], [4.8, 2656.0], [4.9, 2674.0], [5.0, 2715.0], [5.1, 2744.0], [5.2, 2814.0], [5.3, 2847.0], [5.4, 2898.0], [5.5, 2941.0], [5.6, 2959.0], [5.7, 3012.0], [5.8, 3062.0], [5.9, 3098.0], [6.0, 3168.0], [6.1, 3221.0], [6.2, 3247.0], [6.3, 3301.0], [6.4, 3318.0], [6.5, 3390.0], [6.6, 3444.0], [6.7, 3497.0], [6.8, 3573.0], [6.9, 3602.0], [7.0, 3642.0], [7.1, 3673.0], [7.2, 3706.0], [7.3, 3755.0], [7.4, 3767.0], [7.5, 3786.0], [7.6, 3814.0], [7.7, 3878.0], [7.8, 3913.0], [7.9, 3949.0], [8.0, 4001.0], [8.1, 4071.0], [8.2, 4112.0], [8.3, 4174.0], [8.4, 4217.0], [8.5, 4250.0], [8.6, 4296.0], [8.7, 4334.0], [8.8, 4353.0], [8.9, 4402.0], [9.0, 4425.0], [9.1, 4454.0], [9.2, 4478.0], [9.3, 4544.0], [9.4, 4562.0], [9.5, 4621.0], [9.6, 4656.0], [9.7, 4691.0], [9.8, 4718.0], [9.9, 4784.0], [10.0, 4836.0], [10.1, 4869.0], [10.2, 4922.0], [10.3, 4954.0], [10.4, 5062.0], [10.5, 5101.0], [10.6, 5151.0], [10.7, 5208.0], [10.8, 5265.0], [10.9, 5357.0], [11.0, 5388.0], [11.1, 5424.0], [11.2, 5448.0], [11.3, 5501.0], [11.4, 5526.0], [11.5, 5559.0], [11.6, 5612.0], [11.7, 5627.0], [11.8, 5657.0], [11.9, 5680.0], [12.0, 5728.0], [12.1, 5763.0], [12.2, 5790.0], [12.3, 5826.0], [12.4, 5860.0], [12.5, 5914.0], [12.6, 5981.0], [12.7, 6029.0], [12.8, 6085.0], [12.9, 6108.0], [13.0, 6155.0], [13.1, 6236.0], [13.2, 6295.0], [13.3, 6312.0], [13.4, 6358.0], [13.5, 6393.0], [13.6, 6467.0], [13.7, 6532.0], [13.8, 6603.0], [13.9, 6644.0], [14.0, 6679.0], [14.1, 6725.0], [14.2, 6795.0], [14.3, 6832.0], [14.4, 6844.0], [14.5, 6858.0], [14.6, 6886.0], [14.7, 6946.0], [14.8, 7011.0], [14.9, 7065.0], [15.0, 7096.0], [15.1, 7136.0], [15.2, 7185.0], [15.3, 7217.0], [15.4, 7271.0], [15.5, 7303.0], [15.6, 7329.0], [15.7, 7369.0], [15.8, 7415.0], [15.9, 7498.0], [16.0, 7577.0], [16.1, 7622.0], [16.2, 7701.0], [16.3, 7750.0], [16.4, 7768.0], [16.5, 7815.0], [16.6, 7868.0], [16.7, 7910.0], [16.8, 7937.0], [16.9, 7997.0], [17.0, 8088.0], [17.1, 8123.0], [17.2, 8194.0], [17.3, 8243.0], [17.4, 8300.0], [17.5, 8317.0], [17.6, 8376.0], [17.7, 8391.0], [17.8, 8438.0], [17.9, 8466.0], [18.0, 8474.0], [18.1, 8504.0], [18.2, 8562.0], [18.3, 8609.0], [18.4, 8639.0], [18.5, 8662.0], [18.6, 8769.0], [18.7, 8815.0], [18.8, 8867.0], [18.9, 8920.0], [19.0, 8958.0], [19.1, 9046.0], [19.2, 9084.0], [19.3, 9148.0], [19.4, 9208.0], [19.5, 9258.0], [19.6, 9357.0], [19.7, 9362.0], [19.8, 9394.0], [19.9, 9441.0], [20.0, 9515.0], [20.1, 9578.0], [20.2, 9606.0], [20.3, 9683.0], [20.4, 9714.0], [20.5, 9743.0], [20.6, 9785.0], [20.7, 9834.0], [20.8, 9870.0], [20.9, 9912.0], [21.0, 9960.0], [21.1, 9987.0], [21.2, 10061.0], [21.3, 10127.0], [21.4, 10165.0], [21.5, 10225.0], [21.6, 10268.0], [21.7, 10291.0], [21.8, 10354.0], [21.9, 10388.0], [22.0, 10465.0], [22.1, 10478.0], [22.2, 10522.0], [22.3, 10545.0], [22.4, 10625.0], [22.5, 10669.0], [22.6, 10725.0], [22.7, 10755.0], [22.8, 10808.0], [22.9, 10872.0], [23.0, 10991.0], [23.1, 11014.0], [23.2, 11077.0], [23.3, 11116.0], [23.4, 11135.0], [23.5, 11175.0], [23.6, 11218.0], [23.7, 11237.0], [23.8, 11297.0], [23.9, 11339.0], [24.0, 11424.0], [24.1, 11476.0], [24.2, 11502.0], [24.3, 11561.0], [24.4, 11601.0], [24.5, 11649.0], [24.6, 11712.0], [24.7, 11761.0], [24.8, 11832.0], [24.9, 11853.0], [25.0, 11876.0], [25.1, 11923.0], [25.2, 11944.0], [25.3, 12018.0], [25.4, 12077.0], [25.5, 12125.0], [25.6, 12190.0], [25.7, 12248.0], [25.8, 12310.0], [25.9, 12381.0], [26.0, 12418.0], [26.1, 12450.0], [26.2, 12471.0], [26.3, 12524.0], [26.4, 12543.0], [26.5, 12620.0], [26.6, 12647.0], [26.7, 12696.0], [26.8, 12727.0], [26.9, 12757.0], [27.0, 12817.0], [27.1, 12858.0], [27.2, 12875.0], [27.3, 12980.0], [27.4, 13024.0], [27.5, 13066.0], [27.6, 13122.0], [27.7, 13226.0], [27.8, 13265.0], [27.9, 13297.0], [28.0, 13325.0], [28.1, 13372.0], [28.2, 13439.0], [28.3, 13466.0], [28.4, 13553.0], [28.5, 13615.0], [28.6, 13668.0], [28.7, 13713.0], [28.8, 13749.0], [28.9, 13782.0], [29.0, 13853.0], [29.1, 13891.0], [29.2, 13972.0], [29.3, 14014.0], [29.4, 14060.0], [29.5, 14106.0], [29.6, 14167.0], [29.7, 14215.0], [29.8, 14241.0], [29.9, 14254.0], [30.0, 14300.0], [30.1, 14329.0], [30.2, 14392.0], [30.3, 14485.0], [30.4, 14510.0], [30.5, 14544.0], [30.6, 14598.0], [30.7, 14648.0], [30.8, 14683.0], [30.9, 14733.0], [31.0, 14764.0], [31.1, 14792.0], [31.2, 14854.0], [31.3, 14911.0], [31.4, 14964.0], [31.5, 15001.0], [31.6, 15058.0], [31.7, 15140.0], [31.8, 15201.0], [31.9, 15244.0], [32.0, 15287.0], [32.1, 15353.0], [32.2, 15369.0], [32.3, 15423.0], [32.4, 15484.0], [32.5, 15518.0], [32.6, 15553.0], [32.7, 15584.0], [32.8, 15652.0], [32.9, 15742.0], [33.0, 15789.0], [33.1, 15865.0], [33.2, 15913.0], [33.3, 15969.0], [33.4, 16026.0], [33.5, 16048.0], [33.6, 16092.0], [33.7, 16191.0], [33.8, 16264.0], [33.9, 16345.0], [34.0, 16401.0], [34.1, 16427.0], [34.2, 16513.0], [34.3, 16559.0], [34.4, 16594.0], [34.5, 16673.0], [34.6, 16703.0], [34.7, 16743.0], [34.8, 16762.0], [34.9, 16797.0], [35.0, 16837.0], [35.1, 16875.0], [35.2, 16923.0], [35.3, 16965.0], [35.4, 17032.0], [35.5, 17069.0], [35.6, 17133.0], [35.7, 17162.0], [35.8, 17223.0], [35.9, 17298.0], [36.0, 17315.0], [36.1, 17404.0], [36.2, 17433.0], [36.3, 17486.0], [36.4, 17541.0], [36.5, 17602.0], [36.6, 17647.0], [36.7, 17717.0], [36.8, 17766.0], [36.9, 17787.0], [37.0, 17807.0], [37.1, 17879.0], [37.2, 17903.0], [37.3, 17938.0], [37.4, 18020.0], [37.5, 18060.0], [37.6, 18143.0], [37.7, 18180.0], [37.8, 18219.0], [37.9, 18239.0], [38.0, 18288.0], [38.1, 18326.0], [38.2, 18353.0], [38.3, 18400.0], [38.4, 18497.0], [38.5, 18557.0], [38.6, 18580.0], [38.7, 18613.0], [38.8, 18712.0], [38.9, 18738.0], [39.0, 18795.0], [39.1, 18836.0], [39.2, 18879.0], [39.3, 18938.0], [39.4, 18965.0], [39.5, 19021.0], [39.6, 19111.0], [39.7, 19120.0], [39.8, 19174.0], [39.9, 19245.0], [40.0, 19272.0], [40.1, 19310.0], [40.2, 19333.0], [40.3, 19397.0], [40.4, 19450.0], [40.5, 19482.0], [40.6, 19513.0], [40.7, 19600.0], [40.8, 19674.0], [40.9, 19736.0], [41.0, 19789.0], [41.1, 19836.0], [41.2, 19989.0], [41.3, 20001.0], [41.4, 20053.0], [41.5, 20127.0], [41.6, 20193.0], [41.7, 20266.0], [41.8, 20297.0], [41.9, 20330.0], [42.0, 20402.0], [42.1, 20434.0], [42.2, 20465.0], [42.3, 20504.0], [42.4, 20531.0], [42.5, 20568.0], [42.6, 20608.0], [42.7, 20662.0], [42.8, 20685.0], [42.9, 20721.0], [43.0, 20745.0], [43.1, 20785.0], [43.2, 20881.0], [43.3, 20939.0], [43.4, 21003.0], [43.5, 21128.0], [43.6, 21209.0], [43.7, 21236.0], [43.8, 21321.0], [43.9, 21374.0], [44.0, 21420.0], [44.1, 21472.0], [44.2, 21510.0], [44.3, 21587.0], [44.4, 21612.0], [44.5, 21631.0], [44.6, 21651.0], [44.7, 21713.0], [44.8, 21767.0], [44.9, 21785.0], [45.0, 21858.0], [45.1, 21924.0], [45.2, 22016.0], [45.3, 22083.0], [45.4, 22158.0], [45.5, 22178.0], [45.6, 22206.0], [45.7, 22240.0], [45.8, 22262.0], [45.9, 22344.0], [46.0, 22358.0], [46.1, 22401.0], [46.2, 22465.0], [46.3, 22480.0], [46.4, 22533.0], [46.5, 22588.0], [46.6, 22628.0], [46.7, 22696.0], [46.8, 22779.0], [46.9, 22810.0], [47.0, 22864.0], [47.1, 22934.0], [47.2, 23003.0], [47.3, 23065.0], [47.4, 23078.0], [47.5, 23108.0], [47.6, 23176.0], [47.7, 23249.0], [47.8, 23355.0], [47.9, 23386.0], [48.0, 23411.0], [48.1, 23431.0], [48.2, 23451.0], [48.3, 23483.0], [48.4, 23566.0], [48.5, 23596.0], [48.6, 23673.0], [48.7, 23716.0], [48.8, 23778.0], [48.9, 23800.0], [49.0, 23860.0], [49.1, 23938.0], [49.2, 24000.0], [49.3, 24056.0], [49.4, 24095.0], [49.5, 24157.0], [49.6, 24207.0], [49.7, 24258.0], [49.8, 24293.0], [49.9, 24327.0], [50.0, 24349.0], [50.1, 24440.0], [50.2, 24500.0], [50.3, 24542.0], [50.4, 24594.0], [50.5, 24636.0], [50.6, 24720.0], [50.7, 24762.0], [50.8, 24801.0], [50.9, 24845.0], [51.0, 24905.0], [51.1, 25053.0], [51.2, 25096.0], [51.3, 25130.0], [51.4, 25205.0], [51.5, 25259.0], [51.6, 25300.0], [51.7, 25338.0], [51.8, 25388.0], [51.9, 25425.0], [52.0, 25488.0], [52.1, 25517.0], [52.2, 25548.0], [52.3, 25618.0], [52.4, 25657.0], [52.5, 25722.0], [52.6, 25795.0], [52.7, 25853.0], [52.8, 25902.0], [52.9, 25954.0], [53.0, 25999.0], [53.1, 26098.0], [53.2, 26200.0], [53.3, 26250.0], [53.4, 26287.0], [53.5, 26357.0], [53.6, 26404.0], [53.7, 26445.0], [53.8, 26469.0], [53.9, 26495.0], [54.0, 26558.0], [54.1, 26587.0], [54.2, 26666.0], [54.3, 26707.0], [54.4, 26768.0], [54.5, 26814.0], [54.6, 26855.0], [54.7, 26893.0], [54.8, 26934.0], [54.9, 26981.0], [55.0, 27037.0], [55.1, 27100.0], [55.2, 27184.0], [55.3, 27257.0], [55.4, 27337.0], [55.5, 27383.0], [55.6, 27406.0], [55.7, 27440.0], [55.8, 27499.0], [55.9, 27570.0], [56.0, 27623.0], [56.1, 27709.0], [56.2, 27780.0], [56.3, 27805.0], [56.4, 27834.0], [56.5, 27878.0], [56.6, 27948.0], [56.7, 27982.0], [56.8, 28028.0], [56.9, 28053.0], [57.0, 28119.0], [57.1, 28189.0], [57.2, 28215.0], [57.3, 28256.0], [57.4, 28342.0], [57.5, 28388.0], [57.6, 28431.0], [57.7, 28446.0], [57.8, 28498.0], [57.9, 28550.0], [58.0, 28626.0], [58.1, 28654.0], [58.2, 28736.0], [58.3, 28782.0], [58.4, 28868.0], [58.5, 28942.0], [58.6, 29010.0], [58.7, 29081.0], [58.8, 29130.0], [58.9, 29152.0], [59.0, 29173.0], [59.1, 29226.0], [59.2, 29273.0], [59.3, 29348.0], [59.4, 29377.0], [59.5, 29458.0], [59.6, 29528.0], [59.7, 29582.0], [59.8, 29634.0], [59.9, 29671.0], [60.0, 29692.0], [60.1, 29728.0], [60.2, 29787.0], [60.3, 29832.0], [60.4, 29868.0], [60.5, 29933.0], [60.6, 30035.0], [60.7, 30109.0], [60.8, 30171.0], [60.9, 30241.0], [61.0, 30311.0], [61.1, 30351.0], [61.2, 30395.0], [61.3, 30425.0], [61.4, 30537.0], [61.5, 30582.0], [61.6, 30629.0], [61.7, 30668.0], [61.8, 30706.0], [61.9, 30758.0], [62.0, 30854.0], [62.1, 30922.0], [62.2, 30958.0], [62.3, 31024.0], [62.4, 31061.0], [62.5, 31104.0], [62.6, 31146.0], [62.7, 31185.0], [62.8, 31244.0], [62.9, 31267.0], [63.0, 31317.0], [63.1, 31420.0], [63.2, 31463.0], [63.3, 31519.0], [63.4, 31589.0], [63.5, 31609.0], [63.6, 31638.0], [63.7, 31670.0], [63.8, 31719.0], [63.9, 31783.0], [64.0, 31838.0], [64.1, 31884.0], [64.2, 31995.0], [64.3, 32011.0], [64.4, 32071.0], [64.5, 32116.0], [64.6, 32162.0], [64.7, 32230.0], [64.8, 32271.0], [64.9, 32330.0], [65.0, 32380.0], [65.1, 32429.0], [65.2, 32521.0], [65.3, 32580.0], [65.4, 32609.0], [65.5, 32647.0], [65.6, 32683.0], [65.7, 32737.0], [65.8, 32769.0], [65.9, 32826.0], [66.0, 32876.0], [66.1, 32947.0], [66.2, 32982.0], [66.3, 33060.0], [66.4, 33179.0], [66.5, 33250.0], [66.6, 33311.0], [66.7, 33348.0], [66.8, 33405.0], [66.9, 33445.0], [67.0, 33466.0], [67.1, 33486.0], [67.2, 33535.0], [67.3, 33626.0], [67.4, 33655.0], [67.5, 33724.0], [67.6, 33775.0], [67.7, 33815.0], [67.8, 33860.0], [67.9, 33921.0], [68.0, 33956.0], [68.1, 34001.0], [68.2, 34036.0], [68.3, 34118.0], [68.4, 34179.0], [68.5, 34229.0], [68.6, 34266.0], [68.7, 34379.0], [68.8, 34427.0], [68.9, 34487.0], [69.0, 34537.0], [69.1, 34610.0], [69.2, 34676.0], [69.3, 34689.0], [69.4, 34731.0], [69.5, 34764.0], [69.6, 34801.0], [69.7, 34902.0], [69.8, 34963.0], [69.9, 34986.0], [70.0, 35016.0], [70.1, 35036.0], [70.2, 35089.0], [70.3, 35172.0], [70.4, 35204.0], [70.5, 35314.0], [70.6, 35344.0], [70.7, 35422.0], [70.8, 35471.0], [70.9, 35511.0], [71.0, 35595.0], [71.1, 35644.0], [71.2, 35693.0], [71.3, 35754.0], [71.4, 35822.0], [71.5, 35878.0], [71.6, 35925.0], [71.7, 36007.0], [71.8, 36023.0], [71.9, 36048.0], [72.0, 36153.0], [72.1, 36167.0], [72.2, 36195.0], [72.3, 36226.0], [72.4, 36293.0], [72.5, 36319.0], [72.6, 36366.0], [72.7, 36436.0], [72.8, 36506.0], [72.9, 36555.0], [73.0, 36623.0], [73.1, 36686.0], [73.2, 36772.0], [73.3, 36784.0], [73.4, 36854.0], [73.5, 36951.0], [73.6, 36996.0], [73.7, 37062.0], [73.8, 37118.0], [73.9, 37148.0], [74.0, 37225.0], [74.1, 37298.0], [74.2, 37379.0], [74.3, 37423.0], [74.4, 37471.0], [74.5, 37552.0], [74.6, 37583.0], [74.7, 37618.0], [74.8, 37637.0], [74.9, 37712.0], [75.0, 37751.0], [75.1, 37814.0], [75.2, 37904.0], [75.3, 37976.0], [75.4, 38031.0], [75.5, 38089.0], [75.6, 38125.0], [75.7, 38176.0], [75.8, 38255.0], [75.9, 38328.0], [76.0, 38364.0], [76.1, 38394.0], [76.2, 38474.0], [76.3, 38523.0], [76.4, 38617.0], [76.5, 38694.0], [76.6, 38758.0], [76.7, 38855.0], [76.8, 38888.0], [76.9, 38931.0], [77.0, 38988.0], [77.1, 39046.0], [77.2, 39124.0], [77.3, 39161.0], [77.4, 39219.0], [77.5, 39248.0], [77.6, 39300.0], [77.7, 39361.0], [77.8, 39401.0], [77.9, 39440.0], [78.0, 39479.0], [78.1, 39496.0], [78.2, 39544.0], [78.3, 39612.0], [78.4, 39682.0], [78.5, 39720.0], [78.6, 39805.0], [78.7, 39891.0], [78.8, 39981.0], [78.9, 40015.0], [79.0, 40075.0], [79.1, 40168.0], [79.2, 40231.0], [79.3, 40286.0], [79.4, 40354.0], [79.5, 40397.0], [79.6, 40442.0], [79.7, 40470.0], [79.8, 40503.0], [79.9, 40563.0], [80.0, 40649.0], [80.1, 40662.0], [80.2, 40756.0], [80.3, 40812.0], [80.4, 40857.0], [80.5, 40933.0], [80.6, 40969.0], [80.7, 41024.0], [80.8, 41074.0], [80.9, 41110.0], [81.0, 41154.0], [81.1, 41171.0], [81.2, 41255.0], [81.3, 41319.0], [81.4, 41431.0], [81.5, 41458.0], [81.6, 41518.0], [81.7, 41552.0], [81.8, 41602.0], [81.9, 41695.0], [82.0, 41727.0], [82.1, 41797.0], [82.2, 41836.0], [82.3, 41925.0], [82.4, 41978.0], [82.5, 42038.0], [82.6, 42069.0], [82.7, 42121.0], [82.8, 42149.0], [82.9, 42202.0], [83.0, 42264.0], [83.1, 42300.0], [83.2, 42363.0], [83.3, 42423.0], [83.4, 42448.0], [83.5, 42494.0], [83.6, 42561.0], [83.7, 42602.0], [83.8, 42667.0], [83.9, 42741.0], [84.0, 42840.0], [84.1, 42954.0], [84.2, 42993.0], [84.3, 43069.0], [84.4, 43126.0], [84.5, 43170.0], [84.6, 43240.0], [84.7, 43305.0], [84.8, 43345.0], [84.9, 43387.0], [85.0, 43440.0], [85.1, 43469.0], [85.2, 43540.0], [85.3, 43595.0], [85.4, 43635.0], [85.5, 43642.0], [85.6, 43678.0], [85.7, 43730.0], [85.8, 43761.0], [85.9, 43814.0], [86.0, 43908.0], [86.1, 43948.0], [86.2, 44002.0], [86.3, 44071.0], [86.4, 44156.0], [86.5, 44211.0], [86.6, 44259.0], [86.7, 44317.0], [86.8, 44406.0], [86.9, 44477.0], [87.0, 44560.0], [87.1, 44598.0], [87.2, 44653.0], [87.3, 44674.0], [87.4, 44735.0], [87.5, 44757.0], [87.6, 44795.0], [87.7, 44859.0], [87.8, 44916.0], [87.9, 44977.0], [88.0, 45036.0], [88.1, 45060.0], [88.2, 45153.0], [88.3, 45230.0], [88.4, 45255.0], [88.5, 45387.0], [88.6, 45436.0], [88.7, 45512.0], [88.8, 45537.0], [88.9, 45600.0], [89.0, 45661.0], [89.1, 45697.0], [89.2, 45744.0], [89.3, 45781.0], [89.4, 45832.0], [89.5, 45934.0], [89.6, 45960.0], [89.7, 45990.0], [89.8, 46044.0], [89.9, 46121.0], [90.0, 46186.0], [90.1, 46305.0], [90.2, 46409.0], [90.3, 46471.0], [90.4, 46493.0], [90.5, 46592.0], [90.6, 46676.0], [90.7, 46720.0], [90.8, 46776.0], [90.9, 46809.0], [91.0, 46883.0], [91.1, 46926.0], [91.2, 46956.0], [91.3, 47042.0], [91.4, 47070.0], [91.5, 47146.0], [91.6, 47219.0], [91.7, 47335.0], [91.8, 47398.0], [91.9, 47484.0], [92.0, 47529.0], [92.1, 47552.0], [92.2, 47668.0], [92.3, 47721.0], [92.4, 47770.0], [92.5, 47836.0], [92.6, 47909.0], [92.7, 47944.0], [92.8, 48038.0], [92.9, 48066.0], [93.0, 48141.0], [93.1, 48179.0], [93.2, 48263.0], [93.3, 48401.0], [93.4, 48455.0], [93.5, 48511.0], [93.6, 48589.0], [93.7, 48648.0], [93.8, 48716.0], [93.9, 48818.0], [94.0, 48856.0], [94.1, 48890.0], [94.2, 48995.0], [94.3, 49054.0], [94.4, 49148.0], [94.5, 49276.0], [94.6, 49389.0], [94.7, 49449.0], [94.8, 49531.0], [94.9, 49569.0], [95.0, 49629.0], [95.1, 49659.0], [95.2, 49765.0], [95.3, 49831.0], [95.4, 49904.0], [95.5, 50055.0], [95.6, 50122.0], [95.7, 50203.0], [95.8, 50279.0], [95.9, 50332.0], [96.0, 50396.0], [96.1, 50458.0], [96.2, 50538.0], [96.3, 50684.0], [96.4, 50795.0], [96.5, 50942.0], [96.6, 51105.0], [96.7, 51189.0], [96.8, 51271.0], [96.9, 51321.0], [97.0, 51374.0], [97.1, 51577.0], [97.2, 51655.0], [97.3, 51739.0], [97.4, 51924.0], [97.5, 52080.0], [97.6, 52126.0], [97.7, 52348.0], [97.8, 52461.0], [97.9, 52597.0], [98.0, 52753.0], [98.1, 52966.0], [98.2, 53003.0], [98.3, 53227.0], [98.4, 53374.0], [98.5, 53492.0], [98.6, 53706.0], [98.7, 53920.0], [98.8, 54192.0], [98.9, 54296.0], [99.0, 54594.0], [99.1, 54861.0], [99.2, 54994.0], [99.3, 55319.0], [99.4, 55426.0], [99.5, 55819.0], [99.6, 56104.0], [99.7, 56940.0], [99.8, 57521.0], [99.9, 58568.0], [100.0, 60259.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 31.0, "series": [{"data": [[33700.0, 10.0], [34500.0, 8.0], [32900.0, 8.0], [36100.0, 16.0], [35300.0, 11.0], [36900.0, 9.0], [38500.0, 7.0], [37700.0, 11.0], [40900.0, 12.0], [39300.0, 12.0], [40100.0, 4.0], [42500.0, 10.0], [41700.0, 11.0], [44100.0, 6.0], [43300.0, 14.0], [44900.0, 10.0], [46500.0, 7.0], [45700.0, 11.0], [48100.0, 9.0], [47300.0, 8.0], [48900.0, 5.0], [50500.0, 7.0], [49700.0, 8.0], [52900.0, 8.0], [51300.0, 8.0], [52100.0, 6.0], [53700.0, 4.0], [54500.0, 3.0], [56900.0, 4.0], [55300.0, 6.0], [56100.0, 1.0], [57700.0, 2.0], [58500.0, 1.0], [400.0, 1.0], [500.0, 1.0], [700.0, 2.0], [800.0, 5.0], [900.0, 16.0], [1000.0, 15.0], [1100.0, 25.0], [1200.0, 12.0], [1300.0, 31.0], [1400.0, 14.0], [1500.0, 22.0], [1600.0, 12.0], [1700.0, 14.0], [1800.0, 8.0], [1900.0, 8.0], [2000.0, 3.0], [2100.0, 15.0], [2300.0, 22.0], [2200.0, 5.0], [2400.0, 13.0], [2500.0, 20.0], [2600.0, 16.0], [2800.0, 12.0], [2700.0, 13.0], [2900.0, 16.0], [3000.0, 13.0], [3100.0, 8.0], [3300.0, 13.0], [3200.0, 13.0], [3400.0, 10.0], [3500.0, 11.0], [3700.0, 19.0], [3600.0, 17.0], [3800.0, 13.0], [3900.0, 13.0], [4000.0, 9.0], [4200.0, 13.0], [4100.0, 12.0], [4300.0, 16.0], [4400.0, 18.0], [4600.0, 15.0], [4500.0, 14.0], [4800.0, 15.0], [4700.0, 11.0], [5100.0, 9.0], [4900.0, 8.0], [5000.0, 10.0], [5300.0, 10.0], [5200.0, 11.0], [5500.0, 17.0], [5400.0, 15.0], [5600.0, 19.0], [5800.0, 14.0], [5700.0, 15.0], [6100.0, 11.0], [6000.0, 13.0], [5900.0, 10.0], [6300.0, 17.0], [6200.0, 10.0], [6500.0, 9.0], [6600.0, 14.0], [6400.0, 6.0], [6700.0, 10.0], [6800.0, 23.0], [6900.0, 8.0], [7100.0, 13.0], [7000.0, 14.0], [7200.0, 14.0], [7300.0, 16.0], [7400.0, 7.0], [7600.0, 8.0], [7500.0, 8.0], [7900.0, 13.0], [7800.0, 11.0], [7700.0, 16.0], [8000.0, 10.0], [8100.0, 8.0], [8200.0, 10.0], [8600.0, 15.0], [8400.0, 18.0], [9200.0, 9.0], [8800.0, 11.0], [9000.0, 11.0], [9400.0, 8.0], [9600.0, 8.0], [10200.0, 14.0], [10000.0, 7.0], [9800.0, 13.0], [10400.0, 15.0], [10600.0, 7.0], [11000.0, 15.0], [11200.0, 13.0], [10800.0, 9.0], [11600.0, 11.0], [11400.0, 10.0], [11800.0, 17.0], [12000.0, 10.0], [12200.0, 8.0], [12400.0, 16.0], [12600.0, 13.0], [12800.0, 13.0], [13200.0, 13.0], [13000.0, 11.0], [13600.0, 11.0], [13400.0, 10.0], [13800.0, 10.0], [14000.0, 12.0], [14200.0, 19.0], [14800.0, 10.0], [14600.0, 13.0], [14400.0, 8.0], [15200.0, 13.0], [15000.0, 9.0], [15400.0, 13.0], [15600.0, 7.0], [15800.0, 9.0], [16000.0, 15.0], [16200.0, 8.0], [16400.0, 10.0], [17200.0, 10.0], [16800.0, 12.0], [18400.0, 7.0], [18000.0, 11.0], [17600.0, 10.0], [18800.0, 14.0], [19200.0, 11.0], [20000.0, 9.0], [19600.0, 8.0], [20400.0, 16.0], [21200.0, 10.0], [20800.0, 4.0], [22000.0, 8.0], [22400.0, 15.0], [21600.0, 18.0], [23200.0, 8.0], [22800.0, 11.0], [24400.0, 8.0], [24000.0, 12.0], [23600.0, 8.0], [24800.0, 11.0], [25200.0, 11.0], [25600.0, 11.0], [26000.0, 6.0], [26400.0, 19.0], [27600.0, 8.0], [26800.0, 14.0], [27200.0, 7.0], [28400.0, 17.0], [28000.0, 14.0], [29600.0, 16.0], [29200.0, 12.0], [28800.0, 7.0], [30400.0, 8.0], [30000.0, 5.0], [31200.0, 10.0], [30800.0, 5.0], [31600.0, 17.0], [32000.0, 14.0], [32400.0, 8.0], [34400.0, 12.0], [33600.0, 11.0], [32800.0, 14.0], [36000.0, 14.0], [35200.0, 8.0], [36800.0, 8.0], [38400.0, 7.0], [37600.0, 13.0], [40800.0, 11.0], [40000.0, 11.0], [39200.0, 12.0], [42400.0, 15.0], [41600.0, 7.0], [43200.0, 7.0], [44000.0, 9.0], [44800.0, 10.0], [46400.0, 12.0], [45600.0, 13.0], [47200.0, 5.0], [48000.0, 11.0], [48800.0, 13.0], [49600.0, 10.0], [50400.0, 7.0], [52000.0, 8.0], [51200.0, 9.0], [52800.0, 2.0], [54400.0, 2.0], [53600.0, 4.0], [55200.0, 4.0], [56000.0, 2.0], [57600.0, 1.0], [59200.0, 1.0], [34700.0, 14.0], [33900.0, 12.0], [33100.0, 6.0], [35500.0, 9.0], [36300.0, 14.0], [37100.0, 10.0], [37900.0, 11.0], [38700.0, 7.0], [40300.0, 11.0], [39500.0, 9.0], [41900.0, 11.0], [42700.0, 7.0], [41100.0, 15.0], [44300.0, 9.0], [43500.0, 10.0], [45100.0, 9.0], [45900.0, 15.0], [46700.0, 10.0], [47500.0, 12.0], [49100.0, 5.0], [48300.0, 3.0], [49900.0, 5.0], [50700.0, 5.0], [51500.0, 7.0], [53100.0, 3.0], [52300.0, 2.0], [53900.0, 3.0], [54700.0, 1.0], [55500.0, 2.0], [57100.0, 1.0], [56300.0, 2.0], [59500.0, 1.0], [16500.0, 13.0], [17300.0, 10.0], [16900.0, 12.0], [18100.0, 8.0], [17700.0, 16.0], [18900.0, 11.0], [18500.0, 13.0], [19300.0, 14.0], [20100.0, 10.0], [19700.0, 10.0], [20500.0, 16.0], [20900.0, 10.0], [21300.0, 12.0], [22100.0, 13.0], [22500.0, 10.0], [21700.0, 13.0], [22900.0, 8.0], [23300.0, 10.0], [23700.0, 13.0], [24100.0, 10.0], [24500.0, 13.0], [25300.0, 16.0], [24900.0, 3.0], [26100.0, 4.0], [26500.0, 13.0], [25700.0, 9.0], [27300.0, 14.0], [26900.0, 11.0], [27700.0, 11.0], [28100.0, 10.0], [28500.0, 6.0], [29300.0, 13.0], [28900.0, 8.0], [30100.0, 11.0], [30500.0, 11.0], [29700.0, 12.0], [30900.0, 13.0], [31700.0, 11.0], [31300.0, 10.0], [32500.0, 10.0], [32100.0, 10.0], [34600.0, 13.0], [33000.0, 5.0], [33800.0, 13.0], [36200.0, 11.0], [35400.0, 10.0], [37800.0, 6.0], [38600.0, 8.0], [37000.0, 8.0], [40200.0, 11.0], [39400.0, 18.0], [41800.0, 8.0], [42600.0, 7.0], [41000.0, 12.0], [44200.0, 10.0], [43400.0, 11.0], [45000.0, 9.0], [46600.0, 8.0], [45800.0, 7.0], [49000.0, 10.0], [48200.0, 8.0], [47400.0, 7.0], [49800.0, 7.0], [50600.0, 3.0], [53000.0, 3.0], [51400.0, 1.0], [52200.0, 2.0], [54600.0, 2.0], [53800.0, 1.0], [55400.0, 2.0], [58600.0, 1.0], [60200.0, 2.0], [33300.0, 11.0], [34100.0, 10.0], [34900.0, 12.0], [35700.0, 8.0], [36500.0, 12.0], [38100.0, 9.0], [37300.0, 8.0], [38900.0, 11.0], [39700.0, 10.0], [40500.0, 8.0], [42900.0, 11.0], [42100.0, 11.0], [41300.0, 3.0], [44500.0, 9.0], [43700.0, 12.0], [46900.0, 13.0], [46100.0, 7.0], [45300.0, 5.0], [48500.0, 8.0], [47700.0, 9.0], [50100.0, 7.0], [49300.0, 7.0], [50900.0, 4.0], [51700.0, 4.0], [52500.0, 5.0], [54100.0, 3.0], [53300.0, 6.0], [54900.0, 3.0], [55700.0, 1.0], [8700.0, 6.0], [8300.0, 19.0], [8500.0, 13.0], [9100.0, 9.0], [8900.0, 10.0], [9300.0, 16.0], [9500.0, 12.0], [9700.0, 18.0], [10100.0, 13.0], [9900.0, 14.0], [10700.0, 14.0], [10300.0, 10.0], [10500.0, 13.0], [11100.0, 17.0], [10900.0, 5.0], [11500.0, 13.0], [11300.0, 9.0], [11700.0, 9.0], [11900.0, 14.0], [12100.0, 8.0], [12300.0, 13.0], [12700.0, 16.0], [12500.0, 12.0], [13100.0, 8.0], [12900.0, 7.0], [13300.0, 13.0], [13700.0, 15.0], [13500.0, 9.0], [13900.0, 9.0], [14300.0, 13.0], [14100.0, 9.0], [14700.0, 15.0], [14500.0, 15.0], [14900.0, 11.0], [15300.0, 13.0], [15100.0, 8.0], [15700.0, 9.0], [15500.0, 14.0], [15900.0, 9.0], [16300.0, 7.0], [16100.0, 7.0], [17000.0, 12.0], [17400.0, 13.0], [16600.0, 11.0], [17800.0, 13.0], [18200.0, 18.0], [19400.0, 15.0], [19000.0, 8.0], [18600.0, 7.0], [19800.0, 9.0], [20200.0, 11.0], [21000.0, 4.0], [20600.0, 17.0], [21400.0, 11.0], [22200.0, 17.0], [21800.0, 9.0], [23000.0, 16.0], [23400.0, 21.0], [22600.0, 10.0], [24200.0, 15.0], [23800.0, 9.0], [25400.0, 10.0], [25000.0, 10.0], [24600.0, 9.0], [26200.0, 14.0], [26600.0, 8.0], [25800.0, 9.0], [27000.0, 10.0], [27400.0, 12.0], [27800.0, 14.0], [28600.0, 14.0], [28200.0, 11.0], [29000.0, 11.0], [29400.0, 6.0], [29800.0, 12.0], [30200.0, 7.0], [30600.0, 13.0], [31000.0, 12.0], [31400.0, 8.0], [32600.0, 16.0], [31800.0, 9.0], [32200.0, 11.0], [33200.0, 9.0], [34800.0, 7.0], [34000.0, 10.0], [35600.0, 10.0], [36400.0, 6.0], [37200.0, 10.0], [38000.0, 10.0], [38800.0, 11.0], [40400.0, 15.0], [39600.0, 8.0], [42000.0, 13.0], [42800.0, 5.0], [41200.0, 8.0], [44400.0, 9.0], [43600.0, 20.0], [45200.0, 8.0], [46800.0, 11.0], [46000.0, 10.0], [48400.0, 10.0], [47600.0, 7.0], [50000.0, 5.0], [50800.0, 2.0], [49200.0, 2.0], [51600.0, 5.0], [52400.0, 5.0], [53200.0, 2.0], [54800.0, 5.0], [54000.0, 1.0], [56400.0, 1.0], [58000.0, 1.0], [33500.0, 7.0], [34300.0, 6.0], [35900.0, 9.0], [36700.0, 10.0], [35100.0, 8.0], [38300.0, 12.0], [37500.0, 10.0], [39100.0, 12.0], [39900.0, 8.0], [40700.0, 7.0], [41500.0, 13.0], [42300.0, 8.0], [43100.0, 12.0], [43900.0, 11.0], [44700.0, 15.0], [45500.0, 13.0], [47100.0, 7.0], [46300.0, 7.0], [47900.0, 10.0], [48700.0, 7.0], [50300.0, 8.0], [51100.0, 8.0], [49500.0, 10.0], [52700.0, 2.0], [51900.0, 2.0], [53500.0, 1.0], [54300.0, 1.0], [55100.0, 1.0], [55900.0, 3.0], [57500.0, 3.0], [16700.0, 18.0], [17100.0, 10.0], [18300.0, 15.0], [17900.0, 10.0], [17500.0, 10.0], [19100.0, 15.0], [18700.0, 14.0], [19500.0, 7.0], [20300.0, 10.0], [19900.0, 6.0], [21100.0, 7.0], [21500.0, 11.0], [20700.0, 16.0], [22300.0, 13.0], [21900.0, 6.0], [23100.0, 10.0], [22700.0, 7.0], [23500.0, 11.0], [23900.0, 8.0], [24300.0, 11.0], [25500.0, 13.0], [25100.0, 10.0], [24700.0, 12.0], [25900.0, 12.0], [26300.0, 8.0], [26700.0, 11.0], [27100.0, 7.0], [27500.0, 8.0], [28300.0, 9.0], [27900.0, 11.0], [29100.0, 14.0], [29500.0, 10.0], [28700.0, 8.0], [29900.0, 7.0], [30300.0, 13.0], [30700.0, 10.0], [31500.0, 13.0], [31100.0, 14.0], [32300.0, 10.0], [32700.0, 11.0], [31900.0, 6.0], [34200.0, 10.0], [33400.0, 22.0], [36600.0, 8.0], [35000.0, 17.0], [35800.0, 11.0], [38200.0, 11.0], [37400.0, 12.0], [40600.0, 11.0], [39000.0, 8.0], [39800.0, 7.0], [41400.0, 13.0], [42200.0, 13.0], [43000.0, 8.0], [44600.0, 13.0], [43800.0, 6.0], [47000.0, 10.0], [46200.0, 3.0], [45400.0, 9.0], [47800.0, 8.0], [48600.0, 8.0], [49400.0, 8.0], [50200.0, 10.0], [51000.0, 4.0], [51800.0, 3.0], [52600.0, 4.0], [53400.0, 4.0], [54200.0, 5.0], [55800.0, 1.0], [56600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5515.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 122.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5515.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.764705882352942, "minX": 1.65125376E12, "maxY": 74.0, "series": [{"data": [[1.65125502E12, 74.0], [1.65125532E12, 74.0], [1.651254E12, 74.0], [1.6512543E12, 74.0], [1.65125562E12, 74.0], [1.6512546E12, 74.0], [1.6512549E12, 74.0], [1.6512552E12, 74.0], [1.65125568E12, 74.0], [1.6512555E12, 74.0], [1.65125388E12, 42.5470588235294], [1.65125418E12, 74.0], [1.65125448E12, 74.0], [1.65125478E12, 74.0], [1.65125508E12, 74.0], [1.6512558E12, 32.98461538461538], [1.65125538E12, 74.0], [1.65125376E12, 7.764705882352942], [1.65125406E12, 74.0], [1.65125436E12, 74.0], [1.65125556E12, 74.0], [1.65125466E12, 74.0], [1.65125496E12, 74.0], [1.65125526E12, 74.0], [1.65125394E12, 66.41040462427742], [1.65125424E12, 74.0], [1.65125454E12, 74.0], [1.65125484E12, 74.0], [1.65125514E12, 74.0], [1.65125574E12, 73.49700598802394], [1.65125544E12, 74.0], [1.65125382E12, 19.060606060606062], [1.65125412E12, 74.0], [1.65125442E12, 74.0], [1.65125472E12, 74.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512558E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3941.516666666666, "minX": 1.0, "maxY": 50310.0, "series": [{"data": [[2.0, 49389.0], [3.0, 23871.5], [4.0, 23432.5], [5.0, 15441.333333333334], [6.0, 21410.5], [7.0, 15471.0], [8.0, 14476.0], [9.0, 21748.5], [10.0, 3941.516666666666], [11.0, 39463.0], [12.0, 14378.666666666666], [13.0, 15349.333333333334], [14.0, 20323.0], [15.0, 18779.0], [16.0, 20228.5], [17.0, 14853.333333333334], [18.0, 18318.5], [19.0, 13103.666666666666], [20.0, 7125.574074074075], [21.0, 32526.0], [22.0, 16972.666666666668], [23.0, 18262.666666666668], [24.0, 15027.5], [25.0, 13065.333333333334], [26.0, 18385.0], [27.0, 13901.0], [28.0, 15139.5], [29.0, 14686.666666666668], [30.0, 9016.689655172411], [31.0, 14512.0], [32.0, 16692.5], [33.0, 15366.0], [34.0, 17341.5], [35.0, 16295.666666666666], [36.0, 17354.5], [37.0, 17878.5], [38.0, 17621.0], [39.0, 18142.666666666668], [40.0, 10833.948275862069], [41.0, 15079.5], [42.0, 13857.5], [43.0, 14539.333333333334], [44.0, 14604.333333333334], [45.0, 16015.5], [46.0, 15840.0], [47.0, 15489.0], [48.0, 16779.666666666668], [49.0, 15342.5], [50.0, 16959.40677966102], [51.0, 18732.0], [52.0, 17254.333333333336], [53.0, 4244.5], [54.0, 17900.333333333336], [55.0, 4387.666666666667], [56.0, 25732.5], [57.0, 22734.0], [59.0, 20142.0], [58.0, 43848.0], [60.0, 17075.96666666667], [61.0, 34028.0], [62.0, 29547.5], [63.0, 29282.666666666664], [64.0, 35983.333333333336], [65.0, 31800.5], [66.0, 29540.5], [67.0, 31912.25], [68.0, 33709.333333333336], [69.0, 30770.666666666668], [70.0, 20755.08196721312], [71.0, 25631.666666666668], [72.0, 29346.333333333332], [73.0, 29871.857142857145], [74.0, 26322.1867588933], [1.0, 50310.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[70.52402908317079, 25134.46054264948]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 44.11666666666667, "minX": 1.65125376E12, "maxY": 543.2333333333333, "series": [{"data": [[1.65125502E12, 533.8666666666667], [1.65125532E12, 536.35], [1.651254E12, 527.1], [1.6512543E12, 522.8666666666667], [1.65125562E12, 516.7833333333333], [1.6512546E12, 532.45], [1.6512549E12, 527.5833333333334], [1.6512552E12, 518.2666666666667], [1.65125568E12, 527.95], [1.6512555E12, 540.0], [1.65125388E12, 527.9666666666667], [1.65125418E12, 535.8333333333334], [1.65125448E12, 528.3833333333333], [1.65125478E12, 521.7333333333333], [1.65125508E12, 529.1166666666667], [1.6512558E12, 203.0], [1.65125538E12, 525.75], [1.65125376E12, 51.88333333333333], [1.65125406E12, 525.9333333333333], [1.65125436E12, 503.76666666666665], [1.65125556E12, 528.7166666666667], [1.65125466E12, 515.55], [1.65125496E12, 534.6], [1.65125526E12, 528.4833333333333], [1.65125394E12, 543.2333333333333], [1.65125424E12, 531.0], [1.65125454E12, 532.95], [1.65125484E12, 535.9], [1.65125514E12, 530.1166666666667], [1.65125574E12, 523.85], [1.65125544E12, 524.3666666666667], [1.65125382E12, 512.85], [1.65125412E12, 530.9166666666666], [1.65125442E12, 526.75], [1.65125472E12, 511.26666666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125502E12, 444.48333333333335], [1.65125532E12, 444.68333333333334], [1.651254E12, 439.25], [1.6512543E12, 434.21666666666664], [1.65125562E12, 429.01666666666665], [1.6512546E12, 442.03333333333336], [1.6512549E12, 439.28333333333336], [1.6512552E12, 429.15], [1.65125568E12, 439.31666666666666], [1.6512555E12, 447.3333333333333], [1.65125388E12, 441.7], [1.65125418E12, 444.65], [1.65125448E12, 439.35], [1.65125478E12, 434.1166666666667], [1.65125508E12, 439.4166666666667], [1.6512558E12, 168.95], [1.65125538E12, 436.8], [1.65125376E12, 44.11666666666667], [1.65125406E12, 436.8], [1.65125436E12, 418.5833333333333], [1.65125556E12, 439.3833333333333], [1.65125466E12, 428.9166666666667], [1.65125496E12, 442.2], [1.65125526E12, 439.35], [1.65125394E12, 449.95], [1.65125424E12, 441.9], [1.65125454E12, 442.06666666666666], [1.65125484E12, 444.65], [1.65125514E12, 441.8333333333333], [1.65125574E12, 434.28333333333336], [1.65125544E12, 436.6666666666667], [1.65125382E12, 428.85], [1.65125412E12, 441.9], [1.65125442E12, 436.8666666666667], [1.65125472E12, 418.68333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512558E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1553.8235294117646, "minX": 1.65125376E12, "maxY": 31511.47692307691, "series": [{"data": [[1.65125502E12, 25870.736842105252], [1.65125532E12, 28242.257309941524], [1.651254E12, 23456.201183431967], [1.6512543E12, 26090.275449101795], [1.65125562E12, 26800.14545454545], [1.6512546E12, 24840.888235294122], [1.6512549E12, 26106.189349112417], [1.6512552E12, 26883.842424242426], [1.65125568E12, 26239.207100591713], [1.6512555E12, 27884.296511627897], [1.65125388E12, 13156.076470588236], [1.65125418E12, 26326.883040935685], [1.65125448E12, 26450.63313609469], [1.65125478E12, 27603.215568862277], [1.65125508E12, 26355.06508875739], [1.6512558E12, 31511.47692307691], [1.65125538E12, 23981.69047619048], [1.65125376E12, 1553.8235294117646], [1.65125406E12, 27134.767857142862], [1.65125436E12, 26604.96273291926], [1.65125556E12, 24274.65088757395], [1.65125466E12, 27084.909090909077], [1.65125496E12, 27564.29999999999], [1.65125526E12, 26060.875739644966], [1.65125394E12, 20680.01734104047], [1.65125424E12, 26677.32941176471], [1.65125454E12, 26507.588235294123], [1.65125484E12, 25599.42690058479], [1.65125514E12, 25315.25882352941], [1.65125574E12, 27412.640718562874], [1.65125544E12, 26484.0], [1.65125382E12, 5759.39393939394], [1.65125412E12, 25931.011764705876], [1.65125442E12, 27428.446428571424], [1.65125472E12, 26471.416149068322]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512558E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1553.5882352941176, "minX": 1.65125376E12, "maxY": 31511.461538461535, "series": [{"data": [[1.65125502E12, 25870.7134502924], [1.65125532E12, 28242.245614035084], [1.651254E12, 23456.15976331361], [1.6512543E12, 26090.26946107784], [1.65125562E12, 26800.13333333332], [1.6512546E12, 24840.88235294117], [1.6512549E12, 26106.165680473376], [1.6512552E12, 26883.824242424238], [1.65125568E12, 26239.19526627219], [1.6512555E12, 27884.26162790697], [1.65125388E12, 13156.011764705885], [1.65125418E12, 26326.85964912281], [1.65125448E12, 26450.621301775136], [1.65125478E12, 27603.20359281436], [1.65125508E12, 26355.04733727811], [1.6512558E12, 31511.461538461535], [1.65125538E12, 23981.678571428587], [1.65125376E12, 1553.5882352941176], [1.65125406E12, 27134.750000000004], [1.65125436E12, 26604.95031055901], [1.65125556E12, 24274.644970414203], [1.65125466E12, 27084.909090909077], [1.65125496E12, 27564.29411764705], [1.65125526E12, 26060.86982248521], [1.65125394E12, 20679.98265895954], [1.65125424E12, 26677.32352941177], [1.65125454E12, 26507.57647058823], [1.65125484E12, 25599.397660818708], [1.65125514E12, 25315.24705882355], [1.65125574E12, 27412.61676646707], [1.65125544E12, 26483.994047619042], [1.65125382E12, 5759.345454545454], [1.65125412E12, 25930.98235294117], [1.65125442E12, 27428.428571428576], [1.65125472E12, 26471.39751552794]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512558E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.89940828402367, "minX": 1.65125376E12, "maxY": 38.94117647058823, "series": [{"data": [[1.65125502E12, 7.16374269005848], [1.65125532E12, 7.263157894736839], [1.651254E12, 8.710059171597635], [1.6512543E12, 7.700598802395211], [1.65125562E12, 6.9757575757575765], [1.6512546E12, 7.288235294117649], [1.6512549E12, 6.89940828402367], [1.6512552E12, 7.0969696969696985], [1.65125568E12, 7.502958579881656], [1.6512555E12, 7.087209302325583], [1.65125388E12, 9.476470588235296], [1.65125418E12, 7.660818713450292], [1.65125448E12, 7.1183431952662755], [1.65125478E12, 7.520958083832333], [1.65125508E12, 7.177514792899405], [1.6512558E12, 7.076923076923077], [1.65125538E12, 7.327380952380951], [1.65125376E12, 38.94117647058823], [1.65125406E12, 8.690476190476184], [1.65125436E12, 7.366459627329189], [1.65125556E12, 7.059171597633137], [1.65125466E12, 7.315151515151518], [1.65125496E12, 7.264705882352941], [1.65125526E12, 7.076923076923078], [1.65125394E12, 8.705202312138727], [1.65125424E12, 7.829411764705883], [1.65125454E12, 7.241176470588234], [1.65125484E12, 6.9707602339181305], [1.65125514E12, 7.317647058823529], [1.65125574E12, 7.293413173652692], [1.65125544E12, 7.291666666666667], [1.65125382E12, 11.696969696969699], [1.65125412E12, 8.011764705882351], [1.65125442E12, 7.75595238095238], [1.65125472E12, 7.074534161490681]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512558E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 431.0, "minX": 1.65125376E12, "maxY": 60206.0, "series": [{"data": [[1.65125502E12, 54542.0], [1.65125532E12, 51579.0], [1.651254E12, 51577.0], [1.6512543E12, 54410.0], [1.65125562E12, 53492.0], [1.6512546E12, 54296.0], [1.6512549E12, 58027.0], [1.6512552E12, 56991.0], [1.65125568E12, 56021.0], [1.6512555E12, 52673.0], [1.65125388E12, 30450.0], [1.65125418E12, 52980.0], [1.65125448E12, 52404.0], [1.65125478E12, 60206.0], [1.65125508E12, 56316.0], [1.6512558E12, 54126.0], [1.65125538E12, 53613.0], [1.65125376E12, 3390.0], [1.65125406E12, 54192.0], [1.65125436E12, 56940.0], [1.65125556E12, 53706.0], [1.65125466E12, 57683.0], [1.65125496E12, 57735.0], [1.65125526E12, 55339.0], [1.65125394E12, 44498.0], [1.65125424E12, 52565.0], [1.65125454E12, 55207.0], [1.65125484E12, 56917.0], [1.65125514E12, 54594.0], [1.65125574E12, 54866.0], [1.65125544E12, 53658.0], [1.65125382E12, 17301.0], [1.65125412E12, 53112.0], [1.65125442E12, 52935.0], [1.65125472E12, 59503.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125502E12, 46678.0], [1.65125532E12, 47530.4], [1.651254E12, 44631.0], [1.6512543E12, 47443.600000000006], [1.65125562E12, 46332.4], [1.6512546E12, 45787.1], [1.6512549E12, 46883.0], [1.6512552E12, 48219.200000000004], [1.65125568E12, 47884.0], [1.6512555E12, 47512.400000000016], [1.65125388E12, 23726.200000000004], [1.65125418E12, 46951.40000000001], [1.65125448E12, 47532.0], [1.65125478E12, 48336.200000000026], [1.65125508E12, 47220.0], [1.6512558E12, 49368.0], [1.65125538E12, 46309.3], [1.65125376E12, 2937.9999999999995], [1.65125406E12, 47008.6], [1.65125436E12, 49432.200000000004], [1.65125556E12, 45988.0], [1.65125466E12, 46902.6], [1.65125496E12, 46835.200000000004], [1.65125526E12, 46493.0], [1.65125394E12, 35351.0], [1.65125424E12, 47066.700000000004], [1.65125454E12, 47866.0], [1.65125484E12, 45198.200000000004], [1.65125514E12, 46256.200000000004], [1.65125574E12, 46818.8], [1.65125544E12, 46272.6], [1.65125382E12, 11570.8], [1.65125412E12, 45947.5], [1.65125442E12, 46217.5], [1.65125472E12, 49349.00000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125502E12, 54347.6], [1.65125532E12, 51429.24], [1.651254E12, 50705.500000000015], [1.6512543E12, 54206.0], [1.65125562E12, 52797.020000000004], [1.6512546E12, 54234.229999999996], [1.6512549E12, 57303.20000000001], [1.6512552E12, 56405.58], [1.65125568E12, 55813.100000000006], [1.6512555E12, 52100.68000000001], [1.65125388E12, 30259.01], [1.65125418E12, 51966.96], [1.65125448E12, 52051.90000000001], [1.65125478E12, 59168.31999999999], [1.65125508E12, 56071.700000000004], [1.6512558E12, 54126.0], [1.65125538E12, 53005.8], [1.65125376E12, 3390.0], [1.65125406E12, 54004.32], [1.65125436E12, 56364.02], [1.65125556E12, 53213.90000000001], [1.65125466E12, 57358.94], [1.65125496E12, 56963.22999999999], [1.65125526E12, 54576.70000000001], [1.65125394E12, 44222.719999999994], [1.65125424E12, 52202.189999999995], [1.65125454E12, 54985.479999999996], [1.65125484E12, 56126.44], [1.65125514E12, 54368.93], [1.65125574E12, 54148.59999999999], [1.65125544E12, 52754.100000000006], [1.65125382E12, 16918.86], [1.65125412E12, 53026.799999999996], [1.65125442E12, 52625.880000000005], [1.65125472E12, 59375.509999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125502E12, 50361.200000000004], [1.65125532E12, 49560.6], [1.651254E12, 47888.5], [1.6512543E12, 49896.2], [1.65125562E12, 49271.299999999996], [1.6512546E12, 48915.14999999999], [1.6512549E12, 52825.0], [1.6512552E12, 51176.49999999999], [1.65125568E12, 50528.5], [1.6512555E12, 49631.899999999994], [1.65125388E12, 26948.24999999999], [1.65125418E12, 49294.200000000004], [1.65125448E12, 49100.5], [1.65125478E12, 54148.99999999999], [1.65125508E12, 52818.5], [1.6512558E12, 50718.799999999996], [1.65125538E12, 48785.7], [1.65125376E12, 3390.0], [1.65125406E12, 49965.649999999994], [1.65125436E12, 52004.100000000006], [1.65125556E12, 48831.0], [1.65125466E12, 51639.19999999999], [1.65125496E12, 52338.899999999994], [1.65125526E12, 49801.5], [1.65125394E12, 39126.7], [1.65125424E12, 49286.25], [1.65125454E12, 51201.99999999999], [1.65125484E12, 51581.4], [1.65125514E12, 49968.74999999999], [1.65125574E12, 49589.8], [1.65125544E12, 49494.399999999994], [1.65125382E12, 13087.199999999997], [1.65125412E12, 49054.44999999999], [1.65125442E12, 49415.999999999985], [1.65125472E12, 55080.799999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125502E12, 1331.0], [1.65125532E12, 1097.0], [1.651254E12, 997.0], [1.6512543E12, 1050.0], [1.65125562E12, 1144.0], [1.6512546E12, 932.0], [1.6512549E12, 1014.0], [1.6512552E12, 1135.0], [1.65125568E12, 975.0], [1.6512555E12, 980.0], [1.65125388E12, 767.0], [1.65125418E12, 1104.0], [1.65125448E12, 1146.0], [1.65125478E12, 942.0], [1.65125508E12, 870.0], [1.6512558E12, 3592.0], [1.65125538E12, 1180.0], [1.65125376E12, 431.0], [1.65125406E12, 1030.0], [1.65125436E12, 1307.0], [1.65125556E12, 1111.0], [1.65125466E12, 965.0], [1.65125496E12, 1011.0], [1.65125526E12, 1151.0], [1.65125394E12, 1266.0], [1.65125424E12, 1041.0], [1.65125454E12, 1093.0], [1.65125484E12, 999.0], [1.65125514E12, 1336.0], [1.65125574E12, 1054.0], [1.65125544E12, 1047.0], [1.65125382E12, 827.0], [1.65125412E12, 945.0], [1.65125442E12, 830.0], [1.65125472E12, 999.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125502E12, 24722.0], [1.65125532E12, 30209.0], [1.651254E12, 21307.0], [1.6512543E12, 26401.0], [1.65125562E12, 27375.0], [1.6512546E12, 23106.5], [1.6512549E12, 25106.0], [1.6512552E12, 26931.0], [1.65125568E12, 26396.0], [1.6512555E12, 29843.5], [1.65125388E12, 12872.5], [1.65125418E12, 26589.0], [1.65125448E12, 26697.0], [1.65125478E12, 27848.0], [1.65125508E12, 26707.0], [1.6512558E12, 32526.0], [1.65125538E12, 22447.0], [1.65125376E12, 1234.0], [1.65125406E12, 26975.0], [1.65125436E12, 24207.0], [1.65125556E12, 22257.0], [1.65125466E12, 26826.0], [1.65125496E12, 28390.5], [1.65125526E12, 25482.0], [1.65125394E12, 20649.0], [1.65125424E12, 26749.5], [1.65125454E12, 26674.0], [1.65125484E12, 25392.0], [1.65125514E12, 24469.5], [1.65125574E12, 27808.0], [1.65125544E12, 26681.0], [1.65125382E12, 4711.0], [1.65125412E12, 25910.5], [1.65125442E12, 28502.5], [1.65125472E12, 24469.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512558E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 24134.0, "minX": 1.0, "maxY": 60259.0, "series": [{"data": [[2.0, 24134.0], [4.0, 24793.0], [1.0, 41154.0], [3.0, 24344.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60259.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 24134.0, "minX": 1.0, "maxY": 60259.0, "series": [{"data": [[2.0, 24134.0], [4.0, 24793.0], [1.0, 41154.0], [3.0, 24344.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60259.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125376E12, "maxY": 3.25, "series": [{"data": [[1.65125502E12, 2.85], [1.65125532E12, 2.85], [1.651254E12, 2.816666666666667], [1.6512543E12, 2.783333333333333], [1.65125562E12, 2.75], [1.6512546E12, 2.8333333333333335], [1.6512549E12, 2.816666666666667], [1.6512552E12, 2.75], [1.65125568E12, 2.816666666666667], [1.6512555E12, 2.8666666666666667], [1.65125388E12, 3.25], [1.65125418E12, 2.85], [1.65125448E12, 2.816666666666667], [1.65125478E12, 2.783333333333333], [1.65125508E12, 2.816666666666667], [1.6512558E12, 0.016666666666666666], [1.65125538E12, 2.8], [1.65125376E12, 0.45], [1.65125406E12, 2.8], [1.65125436E12, 2.683333333333333], [1.65125556E12, 2.816666666666667], [1.65125466E12, 2.75], [1.65125496E12, 2.8333333333333335], [1.65125526E12, 2.816666666666667], [1.65125394E12, 3.2], [1.65125424E12, 2.8333333333333335], [1.65125454E12, 2.8333333333333335], [1.65125484E12, 2.85], [1.65125514E12, 2.8333333333333335], [1.65125574E12, 2.6166666666666667], [1.65125544E12, 2.8], [1.65125382E12, 3.0833333333333335], [1.65125412E12, 2.8333333333333335], [1.65125442E12, 2.8], [1.65125472E12, 2.683333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512558E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125376E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125502E12, 2.85], [1.65125532E12, 2.85], [1.651254E12, 2.816666666666667], [1.6512543E12, 2.783333333333333], [1.65125562E12, 2.75], [1.6512546E12, 2.8333333333333335], [1.6512549E12, 2.816666666666667], [1.6512552E12, 2.75], [1.65125568E12, 2.816666666666667], [1.6512555E12, 2.8666666666666667], [1.65125388E12, 2.8333333333333335], [1.65125418E12, 2.85], [1.65125448E12, 2.816666666666667], [1.65125478E12, 2.783333333333333], [1.65125508E12, 2.816666666666667], [1.6512558E12, 1.0833333333333333], [1.65125538E12, 2.8], [1.65125376E12, 0.2833333333333333], [1.65125406E12, 2.8], [1.65125436E12, 2.683333333333333], [1.65125556E12, 2.816666666666667], [1.65125466E12, 2.75], [1.65125496E12, 2.8333333333333335], [1.65125526E12, 2.816666666666667], [1.65125394E12, 2.8833333333333333], [1.65125424E12, 2.8333333333333335], [1.65125454E12, 2.8333333333333335], [1.65125484E12, 2.85], [1.65125514E12, 2.8333333333333335], [1.65125574E12, 2.783333333333333], [1.65125544E12, 2.8], [1.65125382E12, 2.75], [1.65125412E12, 2.8333333333333335], [1.65125442E12, 2.8], [1.65125472E12, 2.6666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65125472E12, 0.016666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6512558E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125376E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125502E12, 2.85], [1.65125532E12, 2.85], [1.651254E12, 2.816666666666667], [1.6512543E12, 2.783333333333333], [1.65125562E12, 2.75], [1.6512546E12, 2.8333333333333335], [1.6512549E12, 2.816666666666667], [1.6512552E12, 2.75], [1.65125568E12, 2.816666666666667], [1.6512555E12, 2.8666666666666667], [1.65125388E12, 2.8333333333333335], [1.65125418E12, 2.85], [1.65125448E12, 2.816666666666667], [1.65125478E12, 2.783333333333333], [1.65125508E12, 2.816666666666667], [1.6512558E12, 1.0833333333333333], [1.65125538E12, 2.8], [1.65125376E12, 0.2833333333333333], [1.65125406E12, 2.8], [1.65125436E12, 2.683333333333333], [1.65125556E12, 2.816666666666667], [1.65125466E12, 2.75], [1.65125496E12, 2.8333333333333335], [1.65125526E12, 2.816666666666667], [1.65125394E12, 2.8833333333333333], [1.65125424E12, 2.8333333333333335], [1.65125454E12, 2.8333333333333335], [1.65125484E12, 2.85], [1.65125514E12, 2.8333333333333335], [1.65125574E12, 2.783333333333333], [1.65125544E12, 2.8], [1.65125382E12, 2.75], [1.65125412E12, 2.8333333333333335], [1.65125442E12, 2.8], [1.65125472E12, 2.6666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65125472E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512558E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125376E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125502E12, 2.85], [1.65125532E12, 2.85], [1.651254E12, 2.816666666666667], [1.6512543E12, 2.783333333333333], [1.65125562E12, 2.75], [1.6512546E12, 2.8333333333333335], [1.6512549E12, 2.816666666666667], [1.6512552E12, 2.75], [1.65125568E12, 2.816666666666667], [1.6512555E12, 2.8666666666666667], [1.65125388E12, 2.8333333333333335], [1.65125418E12, 2.85], [1.65125448E12, 2.816666666666667], [1.65125478E12, 2.783333333333333], [1.65125508E12, 2.816666666666667], [1.6512558E12, 1.0833333333333333], [1.65125538E12, 2.8], [1.65125376E12, 0.2833333333333333], [1.65125406E12, 2.8], [1.65125436E12, 2.683333333333333], [1.65125556E12, 2.816666666666667], [1.65125466E12, 2.75], [1.65125496E12, 2.8333333333333335], [1.65125526E12, 2.816666666666667], [1.65125394E12, 2.8833333333333333], [1.65125424E12, 2.8333333333333335], [1.65125454E12, 2.8333333333333335], [1.65125484E12, 2.85], [1.65125514E12, 2.8333333333333335], [1.65125574E12, 2.783333333333333], [1.65125544E12, 2.8], [1.65125382E12, 2.75], [1.65125412E12, 2.8333333333333335], [1.65125442E12, 2.8], [1.65125472E12, 2.6666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65125472E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6512558E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


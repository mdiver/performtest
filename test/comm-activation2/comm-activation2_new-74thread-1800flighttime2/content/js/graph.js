/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 769.0, "minX": 0.0, "maxY": 60452.0, "series": [{"data": [[0.0, 769.0], [0.1, 822.0], [0.2, 921.0], [0.3, 942.0], [0.4, 964.0], [0.5, 994.0], [0.6, 1033.0], [0.7, 1053.0], [0.8, 1084.0], [0.9, 1102.0], [1.0, 1131.0], [1.1, 1149.0], [1.2, 1159.0], [1.3, 1167.0], [1.4, 1190.0], [1.5, 1206.0], [1.6, 1253.0], [1.7, 1301.0], [1.8, 1334.0], [1.9, 1355.0], [2.0, 1371.0], [2.1, 1392.0], [2.2, 1410.0], [2.3, 1436.0], [2.4, 1494.0], [2.5, 1517.0], [2.6, 1551.0], [2.7, 1577.0], [2.8, 1611.0], [2.9, 1655.0], [3.0, 1701.0], [3.1, 1751.0], [3.2, 1813.0], [3.3, 1871.0], [3.4, 1896.0], [3.5, 1965.0], [3.6, 2011.0], [3.7, 2070.0], [3.8, 2130.0], [3.9, 2171.0], [4.0, 2193.0], [4.1, 2231.0], [4.2, 2279.0], [4.3, 2309.0], [4.4, 2375.0], [4.5, 2421.0], [4.6, 2463.0], [4.7, 2517.0], [4.8, 2548.0], [4.9, 2589.0], [5.0, 2635.0], [5.1, 2664.0], [5.2, 2735.0], [5.3, 2748.0], [5.4, 2768.0], [5.5, 2803.0], [5.6, 2839.0], [5.7, 2883.0], [5.8, 2920.0], [5.9, 2943.0], [6.0, 2970.0], [6.1, 2984.0], [6.2, 3013.0], [6.3, 3060.0], [6.4, 3108.0], [6.5, 3142.0], [6.6, 3227.0], [6.7, 3310.0], [6.8, 3342.0], [6.9, 3406.0], [7.0, 3431.0], [7.1, 3442.0], [7.2, 3465.0], [7.3, 3555.0], [7.4, 3596.0], [7.5, 3619.0], [7.6, 3666.0], [7.7, 3727.0], [7.8, 3777.0], [7.9, 3829.0], [8.0, 3865.0], [8.1, 3930.0], [8.2, 3983.0], [8.3, 4026.0], [8.4, 4045.0], [8.5, 4104.0], [8.6, 4152.0], [8.7, 4196.0], [8.8, 4266.0], [8.9, 4283.0], [9.0, 4325.0], [9.1, 4357.0], [9.2, 4445.0], [9.3, 4473.0], [9.4, 4514.0], [9.5, 4539.0], [9.6, 4585.0], [9.7, 4634.0], [9.8, 4677.0], [9.9, 4708.0], [10.0, 4726.0], [10.1, 4787.0], [10.2, 4829.0], [10.3, 4929.0], [10.4, 4963.0], [10.5, 4987.0], [10.6, 5029.0], [10.7, 5072.0], [10.8, 5099.0], [10.9, 5172.0], [11.0, 5201.0], [11.1, 5213.0], [11.2, 5235.0], [11.3, 5306.0], [11.4, 5359.0], [11.5, 5391.0], [11.6, 5408.0], [11.7, 5449.0], [11.8, 5506.0], [11.9, 5586.0], [12.0, 5609.0], [12.1, 5678.0], [12.2, 5740.0], [12.3, 5756.0], [12.4, 5795.0], [12.5, 5818.0], [12.6, 5852.0], [12.7, 5959.0], [12.8, 6003.0], [12.9, 6028.0], [13.0, 6056.0], [13.1, 6087.0], [13.2, 6103.0], [13.3, 6146.0], [13.4, 6196.0], [13.5, 6252.0], [13.6, 6339.0], [13.7, 6401.0], [13.8, 6424.0], [13.9, 6448.0], [14.0, 6495.0], [14.1, 6598.0], [14.2, 6677.0], [14.3, 6700.0], [14.4, 6712.0], [14.5, 6729.0], [14.6, 6815.0], [14.7, 6870.0], [14.8, 6884.0], [14.9, 6904.0], [15.0, 6958.0], [15.1, 6998.0], [15.2, 7057.0], [15.3, 7110.0], [15.4, 7157.0], [15.5, 7212.0], [15.6, 7260.0], [15.7, 7286.0], [15.8, 7357.0], [15.9, 7402.0], [16.0, 7415.0], [16.1, 7478.0], [16.2, 7521.0], [16.3, 7548.0], [16.4, 7614.0], [16.5, 7658.0], [16.6, 7703.0], [16.7, 7741.0], [16.8, 7755.0], [16.9, 7768.0], [17.0, 7790.0], [17.1, 7829.0], [17.2, 7889.0], [17.3, 7930.0], [17.4, 7969.0], [17.5, 8035.0], [17.6, 8073.0], [17.7, 8139.0], [17.8, 8196.0], [17.9, 8227.0], [18.0, 8313.0], [18.1, 8390.0], [18.2, 8434.0], [18.3, 8474.0], [18.4, 8490.0], [18.5, 8497.0], [18.6, 8567.0], [18.7, 8607.0], [18.8, 8641.0], [18.9, 8662.0], [19.0, 8684.0], [19.1, 8696.0], [19.2, 8748.0], [19.3, 8797.0], [19.4, 8835.0], [19.5, 8848.0], [19.6, 8884.0], [19.7, 8897.0], [19.8, 8946.0], [19.9, 9015.0], [20.0, 9056.0], [20.1, 9148.0], [20.2, 9239.0], [20.3, 9252.0], [20.4, 9317.0], [20.5, 9393.0], [20.6, 9432.0], [20.7, 9497.0], [20.8, 9515.0], [20.9, 9557.0], [21.0, 9574.0], [21.1, 9595.0], [21.2, 9641.0], [21.3, 9732.0], [21.4, 9756.0], [21.5, 9776.0], [21.6, 9807.0], [21.7, 9868.0], [21.8, 9904.0], [21.9, 9937.0], [22.0, 9977.0], [22.1, 10024.0], [22.2, 10058.0], [22.3, 10113.0], [22.4, 10126.0], [22.5, 10219.0], [22.6, 10246.0], [22.7, 10272.0], [22.8, 10358.0], [22.9, 10424.0], [23.0, 10498.0], [23.1, 10535.0], [23.2, 10570.0], [23.3, 10603.0], [23.4, 10624.0], [23.5, 10657.0], [23.6, 10676.0], [23.7, 10719.0], [23.8, 10766.0], [23.9, 10801.0], [24.0, 10848.0], [24.1, 10913.0], [24.2, 10927.0], [24.3, 10974.0], [24.4, 11056.0], [24.5, 11083.0], [24.6, 11133.0], [24.7, 11163.0], [24.8, 11190.0], [24.9, 11268.0], [25.0, 11311.0], [25.1, 11335.0], [25.2, 11372.0], [25.3, 11441.0], [25.4, 11529.0], [25.5, 11565.0], [25.6, 11611.0], [25.7, 11678.0], [25.8, 11760.0], [25.9, 11807.0], [26.0, 11848.0], [26.1, 11902.0], [26.2, 11936.0], [26.3, 12017.0], [26.4, 12051.0], [26.5, 12142.0], [26.6, 12187.0], [26.7, 12209.0], [26.8, 12263.0], [26.9, 12290.0], [27.0, 12356.0], [27.1, 12419.0], [27.2, 12448.0], [27.3, 12516.0], [27.4, 12525.0], [27.5, 12542.0], [27.6, 12602.0], [27.7, 12638.0], [27.8, 12683.0], [27.9, 12708.0], [28.0, 12752.0], [28.1, 12786.0], [28.2, 12810.0], [28.3, 12846.0], [28.4, 12876.0], [28.5, 12940.0], [28.6, 12979.0], [28.7, 13042.0], [28.8, 13105.0], [28.9, 13127.0], [29.0, 13180.0], [29.1, 13206.0], [29.2, 13264.0], [29.3, 13330.0], [29.4, 13359.0], [29.5, 13395.0], [29.6, 13459.0], [29.7, 13573.0], [29.8, 13593.0], [29.9, 13611.0], [30.0, 13653.0], [30.1, 13695.0], [30.2, 13762.0], [30.3, 13821.0], [30.4, 13855.0], [30.5, 13902.0], [30.6, 13922.0], [30.7, 14001.0], [30.8, 14042.0], [30.9, 14106.0], [31.0, 14143.0], [31.1, 14164.0], [31.2, 14203.0], [31.3, 14257.0], [31.4, 14289.0], [31.5, 14338.0], [31.6, 14376.0], [31.7, 14445.0], [31.8, 14506.0], [31.9, 14538.0], [32.0, 14590.0], [32.1, 14645.0], [32.2, 14692.0], [32.3, 14743.0], [32.4, 14781.0], [32.5, 14852.0], [32.6, 14885.0], [32.7, 14953.0], [32.8, 15005.0], [32.9, 15043.0], [33.0, 15107.0], [33.1, 15141.0], [33.2, 15162.0], [33.3, 15182.0], [33.4, 15239.0], [33.5, 15297.0], [33.6, 15326.0], [33.7, 15360.0], [33.8, 15395.0], [33.9, 15435.0], [34.0, 15469.0], [34.1, 15539.0], [34.2, 15584.0], [34.3, 15626.0], [34.4, 15669.0], [34.5, 15717.0], [34.6, 15764.0], [34.7, 15776.0], [34.8, 15824.0], [34.9, 15855.0], [35.0, 15906.0], [35.1, 16001.0], [35.2, 16087.0], [35.3, 16135.0], [35.4, 16200.0], [35.5, 16235.0], [35.6, 16289.0], [35.7, 16321.0], [35.8, 16396.0], [35.9, 16430.0], [36.0, 16481.0], [36.1, 16550.0], [36.2, 16585.0], [36.3, 16627.0], [36.4, 16712.0], [36.5, 16748.0], [36.6, 16811.0], [36.7, 16850.0], [36.8, 16866.0], [36.9, 16897.0], [37.0, 16930.0], [37.1, 16984.0], [37.2, 17061.0], [37.3, 17073.0], [37.4, 17106.0], [37.5, 17138.0], [37.6, 17190.0], [37.7, 17233.0], [37.8, 17271.0], [37.9, 17346.0], [38.0, 17403.0], [38.1, 17416.0], [38.2, 17446.0], [38.3, 17482.0], [38.4, 17546.0], [38.5, 17608.0], [38.6, 17678.0], [38.7, 17734.0], [38.8, 17777.0], [38.9, 17818.0], [39.0, 17888.0], [39.1, 17935.0], [39.2, 18009.0], [39.3, 18076.0], [39.4, 18105.0], [39.5, 18150.0], [39.6, 18170.0], [39.7, 18225.0], [39.8, 18277.0], [39.9, 18311.0], [40.0, 18361.0], [40.1, 18407.0], [40.2, 18426.0], [40.3, 18456.0], [40.4, 18508.0], [40.5, 18533.0], [40.6, 18572.0], [40.7, 18611.0], [40.8, 18657.0], [40.9, 18746.0], [41.0, 18803.0], [41.1, 18892.0], [41.2, 18957.0], [41.3, 19001.0], [41.4, 19048.0], [41.5, 19095.0], [41.6, 19153.0], [41.7, 19204.0], [41.8, 19260.0], [41.9, 19313.0], [42.0, 19355.0], [42.1, 19374.0], [42.2, 19425.0], [42.3, 19508.0], [42.4, 19542.0], [42.5, 19580.0], [42.6, 19643.0], [42.7, 19675.0], [42.8, 19736.0], [42.9, 19765.0], [43.0, 19812.0], [43.1, 19846.0], [43.2, 19899.0], [43.3, 19939.0], [43.4, 19961.0], [43.5, 20051.0], [43.6, 20086.0], [43.7, 20150.0], [43.8, 20199.0], [43.9, 20265.0], [44.0, 20298.0], [44.1, 20366.0], [44.2, 20441.0], [44.3, 20488.0], [44.4, 20542.0], [44.5, 20549.0], [44.6, 20566.0], [44.7, 20608.0], [44.8, 20670.0], [44.9, 20700.0], [45.0, 20736.0], [45.1, 20785.0], [45.2, 20856.0], [45.3, 20916.0], [45.4, 20933.0], [45.5, 20988.0], [45.6, 21005.0], [45.7, 21085.0], [45.8, 21128.0], [45.9, 21222.0], [46.0, 21261.0], [46.1, 21291.0], [46.2, 21332.0], [46.3, 21401.0], [46.4, 21482.0], [46.5, 21572.0], [46.6, 21667.0], [46.7, 21699.0], [46.8, 21719.0], [46.9, 21761.0], [47.0, 21778.0], [47.1, 21835.0], [47.2, 21863.0], [47.3, 21901.0], [47.4, 21947.0], [47.5, 22000.0], [47.6, 22035.0], [47.7, 22089.0], [47.8, 22171.0], [47.9, 22205.0], [48.0, 22256.0], [48.1, 22309.0], [48.2, 22359.0], [48.3, 22419.0], [48.4, 22468.0], [48.5, 22481.0], [48.6, 22535.0], [48.7, 22605.0], [48.8, 22704.0], [48.9, 22728.0], [49.0, 22785.0], [49.1, 22815.0], [49.2, 22891.0], [49.3, 22935.0], [49.4, 22957.0], [49.5, 23021.0], [49.6, 23060.0], [49.7, 23129.0], [49.8, 23210.0], [49.9, 23242.0], [50.0, 23273.0], [50.1, 23311.0], [50.2, 23353.0], [50.3, 23420.0], [50.4, 23440.0], [50.5, 23475.0], [50.6, 23558.0], [50.7, 23607.0], [50.8, 23679.0], [50.9, 23705.0], [51.0, 23758.0], [51.1, 23787.0], [51.2, 23833.0], [51.3, 23888.0], [51.4, 23946.0], [51.5, 23994.0], [51.6, 24060.0], [51.7, 24127.0], [51.8, 24159.0], [51.9, 24223.0], [52.0, 24289.0], [52.1, 24365.0], [52.2, 24397.0], [52.3, 24413.0], [52.4, 24487.0], [52.5, 24514.0], [52.6, 24582.0], [52.7, 24644.0], [52.8, 24661.0], [52.9, 24710.0], [53.0, 24781.0], [53.1, 24807.0], [53.2, 24864.0], [53.3, 24876.0], [53.4, 24920.0], [53.5, 24966.0], [53.6, 25001.0], [53.7, 25099.0], [53.8, 25167.0], [53.9, 25190.0], [54.0, 25302.0], [54.1, 25363.0], [54.2, 25425.0], [54.3, 25479.0], [54.4, 25541.0], [54.5, 25585.0], [54.6, 25607.0], [54.7, 25626.0], [54.8, 25706.0], [54.9, 25740.0], [55.0, 25753.0], [55.1, 25799.0], [55.2, 25849.0], [55.3, 25853.0], [55.4, 25936.0], [55.5, 26015.0], [55.6, 26031.0], [55.7, 26085.0], [55.8, 26131.0], [55.9, 26181.0], [56.0, 26245.0], [56.1, 26319.0], [56.2, 26359.0], [56.3, 26403.0], [56.4, 26449.0], [56.5, 26491.0], [56.6, 26559.0], [56.7, 26618.0], [56.8, 26674.0], [56.9, 26706.0], [57.0, 26745.0], [57.1, 26800.0], [57.2, 26856.0], [57.3, 26923.0], [57.4, 26961.0], [57.5, 26984.0], [57.6, 27043.0], [57.7, 27083.0], [57.8, 27145.0], [57.9, 27222.0], [58.0, 27277.0], [58.1, 27315.0], [58.2, 27422.0], [58.3, 27530.0], [58.4, 27605.0], [58.5, 27656.0], [58.6, 27675.0], [58.7, 27706.0], [58.8, 27730.0], [58.9, 27784.0], [59.0, 27843.0], [59.1, 27892.0], [59.2, 27932.0], [59.3, 27983.0], [59.4, 28032.0], [59.5, 28071.0], [59.6, 28098.0], [59.7, 28146.0], [59.8, 28195.0], [59.9, 28296.0], [60.0, 28340.0], [60.1, 28385.0], [60.2, 28442.0], [60.3, 28472.0], [60.4, 28507.0], [60.5, 28567.0], [60.6, 28643.0], [60.7, 28690.0], [60.8, 28723.0], [60.9, 28804.0], [61.0, 28866.0], [61.1, 28927.0], [61.2, 28994.0], [61.3, 29059.0], [61.4, 29108.0], [61.5, 29138.0], [61.6, 29177.0], [61.7, 29213.0], [61.8, 29272.0], [61.9, 29311.0], [62.0, 29362.0], [62.1, 29413.0], [62.2, 29462.0], [62.3, 29478.0], [62.4, 29526.0], [62.5, 29563.0], [62.6, 29594.0], [62.7, 29646.0], [62.8, 29706.0], [62.9, 29750.0], [63.0, 29800.0], [63.1, 29855.0], [63.2, 29907.0], [63.3, 29964.0], [63.4, 30034.0], [63.5, 30121.0], [63.6, 30198.0], [63.7, 30246.0], [63.8, 30299.0], [63.9, 30328.0], [64.0, 30372.0], [64.1, 30444.0], [64.2, 30493.0], [64.3, 30528.0], [64.4, 30596.0], [64.5, 30622.0], [64.6, 30696.0], [64.7, 30749.0], [64.8, 30789.0], [64.9, 30830.0], [65.0, 30870.0], [65.1, 30912.0], [65.2, 30955.0], [65.3, 30996.0], [65.4, 31052.0], [65.5, 31101.0], [65.6, 31151.0], [65.7, 31193.0], [65.8, 31267.0], [65.9, 31301.0], [66.0, 31339.0], [66.1, 31402.0], [66.2, 31461.0], [66.3, 31489.0], [66.4, 31541.0], [66.5, 31603.0], [66.6, 31636.0], [66.7, 31682.0], [66.8, 31738.0], [66.9, 31823.0], [67.0, 31918.0], [67.1, 31977.0], [67.2, 32009.0], [67.3, 32062.0], [67.4, 32117.0], [67.5, 32168.0], [67.6, 32200.0], [67.7, 32233.0], [67.8, 32253.0], [67.9, 32316.0], [68.0, 32422.0], [68.1, 32477.0], [68.2, 32534.0], [68.3, 32592.0], [68.4, 32640.0], [68.5, 32689.0], [68.6, 32748.0], [68.7, 32794.0], [68.8, 32847.0], [68.9, 32899.0], [69.0, 32936.0], [69.1, 32966.0], [69.2, 33062.0], [69.3, 33089.0], [69.4, 33107.0], [69.5, 33162.0], [69.6, 33295.0], [69.7, 33390.0], [69.8, 33435.0], [69.9, 33486.0], [70.0, 33513.0], [70.1, 33568.0], [70.2, 33619.0], [70.3, 33639.0], [70.4, 33672.0], [70.5, 33713.0], [70.6, 33746.0], [70.7, 33777.0], [70.8, 33826.0], [70.9, 33881.0], [71.0, 33947.0], [71.1, 33991.0], [71.2, 34025.0], [71.3, 34069.0], [71.4, 34136.0], [71.5, 34193.0], [71.6, 34266.0], [71.7, 34313.0], [71.8, 34380.0], [71.9, 34466.0], [72.0, 34592.0], [72.1, 34638.0], [72.2, 34687.0], [72.3, 34728.0], [72.4, 34805.0], [72.5, 34853.0], [72.6, 34935.0], [72.7, 34988.0], [72.8, 35064.0], [72.9, 35108.0], [73.0, 35207.0], [73.1, 35251.0], [73.2, 35320.0], [73.3, 35387.0], [73.4, 35425.0], [73.5, 35483.0], [73.6, 35511.0], [73.7, 35559.0], [73.8, 35620.0], [73.9, 35679.0], [74.0, 35727.0], [74.1, 35827.0], [74.2, 35873.0], [74.3, 35919.0], [74.4, 35966.0], [74.5, 36035.0], [74.6, 36082.0], [74.7, 36148.0], [74.8, 36215.0], [74.9, 36264.0], [75.0, 36306.0], [75.1, 36371.0], [75.2, 36436.0], [75.3, 36463.0], [75.4, 36546.0], [75.5, 36580.0], [75.6, 36633.0], [75.7, 36698.0], [75.8, 36752.0], [75.9, 36823.0], [76.0, 36887.0], [76.1, 36983.0], [76.2, 37065.0], [76.3, 37132.0], [76.4, 37186.0], [76.5, 37232.0], [76.6, 37299.0], [76.7, 37359.0], [76.8, 37413.0], [76.9, 37465.0], [77.0, 37516.0], [77.1, 37590.0], [77.2, 37644.0], [77.3, 37708.0], [77.4, 37792.0], [77.5, 37860.0], [77.6, 37903.0], [77.7, 37993.0], [77.8, 38102.0], [77.9, 38189.0], [78.0, 38246.0], [78.1, 38303.0], [78.2, 38347.0], [78.3, 38369.0], [78.4, 38471.0], [78.5, 38515.0], [78.6, 38560.0], [78.7, 38601.0], [78.8, 38705.0], [78.9, 38741.0], [79.0, 38867.0], [79.1, 38959.0], [79.2, 39013.0], [79.3, 39150.0], [79.4, 39214.0], [79.5, 39273.0], [79.6, 39325.0], [79.7, 39352.0], [79.8, 39405.0], [79.9, 39495.0], [80.0, 39569.0], [80.1, 39678.0], [80.2, 39776.0], [80.3, 39881.0], [80.4, 39911.0], [80.5, 39969.0], [80.6, 40047.0], [80.7, 40105.0], [80.8, 40158.0], [80.9, 40228.0], [81.0, 40260.0], [81.1, 40376.0], [81.2, 40482.0], [81.3, 40535.0], [81.4, 40592.0], [81.5, 40684.0], [81.6, 40772.0], [81.7, 40849.0], [81.8, 40992.0], [81.9, 41044.0], [82.0, 41133.0], [82.1, 41183.0], [82.2, 41276.0], [82.3, 41321.0], [82.4, 41359.0], [82.5, 41483.0], [82.6, 41519.0], [82.7, 41580.0], [82.8, 41619.0], [82.9, 41694.0], [83.0, 41758.0], [83.1, 41823.0], [83.2, 41885.0], [83.3, 41930.0], [83.4, 42012.0], [83.5, 42072.0], [83.6, 42118.0], [83.7, 42220.0], [83.8, 42335.0], [83.9, 42438.0], [84.0, 42567.0], [84.1, 42615.0], [84.2, 42686.0], [84.3, 42782.0], [84.4, 42819.0], [84.5, 42904.0], [84.6, 43018.0], [84.7, 43067.0], [84.8, 43114.0], [84.9, 43152.0], [85.0, 43230.0], [85.1, 43289.0], [85.2, 43372.0], [85.3, 43479.0], [85.4, 43546.0], [85.5, 43620.0], [85.6, 43814.0], [85.7, 43902.0], [85.8, 44019.0], [85.9, 44127.0], [86.0, 44265.0], [86.1, 44370.0], [86.2, 44399.0], [86.3, 44483.0], [86.4, 44620.0], [86.5, 44688.0], [86.6, 44755.0], [86.7, 44837.0], [86.8, 44980.0], [86.9, 45137.0], [87.0, 45234.0], [87.1, 45307.0], [87.2, 45461.0], [87.3, 45606.0], [87.4, 45794.0], [87.5, 45914.0], [87.6, 46014.0], [87.7, 46079.0], [87.8, 46196.0], [87.9, 46264.0], [88.0, 46481.0], [88.1, 46547.0], [88.2, 46750.0], [88.3, 46979.0], [88.4, 47144.0], [88.5, 47176.0], [88.6, 47297.0], [88.7, 47384.0], [88.8, 47462.0], [88.9, 47539.0], [89.0, 47776.0], [89.1, 47870.0], [89.2, 48067.0], [89.3, 48194.0], [89.4, 48302.0], [89.5, 48434.0], [89.6, 48534.0], [89.7, 48641.0], [89.8, 48780.0], [89.9, 48875.0], [90.0, 49001.0], [90.1, 49172.0], [90.2, 49273.0], [90.3, 49379.0], [90.4, 49720.0], [90.5, 49848.0], [90.6, 50031.0], [90.7, 50068.0], [90.8, 50218.0], [90.9, 50339.0], [91.0, 50459.0], [91.1, 50620.0], [91.2, 50721.0], [91.3, 50858.0], [91.4, 51017.0], [91.5, 51119.0], [91.6, 51337.0], [91.7, 51500.0], [91.8, 51602.0], [91.9, 51684.0], [92.0, 51765.0], [92.1, 51871.0], [92.2, 52059.0], [92.3, 52151.0], [92.4, 52385.0], [92.5, 52640.0], [92.6, 52710.0], [92.7, 52808.0], [92.8, 53044.0], [92.9, 53113.0], [93.0, 53152.0], [93.1, 53370.0], [93.2, 53489.0], [93.3, 53591.0], [93.4, 53863.0], [93.5, 54026.0], [93.6, 54088.0], [93.7, 54187.0], [93.8, 54367.0], [93.9, 54431.0], [94.0, 54528.0], [94.1, 54635.0], [94.2, 54773.0], [94.3, 54950.0], [94.4, 55055.0], [94.5, 55297.0], [94.6, 55541.0], [94.7, 55634.0], [94.8, 55819.0], [94.9, 55920.0], [95.0, 55973.0], [95.1, 56082.0], [95.2, 56303.0], [95.3, 56398.0], [95.4, 56489.0], [95.5, 56675.0], [95.6, 56955.0], [95.7, 57074.0], [95.8, 57204.0], [95.9, 57307.0], [96.0, 57431.0], [96.1, 57669.0], [96.2, 57974.0], [96.3, 58228.0], [96.4, 58337.0], [96.5, 58488.0], [96.6, 58601.0], [96.7, 58722.0], [96.8, 58830.0], [96.9, 58986.0], [97.0, 59161.0], [97.1, 59266.0], [97.2, 59549.0], [97.3, 59728.0], [97.4, 59880.0], [97.5, 60007.0], [97.6, 60008.0], [97.7, 60008.0], [97.8, 60008.0], [97.9, 60009.0], [98.0, 60009.0], [98.1, 60009.0], [98.2, 60009.0], [98.3, 60009.0], [98.4, 60010.0], [98.5, 60010.0], [98.6, 60011.0], [98.7, 60015.0], [98.8, 60163.0], [98.9, 60171.0], [99.0, 60175.0], [99.1, 60179.0], [99.2, 60196.0], [99.3, 60210.0], [99.4, 60219.0], [99.5, 60230.0], [99.6, 60244.0], [99.7, 60254.0], [99.8, 60279.0], [99.9, 60330.0], [100.0, 60452.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 71.0, "series": [{"data": [[34500.0, 6.0], [32900.0, 12.0], [33700.0, 17.0], [35300.0, 9.0], [36100.0, 10.0], [38500.0, 12.0], [37700.0, 7.0], [36900.0, 6.0], [40100.0, 10.0], [39300.0, 11.0], [40900.0, 4.0], [41700.0, 9.0], [42500.0, 6.0], [44900.0, 6.0], [44100.0, 5.0], [43300.0, 7.0], [46500.0, 3.0], [45700.0, 5.0], [47300.0, 7.0], [48100.0, 4.0], [48900.0, 3.0], [49700.0, 3.0], [50500.0, 5.0], [52100.0, 2.0], [52900.0, 1.0], [51300.0, 2.0], [54500.0, 5.0], [53700.0, 1.0], [56900.0, 3.0], [55300.0, 1.0], [56100.0, 1.0], [58500.0, 4.0], [59300.0, 2.0], [57700.0, 1.0], [60100.0, 27.0], [700.0, 3.0], [800.0, 6.0], [900.0, 20.0], [1000.0, 21.0], [1100.0, 34.0], [1200.0, 11.0], [1300.0, 27.0], [1400.0, 17.0], [1500.0, 17.0], [1600.0, 14.0], [1700.0, 10.0], [1800.0, 13.0], [1900.0, 10.0], [2000.0, 9.0], [2100.0, 16.0], [2200.0, 15.0], [2300.0, 9.0], [2400.0, 13.0], [2500.0, 14.0], [2600.0, 14.0], [2800.0, 15.0], [2700.0, 19.0], [2900.0, 21.0], [3000.0, 14.0], [3100.0, 10.0], [3300.0, 11.0], [3200.0, 8.0], [3400.0, 18.0], [3500.0, 12.0], [3600.0, 14.0], [3700.0, 10.0], [3800.0, 12.0], [3900.0, 9.0], [4000.0, 16.0], [4300.0, 13.0], [4100.0, 12.0], [4200.0, 13.0], [4600.0, 13.0], [4500.0, 16.0], [4400.0, 10.0], [4800.0, 10.0], [4700.0, 15.0], [4900.0, 15.0], [5100.0, 11.0], [5000.0, 14.0], [5300.0, 18.0], [5200.0, 16.0], [5500.0, 9.0], [5400.0, 11.0], [5600.0, 10.0], [5700.0, 16.0], [5800.0, 14.0], [6100.0, 13.0], [5900.0, 7.0], [6000.0, 23.0], [6300.0, 11.0], [6200.0, 5.0], [6500.0, 5.0], [6400.0, 19.0], [6600.0, 10.0], [6800.0, 18.0], [6900.0, 13.0], [6700.0, 15.0], [7100.0, 9.0], [7000.0, 11.0], [7200.0, 17.0], [7400.0, 15.0], [7300.0, 6.0], [7500.0, 15.0], [7600.0, 10.0], [7700.0, 26.0], [7900.0, 11.0], [7800.0, 12.0], [8000.0, 11.0], [8100.0, 10.0], [8600.0, 25.0], [8400.0, 22.0], [8200.0, 11.0], [9000.0, 11.0], [8800.0, 22.0], [9200.0, 13.0], [9400.0, 12.0], [9600.0, 9.0], [10000.0, 13.0], [9800.0, 13.0], [10200.0, 15.0], [10400.0, 11.0], [10600.0, 22.0], [11200.0, 8.0], [10800.0, 9.0], [11000.0, 9.0], [11400.0, 10.0], [11600.0, 9.0], [12200.0, 16.0], [11800.0, 10.0], [12000.0, 10.0], [12600.0, 15.0], [12400.0, 14.0], [13200.0, 10.0], [12800.0, 15.0], [13000.0, 10.0], [13800.0, 12.0], [13600.0, 17.0], [13400.0, 8.0], [14200.0, 14.0], [14000.0, 12.0], [14400.0, 9.0], [14800.0, 10.0], [14600.0, 11.0], [15200.0, 10.0], [15000.0, 11.0], [15400.0, 13.0], [15800.0, 12.0], [15600.0, 11.0], [16200.0, 15.0], [16000.0, 9.0], [16800.0, 19.0], [16400.0, 12.0], [17200.0, 11.0], [18400.0, 17.0], [18000.0, 11.0], [17600.0, 8.0], [19200.0, 12.0], [18800.0, 7.0], [19600.0, 10.0], [20400.0, 10.0], [20000.0, 11.0], [21200.0, 12.0], [20800.0, 7.0], [22000.0, 13.0], [21600.0, 9.0], [22400.0, 14.0], [22800.0, 8.0], [23200.0, 17.0], [23600.0, 8.0], [24000.0, 8.0], [24400.0, 12.0], [24800.0, 14.0], [25200.0, 3.0], [26000.0, 14.0], [25600.0, 14.0], [26400.0, 14.0], [27600.0, 16.0], [27200.0, 11.0], [26800.0, 11.0], [28400.0, 14.0], [28000.0, 17.0], [29200.0, 12.0], [29600.0, 9.0], [28800.0, 9.0], [30400.0, 11.0], [30000.0, 5.0], [31200.0, 11.0], [31600.0, 14.0], [30800.0, 12.0], [32000.0, 12.0], [32400.0, 8.0], [32800.0, 10.0], [33600.0, 16.0], [34400.0, 6.0], [36800.0, 10.0], [36000.0, 8.0], [35200.0, 10.0], [37600.0, 10.0], [38400.0, 9.0], [40000.0, 7.0], [39200.0, 13.0], [40800.0, 5.0], [41600.0, 9.0], [42400.0, 3.0], [43200.0, 11.0], [44800.0, 5.0], [44000.0, 4.0], [46400.0, 4.0], [45600.0, 2.0], [47200.0, 5.0], [48000.0, 4.0], [48800.0, 6.0], [50400.0, 4.0], [49600.0, 1.0], [52000.0, 8.0], [52800.0, 4.0], [51200.0, 1.0], [55200.0, 3.0], [54400.0, 7.0], [53600.0, 1.0], [56000.0, 5.0], [56800.0, 3.0], [57600.0, 4.0], [58400.0, 5.0], [59200.0, 5.0], [60000.0, 71.0], [34700.0, 9.0], [33100.0, 11.0], [33900.0, 11.0], [35500.0, 11.0], [36300.0, 9.0], [37100.0, 8.0], [37900.0, 7.0], [38700.0, 8.0], [40300.0, 4.0], [39500.0, 7.0], [42700.0, 6.0], [41100.0, 7.0], [41900.0, 7.0], [43500.0, 6.0], [44300.0, 8.0], [45900.0, 6.0], [46700.0, 4.0], [45100.0, 5.0], [47500.0, 5.0], [48300.0, 3.0], [49100.0, 4.0], [50700.0, 4.0], [49900.0, 4.0], [53100.0, 8.0], [51500.0, 5.0], [52300.0, 4.0], [54700.0, 4.0], [53900.0, 2.0], [55500.0, 4.0], [56300.0, 7.0], [57100.0, 2.0], [57900.0, 3.0], [58700.0, 6.0], [59500.0, 3.0], [60300.0, 7.0], [16900.0, 11.0], [17300.0, 8.0], [16500.0, 11.0], [17700.0, 14.0], [18100.0, 16.0], [19300.0, 17.0], [18900.0, 10.0], [18500.0, 16.0], [20100.0, 10.0], [19700.0, 16.0], [20500.0, 18.0], [20900.0, 16.0], [21300.0, 11.0], [22100.0, 9.0], [21700.0, 18.0], [22500.0, 9.0], [22900.0, 14.0], [23300.0, 12.0], [23700.0, 17.0], [24500.0, 11.0], [24100.0, 11.0], [24900.0, 15.0], [25300.0, 8.0], [25700.0, 19.0], [26100.0, 12.0], [26500.0, 10.0], [27300.0, 6.0], [26900.0, 13.0], [28500.0, 9.0], [28100.0, 12.0], [27700.0, 14.0], [28900.0, 9.0], [29300.0, 11.0], [30500.0, 12.0], [29700.0, 13.0], [30100.0, 9.0], [30900.0, 16.0], [31700.0, 6.0], [31300.0, 11.0], [32100.0, 13.0], [32500.0, 10.0], [34600.0, 10.0], [33000.0, 12.0], [33800.0, 9.0], [35400.0, 13.0], [36200.0, 11.0], [37000.0, 7.0], [37800.0, 10.0], [38600.0, 7.0], [39400.0, 8.0], [40200.0, 11.0], [42600.0, 10.0], [41000.0, 10.0], [41800.0, 9.0], [44200.0, 6.0], [45000.0, 3.0], [43400.0, 4.0], [46600.0, 4.0], [45800.0, 3.0], [48200.0, 5.0], [47400.0, 7.0], [49000.0, 5.0], [50600.0, 4.0], [49800.0, 4.0], [51400.0, 4.0], [52200.0, 1.0], [53000.0, 6.0], [53800.0, 6.0], [54600.0, 5.0], [55400.0, 4.0], [56200.0, 3.0], [57000.0, 6.0], [57800.0, 2.0], [58600.0, 4.0], [60200.0, 36.0], [59400.0, 3.0], [34100.0, 8.0], [33300.0, 8.0], [36500.0, 11.0], [34900.0, 8.0], [35700.0, 5.0], [38100.0, 7.0], [38900.0, 6.0], [37300.0, 7.0], [40500.0, 11.0], [39700.0, 6.0], [42900.0, 6.0], [41300.0, 13.0], [42100.0, 10.0], [43700.0, 4.0], [44500.0, 4.0], [45300.0, 5.0], [46900.0, 3.0], [46100.0, 6.0], [48500.0, 6.0], [47700.0, 2.0], [50900.0, 4.0], [49300.0, 6.0], [50100.0, 3.0], [51700.0, 7.0], [52500.0, 3.0], [53300.0, 3.0], [54900.0, 4.0], [54100.0, 5.0], [56500.0, 3.0], [57300.0, 3.0], [55700.0, 2.0], [58900.0, 3.0], [58100.0, 2.0], [59700.0, 5.0], [8500.0, 10.0], [8300.0, 7.0], [8700.0, 11.0], [9100.0, 5.0], [8900.0, 10.0], [9700.0, 16.0], [9500.0, 22.0], [9300.0, 7.0], [9900.0, 15.0], [10100.0, 11.0], [10500.0, 15.0], [10700.0, 13.0], [10300.0, 5.0], [11100.0, 18.0], [10900.0, 17.0], [11500.0, 11.0], [11700.0, 9.0], [11300.0, 13.0], [11900.0, 13.0], [12100.0, 10.0], [12500.0, 17.0], [12300.0, 7.0], [12700.0, 17.0], [13100.0, 15.0], [13300.0, 15.0], [12900.0, 11.0], [13500.0, 9.0], [13700.0, 10.0], [14100.0, 18.0], [14300.0, 10.0], [13900.0, 10.0], [14700.0, 12.0], [14500.0, 14.0], [15100.0, 19.0], [15300.0, 18.0], [14900.0, 11.0], [15500.0, 13.0], [15700.0, 17.0], [16300.0, 9.0], [16100.0, 8.0], [15900.0, 6.0], [17400.0, 19.0], [16600.0, 10.0], [17000.0, 15.0], [18200.0, 11.0], [17800.0, 8.0], [19000.0, 12.0], [18600.0, 8.0], [19400.0, 7.0], [20200.0, 12.0], [19800.0, 13.0], [21400.0, 7.0], [20600.0, 14.0], [21000.0, 11.0], [21800.0, 15.0], [22200.0, 10.0], [23400.0, 14.0], [23000.0, 12.0], [22600.0, 6.0], [24200.0, 10.0], [23800.0, 13.0], [25000.0, 6.0], [24600.0, 14.0], [25400.0, 11.0], [26600.0, 12.0], [25800.0, 12.0], [26200.0, 8.0], [27400.0, 4.0], [27000.0, 12.0], [27800.0, 12.0], [28600.0, 10.0], [28200.0, 5.0], [29400.0, 13.0], [29000.0, 10.0], [29800.0, 11.0], [30200.0, 12.0], [30600.0, 10.0], [31400.0, 15.0], [31000.0, 10.0], [32200.0, 16.0], [32600.0, 12.0], [31800.0, 6.0], [34000.0, 14.0], [34800.0, 11.0], [33200.0, 5.0], [35600.0, 11.0], [36400.0, 12.0], [37200.0, 12.0], [38800.0, 6.0], [38000.0, 4.0], [40400.0, 5.0], [39600.0, 4.0], [42000.0, 10.0], [42800.0, 10.0], [41200.0, 6.0], [43600.0, 5.0], [44400.0, 7.0], [45200.0, 6.0], [46000.0, 8.0], [46800.0, 2.0], [48400.0, 6.0], [47600.0, 2.0], [49200.0, 4.0], [50000.0, 7.0], [50800.0, 4.0], [51600.0, 8.0], [53200.0, 2.0], [52400.0, 1.0], [54000.0, 7.0], [54800.0, 3.0], [55600.0, 4.0], [57200.0, 6.0], [56400.0, 5.0], [58800.0, 6.0], [58000.0, 1.0], [59600.0, 1.0], [60400.0, 1.0], [33500.0, 14.0], [34300.0, 9.0], [35900.0, 12.0], [35100.0, 7.0], [36700.0, 8.0], [38300.0, 12.0], [37500.0, 10.0], [39900.0, 12.0], [39100.0, 4.0], [40700.0, 6.0], [41500.0, 10.0], [42300.0, 6.0], [43100.0, 11.0], [43900.0, 6.0], [44700.0, 5.0], [45500.0, 5.0], [46300.0, 4.0], [47100.0, 8.0], [48700.0, 5.0], [47900.0, 1.0], [51100.0, 7.0], [50300.0, 4.0], [49500.0, 1.0], [52700.0, 5.0], [51900.0, 3.0], [54300.0, 3.0], [53500.0, 5.0], [55100.0, 1.0], [55900.0, 9.0], [56700.0, 1.0], [58300.0, 4.0], [59100.0, 3.0], [59900.0, 5.0], [17100.0, 16.0], [16700.0, 11.0], [17500.0, 9.0], [18300.0, 13.0], [17900.0, 10.0], [18700.0, 10.0], [19100.0, 9.0], [20300.0, 7.0], [19500.0, 13.0], [19900.0, 13.0], [21500.0, 7.0], [20700.0, 15.0], [21100.0, 8.0], [21900.0, 12.0], [22300.0, 12.0], [22700.0, 16.0], [23500.0, 9.0], [23100.0, 6.0], [23900.0, 9.0], [24300.0, 11.0], [24700.0, 12.0], [25500.0, 13.0], [25100.0, 13.0], [26300.0, 10.0], [25900.0, 8.0], [26700.0, 11.0], [27100.0, 9.0], [27500.0, 8.0], [27900.0, 10.0], [28300.0, 14.0], [29100.0, 16.0], [28700.0, 9.0], [29500.0, 17.0], [30700.0, 12.0], [29900.0, 10.0], [30300.0, 12.0], [31100.0, 12.0], [31500.0, 7.0], [31900.0, 12.0], [32300.0, 7.0], [32700.0, 12.0], [33400.0, 10.0], [34200.0, 9.0], [36600.0, 10.0], [35800.0, 12.0], [35000.0, 10.0], [37400.0, 12.0], [38200.0, 10.0], [40600.0, 8.0], [39000.0, 8.0], [39800.0, 7.0], [41400.0, 7.0], [43000.0, 8.0], [42200.0, 4.0], [44600.0, 9.0], [43800.0, 6.0], [46200.0, 5.0], [45400.0, 2.0], [47000.0, 3.0], [47800.0, 7.0], [48600.0, 4.0], [49400.0, 3.0], [50200.0, 6.0], [51000.0, 4.0], [52600.0, 6.0], [51800.0, 3.0], [53400.0, 7.0], [54200.0, 5.0], [55000.0, 5.0], [56600.0, 4.0], [55800.0, 6.0], [57400.0, 6.0], [58200.0, 5.0], [59000.0, 2.0], [59800.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 139.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5395.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 139.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5395.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 140.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.41818181818182, "minX": 1.65125664E12, "maxY": 74.0, "series": [{"data": [[1.65125712E12, 74.0], [1.65125682E12, 69.65116279069768], [1.65125814E12, 74.0], [1.65125844E12, 74.0], [1.65125784E12, 74.0], [1.65125754E12, 74.0], [1.65125724E12, 74.0], [1.65125694E12, 74.0], [1.6512576E12, 74.0], [1.6512573E12, 74.0], [1.65125862E12, 69.84756097560978], [1.651257E12, 74.0], [1.6512567E12, 23.958579881656814], [1.65125802E12, 74.0], [1.65125832E12, 74.0], [1.65125772E12, 74.0], [1.65125742E12, 74.0], [1.65125778E12, 74.0], [1.65125808E12, 74.0], [1.65125748E12, 74.0], [1.65125718E12, 74.0], [1.6512585E12, 74.0], [1.65125688E12, 74.0], [1.6512579E12, 74.0], [1.6512582E12, 74.0], [1.65125826E12, 74.0], [1.65125664E12, 9.41818181818182], [1.65125856E12, 74.0], [1.65125766E12, 74.0], [1.65125796E12, 74.0], [1.65125736E12, 74.0], [1.65125706E12, 74.0], [1.65125838E12, 74.0], [1.65125676E12, 48.742514970059865], [1.65125868E12, 19.5]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125868E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4150.333333333334, "minX": 1.0, "maxY": 60178.0, "series": [{"data": [[2.0, 58536.0], [3.0, 60178.0], [4.0, 20905.666666666668], [5.0, 29104.5], [6.0, 19779.666666666668], [7.0, 30469.0], [8.0, 30545.0], [9.0, 19356.0], [10.0, 4150.333333333334], [11.0, 27259.0], [12.0, 20771.666666666664], [13.0, 34346.5], [14.0, 17420.666666666668], [15.0, 25529.0], [16.0, 17612.333333333336], [17.0, 24447.5], [18.0, 16434.666666666664], [19.0, 22461.5], [20.0, 6903.8], [21.0, 17935.0], [22.0, 19661.5], [23.0, 14491.333333333334], [24.0, 20575.5], [25.0, 18712.0], [26.0, 15055.0], [27.0, 15500.666666666668], [28.0, 20403.5], [29.0, 13232.5], [30.0, 9642.625], [31.0, 17065.666666666664], [32.0, 16171.5], [33.0, 17609.666666666668], [34.0, 19871.0], [35.0, 19104.0], [36.0, 16750.0], [37.0, 24697.0], [38.0, 17771.333333333332], [39.0, 21147.0], [40.0, 12005.578947368425], [41.0, 16093.0], [42.0, 16845.5], [43.0, 17187.5], [44.0, 17254.0], [45.0, 17495.666666666668], [46.0, 14629.5], [47.0, 18333.333333333332], [48.0, 18415.5], [49.0, 18176.0], [50.0, 14859.568965517245], [51.0, 21850.0], [52.0, 15989.0], [53.0, 14573.0], [54.0, 16282.666666666666], [55.0, 19379.666666666668], [56.0, 19139.0], [57.0, 20048.666666666668], [58.0, 12535.0], [59.0, 21114.666666666668], [60.0, 17217.0], [61.0, 24872.0], [62.0, 23205.666666666664], [63.0, 12160.0], [64.0, 26288.0], [65.0, 19416.0], [66.0, 26824.0], [67.0, 23789.5], [68.0, 21452.0], [69.0, 21141.333333333332], [70.0, 22225.079365079368], [71.0, 38238.8], [72.0, 30551.666666666664], [73.0, 42448.0], [74.0, 26144.8548988808], [1.0, 60009.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[70.52326401127962, 25025.78568910817]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 74.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 98.76666666666667, "minX": 1.65125664E12, "maxY": 602.5, "series": [{"data": [[1.65125712E12, 530.25], [1.65125682E12, 537.0833333333334], [1.65125814E12, 573.8666666666667], [1.65125844E12, 582.2666666666667], [1.65125784E12, 535.4666666666667], [1.65125754E12, 533.7833333333333], [1.65125724E12, 527.15], [1.65125694E12, 527.1333333333333], [1.6512576E12, 536.65], [1.6512573E12, 533.6666666666666], [1.65125862E12, 602.5], [1.651257E12, 520.7833333333333], [1.6512567E12, 526.4666666666667], [1.65125802E12, 558.2833333333333], [1.65125832E12, 571.1333333333333], [1.65125772E12, 525.0333333333333], [1.65125742E12, 527.3333333333334], [1.65125778E12, 528.95], [1.65125808E12, 561.3333333333334], [1.65125748E12, 530.3], [1.65125718E12, 540.3333333333334], [1.6512585E12, 575.65], [1.65125688E12, 541.7666666666667], [1.6512579E12, 546.7166666666667], [1.6512582E12, 551.8], [1.65125826E12, 575.5], [1.65125664E12, 169.88333333333333], [1.65125856E12, 546.75], [1.65125766E12, 533.2666666666667], [1.65125796E12, 551.6], [1.65125736E12, 544.9166666666666], [1.65125706E12, 546.1], [1.65125838E12, 562.9833333333333], [1.65125676E12, 518.3666666666667], [1.65125868E12, 148.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65125712E12, 436.6333333333333], [1.65125682E12, 447.1], [1.65125814E12, 444.65], [1.65125844E12, 439.48333333333335], [1.65125784E12, 444.6166666666667], [1.65125754E12, 444.48333333333335], [1.65125724E12, 439.25], [1.65125694E12, 439.25], [1.6512576E12, 444.71666666666664], [1.6512573E12, 442.0], [1.65125862E12, 426.4], [1.651257E12, 431.7], [1.6512567E12, 439.31666666666666], [1.65125802E12, 447.1333333333333], [1.65125832E12, 444.55], [1.65125772E12, 436.73333333333335], [1.65125742E12, 426.3666666666667], [1.65125778E12, 434.18333333333334], [1.65125808E12, 444.55], [1.65125748E12, 439.3833333333333], [1.65125718E12, 447.3666666666667], [1.6512585E12, 444.55], [1.65125688E12, 449.81666666666666], [1.6512579E12, 426.4], [1.6512582E12, 436.6], [1.65125826E12, 447.4], [1.65125664E12, 142.88333333333333], [1.65125856E12, 429.01666666666665], [1.65125766E12, 442.1], [1.65125796E12, 436.8333333333333], [1.65125736E12, 444.75], [1.65125706E12, 442.1], [1.65125838E12, 436.8666666666667], [1.65125676E12, 433.8833333333333], [1.65125868E12, 98.76666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125868E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2768.927272727273, "minX": 1.65125664E12, "maxY": 42953.10526315789, "series": [{"data": [[1.65125712E12, 26581.249999999996], [1.65125682E12, 21802.02325581395], [1.65125814E12, 25374.152046783616], [1.65125844E12, 25790.964497041427], [1.65125784E12, 25875.01754385965], [1.65125754E12, 25991.28070175439], [1.65125724E12, 25682.408284023695], [1.65125694E12, 25459.85798816568], [1.6512576E12, 26473.09356725146], [1.6512573E12, 26328.888235294125], [1.65125862E12, 27767.371951219513], [1.651257E12, 26496.00602409639], [1.6512567E12, 7428.763313609468], [1.65125802E12, 25839.244186046508], [1.65125832E12, 24916.63742690059], [1.65125772E12, 26455.625000000015], [1.65125742E12, 27229.695121951212], [1.65125778E12, 26924.85628742514], [1.65125808E12, 24259.13450292399], [1.65125748E12, 25595.721893491125], [1.65125718E12, 25246.447674418592], [1.6512585E12, 28740.116959064326], [1.65125688E12, 26436.67630057803], [1.6512579E12, 26916.80487804878], [1.6512582E12, 26968.636904761897], [1.65125826E12, 27272.22674418604], [1.65125664E12, 2768.927272727273], [1.65125856E12, 23291.060606060593], [1.65125766E12, 24532.523529411763], [1.65125796E12, 27749.70238095239], [1.65125736E12, 26528.91812865498], [1.65125706E12, 27135.994117647067], [1.65125838E12, 25956.54166666668], [1.65125676E12, 13999.940119760478], [1.65125868E12, 42953.10526315789]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125868E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2768.8181818181806, "minX": 1.65125664E12, "maxY": 42953.10526315789, "series": [{"data": [[1.65125712E12, 26581.232142857145], [1.65125682E12, 21801.970930232554], [1.65125814E12, 25374.134502923967], [1.65125844E12, 25790.95266272189], [1.65125784E12, 25875.005847953227], [1.65125754E12, 25991.28070175439], [1.65125724E12, 25682.378698224842], [1.65125694E12, 25459.816568047336], [1.6512576E12, 26473.087719298233], [1.6512573E12, 26328.876470588242], [1.65125862E12, 27767.353658536576], [1.651257E12, 26495.969879518074], [1.6512567E12, 7428.71597633136], [1.65125802E12, 25839.232558139545], [1.65125832E12, 24916.625730994165], [1.65125772E12, 26455.613095238106], [1.65125742E12, 27229.658536585364], [1.65125778E12, 26924.84431137724], [1.65125808E12, 24259.122807017553], [1.65125748E12, 25595.710059171597], [1.65125718E12, 25246.418604651164], [1.6512585E12, 28740.116959064326], [1.65125688E12, 26436.63005780348], [1.6512579E12, 26916.798780487818], [1.6512582E12, 26968.636904761897], [1.65125826E12, 27272.203488372095], [1.65125664E12, 2768.8181818181806], [1.65125856E12, 23291.03636363637], [1.65125766E12, 24532.51176470588], [1.65125796E12, 27749.696428571435], [1.65125736E12, 26528.91228070174], [1.65125706E12, 27135.970588235294], [1.65125838E12, 25956.52380952381], [1.65125676E12, 13999.922155688622], [1.65125868E12, 42953.10526315789]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125868E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.812865497076025, "minX": 1.65125664E12, "maxY": 23.34545454545455, "series": [{"data": [[1.65125712E12, 8.160714285714288], [1.65125682E12, 8.947674418604654], [1.65125814E12, 7.175438596491228], [1.65125844E12, 6.988165680473371], [1.65125784E12, 7.4970760233918154], [1.65125754E12, 7.169590643274856], [1.65125724E12, 7.27810650887574], [1.65125694E12, 8.76331360946746], [1.6512576E12, 7.397660818713451], [1.6512573E12, 7.935294117647061], [1.65125862E12, 7.079268292682927], [1.651257E12, 8.367469879518065], [1.6512567E12, 11.994082840236683], [1.65125802E12, 7.139534883720934], [1.65125832E12, 6.812865497076025], [1.65125772E12, 6.875], [1.65125742E12, 7.0], [1.65125778E12, 7.029940119760484], [1.65125808E12, 7.09941520467836], [1.65125748E12, 7.289940828402365], [1.65125718E12, 7.848837209302326], [1.6512585E12, 7.175438596491229], [1.65125688E12, 8.473988439306355], [1.6512579E12, 7.384146341463415], [1.6512582E12, 7.267857142857141], [1.65125826E12, 7.075581395348837], [1.65125664E12, 23.34545454545455], [1.65125856E12, 7.254545454545458], [1.65125766E12, 7.705882352941171], [1.65125796E12, 7.190476190476194], [1.65125736E12, 7.2748538011695905], [1.65125706E12, 8.123529411764698], [1.65125838E12, 7.166666666666667], [1.65125676E12, 9.353293413173654], [1.65125868E12, 6.921052631578948]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125868E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 769.0, "minX": 1.65125664E12, "maxY": 60196.0, "series": [{"data": [[1.65125712E12, 59766.0], [1.65125682E12, 46541.0], [1.65125814E12, 59591.0], [1.65125844E12, 59718.0], [1.65125784E12, 59437.0], [1.65125754E12, 59389.0], [1.65125724E12, 59188.0], [1.65125694E12, 58998.0], [1.6512576E12, 55942.0], [1.6512573E12, 59630.0], [1.65125862E12, 59908.0], [1.651257E12, 59809.0], [1.6512567E12, 22186.0], [1.65125802E12, 59955.0], [1.65125832E12, 59582.0], [1.65125772E12, 58830.0], [1.65125742E12, 58722.0], [1.65125778E12, 58864.0], [1.65125808E12, 58986.0], [1.65125748E12, 59791.0], [1.65125718E12, 59015.0], [1.6512585E12, 60039.0], [1.65125688E12, 55557.0], [1.6512579E12, 58872.0], [1.6512582E12, 59900.0], [1.65125826E12, 59810.0], [1.65125664E12, 8621.0], [1.65125856E12, 59880.0], [1.65125766E12, 56469.0], [1.65125796E12, 60196.0], [1.65125736E12, 59266.0], [1.65125706E12, 59958.0], [1.65125838E12, 59902.0], [1.65125676E12, 33477.0], [1.65125868E12, 58536.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65125712E12, 48559.20000000002], [1.65125682E12, 39071.20000000001], [1.65125814E12, 48949.70000000001], [1.65125844E12, 49184.20000000002], [1.65125784E12, 48681.60000000001], [1.65125754E12, 48353.4], [1.65125724E12, 48226.0], [1.65125694E12, 47470.0], [1.6512576E12, 46021.0], [1.6512573E12, 47939.0], [1.65125862E12, 49945.600000000006], [1.651257E12, 48316.4], [1.6512567E12, 14527.0], [1.65125802E12, 47489.1], [1.65125832E12, 45621.99999999999], [1.65125772E12, 47145.8], [1.65125742E12, 47111.8], [1.65125778E12, 47465.40000000001], [1.65125808E12, 42104.8], [1.65125748E12, 47344.899999999994], [1.65125718E12, 47913.70000000001], [1.6512585E12, 49879.200000000004], [1.65125688E12, 46414.6], [1.6512579E12, 48349.799999999996], [1.6512582E12, 49758.0], [1.65125826E12, 48608.9], [1.65125664E12, 5736.599999999999], [1.65125856E12, 41287.799999999996], [1.65125766E12, 45728.3], [1.65125796E12, 49318.20000000001], [1.65125736E12, 48863.0], [1.65125706E12, 47562.299999999996], [1.65125838E12, 46240.40000000002], [1.65125676E12, 26194.00000000001], [1.65125868E12, 55950.200000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65125712E12, 59534.119999999995], [1.65125682E12, 45839.47000000001], [1.65125814E12, 59377.43], [1.65125844E12, 58853.79999999998], [1.65125784E12, 59313.16], [1.65125754E12, 59014.6], [1.65125724E12, 58875.8], [1.65125694E12, 58050.900000000016], [1.6512576E12, 55926.16], [1.6512573E12, 59359.8], [1.65125862E12, 59444.80000000001], [1.651257E12, 59634.8], [1.6512567E12, 21331.300000000014], [1.65125802E12, 59443.020000000004], [1.65125832E12, 58865.19999999998], [1.65125772E12, 57347.19], [1.65125742E12, 58374.799999999996], [1.65125778E12, 58768.19], [1.65125808E12, 58765.2], [1.65125748E12, 59520.520000000004], [1.65125718E12, 58498.16000000001], [1.6512585E12, 59870.799999999996], [1.65125688E12, 54451.43999999999], [1.6512579E12, 58867.87], [1.6512582E12, 59796.8], [1.65125826E12, 59332.46000000001], [1.65125664E12, 8621.0], [1.65125856E12, 59083.49999999999], [1.65125766E12, 55916.619999999995], [1.65125796E12, 59732.24], [1.65125736E12, 58897.100000000006], [1.65125706E12, 59121.030000000006], [1.65125838E12, 59460.03999999999], [1.65125676E12, 32422.99999999999], [1.65125868E12, 58536.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65125712E12, 55095.99999999999], [1.65125682E12, 41535.15], [1.65125814E12, 54673.74999999999], [1.65125844E12, 54493.09999999999], [1.65125784E12, 54504.00000000001], [1.65125754E12, 54189.200000000004], [1.65125724E12, 54698.5], [1.65125694E12, 52937.5], [1.6512576E12, 51761.200000000004], [1.6512573E12, 53952.0], [1.65125862E12, 55221.399999999994], [1.651257E12, 54281.95000000001], [1.6512567E12, 17122.5], [1.65125802E12, 52943.149999999994], [1.65125832E12, 51258.399999999994], [1.65125772E12, 53120.69999999999], [1.65125742E12, 53028.8], [1.65125778E12, 53927.850000000006], [1.65125808E12, 52089.59999999998], [1.65125748E12, 53373.99999999999], [1.65125718E12, 54059.299999999996], [1.6512585E12, 54822.6], [1.65125688E12, 50142.99999999998], [1.6512579E12, 54185.85], [1.6512582E12, 55411.0], [1.65125826E12, 54339.6], [1.65125664E12, 7386.199999999998], [1.65125856E12, 50351.14999999998], [1.65125766E12, 50985.14999999999], [1.65125796E12, 55903.30000000001], [1.65125736E12, 54004.0], [1.65125706E12, 54463.099999999984], [1.65125838E12, 55076.9], [1.65125676E12, 28626.999999999996], [1.65125868E12, 57858.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65125712E12, 953.0], [1.65125682E12, 798.0], [1.65125814E12, 822.0], [1.65125844E12, 1152.0], [1.65125784E12, 1119.0], [1.65125754E12, 1004.0], [1.65125724E12, 955.0], [1.65125694E12, 1095.0], [1.6512576E12, 921.0], [1.6512573E12, 1235.0], [1.65125862E12, 881.0], [1.651257E12, 1101.0], [1.6512567E12, 964.0], [1.65125802E12, 1573.0], [1.65125832E12, 953.0], [1.65125772E12, 769.0], [1.65125742E12, 952.0], [1.65125778E12, 844.0], [1.65125808E12, 1142.0], [1.65125748E12, 988.0], [1.65125718E12, 1175.0], [1.6512585E12, 924.0], [1.65125688E12, 1011.0], [1.6512579E12, 985.0], [1.6512582E12, 901.0], [1.65125826E12, 1154.0], [1.65125664E12, 795.0], [1.65125856E12, 1163.0], [1.65125766E12, 812.0], [1.65125796E12, 1087.0], [1.65125736E12, 884.0], [1.65125706E12, 922.0], [1.65125838E12, 1334.0], [1.65125676E12, 910.0], [1.65125868E12, 18928.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65125712E12, 25850.0], [1.65125682E12, 21681.5], [1.65125814E12, 20875.5], [1.65125844E12, 18635.0], [1.65125784E12, 24873.0], [1.65125754E12, 25545.0], [1.65125724E12, 24224.0], [1.65125694E12, 24135.0], [1.6512576E12, 26502.0], [1.6512573E12, 26260.0], [1.65125862E12, 21301.0], [1.651257E12, 26932.0], [1.6512567E12, 6494.0], [1.65125802E12, 24274.0], [1.65125832E12, 20923.0], [1.65125772E12, 26505.0], [1.65125742E12, 26409.0], [1.65125778E12, 26557.0], [1.65125808E12, 21259.0], [1.65125748E12, 23999.5], [1.65125718E12, 24077.0], [1.6512585E12, 24866.0], [1.65125688E12, 26108.0], [1.6512579E12, 25022.0], [1.6512582E12, 23827.0], [1.65125826E12, 24163.5], [1.65125664E12, 2244.0], [1.65125856E12, 19369.0], [1.65125766E12, 23254.0], [1.65125796E12, 25168.0], [1.65125736E12, 25726.0], [1.65125706E12, 26676.0], [1.65125838E12, 22275.0], [1.65125676E12, 13271.0], [1.65125868E12, 36737.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125868E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 21838.0, "minX": 1.0, "maxY": 60171.0, "series": [{"data": [[2.0, 21853.0], [4.0, 24729.0], [1.0, 28434.0], [5.0, 37617.0], [3.0, 21838.0], [6.0, 50068.0], [7.0, 30100.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60010.0], [2.0, 60009.0], [1.0, 60009.0], [5.0, 60169.0], [3.0, 60159.0], [6.0, 60171.0], [7.0, 60167.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 21838.0, "minX": 1.0, "maxY": 60171.0, "series": [{"data": [[2.0, 21853.0], [4.0, 24729.0], [1.0, 28434.0], [5.0, 37617.0], [3.0, 21838.0], [6.0, 50068.0], [7.0, 30100.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60010.0], [2.0, 60009.0], [1.0, 60009.0], [5.0, 60169.0], [3.0, 60159.0], [6.0, 60171.0], [7.0, 60167.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.65125664E12, "maxY": 3.316666666666667, "series": [{"data": [[1.65125712E12, 2.8], [1.65125682E12, 3.1], [1.65125814E12, 2.85], [1.65125844E12, 2.816666666666667], [1.65125784E12, 2.85], [1.65125754E12, 2.85], [1.65125724E12, 2.816666666666667], [1.65125694E12, 2.816666666666667], [1.6512576E12, 2.85], [1.6512573E12, 2.8333333333333335], [1.65125862E12, 2.1333333333333333], [1.651257E12, 2.7666666666666666], [1.6512567E12, 3.316666666666667], [1.65125802E12, 2.8666666666666667], [1.65125832E12, 2.85], [1.65125772E12, 2.8], [1.65125742E12, 2.7333333333333334], [1.65125778E12, 2.783333333333333], [1.65125808E12, 2.85], [1.65125748E12, 2.816666666666667], [1.65125718E12, 2.8666666666666667], [1.6512585E12, 2.85], [1.65125688E12, 2.8833333333333333], [1.6512579E12, 2.7333333333333334], [1.6512582E12, 2.8], [1.65125826E12, 2.8666666666666667], [1.65125664E12, 1.0833333333333333], [1.65125856E12, 2.75], [1.65125766E12, 2.8333333333333335], [1.65125796E12, 2.8], [1.65125736E12, 2.85], [1.65125706E12, 2.8333333333333335], [1.65125838E12, 2.8], [1.65125676E12, 3.1166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125862E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125664E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125712E12, 2.783333333333333], [1.65125682E12, 2.8666666666666667], [1.65125814E12, 2.7], [1.65125844E12, 2.6166666666666667], [1.65125784E12, 2.85], [1.65125754E12, 2.85], [1.65125724E12, 2.816666666666667], [1.65125694E12, 2.816666666666667], [1.6512576E12, 2.85], [1.6512573E12, 2.816666666666667], [1.65125862E12, 2.45], [1.651257E12, 2.7666666666666666], [1.6512567E12, 2.816666666666667], [1.65125802E12, 2.8], [1.65125832E12, 2.716666666666667], [1.65125772E12, 2.8], [1.65125742E12, 2.683333333333333], [1.65125778E12, 2.7666666666666666], [1.65125808E12, 2.716666666666667], [1.65125748E12, 2.8], [1.65125718E12, 2.8666666666666667], [1.6512585E12, 2.6166666666666667], [1.65125688E12, 2.8833333333333333], [1.6512579E12, 2.6333333333333333], [1.6512582E12, 2.65], [1.65125826E12, 2.7], [1.65125664E12, 0.9166666666666666], [1.65125856E12, 2.6333333333333333], [1.65125766E12, 2.8333333333333335], [1.65125796E12, 2.683333333333333], [1.65125736E12, 2.816666666666667], [1.65125706E12, 2.8], [1.65125838E12, 2.6166666666666667], [1.65125676E12, 2.783333333333333], [1.65125868E12, 0.5166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65125778E12, 0.016666666666666666], [1.65125712E12, 0.016666666666666666], [1.65125808E12, 0.13333333333333333], [1.65125814E12, 0.15], [1.65125748E12, 0.016666666666666666], [1.65125844E12, 0.2], [1.6512585E12, 0.23333333333333334], [1.6512579E12, 0.1], [1.6512582E12, 0.15], [1.65125826E12, 0.16666666666666666], [1.65125856E12, 0.11666666666666667], [1.6512573E12, 0.016666666666666666], [1.65125862E12, 0.2833333333333333], [1.65125796E12, 0.11666666666666667], [1.65125802E12, 0.06666666666666667], [1.65125736E12, 0.03333333333333333], [1.65125832E12, 0.13333333333333333], [1.65125706E12, 0.03333333333333333], [1.65125838E12, 0.18333333333333332], [1.65125868E12, 0.11666666666666667], [1.65125742E12, 0.05]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65125868E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125664E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125712E12, 2.783333333333333], [1.65125682E12, 2.8666666666666667], [1.65125814E12, 2.7], [1.65125844E12, 2.6166666666666667], [1.65125784E12, 2.85], [1.65125754E12, 2.85], [1.65125724E12, 2.816666666666667], [1.65125694E12, 2.816666666666667], [1.6512576E12, 2.85], [1.6512573E12, 2.816666666666667], [1.65125862E12, 2.45], [1.651257E12, 2.7666666666666666], [1.6512567E12, 2.816666666666667], [1.65125802E12, 2.8], [1.65125832E12, 2.716666666666667], [1.65125772E12, 2.8], [1.65125742E12, 2.683333333333333], [1.65125778E12, 2.7666666666666666], [1.65125808E12, 2.716666666666667], [1.65125748E12, 2.8], [1.65125718E12, 2.8666666666666667], [1.6512585E12, 2.6166666666666667], [1.65125688E12, 2.8833333333333333], [1.6512579E12, 2.6333333333333333], [1.6512582E12, 2.65], [1.65125826E12, 2.7], [1.65125664E12, 0.9166666666666666], [1.65125856E12, 2.6333333333333333], [1.65125766E12, 2.8333333333333335], [1.65125796E12, 2.683333333333333], [1.65125736E12, 2.816666666666667], [1.65125706E12, 2.8], [1.65125838E12, 2.6166666666666667], [1.65125676E12, 2.783333333333333], [1.65125868E12, 0.5166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65125778E12, 0.016666666666666666], [1.65125712E12, 0.016666666666666666], [1.65125808E12, 0.13333333333333333], [1.65125814E12, 0.15], [1.65125748E12, 0.016666666666666666], [1.65125844E12, 0.2], [1.6512585E12, 0.23333333333333334], [1.6512579E12, 0.1], [1.6512582E12, 0.15], [1.65125826E12, 0.16666666666666666], [1.65125856E12, 0.11666666666666667], [1.6512573E12, 0.016666666666666666], [1.65125862E12, 0.2833333333333333], [1.65125796E12, 0.11666666666666667], [1.65125802E12, 0.06666666666666667], [1.65125736E12, 0.03333333333333333], [1.65125832E12, 0.13333333333333333], [1.65125706E12, 0.03333333333333333], [1.65125838E12, 0.18333333333333332], [1.65125868E12, 0.11666666666666667], [1.65125742E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125868E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65125664E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65125712E12, 2.783333333333333], [1.65125682E12, 2.8666666666666667], [1.65125814E12, 2.7], [1.65125844E12, 2.6166666666666667], [1.65125784E12, 2.85], [1.65125754E12, 2.85], [1.65125724E12, 2.816666666666667], [1.65125694E12, 2.816666666666667], [1.6512576E12, 2.85], [1.6512573E12, 2.816666666666667], [1.65125862E12, 2.45], [1.651257E12, 2.7666666666666666], [1.6512567E12, 2.816666666666667], [1.65125802E12, 2.8], [1.65125832E12, 2.716666666666667], [1.65125772E12, 2.8], [1.65125742E12, 2.683333333333333], [1.65125778E12, 2.7666666666666666], [1.65125808E12, 2.716666666666667], [1.65125748E12, 2.8], [1.65125718E12, 2.8666666666666667], [1.6512585E12, 2.6166666666666667], [1.65125688E12, 2.8833333333333333], [1.6512579E12, 2.6333333333333333], [1.6512582E12, 2.65], [1.65125826E12, 2.7], [1.65125664E12, 0.9166666666666666], [1.65125856E12, 2.6333333333333333], [1.65125766E12, 2.8333333333333335], [1.65125796E12, 2.683333333333333], [1.65125736E12, 2.816666666666667], [1.65125706E12, 2.8], [1.65125838E12, 2.6166666666666667], [1.65125676E12, 2.783333333333333], [1.65125868E12, 0.5166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65125778E12, 0.016666666666666666], [1.65125712E12, 0.016666666666666666], [1.65125808E12, 0.13333333333333333], [1.65125814E12, 0.15], [1.65125748E12, 0.016666666666666666], [1.65125844E12, 0.2], [1.6512585E12, 0.23333333333333334], [1.6512579E12, 0.1], [1.6512582E12, 0.15], [1.65125826E12, 0.16666666666666666], [1.65125856E12, 0.11666666666666667], [1.6512573E12, 0.016666666666666666], [1.65125862E12, 0.2833333333333333], [1.65125796E12, 0.11666666666666667], [1.65125802E12, 0.06666666666666667], [1.65125736E12, 0.03333333333333333], [1.65125832E12, 0.13333333333333333], [1.65125706E12, 0.03333333333333333], [1.65125838E12, 0.18333333333333332], [1.65125868E12, 0.11666666666666667], [1.65125742E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65125868E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "maxY": 11491.0, "series": [{"data": [[0.0, 34.0], [0.1, 35.0], [0.2, 37.0], [0.3, 39.0], [0.4, 39.0], [0.5, 40.0], [0.6, 41.0], [0.7, 43.0], [0.8, 44.0], [0.9, 45.0], [1.0, 46.0], [1.1, 48.0], [1.2, 48.0], [1.3, 53.0], [1.4, 54.0], [1.5, 57.0], [1.6, 57.0], [1.7, 59.0], [1.8, 60.0], [1.9, 62.0], [2.0, 63.0], [2.1, 64.0], [2.2, 65.0], [2.3, 70.0], [2.4, 71.0], [2.5, 72.0], [2.6, 73.0], [2.7, 74.0], [2.8, 74.0], [2.9, 76.0], [3.0, 79.0], [3.1, 80.0], [3.2, 81.0], [3.3, 83.0], [3.4, 84.0], [3.5, 85.0], [3.6, 85.0], [3.7, 86.0], [3.8, 87.0], [3.9, 88.0], [4.0, 89.0], [4.1, 89.0], [4.2, 90.0], [4.3, 92.0], [4.4, 95.0], [4.5, 98.0], [4.6, 100.0], [4.7, 101.0], [4.8, 105.0], [4.9, 106.0], [5.0, 107.0], [5.1, 108.0], [5.2, 109.0], [5.3, 111.0], [5.4, 114.0], [5.5, 114.0], [5.6, 115.0], [5.7, 116.0], [5.8, 116.0], [5.9, 118.0], [6.0, 118.0], [6.1, 120.0], [6.2, 122.0], [6.3, 123.0], [6.4, 125.0], [6.5, 126.0], [6.6, 127.0], [6.7, 127.0], [6.8, 130.0], [6.9, 131.0], [7.0, 133.0], [7.1, 134.0], [7.2, 136.0], [7.3, 138.0], [7.4, 140.0], [7.5, 140.0], [7.6, 144.0], [7.7, 144.0], [7.8, 146.0], [7.9, 146.0], [8.0, 148.0], [8.1, 151.0], [8.2, 152.0], [8.3, 154.0], [8.4, 155.0], [8.5, 163.0], [8.6, 163.0], [8.7, 166.0], [8.8, 168.0], [8.9, 172.0], [9.0, 175.0], [9.1, 176.0], [9.2, 177.0], [9.3, 177.0], [9.4, 178.0], [9.5, 181.0], [9.6, 183.0], [9.7, 184.0], [9.8, 186.0], [9.9, 189.0], [10.0, 190.0], [10.1, 191.0], [10.2, 192.0], [10.3, 199.0], [10.4, 201.0], [10.5, 202.0], [10.6, 204.0], [10.7, 207.0], [10.8, 211.0], [10.9, 213.0], [11.0, 214.0], [11.1, 216.0], [11.2, 217.0], [11.3, 219.0], [11.4, 220.0], [11.5, 224.0], [11.6, 225.0], [11.7, 228.0], [11.8, 229.0], [11.9, 231.0], [12.0, 235.0], [12.1, 239.0], [12.2, 241.0], [12.3, 241.0], [12.4, 243.0], [12.5, 245.0], [12.6, 246.0], [12.7, 247.0], [12.8, 248.0], [12.9, 249.0], [13.0, 250.0], [13.1, 253.0], [13.2, 255.0], [13.3, 258.0], [13.4, 259.0], [13.5, 260.0], [13.6, 263.0], [13.7, 267.0], [13.8, 269.0], [13.9, 272.0], [14.0, 275.0], [14.1, 276.0], [14.2, 278.0], [14.3, 279.0], [14.4, 282.0], [14.5, 284.0], [14.6, 287.0], [14.7, 289.0], [14.8, 293.0], [14.9, 296.0], [15.0, 297.0], [15.1, 298.0], [15.2, 300.0], [15.3, 302.0], [15.4, 304.0], [15.5, 306.0], [15.6, 310.0], [15.7, 313.0], [15.8, 315.0], [15.9, 317.0], [16.0, 320.0], [16.1, 321.0], [16.2, 324.0], [16.3, 327.0], [16.4, 329.0], [16.5, 331.0], [16.6, 335.0], [16.7, 337.0], [16.8, 343.0], [16.9, 350.0], [17.0, 352.0], [17.1, 354.0], [17.2, 359.0], [17.3, 360.0], [17.4, 361.0], [17.5, 364.0], [17.6, 368.0], [17.7, 369.0], [17.8, 371.0], [17.9, 374.0], [18.0, 377.0], [18.1, 379.0], [18.2, 380.0], [18.3, 381.0], [18.4, 383.0], [18.5, 387.0], [18.6, 388.0], [18.7, 392.0], [18.8, 398.0], [18.9, 402.0], [19.0, 404.0], [19.1, 406.0], [19.2, 408.0], [19.3, 412.0], [19.4, 414.0], [19.5, 416.0], [19.6, 418.0], [19.7, 420.0], [19.8, 423.0], [19.9, 426.0], [20.0, 430.0], [20.1, 435.0], [20.2, 437.0], [20.3, 444.0], [20.4, 445.0], [20.5, 447.0], [20.6, 450.0], [20.7, 459.0], [20.8, 463.0], [20.9, 464.0], [21.0, 468.0], [21.1, 473.0], [21.2, 475.0], [21.3, 476.0], [21.4, 477.0], [21.5, 485.0], [21.6, 486.0], [21.7, 492.0], [21.8, 496.0], [21.9, 511.0], [22.0, 513.0], [22.1, 522.0], [22.2, 525.0], [22.3, 535.0], [22.4, 538.0], [22.5, 544.0], [22.6, 550.0], [22.7, 557.0], [22.8, 562.0], [22.9, 563.0], [23.0, 569.0], [23.1, 576.0], [23.2, 584.0], [23.3, 584.0], [23.4, 585.0], [23.5, 586.0], [23.6, 588.0], [23.7, 594.0], [23.8, 601.0], [23.9, 607.0], [24.0, 611.0], [24.1, 622.0], [24.2, 628.0], [24.3, 630.0], [24.4, 633.0], [24.5, 640.0], [24.6, 647.0], [24.7, 651.0], [24.8, 659.0], [24.9, 660.0], [25.0, 673.0], [25.1, 683.0], [25.2, 692.0], [25.3, 696.0], [25.4, 705.0], [25.5, 709.0], [25.6, 718.0], [25.7, 726.0], [25.8, 731.0], [25.9, 736.0], [26.0, 746.0], [26.1, 750.0], [26.2, 763.0], [26.3, 765.0], [26.4, 770.0], [26.5, 786.0], [26.6, 791.0], [26.7, 797.0], [26.8, 827.0], [26.9, 831.0], [27.0, 848.0], [27.1, 856.0], [27.2, 861.0], [27.3, 865.0], [27.4, 873.0], [27.5, 877.0], [27.6, 881.0], [27.7, 891.0], [27.8, 914.0], [27.9, 935.0], [28.0, 939.0], [28.1, 952.0], [28.2, 962.0], [28.3, 967.0], [28.4, 968.0], [28.5, 987.0], [28.6, 997.0], [28.7, 1017.0], [28.8, 1022.0], [28.9, 1032.0], [29.0, 1034.0], [29.1, 1037.0], [29.2, 1045.0], [29.3, 1056.0], [29.4, 1063.0], [29.5, 1071.0], [29.6, 1080.0], [29.7, 1099.0], [29.8, 1113.0], [29.9, 1118.0], [30.0, 1123.0], [30.1, 1131.0], [30.2, 1135.0], [30.3, 1155.0], [30.4, 1161.0], [30.5, 1185.0], [30.6, 1191.0], [30.7, 1198.0], [30.8, 1218.0], [30.9, 1229.0], [31.0, 1246.0], [31.1, 1259.0], [31.2, 1290.0], [31.3, 1342.0], [31.4, 1361.0], [31.5, 1409.0], [31.6, 1448.0], [31.7, 1462.0], [31.8, 1489.0], [31.9, 1553.0], [32.0, 1578.0], [32.1, 1627.0], [32.2, 1652.0], [32.3, 1706.0], [32.4, 1770.0], [32.5, 1776.0], [32.6, 1803.0], [32.7, 1845.0], [32.8, 1916.0], [32.9, 1939.0], [33.0, 1961.0], [33.1, 1984.0], [33.2, 2034.0], [33.3, 2054.0], [33.4, 2108.0], [33.5, 2145.0], [33.6, 2163.0], [33.7, 2185.0], [33.8, 2214.0], [33.9, 2272.0], [34.0, 2348.0], [34.1, 2365.0], [34.2, 2401.0], [34.3, 2422.0], [34.4, 2445.0], [34.5, 2461.0], [34.6, 2495.0], [34.7, 2528.0], [34.8, 2539.0], [34.9, 2573.0], [35.0, 2650.0], [35.1, 2660.0], [35.2, 2755.0], [35.3, 2841.0], [35.4, 3210.0], [35.5, 3246.0], [35.6, 3328.0], [35.7, 3412.0], [35.8, 3541.0], [35.9, 3597.0], [36.0, 3692.0], [36.1, 3801.0], [36.2, 3842.0], [36.3, 3889.0], [36.4, 3921.0], [36.5, 4031.0], [36.6, 4115.0], [36.7, 4209.0], [36.8, 4311.0], [36.9, 4399.0], [37.0, 4431.0], [37.1, 4674.0], [37.2, 4704.0], [37.3, 4911.0], [37.4, 4951.0], [37.5, 5028.0], [37.6, 5124.0], [37.7, 5263.0], [37.8, 5437.0], [37.9, 5596.0], [38.0, 5784.0], [38.1, 6037.0], [38.2, 6056.0], [38.3, 6367.0], [38.4, 6601.0], [38.5, 6719.0], [38.6, 6879.0], [38.7, 7070.0], [38.8, 7155.0], [38.9, 7264.0], [39.0, 7365.0], [39.1, 7526.0], [39.2, 7589.0], [39.3, 7789.0], [39.4, 7866.0], [39.5, 8113.0], [39.6, 8250.0], [39.7, 8361.0], [39.8, 8404.0], [39.9, 8513.0], [40.0, 8555.0], [40.1, 8666.0], [40.2, 8700.0], [40.3, 8767.0], [40.4, 8771.0], [40.5, 8810.0], [40.6, 8897.0], [40.7, 9003.0], [40.8, 9054.0], [40.9, 9073.0], [41.0, 9088.0], [41.1, 9142.0], [41.2, 9170.0], [41.3, 9211.0], [41.4, 9259.0], [41.5, 9264.0], [41.6, 9270.0], [41.7, 9288.0], [41.8, 9337.0], [41.9, 9363.0], [42.0, 9396.0], [42.1, 9413.0], [42.2, 9431.0], [42.3, 9439.0], [42.4, 9451.0], [42.5, 9457.0], [42.6, 9485.0], [42.7, 9495.0], [42.8, 9504.0], [42.9, 9509.0], [43.0, 9516.0], [43.1, 9519.0], [43.2, 9535.0], [43.3, 9539.0], [43.4, 9541.0], [43.5, 9551.0], [43.6, 9556.0], [43.7, 9565.0], [43.8, 9566.0], [43.9, 9568.0], [44.0, 9573.0], [44.1, 9578.0], [44.2, 9580.0], [44.3, 9584.0], [44.4, 9588.0], [44.5, 9589.0], [44.6, 9597.0], [44.7, 9601.0], [44.8, 9604.0], [44.9, 9605.0], [45.0, 9608.0], [45.1, 9612.0], [45.2, 9614.0], [45.3, 9618.0], [45.4, 9619.0], [45.5, 9622.0], [45.6, 9625.0], [45.7, 9628.0], [45.8, 9632.0], [45.9, 9634.0], [46.0, 9635.0], [46.1, 9637.0], [46.2, 9640.0], [46.3, 9644.0], [46.4, 9644.0], [46.5, 9646.0], [46.6, 9647.0], [46.7, 9650.0], [46.8, 9650.0], [46.9, 9650.0], [47.0, 9652.0], [47.1, 9654.0], [47.2, 9655.0], [47.3, 9657.0], [47.4, 9660.0], [47.5, 9664.0], [47.6, 9664.0], [47.7, 9665.0], [47.8, 9666.0], [47.9, 9669.0], [48.0, 9670.0], [48.1, 9672.0], [48.2, 9674.0], [48.3, 9676.0], [48.4, 9678.0], [48.5, 9679.0], [48.6, 9681.0], [48.7, 9683.0], [48.8, 9684.0], [48.9, 9686.0], [49.0, 9686.0], [49.1, 9687.0], [49.2, 9688.0], [49.3, 9690.0], [49.4, 9690.0], [49.5, 9693.0], [49.6, 9695.0], [49.7, 9696.0], [49.8, 9697.0], [49.9, 9698.0], [50.0, 9700.0], [50.1, 9701.0], [50.2, 9702.0], [50.3, 9703.0], [50.4, 9705.0], [50.5, 9706.0], [50.6, 9707.0], [50.7, 9708.0], [50.8, 9710.0], [50.9, 9710.0], [51.0, 9711.0], [51.1, 9711.0], [51.2, 9714.0], [51.3, 9716.0], [51.4, 9717.0], [51.5, 9718.0], [51.6, 9719.0], [51.7, 9720.0], [51.8, 9721.0], [51.9, 9721.0], [52.0, 9722.0], [52.1, 9723.0], [52.2, 9723.0], [52.3, 9724.0], [52.4, 9725.0], [52.5, 9725.0], [52.6, 9726.0], [52.7, 9726.0], [52.8, 9727.0], [52.9, 9728.0], [53.0, 9731.0], [53.1, 9732.0], [53.2, 9734.0], [53.3, 9734.0], [53.4, 9735.0], [53.5, 9735.0], [53.6, 9736.0], [53.7, 9737.0], [53.8, 9738.0], [53.9, 9738.0], [54.0, 9739.0], [54.1, 9740.0], [54.2, 9741.0], [54.3, 9741.0], [54.4, 9743.0], [54.5, 9743.0], [54.6, 9743.0], [54.7, 9744.0], [54.8, 9744.0], [54.9, 9745.0], [55.0, 9746.0], [55.1, 9746.0], [55.2, 9747.0], [55.3, 9749.0], [55.4, 9749.0], [55.5, 9751.0], [55.6, 9752.0], [55.7, 9753.0], [55.8, 9754.0], [55.9, 9755.0], [56.0, 9755.0], [56.1, 9756.0], [56.2, 9756.0], [56.3, 9757.0], [56.4, 9757.0], [56.5, 9758.0], [56.6, 9759.0], [56.7, 9760.0], [56.8, 9760.0], [56.9, 9761.0], [57.0, 9761.0], [57.1, 9762.0], [57.2, 9763.0], [57.3, 9764.0], [57.4, 9765.0], [57.5, 9766.0], [57.6, 9767.0], [57.7, 9767.0], [57.8, 9768.0], [57.9, 9769.0], [58.0, 9771.0], [58.1, 9773.0], [58.2, 9773.0], [58.3, 9774.0], [58.4, 9775.0], [58.5, 9775.0], [58.6, 9776.0], [58.7, 9777.0], [58.8, 9777.0], [58.9, 9778.0], [59.0, 9778.0], [59.1, 9779.0], [59.2, 9779.0], [59.3, 9780.0], [59.4, 9780.0], [59.5, 9780.0], [59.6, 9781.0], [59.7, 9782.0], [59.8, 9783.0], [59.9, 9784.0], [60.0, 9785.0], [60.1, 9785.0], [60.2, 9786.0], [60.3, 9786.0], [60.4, 9787.0], [60.5, 9787.0], [60.6, 9788.0], [60.7, 9788.0], [60.8, 9789.0], [60.9, 9790.0], [61.0, 9791.0], [61.1, 9791.0], [61.2, 9793.0], [61.3, 9793.0], [61.4, 9793.0], [61.5, 9794.0], [61.6, 9794.0], [61.7, 9795.0], [61.8, 9796.0], [61.9, 9797.0], [62.0, 9798.0], [62.1, 9798.0], [62.2, 9798.0], [62.3, 9799.0], [62.4, 9801.0], [62.5, 9801.0], [62.6, 9802.0], [62.7, 9802.0], [62.8, 9803.0], [62.9, 9804.0], [63.0, 9804.0], [63.1, 9805.0], [63.2, 9806.0], [63.3, 9806.0], [63.4, 9806.0], [63.5, 9807.0], [63.6, 9808.0], [63.7, 9808.0], [63.8, 9809.0], [63.9, 9810.0], [64.0, 9811.0], [64.1, 9812.0], [64.2, 9812.0], [64.3, 9813.0], [64.4, 9813.0], [64.5, 9813.0], [64.6, 9814.0], [64.7, 9815.0], [64.8, 9815.0], [64.9, 9816.0], [65.0, 9816.0], [65.1, 9817.0], [65.2, 9817.0], [65.3, 9818.0], [65.4, 9818.0], [65.5, 9819.0], [65.6, 9819.0], [65.7, 9820.0], [65.8, 9820.0], [65.9, 9821.0], [66.0, 9821.0], [66.1, 9822.0], [66.2, 9822.0], [66.3, 9823.0], [66.4, 9823.0], [66.5, 9824.0], [66.6, 9825.0], [66.7, 9825.0], [66.8, 9825.0], [66.9, 9826.0], [67.0, 9826.0], [67.1, 9827.0], [67.2, 9827.0], [67.3, 9828.0], [67.4, 9829.0], [67.5, 9829.0], [67.6, 9830.0], [67.7, 9831.0], [67.8, 9831.0], [67.9, 9832.0], [68.0, 9832.0], [68.1, 9833.0], [68.2, 9833.0], [68.3, 9833.0], [68.4, 9834.0], [68.5, 9835.0], [68.6, 9835.0], [68.7, 9835.0], [68.8, 9837.0], [68.9, 9837.0], [69.0, 9838.0], [69.1, 9839.0], [69.2, 9840.0], [69.3, 9840.0], [69.4, 9841.0], [69.5, 9841.0], [69.6, 9842.0], [69.7, 9842.0], [69.8, 9843.0], [69.9, 9844.0], [70.0, 9844.0], [70.1, 9844.0], [70.2, 9845.0], [70.3, 9845.0], [70.4, 9845.0], [70.5, 9845.0], [70.6, 9846.0], [70.7, 9847.0], [70.8, 9847.0], [70.9, 9848.0], [71.0, 9849.0], [71.1, 9850.0], [71.2, 9851.0], [71.3, 9851.0], [71.4, 9851.0], [71.5, 9852.0], [71.6, 9853.0], [71.7, 9853.0], [71.8, 9855.0], [71.9, 9855.0], [72.0, 9856.0], [72.1, 9857.0], [72.2, 9857.0], [72.3, 9858.0], [72.4, 9859.0], [72.5, 9859.0], [72.6, 9860.0], [72.7, 9861.0], [72.8, 9862.0], [72.9, 9863.0], [73.0, 9863.0], [73.1, 9864.0], [73.2, 9864.0], [73.3, 9864.0], [73.4, 9865.0], [73.5, 9866.0], [73.6, 9866.0], [73.7, 9867.0], [73.8, 9867.0], [73.9, 9868.0], [74.0, 9869.0], [74.1, 9869.0], [74.2, 9870.0], [74.3, 9870.0], [74.4, 9870.0], [74.5, 9872.0], [74.6, 9873.0], [74.7, 9874.0], [74.8, 9874.0], [74.9, 9875.0], [75.0, 9875.0], [75.1, 9876.0], [75.2, 9876.0], [75.3, 9876.0], [75.4, 9877.0], [75.5, 9877.0], [75.6, 9878.0], [75.7, 9878.0], [75.8, 9879.0], [75.9, 9880.0], [76.0, 9880.0], [76.1, 9881.0], [76.2, 9882.0], [76.3, 9883.0], [76.4, 9883.0], [76.5, 9884.0], [76.6, 9884.0], [76.7, 9885.0], [76.8, 9885.0], [76.9, 9885.0], [77.0, 9886.0], [77.1, 9887.0], [77.2, 9887.0], [77.3, 9888.0], [77.4, 9889.0], [77.5, 9890.0], [77.6, 9891.0], [77.7, 9892.0], [77.8, 9892.0], [77.9, 9894.0], [78.0, 9894.0], [78.1, 9895.0], [78.2, 9895.0], [78.3, 9896.0], [78.4, 9897.0], [78.5, 9898.0], [78.6, 9899.0], [78.7, 9899.0], [78.8, 9900.0], [78.9, 9900.0], [79.0, 9901.0], [79.1, 9901.0], [79.2, 9902.0], [79.3, 9903.0], [79.4, 9905.0], [79.5, 9905.0], [79.6, 9906.0], [79.7, 9906.0], [79.8, 9907.0], [79.9, 9908.0], [80.0, 9908.0], [80.1, 9909.0], [80.2, 9909.0], [80.3, 9910.0], [80.4, 9911.0], [80.5, 9911.0], [80.6, 9913.0], [80.7, 9913.0], [80.8, 9914.0], [80.9, 9914.0], [81.0, 9915.0], [81.1, 9915.0], [81.2, 9916.0], [81.3, 9916.0], [81.4, 9917.0], [81.5, 9919.0], [81.6, 9919.0], [81.7, 9920.0], [81.8, 9920.0], [81.9, 9921.0], [82.0, 9921.0], [82.1, 9921.0], [82.2, 9923.0], [82.3, 9925.0], [82.4, 9925.0], [82.5, 9925.0], [82.6, 9926.0], [82.7, 9927.0], [82.8, 9927.0], [82.9, 9927.0], [83.0, 9928.0], [83.1, 9930.0], [83.2, 9930.0], [83.3, 9931.0], [83.4, 9931.0], [83.5, 9932.0], [83.6, 9932.0], [83.7, 9933.0], [83.8, 9934.0], [83.9, 9936.0], [84.0, 9937.0], [84.1, 9937.0], [84.2, 9938.0], [84.3, 9939.0], [84.4, 9940.0], [84.5, 9940.0], [84.6, 9940.0], [84.7, 9940.0], [84.8, 9941.0], [84.9, 9941.0], [85.0, 9943.0], [85.1, 9944.0], [85.2, 9945.0], [85.3, 9946.0], [85.4, 9946.0], [85.5, 9946.0], [85.6, 9947.0], [85.7, 9948.0], [85.8, 9949.0], [85.9, 9949.0], [86.0, 9949.0], [86.1, 9951.0], [86.2, 9951.0], [86.3, 9952.0], [86.4, 9952.0], [86.5, 9952.0], [86.6, 9953.0], [86.7, 9954.0], [86.8, 9955.0], [86.9, 9956.0], [87.0, 9957.0], [87.1, 9958.0], [87.2, 9959.0], [87.3, 9959.0], [87.4, 9960.0], [87.5, 9961.0], [87.6, 9963.0], [87.7, 9963.0], [87.8, 9965.0], [87.9, 9966.0], [88.0, 9967.0], [88.1, 9967.0], [88.2, 9968.0], [88.3, 9968.0], [88.4, 9969.0], [88.5, 9969.0], [88.6, 9970.0], [88.7, 9972.0], [88.8, 9974.0], [88.9, 9974.0], [89.0, 9974.0], [89.1, 9975.0], [89.2, 9976.0], [89.3, 9977.0], [89.4, 9978.0], [89.5, 9979.0], [89.6, 9980.0], [89.7, 9981.0], [89.8, 9981.0], [89.9, 9982.0], [90.0, 9983.0], [90.1, 9983.0], [90.2, 9985.0], [90.3, 9985.0], [90.4, 9987.0], [90.5, 9988.0], [90.6, 9988.0], [90.7, 9989.0], [90.8, 9990.0], [90.9, 9991.0], [91.0, 9992.0], [91.1, 9994.0], [91.2, 9996.0], [91.3, 9998.0], [91.4, 9998.0], [91.5, 9999.0], [91.6, 9999.0], [91.7, 10000.0], [91.8, 10001.0], [91.9, 10003.0], [92.0, 10003.0], [92.1, 10005.0], [92.2, 10005.0], [92.3, 10006.0], [92.4, 10007.0], [92.5, 10009.0], [92.6, 10011.0], [92.7, 10012.0], [92.8, 10012.0], [92.9, 10014.0], [93.0, 10015.0], [93.1, 10016.0], [93.2, 10016.0], [93.3, 10017.0], [93.4, 10017.0], [93.5, 10018.0], [93.6, 10019.0], [93.7, 10020.0], [93.8, 10021.0], [93.9, 10025.0], [94.0, 10027.0], [94.1, 10027.0], [94.2, 10029.0], [94.3, 10030.0], [94.4, 10032.0], [94.5, 10034.0], [94.6, 10034.0], [94.7, 10035.0], [94.8, 10036.0], [94.9, 10039.0], [95.0, 10039.0], [95.1, 10040.0], [95.2, 10041.0], [95.3, 10042.0], [95.4, 10043.0], [95.5, 10043.0], [95.6, 10043.0], [95.7, 10044.0], [95.8, 10045.0], [95.9, 10046.0], [96.0, 10047.0], [96.1, 10048.0], [96.2, 10049.0], [96.3, 10050.0], [96.4, 10051.0], [96.5, 10051.0], [96.6, 10052.0], [96.7, 10054.0], [96.8, 10054.0], [96.9, 10055.0], [97.0, 10057.0], [97.1, 10060.0], [97.2, 10061.0], [97.3, 10062.0], [97.4, 10062.0], [97.5, 10065.0], [97.6, 10066.0], [97.7, 10067.0], [97.8, 10068.0], [97.9, 10069.0], [98.0, 10070.0], [98.1, 10073.0], [98.2, 10074.0], [98.3, 10079.0], [98.4, 10080.0], [98.5, 10082.0], [98.6, 10087.0], [98.7, 10094.0], [98.8, 10096.0], [98.9, 10107.0], [99.0, 10114.0], [99.1, 10119.0], [99.2, 10126.0], [99.3, 10157.0], [99.4, 10213.0], [99.5, 10387.0], [99.6, 10882.0], [99.7, 10910.0], [99.8, 11203.0], [99.9, 11411.0]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[0.0, 19.0], [0.1, 20.0], [0.2, 21.0], [0.3, 23.0], [0.4, 24.0], [0.5, 27.0], [0.6, 28.0], [0.7, 29.0], [0.8, 30.0], [0.9, 30.0], [1.0, 32.0], [1.1, 33.0], [1.2, 34.0], [1.3, 35.0], [1.4, 36.0], [1.5, 38.0], [1.6, 39.0], [1.7, 40.0], [1.8, 41.0], [1.9, 41.0], [2.0, 41.0], [2.1, 42.0], [2.2, 43.0], [2.3, 44.0], [2.4, 44.0], [2.5, 44.0], [2.6, 46.0], [2.7, 46.0], [2.8, 47.0], [2.9, 48.0], [3.0, 51.0], [3.1, 51.0], [3.2, 53.0], [3.3, 54.0], [3.4, 56.0], [3.5, 58.0], [3.6, 59.0], [3.7, 60.0], [3.8, 62.0], [3.9, 63.0], [4.0, 64.0], [4.1, 65.0], [4.2, 66.0], [4.3, 66.0], [4.4, 68.0], [4.5, 68.0], [4.6, 68.0], [4.7, 71.0], [4.8, 73.0], [4.9, 73.0], [5.0, 74.0], [5.1, 76.0], [5.2, 76.0], [5.3, 78.0], [5.4, 79.0], [5.5, 80.0], [5.6, 81.0], [5.7, 81.0], [5.8, 87.0], [5.9, 88.0], [6.0, 89.0], [6.1, 90.0], [6.2, 91.0], [6.3, 91.0], [6.4, 92.0], [6.5, 95.0], [6.6, 97.0], [6.7, 97.0], [6.8, 99.0], [6.9, 100.0], [7.0, 102.0], [7.1, 105.0], [7.2, 107.0], [7.3, 108.0], [7.4, 110.0], [7.5, 112.0], [7.6, 115.0], [7.7, 118.0], [7.8, 119.0], [7.9, 120.0], [8.0, 121.0], [8.1, 121.0], [8.2, 123.0], [8.3, 125.0], [8.4, 127.0], [8.5, 130.0], [8.6, 130.0], [8.7, 130.0], [8.8, 132.0], [8.9, 135.0], [9.0, 138.0], [9.1, 139.0], [9.2, 142.0], [9.3, 144.0], [9.4, 146.0], [9.5, 150.0], [9.6, 152.0], [9.7, 155.0], [9.8, 158.0], [9.9, 159.0], [10.0, 160.0], [10.1, 163.0], [10.2, 166.0], [10.3, 167.0], [10.4, 170.0], [10.5, 172.0], [10.6, 173.0], [10.7, 173.0], [10.8, 176.0], [10.9, 179.0], [11.0, 179.0], [11.1, 181.0], [11.2, 182.0], [11.3, 184.0], [11.4, 187.0], [11.5, 188.0], [11.6, 191.0], [11.7, 193.0], [11.8, 194.0], [11.9, 195.0], [12.0, 197.0], [12.1, 198.0], [12.2, 199.0], [12.3, 201.0], [12.4, 202.0], [12.5, 203.0], [12.6, 204.0], [12.7, 210.0], [12.8, 212.0], [12.9, 212.0], [13.0, 214.0], [13.1, 215.0], [13.2, 216.0], [13.3, 217.0], [13.4, 219.0], [13.5, 221.0], [13.6, 222.0], [13.7, 222.0], [13.8, 222.0], [13.9, 224.0], [14.0, 225.0], [14.1, 225.0], [14.2, 229.0], [14.3, 230.0], [14.4, 231.0], [14.5, 232.0], [14.6, 234.0], [14.7, 236.0], [14.8, 236.0], [14.9, 239.0], [15.0, 240.0], [15.1, 243.0], [15.2, 244.0], [15.3, 248.0], [15.4, 249.0], [15.5, 252.0], [15.6, 252.0], [15.7, 253.0], [15.8, 255.0], [15.9, 258.0], [16.0, 259.0], [16.1, 261.0], [16.2, 261.0], [16.3, 263.0], [16.4, 265.0], [16.5, 268.0], [16.6, 273.0], [16.7, 274.0], [16.8, 274.0], [16.9, 276.0], [17.0, 277.0], [17.1, 279.0], [17.2, 281.0], [17.3, 284.0], [17.4, 286.0], [17.5, 288.0], [17.6, 290.0], [17.7, 293.0], [17.8, 297.0], [17.9, 298.0], [18.0, 299.0], [18.1, 299.0], [18.2, 305.0], [18.3, 307.0], [18.4, 311.0], [18.5, 313.0], [18.6, 316.0], [18.7, 317.0], [18.8, 319.0], [18.9, 322.0], [19.0, 325.0], [19.1, 326.0], [19.2, 329.0], [19.3, 330.0], [19.4, 334.0], [19.5, 334.0], [19.6, 336.0], [19.7, 338.0], [19.8, 339.0], [19.9, 342.0], [20.0, 344.0], [20.1, 345.0], [20.2, 346.0], [20.3, 348.0], [20.4, 348.0], [20.5, 351.0], [20.6, 355.0], [20.7, 356.0], [20.8, 360.0], [20.9, 361.0], [21.0, 367.0], [21.1, 371.0], [21.2, 373.0], [21.3, 376.0], [21.4, 381.0], [21.5, 393.0], [21.6, 395.0], [21.7, 397.0], [21.8, 400.0], [21.9, 407.0], [22.0, 407.0], [22.1, 409.0], [22.2, 416.0], [22.3, 418.0], [22.4, 420.0], [22.5, 421.0], [22.6, 425.0], [22.7, 427.0], [22.8, 436.0], [22.9, 440.0], [23.0, 444.0], [23.1, 450.0], [23.2, 451.0], [23.3, 456.0], [23.4, 467.0], [23.5, 469.0], [23.6, 477.0], [23.7, 481.0], [23.8, 484.0], [23.9, 486.0], [24.0, 487.0], [24.1, 489.0], [24.2, 493.0], [24.3, 494.0], [24.4, 498.0], [24.5, 501.0], [24.6, 506.0], [24.7, 514.0], [24.8, 516.0], [24.9, 520.0], [25.0, 521.0], [25.1, 523.0], [25.2, 538.0], [25.3, 539.0], [25.4, 541.0], [25.5, 545.0], [25.6, 546.0], [25.7, 548.0], [25.8, 550.0], [25.9, 554.0], [26.0, 558.0], [26.1, 563.0], [26.2, 565.0], [26.3, 566.0], [26.4, 567.0], [26.5, 572.0], [26.6, 573.0], [26.7, 579.0], [26.8, 585.0], [26.9, 588.0], [27.0, 593.0], [27.1, 597.0], [27.2, 606.0], [27.3, 617.0], [27.4, 621.0], [27.5, 639.0], [27.6, 645.0], [27.7, 660.0], [27.8, 661.0], [27.9, 672.0], [28.0, 681.0], [28.1, 682.0], [28.2, 686.0], [28.3, 700.0], [28.4, 722.0], [28.5, 737.0], [28.6, 749.0], [28.7, 759.0], [28.8, 771.0], [28.9, 783.0], [29.0, 789.0], [29.1, 801.0], [29.2, 805.0], [29.3, 827.0], [29.4, 840.0], [29.5, 857.0], [29.6, 861.0], [29.7, 868.0], [29.8, 877.0], [29.9, 880.0], [30.0, 904.0], [30.1, 921.0], [30.2, 931.0], [30.3, 940.0], [30.4, 963.0], [30.5, 968.0], [30.6, 970.0], [30.7, 984.0], [30.8, 991.0], [30.9, 998.0], [31.0, 1001.0], [31.1, 1003.0], [31.2, 1013.0], [31.3, 1020.0], [31.4, 1035.0], [31.5, 1037.0], [31.6, 1062.0], [31.7, 1070.0], [31.8, 1084.0], [31.9, 1110.0], [32.0, 1120.0], [32.1, 1129.0], [32.2, 1131.0], [32.3, 1150.0], [32.4, 1157.0], [32.5, 1165.0], [32.6, 1173.0], [32.7, 1187.0], [32.8, 1205.0], [32.9, 1211.0], [33.0, 1213.0], [33.1, 1222.0], [33.2, 1231.0], [33.3, 1233.0], [33.4, 1249.0], [33.5, 1261.0], [33.6, 1295.0], [33.7, 1323.0], [33.8, 1325.0], [33.9, 1383.0], [34.0, 1398.0], [34.1, 1410.0], [34.2, 1498.0], [34.3, 1502.0], [34.4, 1557.0], [34.5, 1575.0], [34.6, 1608.0], [34.7, 1611.0], [34.8, 1667.0], [34.9, 1699.0], [35.0, 1730.0], [35.1, 1807.0], [35.2, 1819.0], [35.3, 1878.0], [35.4, 1920.0], [35.5, 1983.0], [35.6, 2002.0], [35.7, 2026.0], [35.8, 2049.0], [35.9, 2058.0], [36.0, 2131.0], [36.1, 2135.0], [36.2, 2158.0], [36.3, 2209.0], [36.4, 2228.0], [36.5, 2264.0], [36.6, 2281.0], [36.7, 2322.0], [36.8, 2344.0], [36.9, 2363.0], [37.0, 2381.0], [37.1, 2405.0], [37.2, 2448.0], [37.3, 2522.0], [37.4, 2748.0], [37.5, 3072.0], [37.6, 3294.0], [37.7, 3426.0], [37.8, 3631.0], [37.9, 3703.0], [38.0, 3753.0], [38.1, 3831.0], [38.2, 3897.0], [38.3, 3955.0], [38.4, 3962.0], [38.5, 3981.0], [38.6, 4020.0], [38.7, 4158.0], [38.8, 4492.0], [38.9, 4866.0], [39.0, 4928.0], [39.1, 5000.0], [39.2, 5907.0], [39.3, 6367.0], [39.4, 7298.0], [39.5, 7577.0], [39.6, 7607.0], [39.7, 7703.0], [39.8, 7724.0], [39.9, 7991.0], [40.0, 8185.0], [40.1, 8373.0], [40.2, 8469.0], [40.3, 8504.0], [40.4, 8665.0], [40.5, 8698.0], [40.6, 8847.0], [40.7, 8907.0], [40.8, 8984.0], [40.9, 8992.0], [41.0, 9017.0], [41.1, 9143.0], [41.2, 9180.0], [41.3, 9235.0], [41.4, 9270.0], [41.5, 9312.0], [41.6, 9344.0], [41.7, 9361.0], [41.8, 9383.0], [41.9, 9399.0], [42.0, 9414.0], [42.1, 9423.0], [42.2, 9440.0], [42.3, 9447.0], [42.4, 9475.0], [42.5, 9486.0], [42.6, 9496.0], [42.7, 9502.0], [42.8, 9512.0], [42.9, 9519.0], [43.0, 9524.0], [43.1, 9535.0], [43.2, 9536.0], [43.3, 9540.0], [43.4, 9545.0], [43.5, 9548.0], [43.6, 9555.0], [43.7, 9556.0], [43.8, 9563.0], [43.9, 9569.0], [44.0, 9569.0], [44.1, 9576.0], [44.2, 9576.0], [44.3, 9579.0], [44.4, 9581.0], [44.5, 9589.0], [44.6, 9592.0], [44.7, 9593.0], [44.8, 9600.0], [44.9, 9601.0], [45.0, 9603.0], [45.1, 9607.0], [45.2, 9613.0], [45.3, 9616.0], [45.4, 9621.0], [45.5, 9622.0], [45.6, 9624.0], [45.7, 9626.0], [45.8, 9627.0], [45.9, 9630.0], [46.0, 9632.0], [46.1, 9635.0], [46.2, 9636.0], [46.3, 9637.0], [46.4, 9638.0], [46.5, 9640.0], [46.6, 9642.0], [46.7, 9644.0], [46.8, 9646.0], [46.9, 9648.0], [47.0, 9648.0], [47.1, 9652.0], [47.2, 9653.0], [47.3, 9655.0], [47.4, 9656.0], [47.5, 9657.0], [47.6, 9657.0], [47.7, 9660.0], [47.8, 9662.0], [47.9, 9663.0], [48.0, 9668.0], [48.1, 9670.0], [48.2, 9671.0], [48.3, 9673.0], [48.4, 9675.0], [48.5, 9676.0], [48.6, 9677.0], [48.7, 9678.0], [48.8, 9679.0], [48.9, 9680.0], [49.0, 9680.0], [49.1, 9681.0], [49.2, 9682.0], [49.3, 9682.0], [49.4, 9684.0], [49.5, 9684.0], [49.6, 9685.0], [49.7, 9685.0], [49.8, 9688.0], [49.9, 9688.0], [50.0, 9690.0], [50.1, 9691.0], [50.2, 9693.0], [50.3, 9695.0], [50.4, 9697.0], [50.5, 9698.0], [50.6, 9700.0], [50.7, 9701.0], [50.8, 9702.0], [50.9, 9703.0], [51.0, 9704.0], [51.1, 9705.0], [51.2, 9706.0], [51.3, 9707.0], [51.4, 9708.0], [51.5, 9708.0], [51.6, 9711.0], [51.7, 9714.0], [51.8, 9714.0], [51.9, 9715.0], [52.0, 9716.0], [52.1, 9716.0], [52.2, 9718.0], [52.3, 9718.0], [52.4, 9719.0], [52.5, 9719.0], [52.6, 9720.0], [52.7, 9720.0], [52.8, 9720.0], [52.9, 9721.0], [53.0, 9722.0], [53.1, 9722.0], [53.2, 9723.0], [53.3, 9724.0], [53.4, 9724.0], [53.5, 9724.0], [53.6, 9725.0], [53.7, 9728.0], [53.8, 9729.0], [53.9, 9730.0], [54.0, 9731.0], [54.1, 9732.0], [54.2, 9733.0], [54.3, 9733.0], [54.4, 9736.0], [54.5, 9737.0], [54.6, 9737.0], [54.7, 9738.0], [54.8, 9738.0], [54.9, 9739.0], [55.0, 9739.0], [55.1, 9740.0], [55.2, 9741.0], [55.3, 9742.0], [55.4, 9743.0], [55.5, 9743.0], [55.6, 9744.0], [55.7, 9745.0], [55.8, 9746.0], [55.9, 9746.0], [56.0, 9747.0], [56.1, 9748.0], [56.2, 9749.0], [56.3, 9749.0], [56.4, 9752.0], [56.5, 9753.0], [56.6, 9754.0], [56.7, 9754.0], [56.8, 9755.0], [56.9, 9756.0], [57.0, 9757.0], [57.1, 9757.0], [57.2, 9758.0], [57.3, 9759.0], [57.4, 9760.0], [57.5, 9761.0], [57.6, 9762.0], [57.7, 9763.0], [57.8, 9764.0], [57.9, 9765.0], [58.0, 9765.0], [58.1, 9766.0], [58.2, 9767.0], [58.3, 9767.0], [58.4, 9767.0], [58.5, 9769.0], [58.6, 9770.0], [58.7, 9770.0], [58.8, 9770.0], [58.9, 9771.0], [59.0, 9772.0], [59.1, 9773.0], [59.2, 9773.0], [59.3, 9774.0], [59.4, 9774.0], [59.5, 9775.0], [59.6, 9775.0], [59.7, 9776.0], [59.8, 9776.0], [59.9, 9776.0], [60.0, 9778.0], [60.1, 9779.0], [60.2, 9779.0], [60.3, 9781.0], [60.4, 9781.0], [60.5, 9782.0], [60.6, 9782.0], [60.7, 9783.0], [60.8, 9783.0], [60.9, 9785.0], [61.0, 9787.0], [61.1, 9788.0], [61.2, 9788.0], [61.3, 9788.0], [61.4, 9789.0], [61.5, 9790.0], [61.6, 9791.0], [61.7, 9791.0], [61.8, 9792.0], [61.9, 9793.0], [62.0, 9793.0], [62.1, 9794.0], [62.2, 9795.0], [62.3, 9796.0], [62.4, 9796.0], [62.5, 9798.0], [62.6, 9798.0], [62.7, 9799.0], [62.8, 9799.0], [62.9, 9800.0], [63.0, 9800.0], [63.1, 9801.0], [63.2, 9803.0], [63.3, 9803.0], [63.4, 9804.0], [63.5, 9804.0], [63.6, 9806.0], [63.7, 9806.0], [63.8, 9806.0], [63.9, 9807.0], [64.0, 9807.0], [64.1, 9808.0], [64.2, 9808.0], [64.3, 9809.0], [64.4, 9810.0], [64.5, 9810.0], [64.6, 9812.0], [64.7, 9813.0], [64.8, 9813.0], [64.9, 9814.0], [65.0, 9814.0], [65.1, 9815.0], [65.2, 9815.0], [65.3, 9815.0], [65.4, 9816.0], [65.5, 9817.0], [65.6, 9817.0], [65.7, 9817.0], [65.8, 9818.0], [65.9, 9818.0], [66.0, 9819.0], [66.1, 9819.0], [66.2, 9819.0], [66.3, 9820.0], [66.4, 9821.0], [66.5, 9822.0], [66.6, 9822.0], [66.7, 9824.0], [66.8, 9824.0], [66.9, 9824.0], [67.0, 9825.0], [67.1, 9825.0], [67.2, 9825.0], [67.3, 9826.0], [67.4, 9826.0], [67.5, 9827.0], [67.6, 9827.0], [67.7, 9827.0], [67.8, 9828.0], [67.9, 9829.0], [68.0, 9829.0], [68.1, 9830.0], [68.2, 9830.0], [68.3, 9831.0], [68.4, 9831.0], [68.5, 9831.0], [68.6, 9832.0], [68.7, 9832.0], [68.8, 9833.0], [68.9, 9833.0], [69.0, 9833.0], [69.1, 9834.0], [69.2, 9835.0], [69.3, 9836.0], [69.4, 9836.0], [69.5, 9837.0], [69.6, 9837.0], [69.7, 9838.0], [69.8, 9838.0], [69.9, 9838.0], [70.0, 9838.0], [70.1, 9839.0], [70.2, 9839.0], [70.3, 9840.0], [70.4, 9841.0], [70.5, 9841.0], [70.6, 9841.0], [70.7, 9841.0], [70.8, 9842.0], [70.9, 9843.0], [71.0, 9844.0], [71.1, 9844.0], [71.2, 9844.0], [71.3, 9845.0], [71.4, 9845.0], [71.5, 9846.0], [71.6, 9846.0], [71.7, 9847.0], [71.8, 9847.0], [71.9, 9847.0], [72.0, 9848.0], [72.1, 9848.0], [72.2, 9848.0], [72.3, 9848.0], [72.4, 9849.0], [72.5, 9850.0], [72.6, 9851.0], [72.7, 9851.0], [72.8, 9851.0], [72.9, 9852.0], [73.0, 9852.0], [73.1, 9853.0], [73.2, 9853.0], [73.3, 9853.0], [73.4, 9853.0], [73.5, 9853.0], [73.6, 9854.0], [73.7, 9855.0], [73.8, 9856.0], [73.9, 9857.0], [74.0, 9857.0], [74.1, 9857.0], [74.2, 9858.0], [74.3, 9858.0], [74.4, 9859.0], [74.5, 9860.0], [74.6, 9861.0], [74.7, 9862.0], [74.8, 9862.0], [74.9, 9862.0], [75.0, 9863.0], [75.1, 9863.0], [75.2, 9864.0], [75.3, 9864.0], [75.4, 9865.0], [75.5, 9867.0], [75.6, 9869.0], [75.7, 9869.0], [75.8, 9870.0], [75.9, 9870.0], [76.0, 9871.0], [76.1, 9872.0], [76.2, 9872.0], [76.3, 9872.0], [76.4, 9872.0], [76.5, 9873.0], [76.6, 9874.0], [76.7, 9874.0], [76.8, 9875.0], [76.9, 9876.0], [77.0, 9877.0], [77.1, 9878.0], [77.2, 9878.0], [77.3, 9878.0], [77.4, 9879.0], [77.5, 9879.0], [77.6, 9879.0], [77.7, 9880.0], [77.8, 9881.0], [77.9, 9882.0], [78.0, 9882.0], [78.1, 9882.0], [78.2, 9884.0], [78.3, 9885.0], [78.4, 9887.0], [78.5, 9887.0], [78.6, 9888.0], [78.7, 9889.0], [78.8, 9889.0], [78.9, 9890.0], [79.0, 9891.0], [79.1, 9892.0], [79.2, 9892.0], [79.3, 9893.0], [79.4, 9893.0], [79.5, 9894.0], [79.6, 9894.0], [79.7, 9895.0], [79.8, 9895.0], [79.9, 9895.0], [80.0, 9896.0], [80.1, 9897.0], [80.2, 9897.0], [80.3, 9897.0], [80.4, 9898.0], [80.5, 9899.0], [80.6, 9899.0], [80.7, 9900.0], [80.8, 9900.0], [80.9, 9900.0], [81.0, 9901.0], [81.1, 9901.0], [81.2, 9901.0], [81.3, 9902.0], [81.4, 9903.0], [81.5, 9903.0], [81.6, 9904.0], [81.7, 9905.0], [81.8, 9905.0], [81.9, 9905.0], [82.0, 9906.0], [82.1, 9907.0], [82.2, 9907.0], [82.3, 9907.0], [82.4, 9908.0], [82.5, 9908.0], [82.6, 9909.0], [82.7, 9909.0], [82.8, 9910.0], [82.9, 9910.0], [83.0, 9910.0], [83.1, 9911.0], [83.2, 9911.0], [83.3, 9912.0], [83.4, 9912.0], [83.5, 9913.0], [83.6, 9914.0], [83.7, 9914.0], [83.8, 9915.0], [83.9, 9916.0], [84.0, 9917.0], [84.1, 9917.0], [84.2, 9919.0], [84.3, 9919.0], [84.4, 9920.0], [84.5, 9921.0], [84.6, 9922.0], [84.7, 9923.0], [84.8, 9924.0], [84.9, 9925.0], [85.0, 9926.0], [85.1, 9926.0], [85.2, 9927.0], [85.3, 9929.0], [85.4, 9929.0], [85.5, 9931.0], [85.6, 9931.0], [85.7, 9932.0], [85.8, 9933.0], [85.9, 9933.0], [86.0, 9934.0], [86.1, 9934.0], [86.2, 9935.0], [86.3, 9935.0], [86.4, 9936.0], [86.5, 9936.0], [86.6, 9937.0], [86.7, 9937.0], [86.8, 9938.0], [86.9, 9938.0], [87.0, 9940.0], [87.1, 9940.0], [87.2, 9941.0], [87.3, 9941.0], [87.4, 9942.0], [87.5, 9942.0], [87.6, 9944.0], [87.7, 9944.0], [87.8, 9945.0], [87.9, 9945.0], [88.0, 9945.0], [88.1, 9946.0], [88.2, 9947.0], [88.3, 9948.0], [88.4, 9949.0], [88.5, 9949.0], [88.6, 9950.0], [88.7, 9953.0], [88.8, 9955.0], [88.9, 9956.0], [89.0, 9957.0], [89.1, 9958.0], [89.2, 9960.0], [89.3, 9961.0], [89.4, 9965.0], [89.5, 9965.0], [89.6, 9966.0], [89.7, 9966.0], [89.8, 9966.0], [89.9, 9967.0], [90.0, 9967.0], [90.1, 9969.0], [90.2, 9970.0], [90.3, 9971.0], [90.4, 9971.0], [90.5, 9973.0], [90.6, 9973.0], [90.7, 9974.0], [90.8, 9975.0], [90.9, 9976.0], [91.0, 9977.0], [91.1, 9978.0], [91.2, 9978.0], [91.3, 9980.0], [91.4, 9980.0], [91.5, 9981.0], [91.6, 9982.0], [91.7, 9983.0], [91.8, 9985.0], [91.9, 9985.0], [92.0, 9987.0], [92.1, 9988.0], [92.2, 9988.0], [92.3, 9988.0], [92.4, 9990.0], [92.5, 9991.0], [92.6, 9992.0], [92.7, 9993.0], [92.8, 9993.0], [92.9, 9995.0], [93.0, 9998.0], [93.1, 9999.0], [93.2, 10000.0], [93.3, 10000.0], [93.4, 10003.0], [93.5, 10004.0], [93.6, 10005.0], [93.7, 10005.0], [93.8, 10010.0], [93.9, 10011.0], [94.0, 10012.0], [94.1, 10013.0], [94.2, 10016.0], [94.3, 10017.0], [94.4, 10018.0], [94.5, 10018.0], [94.6, 10019.0], [94.7, 10020.0], [94.8, 10021.0], [94.9, 10022.0], [95.0, 10023.0], [95.1, 10023.0], [95.2, 10026.0], [95.3, 10029.0], [95.4, 10031.0], [95.5, 10031.0], [95.6, 10031.0], [95.7, 10033.0], [95.8, 10035.0], [95.9, 10036.0], [96.0, 10036.0], [96.1, 10037.0], [96.2, 10037.0], [96.3, 10038.0], [96.4, 10040.0], [96.5, 10040.0], [96.6, 10041.0], [96.7, 10042.0], [96.8, 10045.0], [96.9, 10045.0], [97.0, 10046.0], [97.1, 10048.0], [97.2, 10049.0], [97.3, 10050.0], [97.4, 10051.0], [97.5, 10052.0], [97.6, 10053.0], [97.7, 10053.0], [97.8, 10054.0], [97.9, 10056.0], [98.0, 10057.0], [98.1, 10059.0], [98.2, 10061.0], [98.3, 10065.0], [98.4, 10066.0], [98.5, 10067.0], [98.6, 10069.0], [98.7, 10072.0], [98.8, 10074.0], [98.9, 10079.0], [99.0, 10080.0], [99.1, 10084.0], [99.2, 10086.0], [99.3, 10087.0], [99.4, 10094.0], [99.5, 10095.0], [99.6, 10101.0], [99.7, 10106.0], [99.8, 10120.0], [99.9, 10124.0]], "isOverall": false, "label": "ISMLS00003", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 433.0, "series": [{"data": [[0.0, 113.0], [100.0, 144.0], [200.0, 119.0], [300.0, 93.0], [400.0, 74.0], [500.0, 48.0], [600.0, 40.0], [700.0, 34.0], [800.0, 26.0], [900.0, 21.0], [1000.0, 28.0], [1100.0, 25.0], [1200.0, 13.0], [1300.0, 6.0], [1400.0, 8.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 8.0], [1800.0, 5.0], [1900.0, 10.0], [2000.0, 4.0], [2100.0, 10.0], [2200.0, 6.0], [2300.0, 5.0], [2400.0, 11.0], [2500.0, 8.0], [2600.0, 5.0], [2800.0, 2.0], [2700.0, 2.0], [2900.0, 1.0], [3100.0, 1.0], [3200.0, 5.0], [3300.0, 2.0], [3400.0, 3.0], [3500.0, 3.0], [3600.0, 3.0], [3700.0, 1.0], [3800.0, 6.0], [3900.0, 3.0], [4000.0, 3.0], [4300.0, 4.0], [4200.0, 2.0], [4100.0, 3.0], [4400.0, 4.0], [4600.0, 2.0], [4700.0, 2.0], [4900.0, 5.0], [5100.0, 3.0], [5000.0, 2.0], [5200.0, 3.0], [5500.0, 2.0], [5400.0, 2.0], [5800.0, 1.0], [5700.0, 2.0], [6000.0, 3.0], [6100.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6600.0, 1.0], [6500.0, 1.0], [6700.0, 3.0], [6800.0, 2.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7300.0, 2.0], [7400.0, 2.0], [7200.0, 3.0], [7500.0, 3.0], [7600.0, 1.0], [7700.0, 2.0], [7800.0, 2.0], [7900.0, 1.0], [8100.0, 2.0], [8000.0, 1.0], [8500.0, 5.0], [8300.0, 4.0], [8400.0, 3.0], [8700.0, 7.0], [8200.0, 1.0], [8600.0, 2.0], [8800.0, 6.0], [9200.0, 11.0], [9000.0, 9.0], [9100.0, 5.0], [9400.0, 17.0], [9700.0, 308.0], [9500.0, 48.0], [9600.0, 133.0], [9300.0, 8.0], [9800.0, 407.0], [10200.0, 3.0], [10000.0, 180.0], [9900.0, 322.0], [10100.0, 12.0], [10300.0, 1.0], [10700.0, 2.0], [10800.0, 2.0], [11000.0, 1.0], [11100.0, 1.0], [11200.0, 1.0], [10900.0, 1.0], [11400.0, 3.0], [11300.0, 1.0]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[0.0, 166.0], [600.0, 28.0], [700.0, 20.0], [800.0, 21.0], [900.0, 25.0], [1000.0, 22.0], [1100.0, 21.0], [1200.0, 21.0], [1300.0, 10.0], [1400.0, 6.0], [1500.0, 6.0], [1600.0, 10.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 6.0], [2000.0, 9.0], [2100.0, 8.0], [2200.0, 10.0], [2300.0, 9.0], [2400.0, 5.0], [2500.0, 3.0], [2700.0, 2.0], [3000.0, 1.0], [3300.0, 1.0], [3200.0, 3.0], [3400.0, 2.0], [3500.0, 1.0], [3600.0, 2.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 8.0], [4000.0, 2.0], [4100.0, 2.0], [4300.0, 2.0], [4400.0, 2.0], [4800.0, 1.0], [4900.0, 4.0], [5100.0, 1.0], [5000.0, 2.0], [5900.0, 1.0], [6000.0, 1.0], [6300.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7400.0, 1.0], [7500.0, 3.0], [7600.0, 3.0], [7700.0, 3.0], [7800.0, 1.0], [7900.0, 2.0], [8000.0, 1.0], [8100.0, 1.0], [8300.0, 3.0], [8600.0, 3.0], [8500.0, 3.0], [8700.0, 2.0], [8400.0, 3.0], [9000.0, 4.0], [8900.0, 6.0], [9100.0, 4.0], [9200.0, 5.0], [8800.0, 2.0], [9700.0, 299.0], [9600.0, 141.0], [9300.0, 11.0], [9400.0, 18.0], [9500.0, 52.0], [9800.0, 433.0], [10000.0, 156.0], [9900.0, 305.0], [10100.0, 9.0], [10200.0, 1.0], [100.0, 132.0], [200.0, 143.0], [300.0, 89.0], [400.0, 64.0], [500.0, 66.0]], "isOverall": false, "label": "ISMLS00003", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 487.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3297.0, "series": [{"data": [[0.0, 1139.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 487.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3297.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 41.754098360655746, "minX": 1.6559679E12, "maxY": 100.0, "series": [{"data": [[1.65596814E12, 100.0], [1.65596796E12, 100.0], [1.65596826E12, 41.754098360655746], [1.65596808E12, 100.0], [1.6559679E12, 100.0], [1.6559682E12, 96.9919093851133], [1.65596802E12, 100.0]], "isOverall": false, "label": "TS_TOT_02_03", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65596826E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.63636363636364, "minX": 1.0, "maxY": 10042.0, "series": [{"data": [[2.0, 10003.0], [3.0, 10042.0], [5.0, 9539.0], [6.0, 9792.0], [7.0, 9878.0], [8.0, 9369.0], [12.0, 9516.0], [13.0, 9443.0], [14.0, 9170.0], [15.0, 9845.0], [19.0, 9905.0], [20.0, 9301.0], [24.0, 9885.0], [26.0, 9770.5], [28.0, 9383.0], [29.0, 9439.0], [31.0, 9637.0], [32.0, 9215.0], [35.0, 81.66666666666667], [34.0, 9288.0], [37.0, 8009.4], [41.0, 9961.5], [42.0, 10019.0], [45.0, 9987.0], [47.0, 9681.0], [46.0, 6494.333333333333], [49.0, 6643.333333333333], [51.0, 9969.75], [53.0, 9853.5], [54.0, 9849.5], [56.0, 9888.0], [58.0, 9963.0], [61.0, 9504.0], [60.0, 9932.0], [63.0, 9517.0], [62.0, 9858.0], [66.0, 9818.0], [65.0, 9823.333333333334], [64.0, 9953.333333333334], [71.0, 9681.0], [70.0, 9959.0], [69.0, 2983.3], [74.0, 9957.0], [72.0, 9838.0], [79.0, 9843.5], [78.0, 9926.333333333334], [76.0, 9740.0], [83.0, 9973.5], [82.0, 9906.0], [81.0, 9946.0], [87.0, 9776.0], [86.0, 9833.5], [85.0, 10001.0], [89.0, 9927.666666666666], [88.0, 9812.0], [95.0, 10020.0], [93.0, 9824.0], [92.0, 9861.0], [99.0, 9660.0], [97.0, 9980.0], [100.0, 6251.323492197391]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[98.05745279228601, 6369.529529931708]], "isOverall": false, "label": "ISMLS00001-Aggregated", "isController": false}, {"data": [[5.0, 9657.0], [9.0, 9793.0], [10.0, 9648.0], [11.0, 9451.0], [17.0, 9744.0], [19.0, 9831.0], [21.0, 10040.0], [22.0, 9593.0], [26.0, 9887.0], [31.0, 9383.0], [33.0, 9361.0], [35.0, 74.16666666666667], [39.0, 9878.0], [38.0, 9891.0], [41.0, 10005.0], [40.0, 10012.0], [43.0, 10020.0], [45.0, 9839.0], [48.0, 10036.0], [53.0, 10025.0], [55.0, 9908.5], [54.0, 9848.0], [57.0, 9720.0], [56.0, 9975.0], [59.0, 9945.0], [61.0, 9777.0], [63.0, 9729.0], [67.0, 9815.0], [66.0, 9822.5], [65.0, 9926.75], [64.0, 9715.0], [71.0, 9940.0], [70.0, 9976.6], [69.0, 34.63636363636364], [68.0, 9725.0], [74.0, 9870.0], [72.0, 9947.5], [76.0, 9864.0], [83.0, 9920.0], [81.0, 9994.5], [87.0, 9919.0], [86.0, 9921.666666666666], [85.0, 9976.5], [91.0, 9858.0], [90.0, 9872.666666666666], [89.0, 9789.333333333334], [88.0, 9862.0], [95.0, 9887.666666666666], [94.0, 9813.0], [93.0, 9869.333333333334], [92.0, 9803.333333333334], [98.0, 9858.333333333334], [97.0, 9770.0], [96.0, 9995.0], [100.0, 6134.987931034488], [1.0, 10033.0]], "isOverall": false, "label": "ISMLS00003", "isController": false}, {"data": [[98.3027937551356, 6216.736236647499]], "isOverall": false, "label": "ISMLS00003-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2411.4166666666665, "minX": 1.6559679E12, "maxY": 79132.13333333333, "series": [{"data": [[1.65596814E12, 13184.916666666666], [1.65596796E12, 17391.816666666666], [1.65596826E12, 2411.4166666666665], [1.65596808E12, 11862.133333333333], [1.6559679E12, 28370.25], [1.6559682E12, 12217.1], [1.65596802E12, 11863.383333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65596814E12, 36540.96666666667], [1.65596796E12, 48241.066666666666], [1.65596826E12, 6820.733333333334], [1.65596808E12, 32860.0], [1.6559679E12, 79132.13333333333], [1.6559682E12, 33799.4], [1.65596802E12, 32860.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65596826E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 615.5150645624101, "minX": 1.6559679E12, "maxY": 9865.606666666656, "series": [{"data": [[1.65596814E12, 8782.203592814365], [1.65596796E12, 5353.226244343893], [1.65596826E12, 8910.074626865668], [1.65596808E12, 9865.606666666656], [1.6559679E12, 1472.753721244925], [1.6559682E12, 9618.77198697069], [1.65596802E12, 9854.640000000003]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[1.65596814E12, 8911.090090090089], [1.65596796E12, 5592.280821917805], [1.65596826E12, 7695.327272727271], [1.65596808E12, 9855.013333333336], [1.6559679E12, 615.5150645624101], [1.6559682E12, 9484.13183279743], [1.65596802E12, 9854.660000000003]], "isOverall": false, "label": "ISMLS00003", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65596826E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 615.3529411764703, "minX": 1.6559679E12, "maxY": 9865.550000000003, "series": [{"data": [[1.65596814E12, 8782.128742514968], [1.65596796E12, 5353.14253393665], [1.65596826E12, 8909.999999999996], [1.65596808E12, 9865.550000000003], [1.6559679E12, 1472.6156968876862], [1.6559682E12, 9618.732899022809], [1.65596802E12, 9854.58]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[1.65596814E12, 8911.048048048038], [1.65596796E12, 5592.210045662105], [1.65596826E12, 7695.327272727271], [1.65596808E12, 9854.979999999996], [1.6559679E12, 615.3529411764703], [1.6559682E12, 9484.090032154336], [1.65596802E12, 9854.573333333328]], "isOverall": false, "label": "ISMLS00003", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65596826E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6559679E12, "maxY": 23.63, "series": [{"data": [[1.65596814E12, 19.57485029940119], [1.65596796E12, 20.71493212669683], [1.65596826E12, 8.731343283582088], [1.65596808E12, 22.21333333333331], [1.6559679E12, 20.32746955345063], [1.6559682E12, 17.755700325732885], [1.65596802E12, 23.63]], "isOverall": false, "label": "ISMLS00001", "isController": false}, {"data": [[1.65596814E12, 0.0], [1.65596796E12, 0.0], [1.65596826E12, 0.0], [1.65596808E12, 0.0], [1.6559679E12, 0.0], [1.6559682E12, 0.0], [1.65596802E12, 0.0]], "isOverall": false, "label": "ISMLS00003", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65596826E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.6559679E12, "maxY": 11491.0, "series": [{"data": [[1.65596814E12, 10169.0], [1.65596796E12, 10215.0], [1.65596826E12, 10069.0], [1.65596808E12, 10092.0], [1.6559679E12, 11491.0], [1.6559682E12, 10105.0], [1.65596802E12, 10157.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65596814E12, 10005.2], [1.65596796E12, 9913.0], [1.65596826E12, 10029.2], [1.65596808E12, 10016.9], [1.6559679E12, 2375.0999999999995], [1.6559682E12, 10016.0], [1.65596802E12, 10018.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65596814E12, 10111.960000000001], [1.65596796E12, 10095.19], [1.65596826E12, 10067.39], [1.65596808E12, 10083.98], [1.6559679E12, 10243.209999999992], [1.6559682E12, 10072.81], [1.65596802E12, 10109.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65596814E12, 10050.6], [1.65596796E12, 9996.699999999999], [1.65596826E12, 10040.85], [1.65596808E12, 10047.0], [1.6559679E12, 4705.649999999999], [1.6559682E12, 10048.05], [1.65596802E12, 10052.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65596814E12, 21.0], [1.65596796E12, 19.0], [1.65596826E12, 36.0], [1.65596808E12, 9483.0], [1.6559679E12, 28.0], [1.6559682E12, 19.0], [1.65596802E12, 9492.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65596814E12, 9822.0], [1.65596796E12, 7586.5], [1.65596826E12, 9793.5], [1.65596808E12, 9862.0], [1.6559679E12, 392.5], [1.6559682E12, 9832.5], [1.65596802E12, 9852.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65596826E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 1.0, "maxY": 9880.0, "series": [{"data": [[2.0, 430.0], [34.0, 9645.0], [36.0, 853.0], [43.0, 9880.0], [56.0, 1118.0], [57.0, 9789.0], [60.0, 9849.5], [4.0, 5184.0], [70.0, 2282.0], [73.0, 1035.0], [72.0, 9790.0], [74.0, 9768.5], [80.0, 6660.0], [5.0, 154.0], [93.0, 9832.0], [98.0, 9802.5], [96.0, 9842.5], [100.0, 9847.5], [106.0, 8799.0], [107.0, 9866.0], [112.0, 351.5], [113.0, 259.0], [7.0, 5355.0], [119.0, 299.0], [122.0, 1420.5], [125.0, 5000.0], [126.0, 9810.0], [136.0, 408.0], [139.0, 9777.0], [146.0, 391.0], [144.0, 411.5], [9.0, 85.0], [183.0, 275.0], [176.0, 308.5], [11.0, 42.0], [1.0, 5046.0], [17.0, 904.0], [18.0, 178.5], [20.0, 1744.0], [24.0, 1776.0], [26.0, 5164.5], [27.0, 9828.0], [28.0, 9873.0], [30.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 183.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 1.0, "maxY": 9880.0, "series": [{"data": [[2.0, 430.0], [34.0, 9645.0], [36.0, 852.5], [43.0, 9880.0], [56.0, 1118.0], [57.0, 9789.0], [60.0, 9849.5], [4.0, 5184.0], [70.0, 2282.0], [73.0, 1035.0], [72.0, 9790.0], [74.0, 9768.5], [80.0, 6660.0], [5.0, 154.0], [93.0, 9831.0], [98.0, 9802.5], [96.0, 9842.5], [100.0, 9847.5], [106.0, 8799.0], [107.0, 9866.0], [112.0, 351.0], [113.0, 259.0], [7.0, 5355.0], [119.0, 299.0], [122.0, 1420.5], [125.0, 5000.0], [126.0, 9810.0], [136.0, 408.0], [139.0, 9777.0], [146.0, 390.5], [144.0, 411.5], [9.0, 85.0], [183.0, 275.0], [176.0, 308.5], [11.0, 42.0], [1.0, 5045.0], [17.0, 904.0], [18.0, 178.5], [20.0, 1744.0], [24.0, 1776.0], [26.0, 5164.5], [27.0, 9828.0], [28.0, 9873.0], [30.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 183.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.6559679E12, "maxY": 25.233333333333334, "series": [{"data": [[1.65596814E12, 11.116666666666667], [1.65596796E12, 15.033333333333333], [1.65596826E12, 0.8833333333333333], [1.65596808E12, 10.0], [1.6559679E12, 25.233333333333334], [1.6559682E12, 9.783333333333333], [1.65596802E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65596826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.033333333333333, "minX": 1.6559679E12, "maxY": 23.933333333333334, "series": [{"data": [[1.65596814E12, 11.116666666666667], [1.65596796E12, 14.666666666666666], [1.65596826E12, 2.033333333333333], [1.65596808E12, 10.0], [1.6559679E12, 23.933333333333334], [1.6559682E12, 10.3], [1.65596802E12, 10.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65596826E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.6559679E12, "maxY": 12.316666666666666, "series": [{"data": [[1.65596814E12, 5.55], [1.65596796E12, 7.3], [1.65596826E12, 0.9166666666666666], [1.65596808E12, 5.0], [1.6559679E12, 11.616666666666667], [1.6559682E12, 5.183333333333334], [1.65596802E12, 5.0]], "isOverall": false, "label": "ISMLS00003-success", "isController": false}, {"data": [[1.65596814E12, 5.566666666666666], [1.65596796E12, 7.366666666666666], [1.65596826E12, 1.1166666666666667], [1.65596808E12, 5.0], [1.6559679E12, 12.316666666666666], [1.6559682E12, 5.116666666666666], [1.65596802E12, 5.0]], "isOverall": false, "label": "ISMLS00001-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65596826E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.033333333333333, "minX": 1.6559679E12, "maxY": 23.933333333333334, "series": [{"data": [[1.65596814E12, 11.116666666666667], [1.65596796E12, 14.666666666666666], [1.65596826E12, 2.033333333333333], [1.65596808E12, 10.0], [1.6559679E12, 23.933333333333334], [1.6559682E12, 10.3], [1.65596802E12, 10.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65596826E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 479.0, "minX": 0.0, "maxY": 20796.0, "series": [{"data": [[0.0, 621.0], [0.1, 670.0], [0.2, 743.0], [0.3, 797.0], [0.4, 802.0], [0.5, 806.0], [0.6, 808.0], [0.7, 812.0], [0.8, 815.0], [0.9, 816.0], [1.0, 819.0], [1.1, 823.0], [1.2, 825.0], [1.3, 827.0], [1.4, 829.0], [1.5, 830.0], [1.6, 832.0], [1.7, 834.0], [1.8, 837.0], [1.9, 840.0], [2.0, 841.0], [2.1, 844.0], [2.2, 845.0], [2.3, 846.0], [2.4, 849.0], [2.5, 850.0], [2.6, 851.0], [2.7, 852.0], [2.8, 854.0], [2.9, 857.0], [3.0, 859.0], [3.1, 860.0], [3.2, 862.0], [3.3, 863.0], [3.4, 866.0], [3.5, 868.0], [3.6, 871.0], [3.7, 871.0], [3.8, 876.0], [3.9, 878.0], [4.0, 879.0], [4.1, 885.0], [4.2, 888.0], [4.3, 895.0], [4.4, 897.0], [4.5, 902.0], [4.6, 905.0], [4.7, 907.0], [4.8, 910.0], [4.9, 911.0], [5.0, 913.0], [5.1, 918.0], [5.2, 923.0], [5.3, 928.0], [5.4, 936.0], [5.5, 939.0], [5.6, 946.0], [5.7, 948.0], [5.8, 950.0], [5.9, 955.0], [6.0, 959.0], [6.1, 962.0], [6.2, 966.0], [6.3, 973.0], [6.4, 979.0], [6.5, 986.0], [6.6, 988.0], [6.7, 991.0], [6.8, 992.0], [6.9, 994.0], [7.0, 995.0], [7.1, 1001.0], [7.2, 1003.0], [7.3, 1006.0], [7.4, 1010.0], [7.5, 1015.0], [7.6, 1019.0], [7.7, 1021.0], [7.8, 1024.0], [7.9, 1025.0], [8.0, 1028.0], [8.1, 1029.0], [8.2, 1031.0], [8.3, 1033.0], [8.4, 1035.0], [8.5, 1037.0], [8.6, 1040.0], [8.7, 1042.0], [8.8, 1043.0], [8.9, 1045.0], [9.0, 1047.0], [9.1, 1049.0], [9.2, 1050.0], [9.3, 1052.0], [9.4, 1053.0], [9.5, 1056.0], [9.6, 1058.0], [9.7, 1064.0], [9.8, 1064.0], [9.9, 1065.0], [10.0, 1068.0], [10.1, 1070.0], [10.2, 1072.0], [10.3, 1075.0], [10.4, 1076.0], [10.5, 1078.0], [10.6, 1081.0], [10.7, 1083.0], [10.8, 1084.0], [10.9, 1085.0], [11.0, 1087.0], [11.1, 1089.0], [11.2, 1092.0], [11.3, 1094.0], [11.4, 1098.0], [11.5, 1101.0], [11.6, 1102.0], [11.7, 1104.0], [11.8, 1105.0], [11.9, 1107.0], [12.0, 1108.0], [12.1, 1111.0], [12.2, 1113.0], [12.3, 1114.0], [12.4, 1115.0], [12.5, 1119.0], [12.6, 1122.0], [12.7, 1123.0], [12.8, 1124.0], [12.9, 1127.0], [13.0, 1129.0], [13.1, 1130.0], [13.2, 1132.0], [13.3, 1135.0], [13.4, 1136.0], [13.5, 1140.0], [13.6, 1143.0], [13.7, 1147.0], [13.8, 1148.0], [13.9, 1150.0], [14.0, 1151.0], [14.1, 1152.0], [14.2, 1153.0], [14.3, 1155.0], [14.4, 1159.0], [14.5, 1162.0], [14.6, 1168.0], [14.7, 1170.0], [14.8, 1171.0], [14.9, 1171.0], [15.0, 1174.0], [15.1, 1175.0], [15.2, 1176.0], [15.3, 1180.0], [15.4, 1181.0], [15.5, 1183.0], [15.6, 1186.0], [15.7, 1187.0], [15.8, 1189.0], [15.9, 1193.0], [16.0, 1196.0], [16.1, 1199.0], [16.2, 1204.0], [16.3, 1204.0], [16.4, 1206.0], [16.5, 1208.0], [16.6, 1209.0], [16.7, 1214.0], [16.8, 1216.0], [16.9, 1220.0], [17.0, 1221.0], [17.1, 1222.0], [17.2, 1225.0], [17.3, 1226.0], [17.4, 1227.0], [17.5, 1227.0], [17.6, 1229.0], [17.7, 1229.0], [17.8, 1230.0], [17.9, 1231.0], [18.0, 1232.0], [18.1, 1236.0], [18.2, 1239.0], [18.3, 1240.0], [18.4, 1242.0], [18.5, 1243.0], [18.6, 1245.0], [18.7, 1246.0], [18.8, 1248.0], [18.9, 1250.0], [19.0, 1253.0], [19.1, 1255.0], [19.2, 1257.0], [19.3, 1258.0], [19.4, 1260.0], [19.5, 1265.0], [19.6, 1265.0], [19.7, 1267.0], [19.8, 1269.0], [19.9, 1271.0], [20.0, 1273.0], [20.1, 1273.0], [20.2, 1275.0], [20.3, 1276.0], [20.4, 1278.0], [20.5, 1280.0], [20.6, 1282.0], [20.7, 1285.0], [20.8, 1288.0], [20.9, 1289.0], [21.0, 1290.0], [21.1, 1293.0], [21.2, 1295.0], [21.3, 1297.0], [21.4, 1300.0], [21.5, 1303.0], [21.6, 1306.0], [21.7, 1309.0], [21.8, 1310.0], [21.9, 1312.0], [22.0, 1314.0], [22.1, 1316.0], [22.2, 1321.0], [22.3, 1327.0], [22.4, 1331.0], [22.5, 1333.0], [22.6, 1338.0], [22.7, 1341.0], [22.8, 1346.0], [22.9, 1350.0], [23.0, 1357.0], [23.1, 1361.0], [23.2, 1364.0], [23.3, 1371.0], [23.4, 1374.0], [23.5, 1375.0], [23.6, 1385.0], [23.7, 1387.0], [23.8, 1388.0], [23.9, 1391.0], [24.0, 1393.0], [24.1, 1394.0], [24.2, 1400.0], [24.3, 1402.0], [24.4, 1404.0], [24.5, 1406.0], [24.6, 1407.0], [24.7, 1409.0], [24.8, 1412.0], [24.9, 1415.0], [25.0, 1418.0], [25.1, 1420.0], [25.2, 1423.0], [25.3, 1426.0], [25.4, 1429.0], [25.5, 1430.0], [25.6, 1432.0], [25.7, 1433.0], [25.8, 1434.0], [25.9, 1437.0], [26.0, 1440.0], [26.1, 1442.0], [26.2, 1446.0], [26.3, 1450.0], [26.4, 1452.0], [26.5, 1456.0], [26.6, 1458.0], [26.7, 1460.0], [26.8, 1462.0], [26.9, 1465.0], [27.0, 1466.0], [27.1, 1468.0], [27.2, 1470.0], [27.3, 1473.0], [27.4, 1475.0], [27.5, 1475.0], [27.6, 1477.0], [27.7, 1481.0], [27.8, 1482.0], [27.9, 1483.0], [28.0, 1485.0], [28.1, 1486.0], [28.2, 1487.0], [28.3, 1488.0], [28.4, 1490.0], [28.5, 1491.0], [28.6, 1492.0], [28.7, 1493.0], [28.8, 1495.0], [28.9, 1496.0], [29.0, 1499.0], [29.1, 1501.0], [29.2, 1503.0], [29.3, 1506.0], [29.4, 1508.0], [29.5, 1508.0], [29.6, 1510.0], [29.7, 1513.0], [29.8, 1513.0], [29.9, 1514.0], [30.0, 1516.0], [30.1, 1518.0], [30.2, 1520.0], [30.3, 1521.0], [30.4, 1522.0], [30.5, 1524.0], [30.6, 1527.0], [30.7, 1529.0], [30.8, 1531.0], [30.9, 1533.0], [31.0, 1535.0], [31.1, 1538.0], [31.2, 1540.0], [31.3, 1540.0], [31.4, 1545.0], [31.5, 1551.0], [31.6, 1552.0], [31.7, 1554.0], [31.8, 1559.0], [31.9, 1564.0], [32.0, 1568.0], [32.1, 1569.0], [32.2, 1572.0], [32.3, 1575.0], [32.4, 1577.0], [32.5, 1579.0], [32.6, 1582.0], [32.7, 1584.0], [32.8, 1585.0], [32.9, 1589.0], [33.0, 1591.0], [33.1, 1593.0], [33.2, 1595.0], [33.3, 1599.0], [33.4, 1601.0], [33.5, 1602.0], [33.6, 1604.0], [33.7, 1606.0], [33.8, 1608.0], [33.9, 1611.0], [34.0, 1616.0], [34.1, 1618.0], [34.2, 1621.0], [34.3, 1622.0], [34.4, 1626.0], [34.5, 1641.0], [34.6, 1644.0], [34.7, 1648.0], [34.8, 1652.0], [34.9, 1657.0], [35.0, 1660.0], [35.1, 1662.0], [35.2, 1664.0], [35.3, 1667.0], [35.4, 1671.0], [35.5, 1675.0], [35.6, 1681.0], [35.7, 1683.0], [35.8, 1690.0], [35.9, 1692.0], [36.0, 1693.0], [36.1, 1694.0], [36.2, 1696.0], [36.3, 1701.0], [36.4, 1704.0], [36.5, 1707.0], [36.6, 1709.0], [36.7, 1713.0], [36.8, 1717.0], [36.9, 1721.0], [37.0, 1725.0], [37.1, 1729.0], [37.2, 1733.0], [37.3, 1742.0], [37.4, 1746.0], [37.5, 1748.0], [37.6, 1756.0], [37.7, 1758.0], [37.8, 1760.0], [37.9, 1762.0], [38.0, 1766.0], [38.1, 1772.0], [38.2, 1779.0], [38.3, 1783.0], [38.4, 1786.0], [38.5, 1790.0], [38.6, 1793.0], [38.7, 1799.0], [38.8, 1801.0], [38.9, 1802.0], [39.0, 1809.0], [39.1, 1819.0], [39.2, 1823.0], [39.3, 1828.0], [39.4, 1831.0], [39.5, 1834.0], [39.6, 1839.0], [39.7, 1842.0], [39.8, 1845.0], [39.9, 1852.0], [40.0, 1854.0], [40.1, 1859.0], [40.2, 1860.0], [40.3, 1870.0], [40.4, 1877.0], [40.5, 1881.0], [40.6, 1893.0], [40.7, 1910.0], [40.8, 1912.0], [40.9, 1923.0], [41.0, 1928.0], [41.1, 1931.0], [41.2, 1932.0], [41.3, 1936.0], [41.4, 1939.0], [41.5, 1951.0], [41.6, 1958.0], [41.7, 1965.0], [41.8, 1972.0], [41.9, 1982.0], [42.0, 1993.0], [42.1, 1999.0], [42.2, 2003.0], [42.3, 2019.0], [42.4, 2023.0], [42.5, 2035.0], [42.6, 2041.0], [42.7, 2051.0], [42.8, 2057.0], [42.9, 2063.0], [43.0, 2072.0], [43.1, 2086.0], [43.2, 2088.0], [43.3, 2091.0], [43.4, 2098.0], [43.5, 2103.0], [43.6, 2109.0], [43.7, 2115.0], [43.8, 2124.0], [43.9, 2130.0], [44.0, 2141.0], [44.1, 2146.0], [44.2, 2151.0], [44.3, 2155.0], [44.4, 2168.0], [44.5, 2177.0], [44.6, 2179.0], [44.7, 2190.0], [44.8, 2195.0], [44.9, 2202.0], [45.0, 2207.0], [45.1, 2210.0], [45.2, 2217.0], [45.3, 2226.0], [45.4, 2229.0], [45.5, 2232.0], [45.6, 2238.0], [45.7, 2241.0], [45.8, 2245.0], [45.9, 2251.0], [46.0, 2255.0], [46.1, 2260.0], [46.2, 2264.0], [46.3, 2270.0], [46.4, 2279.0], [46.5, 2284.0], [46.6, 2287.0], [46.7, 2289.0], [46.8, 2294.0], [46.9, 2299.0], [47.0, 2304.0], [47.1, 2306.0], [47.2, 2310.0], [47.3, 2312.0], [47.4, 2315.0], [47.5, 2321.0], [47.6, 2331.0], [47.7, 2335.0], [47.8, 2338.0], [47.9, 2344.0], [48.0, 2362.0], [48.1, 2369.0], [48.2, 2376.0], [48.3, 2380.0], [48.4, 2387.0], [48.5, 2396.0], [48.6, 2398.0], [48.7, 2405.0], [48.8, 2416.0], [48.9, 2419.0], [49.0, 2426.0], [49.1, 2436.0], [49.2, 2443.0], [49.3, 2446.0], [49.4, 2449.0], [49.5, 2453.0], [49.6, 2462.0], [49.7, 2466.0], [49.8, 2471.0], [49.9, 2478.0], [50.0, 2479.0], [50.1, 2482.0], [50.2, 2486.0], [50.3, 2503.0], [50.4, 2507.0], [50.5, 2515.0], [50.6, 2522.0], [50.7, 2526.0], [50.8, 2531.0], [50.9, 2536.0], [51.0, 2544.0], [51.1, 2548.0], [51.2, 2556.0], [51.3, 2561.0], [51.4, 2563.0], [51.5, 2569.0], [51.6, 2571.0], [51.7, 2575.0], [51.8, 2580.0], [51.9, 2586.0], [52.0, 2591.0], [52.1, 2596.0], [52.2, 2600.0], [52.3, 2612.0], [52.4, 2615.0], [52.5, 2621.0], [52.6, 2625.0], [52.7, 2638.0], [52.8, 2644.0], [52.9, 2649.0], [53.0, 2653.0], [53.1, 2656.0], [53.2, 2658.0], [53.3, 2662.0], [53.4, 2666.0], [53.5, 2670.0], [53.6, 2676.0], [53.7, 2684.0], [53.8, 2689.0], [53.9, 2707.0], [54.0, 2717.0], [54.1, 2720.0], [54.2, 2727.0], [54.3, 2739.0], [54.4, 2750.0], [54.5, 2756.0], [54.6, 2758.0], [54.7, 2764.0], [54.8, 2774.0], [54.9, 2783.0], [55.0, 2804.0], [55.1, 2813.0], [55.2, 2818.0], [55.3, 2825.0], [55.4, 2827.0], [55.5, 2838.0], [55.6, 2852.0], [55.7, 2858.0], [55.8, 2861.0], [55.9, 2866.0], [56.0, 2872.0], [56.1, 2882.0], [56.2, 2894.0], [56.3, 2905.0], [56.4, 2913.0], [56.5, 2926.0], [56.6, 2938.0], [56.7, 2944.0], [56.8, 2949.0], [56.9, 2956.0], [57.0, 2962.0], [57.1, 2975.0], [57.2, 2985.0], [57.3, 2991.0], [57.4, 2995.0], [57.5, 3002.0], [57.6, 3010.0], [57.7, 3018.0], [57.8, 3029.0], [57.9, 3046.0], [58.0, 3064.0], [58.1, 3073.0], [58.2, 3075.0], [58.3, 3081.0], [58.4, 3092.0], [58.5, 3098.0], [58.6, 3105.0], [58.7, 3110.0], [58.8, 3123.0], [58.9, 3126.0], [59.0, 3135.0], [59.1, 3146.0], [59.2, 3150.0], [59.3, 3158.0], [59.4, 3169.0], [59.5, 3174.0], [59.6, 3180.0], [59.7, 3186.0], [59.8, 3197.0], [59.9, 3201.0], [60.0, 3207.0], [60.1, 3219.0], [60.2, 3224.0], [60.3, 3232.0], [60.4, 3238.0], [60.5, 3251.0], [60.6, 3257.0], [60.7, 3267.0], [60.8, 3276.0], [60.9, 3277.0], [61.0, 3280.0], [61.1, 3293.0], [61.2, 3303.0], [61.3, 3310.0], [61.4, 3328.0], [61.5, 3348.0], [61.6, 3362.0], [61.7, 3376.0], [61.8, 3384.0], [61.9, 3389.0], [62.0, 3408.0], [62.1, 3420.0], [62.2, 3430.0], [62.3, 3452.0], [62.4, 3456.0], [62.5, 3464.0], [62.6, 3480.0], [62.7, 3493.0], [62.8, 3500.0], [62.9, 3522.0], [63.0, 3528.0], [63.1, 3545.0], [63.2, 3549.0], [63.3, 3562.0], [63.4, 3568.0], [63.5, 3583.0], [63.6, 3586.0], [63.7, 3607.0], [63.8, 3618.0], [63.9, 3631.0], [64.0, 3639.0], [64.1, 3658.0], [64.2, 3672.0], [64.3, 3685.0], [64.4, 3702.0], [64.5, 3728.0], [64.6, 3740.0], [64.7, 3762.0], [64.8, 3767.0], [64.9, 3788.0], [65.0, 3813.0], [65.1, 3833.0], [65.2, 3862.0], [65.3, 3872.0], [65.4, 3876.0], [65.5, 3893.0], [65.6, 3902.0], [65.7, 3907.0], [65.8, 3920.0], [65.9, 3931.0], [66.0, 3950.0], [66.1, 3971.0], [66.2, 3974.0], [66.3, 3979.0], [66.4, 3998.0], [66.5, 4021.0], [66.6, 4034.0], [66.7, 4044.0], [66.8, 4053.0], [66.9, 4069.0], [67.0, 4093.0], [67.1, 4121.0], [67.2, 4146.0], [67.3, 4164.0], [67.4, 4178.0], [67.5, 4193.0], [67.6, 4204.0], [67.7, 4217.0], [67.8, 4233.0], [67.9, 4267.0], [68.0, 4280.0], [68.1, 4300.0], [68.2, 4330.0], [68.3, 4344.0], [68.4, 4373.0], [68.5, 4399.0], [68.6, 4422.0], [68.7, 4440.0], [68.8, 4450.0], [68.9, 4466.0], [69.0, 4474.0], [69.1, 4478.0], [69.2, 4496.0], [69.3, 4518.0], [69.4, 4536.0], [69.5, 4563.0], [69.6, 4575.0], [69.7, 4592.0], [69.8, 4603.0], [69.9, 4630.0], [70.0, 4635.0], [70.1, 4648.0], [70.2, 4667.0], [70.3, 4689.0], [70.4, 4726.0], [70.5, 4754.0], [70.6, 4794.0], [70.7, 4826.0], [70.8, 4832.0], [70.9, 4862.0], [71.0, 4879.0], [71.1, 4896.0], [71.2, 4928.0], [71.3, 4979.0], [71.4, 5009.0], [71.5, 5030.0], [71.6, 5049.0], [71.7, 5066.0], [71.8, 5095.0], [71.9, 5137.0], [72.0, 5149.0], [72.1, 5178.0], [72.2, 5199.0], [72.3, 5233.0], [72.4, 5241.0], [72.5, 5257.0], [72.6, 5289.0], [72.7, 5329.0], [72.8, 5349.0], [72.9, 5365.0], [73.0, 5374.0], [73.1, 5414.0], [73.2, 5428.0], [73.3, 5463.0], [73.4, 5482.0], [73.5, 5519.0], [73.6, 5544.0], [73.7, 5584.0], [73.8, 5616.0], [73.9, 5665.0], [74.0, 5686.0], [74.1, 5727.0], [74.2, 5755.0], [74.3, 5831.0], [74.4, 5870.0], [74.5, 5894.0], [74.6, 5946.0], [74.7, 5986.0], [74.8, 6035.0], [74.9, 6076.0], [75.0, 6129.0], [75.1, 6152.0], [75.2, 6188.0], [75.3, 6215.0], [75.4, 6274.0], [75.5, 6294.0], [75.6, 6318.0], [75.7, 6340.0], [75.8, 6375.0], [75.9, 6448.0], [76.0, 6479.0], [76.1, 6527.0], [76.2, 6582.0], [76.3, 6621.0], [76.4, 6636.0], [76.5, 6705.0], [76.6, 6733.0], [76.7, 6769.0], [76.8, 6815.0], [76.9, 6853.0], [77.0, 6884.0], [77.1, 6904.0], [77.2, 6946.0], [77.3, 7032.0], [77.4, 7090.0], [77.5, 7117.0], [77.6, 7165.0], [77.7, 7201.0], [77.8, 7235.0], [77.9, 7276.0], [78.0, 7289.0], [78.1, 7328.0], [78.2, 7347.0], [78.3, 7364.0], [78.4, 7395.0], [78.5, 7471.0], [78.6, 7528.0], [78.7, 7563.0], [78.8, 7632.0], [78.9, 7668.0], [79.0, 7692.0], [79.1, 7714.0], [79.2, 7741.0], [79.3, 7763.0], [79.4, 7806.0], [79.5, 7823.0], [79.6, 7834.0], [79.7, 7860.0], [79.8, 7896.0], [79.9, 7919.0], [80.0, 7934.0], [80.1, 7965.0], [80.2, 8011.0], [80.3, 8075.0], [80.4, 8144.0], [80.5, 8214.0], [80.6, 8257.0], [80.7, 8267.0], [80.8, 8287.0], [80.9, 8308.0], [81.0, 8362.0], [81.1, 8384.0], [81.2, 8400.0], [81.3, 8446.0], [81.4, 8503.0], [81.5, 8530.0], [81.6, 8568.0], [81.7, 8586.0], [81.8, 8623.0], [81.9, 8688.0], [82.0, 8729.0], [82.1, 8741.0], [82.2, 8780.0], [82.3, 8827.0], [82.4, 8881.0], [82.5, 8910.0], [82.6, 8931.0], [82.7, 8989.0], [82.8, 9036.0], [82.9, 9066.0], [83.0, 9081.0], [83.1, 9107.0], [83.2, 9165.0], [83.3, 9215.0], [83.4, 9267.0], [83.5, 9377.0], [83.6, 9411.0], [83.7, 9462.0], [83.8, 9525.0], [83.9, 9551.0], [84.0, 9560.0], [84.1, 9580.0], [84.2, 9590.0], [84.3, 9628.0], [84.4, 9696.0], [84.5, 9731.0], [84.6, 9749.0], [84.7, 9763.0], [84.8, 9818.0], [84.9, 9834.0], [85.0, 9885.0], [85.1, 9954.0], [85.2, 9985.0], [85.3, 10022.0], [85.4, 10076.0], [85.5, 10104.0], [85.6, 10119.0], [85.7, 10194.0], [85.8, 10317.0], [85.9, 10382.0], [86.0, 10434.0], [86.1, 10458.0], [86.2, 10519.0], [86.3, 10545.0], [86.4, 10586.0], [86.5, 10605.0], [86.6, 10636.0], [86.7, 10649.0], [86.8, 10677.0], [86.9, 10698.0], [87.0, 10720.0], [87.1, 10775.0], [87.2, 10811.0], [87.3, 10875.0], [87.4, 10900.0], [87.5, 10954.0], [87.6, 11039.0], [87.7, 11086.0], [87.8, 11094.0], [87.9, 11109.0], [88.0, 11129.0], [88.1, 11174.0], [88.2, 11213.0], [88.3, 11264.0], [88.4, 11303.0], [88.5, 11374.0], [88.6, 11412.0], [88.7, 11481.0], [88.8, 11540.0], [88.9, 11633.0], [89.0, 11693.0], [89.1, 11778.0], [89.2, 11835.0], [89.3, 11863.0], [89.4, 11893.0], [89.5, 11915.0], [89.6, 11951.0], [89.7, 11985.0], [89.8, 12005.0], [89.9, 12027.0], [90.0, 12058.0], [90.1, 12162.0], [90.2, 12173.0], [90.3, 12222.0], [90.4, 12296.0], [90.5, 12346.0], [90.6, 12355.0], [90.7, 12406.0], [90.8, 12454.0], [90.9, 12477.0], [91.0, 12511.0], [91.1, 12530.0], [91.2, 12566.0], [91.3, 12590.0], [91.4, 12639.0], [91.5, 12729.0], [91.6, 12748.0], [91.7, 12815.0], [91.8, 12860.0], [91.9, 12884.0], [92.0, 12971.0], [92.1, 13001.0], [92.2, 13036.0], [92.3, 13132.0], [92.4, 13161.0], [92.5, 13253.0], [92.6, 13274.0], [92.7, 13324.0], [92.8, 13403.0], [92.9, 13454.0], [93.0, 13533.0], [93.1, 13562.0], [93.2, 13639.0], [93.3, 13675.0], [93.4, 13706.0], [93.5, 13755.0], [93.6, 13818.0], [93.7, 13883.0], [93.8, 13917.0], [93.9, 13993.0], [94.0, 14052.0], [94.1, 14109.0], [94.2, 14187.0], [94.3, 14260.0], [94.4, 14308.0], [94.5, 14342.0], [94.6, 14388.0], [94.7, 14450.0], [94.8, 14478.0], [94.9, 14534.0], [95.0, 14573.0], [95.1, 14600.0], [95.2, 14703.0], [95.3, 14761.0], [95.4, 14838.0], [95.5, 14912.0], [95.6, 15036.0], [95.7, 15117.0], [95.8, 15135.0], [95.9, 15204.0], [96.0, 15240.0], [96.1, 15247.0], [96.2, 15338.0], [96.3, 15411.0], [96.4, 15443.0], [96.5, 15514.0], [96.6, 15558.0], [96.7, 15659.0], [96.8, 15684.0], [96.9, 15769.0], [97.0, 15814.0], [97.1, 15889.0], [97.2, 15947.0], [97.3, 16039.0], [97.4, 16119.0], [97.5, 16136.0], [97.6, 16148.0], [97.7, 16205.0], [97.8, 16286.0], [97.9, 16348.0], [98.0, 16433.0], [98.1, 16514.0], [98.2, 16606.0], [98.3, 16704.0], [98.4, 16806.0], [98.5, 16881.0], [98.6, 16989.0], [98.7, 17089.0], [98.8, 17175.0], [98.9, 17314.0], [99.0, 17366.0], [99.1, 17515.0], [99.2, 17675.0], [99.3, 17846.0], [99.4, 18004.0], [99.5, 18216.0], [99.6, 18281.0], [99.7, 18500.0], [99.8, 18933.0], [99.9, 19286.0], [100.0, 20796.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[0.0, 479.0], [0.1, 615.0], [0.2, 639.0], [0.3, 666.0], [0.4, 795.0], [0.5, 801.0], [0.6, 806.0], [0.7, 809.0], [0.8, 812.0], [0.9, 814.0], [1.0, 815.0], [1.1, 817.0], [1.2, 818.0], [1.3, 820.0], [1.4, 822.0], [1.5, 825.0], [1.6, 825.0], [1.7, 826.0], [1.8, 829.0], [1.9, 830.0], [2.0, 831.0], [2.1, 832.0], [2.2, 833.0], [2.3, 835.0], [2.4, 836.0], [2.5, 839.0], [2.6, 839.0], [2.7, 841.0], [2.8, 843.0], [2.9, 845.0], [3.0, 847.0], [3.1, 850.0], [3.2, 854.0], [3.3, 858.0], [3.4, 859.0], [3.5, 862.0], [3.6, 864.0], [3.7, 867.0], [3.8, 871.0], [3.9, 874.0], [4.0, 877.0], [4.1, 881.0], [4.2, 886.0], [4.3, 891.0], [4.4, 893.0], [4.5, 895.0], [4.6, 902.0], [4.7, 908.0], [4.8, 913.0], [4.9, 915.0], [5.0, 924.0], [5.1, 928.0], [5.2, 937.0], [5.3, 942.0], [5.4, 948.0], [5.5, 951.0], [5.6, 957.0], [5.7, 960.0], [5.8, 965.0], [5.9, 967.0], [6.0, 972.0], [6.1, 978.0], [6.2, 981.0], [6.3, 986.0], [6.4, 991.0], [6.5, 995.0], [6.6, 996.0], [6.7, 1001.0], [6.8, 1002.0], [6.9, 1005.0], [7.0, 1008.0], [7.1, 1011.0], [7.2, 1011.0], [7.3, 1012.0], [7.4, 1015.0], [7.5, 1020.0], [7.6, 1021.0], [7.7, 1023.0], [7.8, 1026.0], [7.9, 1026.0], [8.0, 1030.0], [8.1, 1032.0], [8.2, 1032.0], [8.3, 1034.0], [8.4, 1036.0], [8.5, 1038.0], [8.6, 1040.0], [8.7, 1043.0], [8.8, 1044.0], [8.9, 1048.0], [9.0, 1049.0], [9.1, 1050.0], [9.2, 1053.0], [9.3, 1055.0], [9.4, 1057.0], [9.5, 1060.0], [9.6, 1061.0], [9.7, 1062.0], [9.8, 1065.0], [9.9, 1067.0], [10.0, 1069.0], [10.1, 1070.0], [10.2, 1073.0], [10.3, 1074.0], [10.4, 1075.0], [10.5, 1077.0], [10.6, 1079.0], [10.7, 1079.0], [10.8, 1080.0], [10.9, 1081.0], [11.0, 1084.0], [11.1, 1086.0], [11.2, 1088.0], [11.3, 1092.0], [11.4, 1094.0], [11.5, 1096.0], [11.6, 1099.0], [11.7, 1101.0], [11.8, 1104.0], [11.9, 1105.0], [12.0, 1106.0], [12.1, 1109.0], [12.2, 1111.0], [12.3, 1113.0], [12.4, 1115.0], [12.5, 1116.0], [12.6, 1118.0], [12.7, 1120.0], [12.8, 1123.0], [12.9, 1125.0], [13.0, 1126.0], [13.1, 1128.0], [13.2, 1130.0], [13.3, 1133.0], [13.4, 1135.0], [13.5, 1137.0], [13.6, 1140.0], [13.7, 1142.0], [13.8, 1143.0], [13.9, 1145.0], [14.0, 1148.0], [14.1, 1148.0], [14.2, 1154.0], [14.3, 1155.0], [14.4, 1156.0], [14.5, 1157.0], [14.6, 1160.0], [14.7, 1161.0], [14.8, 1162.0], [14.9, 1164.0], [15.0, 1167.0], [15.1, 1169.0], [15.2, 1171.0], [15.3, 1174.0], [15.4, 1176.0], [15.5, 1179.0], [15.6, 1186.0], [15.7, 1189.0], [15.8, 1194.0], [15.9, 1197.0], [16.0, 1200.0], [16.1, 1201.0], [16.2, 1203.0], [16.3, 1205.0], [16.4, 1206.0], [16.5, 1207.0], [16.6, 1210.0], [16.7, 1212.0], [16.8, 1212.0], [16.9, 1214.0], [17.0, 1215.0], [17.1, 1217.0], [17.2, 1219.0], [17.3, 1220.0], [17.4, 1224.0], [17.5, 1226.0], [17.6, 1229.0], [17.7, 1230.0], [17.8, 1231.0], [17.9, 1232.0], [18.0, 1234.0], [18.1, 1236.0], [18.2, 1237.0], [18.3, 1238.0], [18.4, 1239.0], [18.5, 1241.0], [18.6, 1243.0], [18.7, 1246.0], [18.8, 1248.0], [18.9, 1249.0], [19.0, 1252.0], [19.1, 1253.0], [19.2, 1256.0], [19.3, 1257.0], [19.4, 1258.0], [19.5, 1261.0], [19.6, 1261.0], [19.7, 1263.0], [19.8, 1264.0], [19.9, 1265.0], [20.0, 1267.0], [20.1, 1271.0], [20.2, 1272.0], [20.3, 1273.0], [20.4, 1274.0], [20.5, 1279.0], [20.6, 1281.0], [20.7, 1282.0], [20.8, 1284.0], [20.9, 1284.0], [21.0, 1286.0], [21.1, 1287.0], [21.2, 1290.0], [21.3, 1293.0], [21.4, 1295.0], [21.5, 1298.0], [21.6, 1301.0], [21.7, 1303.0], [21.8, 1306.0], [21.9, 1308.0], [22.0, 1310.0], [22.1, 1311.0], [22.2, 1313.0], [22.3, 1320.0], [22.4, 1324.0], [22.5, 1329.0], [22.6, 1332.0], [22.7, 1338.0], [22.8, 1341.0], [22.9, 1344.0], [23.0, 1346.0], [23.1, 1350.0], [23.2, 1356.0], [23.3, 1359.0], [23.4, 1365.0], [23.5, 1366.0], [23.6, 1374.0], [23.7, 1377.0], [23.8, 1380.0], [23.9, 1381.0], [24.0, 1383.0], [24.1, 1385.0], [24.2, 1388.0], [24.3, 1392.0], [24.4, 1393.0], [24.5, 1397.0], [24.6, 1400.0], [24.7, 1404.0], [24.8, 1407.0], [24.9, 1412.0], [25.0, 1415.0], [25.1, 1416.0], [25.2, 1418.0], [25.3, 1421.0], [25.4, 1422.0], [25.5, 1424.0], [25.6, 1427.0], [25.7, 1429.0], [25.8, 1431.0], [25.9, 1433.0], [26.0, 1435.0], [26.1, 1438.0], [26.2, 1439.0], [26.3, 1440.0], [26.4, 1442.0], [26.5, 1444.0], [26.6, 1444.0], [26.7, 1446.0], [26.8, 1449.0], [26.9, 1450.0], [27.0, 1451.0], [27.1, 1453.0], [27.2, 1453.0], [27.3, 1454.0], [27.4, 1455.0], [27.5, 1457.0], [27.6, 1458.0], [27.7, 1461.0], [27.8, 1462.0], [27.9, 1464.0], [28.0, 1465.0], [28.1, 1466.0], [28.2, 1467.0], [28.3, 1470.0], [28.4, 1471.0], [28.5, 1473.0], [28.6, 1474.0], [28.7, 1475.0], [28.8, 1476.0], [28.9, 1478.0], [29.0, 1480.0], [29.1, 1482.0], [29.2, 1484.0], [29.3, 1485.0], [29.4, 1488.0], [29.5, 1489.0], [29.6, 1491.0], [29.7, 1492.0], [29.8, 1492.0], [29.9, 1495.0], [30.0, 1496.0], [30.1, 1497.0], [30.2, 1500.0], [30.3, 1501.0], [30.4, 1502.0], [30.5, 1504.0], [30.6, 1505.0], [30.7, 1509.0], [30.8, 1509.0], [30.9, 1511.0], [31.0, 1512.0], [31.1, 1517.0], [31.2, 1518.0], [31.3, 1519.0], [31.4, 1522.0], [31.5, 1523.0], [31.6, 1526.0], [31.7, 1527.0], [31.8, 1530.0], [31.9, 1533.0], [32.0, 1536.0], [32.1, 1540.0], [32.2, 1540.0], [32.3, 1541.0], [32.4, 1542.0], [32.5, 1545.0], [32.6, 1548.0], [32.7, 1550.0], [32.8, 1553.0], [32.9, 1555.0], [33.0, 1557.0], [33.1, 1561.0], [33.2, 1565.0], [33.3, 1569.0], [33.4, 1571.0], [33.5, 1573.0], [33.6, 1576.0], [33.7, 1577.0], [33.8, 1582.0], [33.9, 1582.0], [34.0, 1583.0], [34.1, 1586.0], [34.2, 1589.0], [34.3, 1593.0], [34.4, 1595.0], [34.5, 1600.0], [34.6, 1602.0], [34.7, 1606.0], [34.8, 1608.0], [34.9, 1614.0], [35.0, 1618.0], [35.1, 1622.0], [35.2, 1624.0], [35.3, 1628.0], [35.4, 1633.0], [35.5, 1634.0], [35.6, 1638.0], [35.7, 1640.0], [35.8, 1643.0], [35.9, 1646.0], [36.0, 1647.0], [36.1, 1649.0], [36.2, 1655.0], [36.3, 1657.0], [36.4, 1662.0], [36.5, 1662.0], [36.6, 1665.0], [36.7, 1667.0], [36.8, 1673.0], [36.9, 1676.0], [37.0, 1680.0], [37.1, 1683.0], [37.2, 1684.0], [37.3, 1686.0], [37.4, 1688.0], [37.5, 1693.0], [37.6, 1695.0], [37.7, 1698.0], [37.8, 1701.0], [37.9, 1702.0], [38.0, 1704.0], [38.1, 1710.0], [38.2, 1712.0], [38.3, 1715.0], [38.4, 1722.0], [38.5, 1725.0], [38.6, 1728.0], [38.7, 1732.0], [38.8, 1739.0], [38.9, 1741.0], [39.0, 1746.0], [39.1, 1750.0], [39.2, 1755.0], [39.3, 1759.0], [39.4, 1764.0], [39.5, 1773.0], [39.6, 1784.0], [39.7, 1789.0], [39.8, 1798.0], [39.9, 1800.0], [40.0, 1807.0], [40.1, 1814.0], [40.2, 1817.0], [40.3, 1820.0], [40.4, 1821.0], [40.5, 1826.0], [40.6, 1831.0], [40.7, 1839.0], [40.8, 1843.0], [40.9, 1854.0], [41.0, 1866.0], [41.1, 1870.0], [41.2, 1877.0], [41.3, 1883.0], [41.4, 1890.0], [41.5, 1896.0], [41.6, 1908.0], [41.7, 1913.0], [41.8, 1918.0], [41.9, 1923.0], [42.0, 1928.0], [42.1, 1933.0], [42.2, 1949.0], [42.3, 1962.0], [42.4, 1966.0], [42.5, 1986.0], [42.6, 1991.0], [42.7, 1999.0], [42.8, 2004.0], [42.9, 2011.0], [43.0, 2018.0], [43.1, 2034.0], [43.2, 2041.0], [43.3, 2049.0], [43.4, 2050.0], [43.5, 2064.0], [43.6, 2069.0], [43.7, 2076.0], [43.8, 2081.0], [43.9, 2087.0], [44.0, 2101.0], [44.1, 2106.0], [44.2, 2108.0], [44.3, 2120.0], [44.4, 2127.0], [44.5, 2130.0], [44.6, 2141.0], [44.7, 2146.0], [44.8, 2152.0], [44.9, 2159.0], [45.0, 2166.0], [45.1, 2170.0], [45.2, 2179.0], [45.3, 2183.0], [45.4, 2191.0], [45.5, 2196.0], [45.6, 2200.0], [45.7, 2208.0], [45.8, 2212.0], [45.9, 2224.0], [46.0, 2232.0], [46.1, 2238.0], [46.2, 2245.0], [46.3, 2249.0], [46.4, 2256.0], [46.5, 2262.0], [46.6, 2272.0], [46.7, 2275.0], [46.8, 2279.0], [46.9, 2284.0], [47.0, 2286.0], [47.1, 2295.0], [47.2, 2298.0], [47.3, 2305.0], [47.4, 2310.0], [47.5, 2320.0], [47.6, 2327.0], [47.7, 2330.0], [47.8, 2332.0], [47.9, 2337.0], [48.0, 2342.0], [48.1, 2347.0], [48.2, 2354.0], [48.3, 2359.0], [48.4, 2366.0], [48.5, 2372.0], [48.6, 2379.0], [48.7, 2383.0], [48.8, 2387.0], [48.9, 2392.0], [49.0, 2396.0], [49.1, 2398.0], [49.2, 2405.0], [49.3, 2409.0], [49.4, 2424.0], [49.5, 2427.0], [49.6, 2429.0], [49.7, 2437.0], [49.8, 2444.0], [49.9, 2449.0], [50.0, 2451.0], [50.1, 2459.0], [50.2, 2463.0], [50.3, 2464.0], [50.4, 2470.0], [50.5, 2473.0], [50.6, 2481.0], [50.7, 2488.0], [50.8, 2500.0], [50.9, 2504.0], [51.0, 2513.0], [51.1, 2520.0], [51.2, 2528.0], [51.3, 2537.0], [51.4, 2542.0], [51.5, 2546.0], [51.6, 2558.0], [51.7, 2559.0], [51.8, 2565.0], [51.9, 2575.0], [52.0, 2578.0], [52.1, 2585.0], [52.2, 2591.0], [52.3, 2598.0], [52.4, 2604.0], [52.5, 2614.0], [52.6, 2621.0], [52.7, 2631.0], [52.8, 2646.0], [52.9, 2649.0], [53.0, 2663.0], [53.1, 2671.0], [53.2, 2678.0], [53.3, 2686.0], [53.4, 2694.0], [53.5, 2699.0], [53.6, 2702.0], [53.7, 2709.0], [53.8, 2712.0], [53.9, 2720.0], [54.0, 2721.0], [54.1, 2727.0], [54.2, 2741.0], [54.3, 2746.0], [54.4, 2751.0], [54.5, 2753.0], [54.6, 2762.0], [54.7, 2767.0], [54.8, 2776.0], [54.9, 2779.0], [55.0, 2783.0], [55.1, 2788.0], [55.2, 2793.0], [55.3, 2803.0], [55.4, 2809.0], [55.5, 2819.0], [55.6, 2825.0], [55.7, 2834.0], [55.8, 2840.0], [55.9, 2844.0], [56.0, 2850.0], [56.1, 2871.0], [56.2, 2877.0], [56.3, 2883.0], [56.4, 2893.0], [56.5, 2896.0], [56.6, 2900.0], [56.7, 2906.0], [56.8, 2910.0], [56.9, 2917.0], [57.0, 2928.0], [57.1, 2937.0], [57.2, 2944.0], [57.3, 2953.0], [57.4, 2963.0], [57.5, 2969.0], [57.6, 2976.0], [57.7, 2984.0], [57.8, 2998.0], [57.9, 3018.0], [58.0, 3032.0], [58.1, 3051.0], [58.2, 3057.0], [58.3, 3064.0], [58.4, 3069.0], [58.5, 3083.0], [58.6, 3095.0], [58.7, 3101.0], [58.8, 3108.0], [58.9, 3117.0], [59.0, 3122.0], [59.1, 3126.0], [59.2, 3127.0], [59.3, 3132.0], [59.4, 3147.0], [59.5, 3165.0], [59.6, 3166.0], [59.7, 3172.0], [59.8, 3181.0], [59.9, 3193.0], [60.0, 3206.0], [60.1, 3213.0], [60.2, 3226.0], [60.3, 3235.0], [60.4, 3251.0], [60.5, 3261.0], [60.6, 3278.0], [60.7, 3289.0], [60.8, 3296.0], [60.9, 3309.0], [61.0, 3315.0], [61.1, 3328.0], [61.2, 3338.0], [61.3, 3342.0], [61.4, 3354.0], [61.5, 3362.0], [61.6, 3384.0], [61.7, 3397.0], [61.8, 3406.0], [61.9, 3416.0], [62.0, 3422.0], [62.1, 3436.0], [62.2, 3445.0], [62.3, 3455.0], [62.4, 3465.0], [62.5, 3481.0], [62.6, 3486.0], [62.7, 3501.0], [62.8, 3503.0], [62.9, 3509.0], [63.0, 3520.0], [63.1, 3523.0], [63.2, 3540.0], [63.3, 3555.0], [63.4, 3575.0], [63.5, 3587.0], [63.6, 3597.0], [63.7, 3609.0], [63.8, 3645.0], [63.9, 3685.0], [64.0, 3693.0], [64.1, 3709.0], [64.2, 3740.0], [64.3, 3755.0], [64.4, 3774.0], [64.5, 3783.0], [64.6, 3796.0], [64.7, 3814.0], [64.8, 3837.0], [64.9, 3848.0], [65.0, 3861.0], [65.1, 3881.0], [65.2, 3887.0], [65.3, 3903.0], [65.4, 3911.0], [65.5, 3919.0], [65.6, 3930.0], [65.7, 3943.0], [65.8, 3951.0], [65.9, 3962.0], [66.0, 3980.0], [66.1, 3991.0], [66.2, 4000.0], [66.3, 4033.0], [66.4, 4039.0], [66.5, 4048.0], [66.6, 4078.0], [66.7, 4120.0], [66.8, 4127.0], [66.9, 4139.0], [67.0, 4158.0], [67.1, 4164.0], [67.2, 4173.0], [67.3, 4186.0], [67.4, 4194.0], [67.5, 4205.0], [67.6, 4217.0], [67.7, 4228.0], [67.8, 4246.0], [67.9, 4256.0], [68.0, 4273.0], [68.1, 4295.0], [68.2, 4308.0], [68.3, 4327.0], [68.4, 4339.0], [68.5, 4371.0], [68.6, 4396.0], [68.7, 4411.0], [68.8, 4427.0], [68.9, 4434.0], [69.0, 4449.0], [69.1, 4466.0], [69.2, 4486.0], [69.3, 4492.0], [69.4, 4514.0], [69.5, 4541.0], [69.6, 4555.0], [69.7, 4571.0], [69.8, 4584.0], [69.9, 4611.0], [70.0, 4628.0], [70.1, 4637.0], [70.2, 4669.0], [70.3, 4687.0], [70.4, 4693.0], [70.5, 4699.0], [70.6, 4702.0], [70.7, 4710.0], [70.8, 4721.0], [70.9, 4732.0], [71.0, 4743.0], [71.1, 4764.0], [71.2, 4782.0], [71.3, 4814.0], [71.4, 4837.0], [71.5, 4851.0], [71.6, 4869.0], [71.7, 4886.0], [71.8, 4949.0], [71.9, 4970.0], [72.0, 4984.0], [72.1, 5020.0], [72.2, 5047.0], [72.3, 5056.0], [72.4, 5089.0], [72.5, 5112.0], [72.6, 5138.0], [72.7, 5162.0], [72.8, 5190.0], [72.9, 5220.0], [73.0, 5280.0], [73.1, 5290.0], [73.2, 5330.0], [73.3, 5359.0], [73.4, 5407.0], [73.5, 5432.0], [73.6, 5454.0], [73.7, 5460.0], [73.8, 5487.0], [73.9, 5504.0], [74.0, 5539.0], [74.1, 5548.0], [74.2, 5565.0], [74.3, 5595.0], [74.4, 5612.0], [74.5, 5646.0], [74.6, 5695.0], [74.7, 5703.0], [74.8, 5723.0], [74.9, 5757.0], [75.0, 5789.0], [75.1, 5799.0], [75.2, 5825.0], [75.3, 5847.0], [75.4, 5865.0], [75.5, 5908.0], [75.6, 5930.0], [75.7, 5940.0], [75.8, 5953.0], [75.9, 5985.0], [76.0, 6008.0], [76.1, 6051.0], [76.2, 6067.0], [76.3, 6129.0], [76.4, 6154.0], [76.5, 6188.0], [76.6, 6212.0], [76.7, 6246.0], [76.8, 6262.0], [76.9, 6299.0], [77.0, 6345.0], [77.1, 6361.0], [77.2, 6419.0], [77.3, 6438.0], [77.4, 6456.0], [77.5, 6486.0], [77.6, 6520.0], [77.7, 6555.0], [77.8, 6630.0], [77.9, 6652.0], [78.0, 6704.0], [78.1, 6746.0], [78.2, 6800.0], [78.3, 6894.0], [78.4, 6920.0], [78.5, 6971.0], [78.6, 6991.0], [78.7, 7031.0], [78.8, 7086.0], [78.9, 7131.0], [79.0, 7150.0], [79.1, 7226.0], [79.2, 7245.0], [79.3, 7300.0], [79.4, 7344.0], [79.5, 7360.0], [79.6, 7384.0], [79.7, 7405.0], [79.8, 7441.0], [79.9, 7479.0], [80.0, 7525.0], [80.1, 7571.0], [80.2, 7594.0], [80.3, 7671.0], [80.4, 7707.0], [80.5, 7724.0], [80.6, 7750.0], [80.7, 7797.0], [80.8, 7824.0], [80.9, 7903.0], [81.0, 7927.0], [81.1, 7975.0], [81.2, 8041.0], [81.3, 8087.0], [81.4, 8124.0], [81.5, 8155.0], [81.6, 8186.0], [81.7, 8218.0], [81.8, 8273.0], [81.9, 8362.0], [82.0, 8427.0], [82.1, 8509.0], [82.2, 8534.0], [82.3, 8588.0], [82.4, 8609.0], [82.5, 8630.0], [82.6, 8691.0], [82.7, 8724.0], [82.8, 8746.0], [82.9, 8797.0], [83.0, 8842.0], [83.1, 8862.0], [83.2, 8904.0], [83.3, 8926.0], [83.4, 8936.0], [83.5, 8954.0], [83.6, 9017.0], [83.7, 9055.0], [83.8, 9110.0], [83.9, 9162.0], [84.0, 9216.0], [84.1, 9236.0], [84.2, 9271.0], [84.3, 9326.0], [84.4, 9386.0], [84.5, 9428.0], [84.6, 9454.0], [84.7, 9467.0], [84.8, 9500.0], [84.9, 9540.0], [85.0, 9570.0], [85.1, 9650.0], [85.2, 9710.0], [85.3, 9753.0], [85.4, 9811.0], [85.5, 9884.0], [85.6, 9921.0], [85.7, 9995.0], [85.8, 10022.0], [85.9, 10118.0], [86.0, 10144.0], [86.1, 10190.0], [86.2, 10228.0], [86.3, 10290.0], [86.4, 10338.0], [86.5, 10446.0], [86.6, 10496.0], [86.7, 10585.0], [86.8, 10625.0], [86.9, 10670.0], [87.0, 10705.0], [87.1, 10740.0], [87.2, 10769.0], [87.3, 10796.0], [87.4, 10844.0], [87.5, 10864.0], [87.6, 10891.0], [87.7, 10931.0], [87.8, 10978.0], [87.9, 11062.0], [88.0, 11077.0], [88.1, 11117.0], [88.2, 11161.0], [88.3, 11223.0], [88.4, 11279.0], [88.5, 11342.0], [88.6, 11421.0], [88.7, 11477.0], [88.8, 11500.0], [88.9, 11525.0], [89.0, 11573.0], [89.1, 11648.0], [89.2, 11668.0], [89.3, 11698.0], [89.4, 11765.0], [89.5, 11800.0], [89.6, 11887.0], [89.7, 11944.0], [89.8, 12031.0], [89.9, 12090.0], [90.0, 12126.0], [90.1, 12219.0], [90.2, 12285.0], [90.3, 12411.0], [90.4, 12454.0], [90.5, 12494.0], [90.6, 12536.0], [90.7, 12556.0], [90.8, 12613.0], [90.9, 12652.0], [91.0, 12737.0], [91.1, 12776.0], [91.2, 12827.0], [91.3, 12867.0], [91.4, 12940.0], [91.5, 12960.0], [91.6, 12992.0], [91.7, 13061.0], [91.8, 13092.0], [91.9, 13163.0], [92.0, 13243.0], [92.1, 13358.0], [92.2, 13389.0], [92.3, 13422.0], [92.4, 13459.0], [92.5, 13538.0], [92.6, 13568.0], [92.7, 13618.0], [92.8, 13627.0], [92.9, 13641.0], [93.0, 13746.0], [93.1, 13776.0], [93.2, 13798.0], [93.3, 13808.0], [93.4, 13862.0], [93.5, 13930.0], [93.6, 13964.0], [93.7, 14022.0], [93.8, 14035.0], [93.9, 14125.0], [94.0, 14168.0], [94.1, 14215.0], [94.2, 14246.0], [94.3, 14299.0], [94.4, 14365.0], [94.5, 14421.0], [94.6, 14469.0], [94.7, 14541.0], [94.8, 14574.0], [94.9, 14635.0], [95.0, 14699.0], [95.1, 14721.0], [95.2, 14748.0], [95.3, 14775.0], [95.4, 14811.0], [95.5, 14912.0], [95.6, 14960.0], [95.7, 15050.0], [95.8, 15165.0], [95.9, 15195.0], [96.0, 15226.0], [96.1, 15265.0], [96.2, 15314.0], [96.3, 15440.0], [96.4, 15487.0], [96.5, 15549.0], [96.6, 15620.0], [96.7, 15649.0], [96.8, 15790.0], [96.9, 15844.0], [97.0, 15919.0], [97.1, 15952.0], [97.2, 15988.0], [97.3, 16008.0], [97.4, 16049.0], [97.5, 16066.0], [97.6, 16104.0], [97.7, 16271.0], [97.8, 16331.0], [97.9, 16429.0], [98.0, 16506.0], [98.1, 16598.0], [98.2, 16652.0], [98.3, 16709.0], [98.4, 16807.0], [98.5, 16864.0], [98.6, 16893.0], [98.7, 16961.0], [98.8, 17122.0], [98.9, 17219.0], [99.0, 17287.0], [99.1, 17487.0], [99.2, 17655.0], [99.3, 17731.0], [99.4, 17876.0], [99.5, 17915.0], [99.6, 17967.0], [99.7, 18094.0], [99.8, 18265.0], [99.9, 18685.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 219.0, "series": [{"data": [[600.0, 6.0], [700.0, 7.0], [800.0, 161.0], [900.0, 103.0], [1000.0, 173.0], [1100.0, 184.0], [1200.0, 206.0], [1300.0, 108.0], [1400.0, 192.0], [1500.0, 170.0], [1600.0, 114.0], [1700.0, 97.0], [1800.0, 75.0], [1900.0, 58.0], [2000.0, 52.0], [2100.0, 55.0], [2300.0, 66.0], [2200.0, 82.0], [2400.0, 65.0], [2500.0, 74.0], [2600.0, 66.0], [2800.0, 50.0], [2700.0, 45.0], [2900.0, 48.0], [3000.0, 41.0], [3100.0, 50.0], [3300.0, 32.0], [3200.0, 54.0], [3400.0, 31.0], [3500.0, 34.0], [3600.0, 28.0], [3700.0, 24.0], [3800.0, 24.0], [3900.0, 32.0], [4000.0, 25.0], [4200.0, 20.0], [4100.0, 21.0], [4300.0, 17.0], [4600.0, 22.0], [4400.0, 27.0], [4500.0, 22.0], [4700.0, 12.0], [4800.0, 19.0], [5100.0, 15.0], [5000.0, 18.0], [4900.0, 10.0], [5300.0, 16.0], [5200.0, 17.0], [5400.0, 16.0], [5600.0, 12.0], [5500.0, 11.0], [5800.0, 10.0], [5700.0, 9.0], [5900.0, 8.0], [6100.0, 12.0], [6000.0, 8.0], [6300.0, 10.0], [6200.0, 13.0], [6500.0, 8.0], [6600.0, 11.0], [6400.0, 7.0], [6900.0, 8.0], [6800.0, 11.0], [6700.0, 12.0], [7100.0, 10.0], [7000.0, 6.0], [7200.0, 15.0], [7300.0, 13.0], [7400.0, 6.0], [7600.0, 13.0], [7500.0, 7.0], [7700.0, 12.0], [7800.0, 17.0], [7900.0, 14.0], [8000.0, 7.0], [8100.0, 6.0], [8400.0, 8.0], [8500.0, 14.0], [8200.0, 16.0], [8300.0, 11.0], [8700.0, 12.0], [8600.0, 7.0], [9000.0, 12.0], [9200.0, 7.0], [8800.0, 9.0], [9100.0, 8.0], [8900.0, 11.0], [9700.0, 11.0], [9500.0, 18.0], [9400.0, 7.0], [9300.0, 6.0], [9600.0, 9.0], [9800.0, 12.0], [9900.0, 8.0], [10000.0, 9.0], [10100.0, 11.0], [10200.0, 2.0], [10500.0, 11.0], [10300.0, 6.0], [10700.0, 9.0], [10600.0, 18.0], [10400.0, 9.0], [10800.0, 10.0], [11100.0, 11.0], [11000.0, 13.0], [11200.0, 9.0], [10900.0, 6.0], [11400.0, 8.0], [11300.0, 8.0], [11700.0, 5.0], [11600.0, 6.0], [11500.0, 3.0], [12000.0, 11.0], [11800.0, 10.0], [12200.0, 7.0], [11900.0, 14.0], [12100.0, 8.0], [12600.0, 5.0], [12700.0, 7.0], [12300.0, 10.0], [12400.0, 12.0], [12500.0, 14.0], [12800.0, 12.0], [13200.0, 8.0], [13100.0, 9.0], [13300.0, 4.0], [13000.0, 7.0], [12900.0, 5.0], [13700.0, 7.0], [13800.0, 7.0], [13400.0, 6.0], [13500.0, 10.0], [13600.0, 7.0], [14100.0, 5.0], [14300.0, 8.0], [14000.0, 7.0], [13900.0, 7.0], [14200.0, 7.0], [14600.0, 3.0], [14800.0, 5.0], [14700.0, 8.0], [14500.0, 10.0], [14400.0, 9.0], [15300.0, 4.0], [15100.0, 10.0], [15200.0, 10.0], [14900.0, 3.0], [15000.0, 3.0], [15700.0, 5.0], [15600.0, 7.0], [15500.0, 7.0], [15400.0, 9.0], [15800.0, 7.0], [16000.0, 5.0], [16100.0, 13.0], [16200.0, 6.0], [15900.0, 3.0], [16300.0, 3.0], [17200.0, 3.0], [16800.0, 5.0], [17100.0, 2.0], [17400.0, 3.0], [17300.0, 5.0], [16500.0, 5.0], [16600.0, 4.0], [16400.0, 6.0], [16900.0, 5.0], [16700.0, 4.0], [17000.0, 4.0], [18200.0, 6.0], [17900.0, 2.0], [17700.0, 2.0], [18000.0, 2.0], [17600.0, 2.0], [17500.0, 3.0], [17800.0, 3.0], [18300.0, 1.0], [18400.0, 1.0], [18100.0, 2.0], [18900.0, 4.0], [18800.0, 2.0], [19200.0, 2.0], [18500.0, 1.0], [19900.0, 1.0], [20700.0, 2.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[400.0, 1.0], [600.0, 13.0], [700.0, 4.0], [800.0, 160.0], [900.0, 84.0], [1000.0, 195.0], [1100.0, 169.0], [1200.0, 217.0], [1300.0, 120.0], [1400.0, 219.0], [1500.0, 169.0], [1600.0, 129.0], [1700.0, 82.0], [1800.0, 64.0], [1900.0, 47.0], [2000.0, 50.0], [2100.0, 62.0], [2300.0, 73.0], [2200.0, 65.0], [2400.0, 66.0], [2500.0, 61.0], [2600.0, 47.0], [2700.0, 67.0], [2800.0, 51.0], [2900.0, 50.0], [3000.0, 31.0], [3100.0, 52.0], [3200.0, 34.0], [3300.0, 35.0], [3400.0, 38.0], [3500.0, 36.0], [3600.0, 18.0], [3700.0, 21.0], [3800.0, 27.0], [3900.0, 35.0], [4000.0, 18.0], [4100.0, 32.0], [4300.0, 19.0], [4200.0, 26.0], [4600.0, 27.0], [4500.0, 19.0], [4400.0, 28.0], [4700.0, 29.0], [4800.0, 19.0], [5000.0, 18.0], [5100.0, 12.0], [4900.0, 12.0], [5200.0, 12.0], [5300.0, 11.0], [5600.0, 13.0], [5400.0, 18.0], [5500.0, 18.0], [5700.0, 18.0], [5800.0, 14.0], [5900.0, 20.0], [6100.0, 11.0], [6000.0, 12.0], [6300.0, 10.0], [6200.0, 14.0], [6400.0, 14.0], [6600.0, 10.0], [6500.0, 8.0], [6800.0, 6.0], [6900.0, 12.0], [6700.0, 8.0], [7100.0, 11.0], [7000.0, 6.0], [7400.0, 9.0], [7300.0, 16.0], [7200.0, 8.0], [7600.0, 5.0], [7500.0, 12.0], [7700.0, 14.0], [7900.0, 8.0], [7800.0, 7.0], [8000.0, 9.0], [8100.0, 11.0], [8600.0, 10.0], [8200.0, 9.0], [8300.0, 4.0], [8400.0, 6.0], [8500.0, 11.0], [8700.0, 11.0], [9200.0, 13.0], [9000.0, 8.0], [8900.0, 15.0], [9100.0, 6.0], [8800.0, 11.0], [9500.0, 11.0], [9400.0, 14.0], [9600.0, 4.0], [9700.0, 9.0], [9300.0, 6.0], [10000.0, 5.0], [10100.0, 11.0], [9900.0, 8.0], [9800.0, 6.0], [10200.0, 8.0], [10500.0, 6.0], [10700.0, 14.0], [10400.0, 6.0], [10300.0, 4.0], [10600.0, 7.0], [10900.0, 7.0], [10800.0, 14.0], [11000.0, 8.0], [11100.0, 8.0], [11200.0, 7.0], [11600.0, 11.0], [11700.0, 7.0], [11400.0, 8.0], [11300.0, 6.0], [11500.0, 9.0], [12100.0, 6.0], [12000.0, 7.0], [11800.0, 5.0], [11900.0, 6.0], [12200.0, 5.0], [12500.0, 11.0], [12700.0, 9.0], [12300.0, 3.0], [12600.0, 6.0], [12400.0, 8.0], [13000.0, 8.0], [12900.0, 9.0], [13300.0, 9.0], [13200.0, 3.0], [13100.0, 4.0], [12800.0, 9.0], [13700.0, 10.0], [13800.0, 10.0], [13500.0, 8.0], [13600.0, 11.0], [13400.0, 9.0], [13900.0, 9.0], [14200.0, 10.0], [14300.0, 6.0], [14100.0, 7.0], [14000.0, 7.0], [14400.0, 9.0], [14800.0, 3.0], [14500.0, 7.0], [14700.0, 13.0], [14600.0, 6.0], [15200.0, 11.0], [15300.0, 3.0], [15100.0, 8.0], [15000.0, 3.0], [14900.0, 8.0], [15800.0, 6.0], [15500.0, 4.0], [15700.0, 3.0], [15600.0, 8.0], [15400.0, 6.0], [16200.0, 5.0], [16300.0, 3.0], [15900.0, 12.0], [16000.0, 12.0], [16100.0, 3.0], [17200.0, 6.0], [16500.0, 5.0], [16600.0, 5.0], [16700.0, 5.0], [16800.0, 10.0], [16900.0, 5.0], [17100.0, 2.0], [17000.0, 2.0], [16400.0, 5.0], [17300.0, 2.0], [17400.0, 2.0], [17600.0, 4.0], [17900.0, 8.0], [18200.0, 4.0], [18000.0, 2.0], [17800.0, 5.0], [17700.0, 3.0], [18300.0, 2.0], [18100.0, 1.0], [17500.0, 2.0], [18600.0, 1.0], [18800.0, 1.0], [19100.0, 1.0], [19200.0, 1.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5518.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2323.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5518.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65164568E12, "maxY": 14.0, "series": [{"data": [[1.65164772E12, 14.0], [1.6516461E12, 5.425806451612902], [1.65164832E12, 14.0], [1.65164652E12, 10.0], [1.65164814E12, 14.0], [1.65164874E12, 7.145695364238412], [1.65164712E12, 14.0], [1.65164694E12, 14.0], [1.65164592E12, 3.445945945945946], [1.65164754E12, 14.0], [1.65164574E12, 1.5543478260869559], [1.65164796E12, 14.0], [1.65164634E12, 8.0], [1.65164856E12, 14.0], [1.65164646E12, 9.422077922077927], [1.65164868E12, 12.231292517006796], [1.65164706E12, 14.0], [1.65164748E12, 14.0], [1.65164586E12, 2.945205479452055], [1.65164808E12, 14.0], [1.65164628E12, 7.433121019108279], [1.6516479E12, 14.0], [1.6516485E12, 14.0], [1.65164688E12, 14.0], [1.6516467E12, 12.0], [1.65164568E12, 1.0], [1.6516473E12, 14.0], [1.6516458E12, 2.0], [1.65164742E12, 14.0], [1.6516464E12, 8.923076923076925], [1.65164802E12, 14.0], [1.65164622E12, 6.932432432432434], [1.65164844E12, 14.0], [1.65164682E12, 13.429487179487184], [1.65164724E12, 14.0], [1.65164784E12, 14.0], [1.65164604E12, 4.928104575163398], [1.65164766E12, 14.0], [1.65164664E12, 11.433962264150948], [1.65164826E12, 14.0], [1.65164838E12, 14.0], [1.65164676E12, 12.929487179487172], [1.65164736E12, 14.0], [1.65164718E12, 14.0], [1.65164616E12, 6.0], [1.65164778E12, 14.0], [1.65164598E12, 4.0], [1.6516482E12, 14.0], [1.65164658E12, 10.934640522875817], [1.6516488E12, 3.9340659340659343], [1.65164862E12, 14.0], [1.651647E12, 14.0], [1.6516476E12, 14.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6516488E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 838.7115384615383, "minX": 1.0, "maxY": 5554.405176071283, "series": [{"data": [[2.0, 1001.3444444444444], [8.0, 3024.2999999999997], [9.0, 3725.68156424581], [10.0, 3985.4065040650407], [11.0, 4357.5084745762715], [3.0, 1219.162162162162], [12.0, 4640.176470588236], [13.0, 4787.600000000001], [14.0, 5554.405176071283], [1.0, 891.7037037037036], [4.0, 1580.322404371585], [5.0, 2024.9333333333332], [6.0, 2390.1016949152563], [7.0, 2780.5614035087724]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[11.332144676515542, 4497.564187468156]], "isOverall": false, "label": "smp-Aggregated", "isController": false}, {"data": [[2.0, 990.0659340659345], [8.0, 3102.228813559322], [9.0, 3348.677595628415], [10.0, 4049.491803278688], [11.0, 4074.5897435897446], [3.0, 1233.6090909090917], [12.0, 4487.860869565218], [13.0, 5250.474576271188], [14.0, 5481.813056379819], [1.0, 838.7115384615383], [4.0, 1619.427027027027], [5.0, 1887.3391304347829], [6.0, 2254.801724137931], [7.0, 2747.8608695652174]], "isOverall": false, "label": "smp ex", "isController": false}, {"data": [[11.342696629213478, 4438.329417773241]], "isOverall": false, "label": "smp ex-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 14.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 166.4, "minX": 1.65164568E12, "maxY": 495.9, "series": [{"data": [[1.65164772E12, 474.9166666666667], [1.6516461E12, 483.18333333333334], [1.65164832E12, 482.95], [1.65164652E12, 485.76666666666665], [1.65164814E12, 474.5], [1.65164874E12, 469.46666666666664], [1.65164712E12, 472.1], [1.65164694E12, 480.8666666666667], [1.65164592E12, 460.3333333333333], [1.65164754E12, 470.43333333333334], [1.65164574E12, 285.23333333333335], [1.65164796E12, 477.0833333333333], [1.65164634E12, 486.1666666666667], [1.65164856E12, 483.3], [1.65164646E12, 480.71666666666664], [1.65164868E12, 458.71666666666664], [1.65164706E12, 483.35], [1.65164748E12, 468.8], [1.65164586E12, 454.31666666666666], [1.65164808E12, 461.71666666666664], [1.65164628E12, 489.4166666666667], [1.6516479E12, 468.6666666666667], [1.6516485E12, 465.46666666666664], [1.65164688E12, 486.96666666666664], [1.6516467E12, 473.55], [1.65164568E12, 198.41666666666666], [1.6516473E12, 483.25], [1.6516458E12, 376.1], [1.65164742E12, 483.78333333333336], [1.6516464E12, 485.3333333333333], [1.65164802E12, 446.45], [1.65164622E12, 460.85], [1.65164844E12, 476.7], [1.65164682E12, 486.2], [1.65164724E12, 471.45], [1.65164784E12, 483.45], [1.65164604E12, 476.53333333333336], [1.65164766E12, 480.05], [1.65164664E12, 495.9], [1.65164826E12, 477.18333333333334], [1.65164838E12, 472.1166666666667], [1.65164676E12, 486.6333333333333], [1.65164736E12, 477.15], [1.65164718E12, 463.46666666666664], [1.65164616E12, 489.0], [1.65164778E12, 470.06666666666666], [1.65164598E12, 473.85], [1.6516482E12, 477.18333333333334], [1.65164658E12, 476.73333333333335], [1.6516488E12, 283.56666666666666], [1.65164862E12, 461.28333333333336], [1.651647E12, 486.31666666666666], [1.6516476E12, 471.3333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65164772E12, 395.26666666666665], [1.6516461E12, 403.01666666666665], [1.65164832E12, 402.95], [1.65164652E12, 405.56666666666666], [1.65164814E12, 395.23333333333335], [1.65164874E12, 392.51666666666665], [1.65164712E12, 392.68333333333334], [1.65164694E12, 400.43333333333334], [1.65164592E12, 384.76666666666665], [1.65164754E12, 392.55], [1.65164574E12, 239.16666666666666], [1.65164796E12, 397.78333333333336], [1.65164634E12, 405.6], [1.65164856E12, 402.98333333333335], [1.65164646E12, 400.46666666666664], [1.65164868E12, 382.21666666666664], [1.65164706E12, 402.98333333333335], [1.65164748E12, 390.06666666666666], [1.65164586E12, 379.6], [1.65164808E12, 384.8], [1.65164628E12, 408.21666666666664], [1.6516479E12, 390.06666666666666], [1.6516485E12, 387.45], [1.65164688E12, 405.6333333333333], [1.6516467E12, 395.1666666666667], [1.65164568E12, 166.4], [1.6516473E12, 402.98333333333335], [1.6516458E12, 314.6166666666667], [1.65164742E12, 403.01666666666665], [1.6516464E12, 405.53333333333336], [1.65164802E12, 371.81666666666666], [1.65164622E12, 384.76666666666665], [1.65164844E12, 397.75], [1.65164682E12, 405.56666666666666], [1.65164724E12, 392.65], [1.65164784E12, 402.98333333333335], [1.65164604E12, 397.78333333333336], [1.65164766E12, 400.3666666666667], [1.65164664E12, 413.4166666666667], [1.65164826E12, 397.78333333333336], [1.65164838E12, 392.68333333333334], [1.65164676E12, 405.6], [1.65164736E12, 397.78333333333336], [1.65164718E12, 387.28333333333336], [1.65164616E12, 408.18333333333334], [1.65164778E12, 392.51666666666665], [1.65164598E12, 395.23333333333335], [1.6516482E12, 397.78333333333336], [1.65164658E12, 397.78333333333336], [1.6516488E12, 236.61666666666667], [1.65164862E12, 384.76666666666665], [1.651647E12, 405.56666666666666], [1.6516476E12, 392.6166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6516488E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 840.59375, "minX": 1.65164568E12, "maxY": 6696.679487179488, "series": [{"data": [[1.65164772E12, 6425.6621621621625], [1.6516461E12, 2119.3896103896104], [1.65164832E12, 5541.012658227847], [1.65164652E12, 4075.291139240506], [1.65164814E12, 5393.173333333333], [1.65164874E12, 3141.9102564102564], [1.65164712E12, 5071.986301369862], [1.65164694E12, 5256.578947368423], [1.65164592E12, 1343.6933333333334], [1.65164754E12, 6211.493506493505], [1.65164574E12, 955.2127659574469], [1.65164796E12, 6239.025974025975], [1.65164634E12, 3016.128205128205], [1.65164856E12, 6077.192307692306], [1.65164646E12, 3981.893333333332], [1.65164868E12, 4622.232876712331], [1.65164706E12, 5144.782051282049], [1.65164748E12, 5625.424657534245], [1.65164586E12, 1172.958904109589], [1.65164808E12, 5570.500000000001], [1.65164628E12, 2807.076923076923], [1.6516479E12, 5351.684931506852], [1.6516485E12, 5957.53424657534], [1.65164688E12, 5633.545454545457], [1.6516467E12, 4672.727272727274], [1.65164568E12, 872.1874999999999], [1.6516473E12, 4700.4743589743575], [1.6516458E12, 982.35], [1.65164742E12, 5478.389610389608], [1.6516464E12, 3260.5375000000004], [1.65164802E12, 6140.309859154932], [1.65164622E12, 2766.44], [1.65164844E12, 5767.499999999999], [1.65164682E12, 5207.620253164557], [1.65164724E12, 4996.297297297298], [1.65164784E12, 5226.692307692309], [1.65164604E12, 1990.6883116883116], [1.65164766E12, 5639.282051282051], [1.65164664E12, 4436.303797468353], [1.65164826E12, 5043.012987012987], [1.65164838E12, 4999.054794520548], [1.65164676E12, 4369.628205128204], [1.65164736E12, 5674.012987012986], [1.65164718E12, 6696.679487179488], [1.65164616E12, 2344.658227848101], [1.65164778E12, 4724.910256410255], [1.65164598E12, 1607.0133333333333], [1.6516482E12, 6344.753246753246], [1.65164658E12, 4349.83116883117], [1.6516488E12, 1602.3333333333335], [1.65164862E12, 5337.000000000002], [1.651647E12, 5429.797468354431], [1.6516476E12, 5704.120000000002]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65164772E12, 4832.294871794872], [1.6516461E12, 2075.8076923076924], [1.65164832E12, 5185.118421052632], [1.65164652E12, 3658.2077922077924], [1.65164814E12, 5451.493506493506], [1.65164874E12, 2801.3698630136987], [1.65164712E12, 5771.269230769232], [1.65164694E12, 5621.487179487177], [1.65164592E12, 1411.5205479452059], [1.65164754E12, 5256.108108108107], [1.65164574E12, 911.6444444444444], [1.65164796E12, 4733.960526315791], [1.65164634E12, 3137.7564102564097], [1.65164856E12, 4844.935064935063], [1.65164646E12, 3397.5189873417717], [1.65164868E12, 5908.189189189187], [1.65164706E12, 5435.727272727274], [1.65164748E12, 5428.519480519481], [1.65164586E12, 1211.1232876712334], [1.65164808E12, 5831.608108108108], [1.65164628E12, 2792.0253164556952], [1.6516479E12, 5658.532467532468], [1.6516485E12, 5135.986842105263], [1.65164688E12, 5151.329113924051], [1.6516467E12, 4597.653333333333], [1.65164568E12, 840.59375], [1.6516473E12, 6080.077922077922], [1.6516458E12, 997.5901639344263], [1.65164742E12, 5186.538461538461], [1.6516464E12, 3478.7894736842118], [1.65164802E12, 5386.61111111111], [1.65164622E12, 2804.1917808219177], [1.65164844E12, 5337.280000000001], [1.65164682E12, 5067.155844155845], [1.65164724E12, 5788.896103896105], [1.65164784E12, 5840.7922077922085], [1.65164604E12, 1841.0000000000002], [1.65164766E12, 5017.315789473684], [1.65164664E12, 4185.4], [1.65164826E12, 6132.3026315789475], [1.65164838E12, 5991.1923076923085], [1.65164676E12, 5534.02564102564], [1.65164736E12, 5593.4473684210525], [1.65164718E12, 5035.183098591549], [1.65164616E12, 2247.4615384615386], [1.65164778E12, 6367.342465753425], [1.65164598E12, 1561.545454545455], [1.6516482E12, 4941.078947368423], [1.65164658E12, 4063.894736842107], [1.6516488E12, 1531.1086956521744], [1.65164862E12, 5951.2602739726035], [1.651647E12, 5321.012987012988], [1.6516476E12, 5467.763157894735]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6516488E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 840.5625, "minX": 1.65164568E12, "maxY": 6696.641025641027, "series": [{"data": [[1.65164772E12, 6425.648648648649], [1.6516461E12, 2119.3636363636356], [1.65164832E12, 5541.000000000001], [1.65164652E12, 4075.291139240506], [1.65164814E12, 5393.160000000002], [1.65164874E12, 3141.9102564102564], [1.65164712E12, 5071.986301369862], [1.65164694E12, 5256.578947368423], [1.65164592E12, 1343.6800000000003], [1.65164754E12, 6211.480519480517], [1.65164574E12, 955.1702127659574], [1.65164796E12, 6239.0129870129895], [1.65164634E12, 3016.128205128205], [1.65164856E12, 6077.192307692306], [1.65164646E12, 3981.8533333333335], [1.65164868E12, 4622.232876712331], [1.65164706E12, 5144.782051282049], [1.65164748E12, 5625.397260273973], [1.65164586E12, 1172.9178082191786], [1.65164808E12, 5570.500000000001], [1.65164628E12, 2807.064102564102], [1.6516479E12, 5351.684931506852], [1.6516485E12, 5957.53424657534], [1.65164688E12, 5633.506493506494], [1.6516467E12, 4672.727272727274], [1.65164568E12, 872.0625000000001], [1.6516473E12, 4700.4743589743575], [1.6516458E12, 982.35], [1.65164742E12, 5478.389610389608], [1.6516464E12, 3260.5125000000007], [1.65164802E12, 6140.281690140846], [1.65164622E12, 2766.4266666666667], [1.65164844E12, 5767.461538461538], [1.65164682E12, 5207.620253164557], [1.65164724E12, 4996.270270270271], [1.65164784E12, 5226.692307692309], [1.65164604E12, 1990.6493506493505], [1.65164766E12, 5639.269230769232], [1.65164664E12, 4436.291139240508], [1.65164826E12, 5043.012987012987], [1.65164838E12, 4999.041095890411], [1.65164676E12, 4369.628205128204], [1.65164736E12, 5673.987012987011], [1.65164718E12, 6696.641025641027], [1.65164616E12, 2344.658227848101], [1.65164778E12, 4724.884615384617], [1.65164598E12, 1606.9600000000003], [1.6516482E12, 6344.753246753246], [1.65164658E12, 4349.818181818182], [1.6516488E12, 1602.3111111111107], [1.65164862E12, 5337.000000000002], [1.651647E12, 5429.784810126581], [1.6516476E12, 5704.1066666666675]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65164772E12, 4832.294871794872], [1.6516461E12, 2075.782051282051], [1.65164832E12, 5185.092105263158], [1.65164652E12, 3658.194805194805], [1.65164814E12, 5451.493506493506], [1.65164874E12, 2801.356164383562], [1.65164712E12, 5771.269230769232], [1.65164694E12, 5621.461538461537], [1.65164592E12, 1411.5068493150688], [1.65164754E12, 5256.094594594595], [1.65164574E12, 911.5999999999999], [1.65164796E12, 4733.960526315791], [1.65164634E12, 3137.7435897435885], [1.65164856E12, 4844.92207792208], [1.65164646E12, 3397.506329113924], [1.65164868E12, 5908.175675675673], [1.65164706E12, 5435.7142857142835], [1.65164748E12, 5428.519480519481], [1.65164586E12, 1211.095890410959], [1.65164808E12, 5831.608108108108], [1.65164628E12, 2792.0253164556952], [1.6516479E12, 5658.51948051948], [1.6516485E12, 5135.986842105263], [1.65164688E12, 5151.316455696203], [1.6516467E12, 4597.6399999999985], [1.65164568E12, 840.5625], [1.6516473E12, 6080.0649350649355], [1.6516458E12, 997.5081967213115], [1.65164742E12, 5186.51282051282], [1.6516464E12, 3478.7763157894724], [1.65164802E12, 5386.61111111111], [1.65164622E12, 2804.1917808219177], [1.65164844E12, 5337.280000000001], [1.65164682E12, 5067.155844155845], [1.65164724E12, 5788.883116883117], [1.65164784E12, 5840.779220779223], [1.65164604E12, 1840.947368421053], [1.65164766E12, 5017.315789473684], [1.65164664E12, 4185.387499999997], [1.65164826E12, 6132.3026315789475], [1.65164838E12, 5991.166666666667], [1.65164676E12, 5534.0128205128185], [1.65164736E12, 5593.434210526316], [1.65164718E12, 5035.183098591549], [1.65164616E12, 2247.448717948718], [1.65164778E12, 6367.342465753425], [1.65164598E12, 1561.545454545455], [1.6516482E12, 4941.065789473684], [1.65164658E12, 4063.8815789473692], [1.6516488E12, 1531.0869565217397], [1.65164862E12, 5951.246575342466], [1.651647E12, 5321.000000000001], [1.6516476E12, 5467.763157894735]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6516488E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.315068493150686, "minX": 1.65164568E12, "maxY": 25.34375, "series": [{"data": [[1.65164772E12, 6.662162162162161], [1.6516461E12, 7.77922077922078], [1.65164832E12, 6.645569620253165], [1.65164652E12, 7.329113924050634], [1.65164814E12, 6.466666666666668], [1.65164874E12, 6.743589743589745], [1.65164712E12, 6.931506849315068], [1.65164694E12, 7.1578947368421035], [1.65164592E12, 8.466666666666665], [1.65164754E12, 6.7142857142857135], [1.65164574E12, 10.297872340425535], [1.65164796E12, 7.0649350649350655], [1.65164634E12, 7.897435897435898], [1.65164856E12, 7.346153846153846], [1.65164646E12, 7.546666666666666], [1.65164868E12, 6.657534246575342], [1.65164706E12, 6.525641025641025], [1.65164748E12, 6.369863013698633], [1.65164586E12, 8.794520547945208], [1.65164808E12, 6.405405405405405], [1.65164628E12, 7.243589743589744], [1.6516479E12, 6.835616438356162], [1.6516485E12, 6.397260273972603], [1.65164688E12, 6.831168831168829], [1.6516467E12, 7.077922077922078], [1.65164568E12, 25.34375], [1.6516473E12, 7.153846153846154], [1.6516458E12, 10.01666666666667], [1.65164742E12, 6.753246753246754], [1.6516464E12, 6.9625], [1.65164802E12, 6.507042253521127], [1.65164622E12, 7.0666666666666655], [1.65164844E12, 6.512820512820514], [1.65164682E12, 7.4177215189873404], [1.65164724E12, 6.45945945945946], [1.65164784E12, 6.794871794871795], [1.65164604E12, 7.766233766233768], [1.65164766E12, 6.871794871794875], [1.65164664E12, 7.0886075949367084], [1.65164826E12, 6.714285714285716], [1.65164838E12, 6.315068493150686], [1.65164676E12, 7.243589743589745], [1.65164736E12, 6.909090909090908], [1.65164718E12, 7.346153846153843], [1.65164616E12, 7.645569620253166], [1.65164778E12, 6.576923076923078], [1.65164598E12, 8.226666666666665], [1.6516482E12, 6.35064935064935], [1.65164658E12, 7.38961038961039], [1.6516488E12, 7.266666666666668], [1.65164862E12, 6.573333333333332], [1.651647E12, 6.9493670886075956], [1.6516476E12, 6.6800000000000015]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65164772E12, 7.794871794871795], [1.6516461E12, 9.10256410256411], [1.65164832E12, 8.06578947368421], [1.65164652E12, 8.324675324675328], [1.65164814E12, 7.948051948051944], [1.65164874E12, 7.8493150684931505], [1.65164712E12, 8.025641025641026], [1.65164694E12, 7.935897435897438], [1.65164592E12, 9.958904109589042], [1.65164754E12, 7.8378378378378395], [1.65164574E12, 11.2], [1.65164796E12, 7.776315789473683], [1.65164634E12, 8.217948717948719], [1.65164856E12, 7.935064935064939], [1.65164646E12, 8.21518987341772], [1.65164868E12, 7.540540540540541], [1.65164706E12, 7.961038961038961], [1.65164748E12, 7.779220779220778], [1.65164586E12, 10.273972602739724], [1.65164808E12, 7.405405405405406], [1.65164628E12, 8.32911392405063], [1.6516479E12, 7.779220779220779], [1.6516485E12, 7.671052631578948], [1.65164688E12, 7.924050632911392], [1.6516467E12, 7.866666666666668], [1.65164568E12, 14.968750000000004], [1.6516473E12, 7.714285714285715], [1.6516458E12, 10.868852459016399], [1.65164742E12, 7.9230769230769225], [1.6516464E12, 8.526315789473685], [1.65164802E12, 7.6111111111111125], [1.65164622E12, 8.57534246575343], [1.65164844E12, 7.72], [1.65164682E12, 8.493506493506493], [1.65164724E12, 7.90909090909091], [1.65164784E12, 8.428571428571427], [1.65164604E12, 9.51315789473684], [1.65164766E12, 8.092105263157894], [1.65164664E12, 8.174999999999997], [1.65164826E12, 7.855263157894736], [1.65164838E12, 7.833333333333332], [1.65164676E12, 8.064102564102566], [1.65164736E12, 8.499999999999998], [1.65164718E12, 8.183098591549298], [1.65164616E12, 8.846153846153845], [1.65164778E12, 8.178082191780819], [1.65164598E12, 9.272727272727272], [1.6516482E12, 7.999999999999998], [1.65164658E12, 8.407894736842108], [1.6516488E12, 8.304347826086955], [1.65164862E12, 7.9178082191780845], [1.651647E12, 8.038961038961034], [1.6516476E12, 8.052631578947368]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6516488E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 479.0, "minX": 1.65164568E12, "maxY": 20796.0, "series": [{"data": [[1.65164772E12, 18933.0], [1.6516461E12, 5220.0], [1.65164832E12, 18123.0], [1.65164652E12, 8214.0], [1.65164814E12, 18341.0], [1.65164874E12, 10281.0], [1.65164712E12, 17251.0], [1.65164694E12, 15723.0], [1.65164592E12, 3376.0], [1.65164754E12, 18847.0], [1.65164574E12, 1496.0], [1.65164796E12, 17883.0], [1.65164634E12, 6548.0], [1.65164856E12, 18275.0], [1.65164646E12, 9822.0], [1.65164868E12, 18155.0], [1.65164706E12, 16557.0], [1.65164748E12, 18004.0], [1.65164586E12, 2356.0], [1.65164808E12, 20775.0], [1.65164628E12, 5693.0], [1.6516479E12, 15409.0], [1.6516485E12, 18500.0], [1.65164688E12, 14470.0], [1.6516467E12, 14121.0], [1.65164568E12, 1247.0], [1.6516473E12, 17740.0], [1.6516458E12, 1595.0], [1.65164742E12, 17375.0], [1.6516464E12, 9219.0], [1.65164802E12, 19282.0], [1.65164622E12, 5767.0], [1.65164844E12, 19187.0], [1.65164682E12, 14775.0], [1.65164724E12, 18830.0], [1.65164784E12, 17957.0], [1.65164604E12, 4666.0], [1.65164766E12, 17515.0], [1.65164664E12, 12153.0], [1.65164826E12, 17714.0], [1.65164838E12, 18812.0], [1.65164676E12, 15844.0], [1.65164736E12, 17286.0], [1.65164718E12, 20796.0], [1.65164616E12, 5606.0], [1.65164778E12, 18685.0], [1.65164598E12, 3420.0], [1.6516482E12, 18950.0], [1.65164658E12, 11481.0], [1.6516488E12, 3668.0], [1.65164862E12, 19286.0], [1.651647E12, 16048.0], [1.6516476E12, 18372.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65164772E12, 15068.000000000004], [1.6516461E12, 3382.8], [1.65164832E12, 13989.800000000001], [1.65164652E12, 6814.600000000001], [1.65164814E12, 14655.200000000003], [1.65164874E12, 7323.2000000000035], [1.65164712E12, 13822.4], [1.65164694E12, 12843.0], [1.65164592E12, 2027.4999999999998], [1.65164754E12, 15189.2], [1.65164574E12, 1228.4], [1.65164796E12, 13398.199999999999], [1.65164634E12, 4930.200000000001], [1.65164856E12, 14506.6], [1.65164646E12, 8056.0], [1.65164868E12, 13689.00000000001], [1.65164706E12, 13364.4], [1.65164748E12, 14663.400000000001], [1.65164586E12, 1621.9], [1.65164808E12, 15251.199999999997], [1.65164628E12, 4708.000000000001], [1.6516479E12, 12581.300000000001], [1.6516485E12, 14529.0], [1.65164688E12, 11595.000000000004], [1.6516467E12, 10862.800000000001], [1.65164568E12, 909.0], [1.6516473E12, 14469.200000000003], [1.6516458E12, 1215.8], [1.65164742E12, 13947.2], [1.6516464E12, 6051.200000000003], [1.65164802E12, 14870.0], [1.65164622E12, 4638.7], [1.65164844E12, 14931.199999999999], [1.65164682E12, 12129.2], [1.65164724E12, 14817.2], [1.65164784E12, 14378.0], [1.65164604E12, 2968.6], [1.65164766E12, 13962.5], [1.65164664E12, 9574.0], [1.65164826E12, 14176.8], [1.65164838E12, 13978.400000000001], [1.65164676E12, 12480.9], [1.65164736E12, 13791.6], [1.65164718E12, 15246.0], [1.65164616E12, 3781.400000000002], [1.65164778E12, 14548.400000000001], [1.65164598E12, 2320.8], [1.6516482E12, 14778.799999999996], [1.65164658E12, 8338.2], [1.6516488E12, 2493.6], [1.65164862E12, 14964.5], [1.651647E12, 12620.600000000002], [1.6516476E12, 14010.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65164772E12, 18561.469999999998], [1.6516461E12, 4892.399999999999], [1.65164832E12, 17624.6], [1.65164652E12, 7922.730000000003], [1.65164814E12, 18198.96], [1.65164874E12, 10107.319999999996], [1.65164712E12, 17183.92], [1.65164694E12, 15620.149999999998], [1.65164592E12, 3337.289999999999], [1.65164754E12, 18521.479999999992], [1.65164574E12, 1496.0], [1.65164796E12, 17233.38000000001], [1.65164634E12, 6449.390000000001], [1.65164856E12, 18031.96], [1.65164646E12, 9811.0], [1.65164868E12, 17570.84000000001], [1.65164706E12, 16069.799999999997], [1.65164748E12, 17933.620000000003], [1.65164586E12, 2340.96], [1.65164808E12, 19856.24999999998], [1.65164628E12, 5684.88], [1.6516479E12, 15260.080000000002], [1.6516485E12, 18140.0], [1.65164688E12, 14153.080000000004], [1.6516467E12, 14118.88], [1.65164568E12, 1247.0], [1.6516473E12, 17687.92], [1.6516458E12, 1584.0], [1.65164742E12, 17124.12], [1.6516464E12, 9137.490000000002], [1.65164802E12, 18796.24], [1.65164622E12, 5627.349999999998], [1.65164844E12, 18762.020000000008], [1.65164682E12, 14733.960000000001], [1.65164724E12, 18544.519999999993], [1.65164784E12, 17625.48], [1.65164604E12, 4329.580000000005], [1.65164766E12, 17298.849999999995], [1.65164664E12, 12115.2], [1.65164826E12, 17516.360000000004], [1.65164838E12, 18067.879999999986], [1.65164676E12, 15547.600000000004], [1.65164736E12, 17059.200000000004], [1.65164718E12, 20393.5], [1.65164616E12, 5369.939999999995], [1.65164778E12, 18468.679999999997], [1.65164598E12, 3331.49], [1.6516482E12, 18553.640000000007], [1.65164658E12, 11154.840000000006], [1.6516488E12, 3668.0], [1.65164862E12, 19277.18], [1.651647E12, 15900.940000000002], [1.6516476E12, 18333.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65164772E12, 16617.649999999998], [1.6516461E12, 4138.199999999999], [1.65164832E12, 15640.799999999997], [1.65164652E12, 7406.400000000001], [1.65164814E12, 16476.999999999996], [1.65164874E12, 8484.800000000001], [1.65164712E12, 15886.800000000005], [1.65164694E12, 14239.5], [1.65164592E12, 2429.699999999996], [1.65164754E12, 17145.600000000002], [1.65164574E12, 1242.35], [1.65164796E12, 15423.699999999999], [1.65164634E12, 5526.75], [1.65164856E12, 16335.999999999996], [1.65164646E12, 8611.5], [1.65164868E12, 15920.599999999999], [1.65164706E12, 15195.8], [1.65164748E12, 16182.249999999996], [1.65164586E12, 1700.95], [1.65164808E12, 17469.249999999993], [1.65164628E12, 5292.2], [1.6516479E12, 13817.949999999999], [1.6516485E12, 16465.0], [1.65164688E12, 12817.300000000001], [1.6516467E12, 12837.849999999999], [1.65164568E12, 979.75], [1.6516473E12, 16124.199999999999], [1.6516458E12, 1391.5], [1.65164742E12, 15431.799999999994], [1.6516464E12, 6837.550000000001], [1.65164802E12, 16410.0], [1.65164622E12, 5213.0999999999985], [1.65164844E12, 16613.3], [1.65164682E12, 13380.900000000001], [1.65164724E12, 16924.600000000002], [1.65164784E12, 15710.599999999997], [1.65164604E12, 3506.199999999998], [1.65164766E12, 15596.5], [1.65164664E12, 10703.0], [1.65164826E12, 15571.199999999995], [1.65164838E12, 15685.400000000001], [1.65164676E12, 14338.550000000001], [1.65164736E12, 15233.3], [1.65164718E12, 17579.0], [1.65164616E12, 4357.099999999999], [1.65164778E12, 16613.0], [1.65164598E12, 2539.1499999999996], [1.6516482E12, 16323.699999999992], [1.65164658E12, 9624.299999999997], [1.6516488E12, 2993.5999999999985], [1.65164862E12, 17029.399999999994], [1.651647E12, 14141.400000000003], [1.6516476E12, 16117.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65164772E12, 645.0], [1.6516461E12, 867.0], [1.65164832E12, 837.0], [1.65164652E12, 979.0], [1.65164814E12, 831.0], [1.65164874E12, 608.0], [1.65164712E12, 849.0], [1.65164694E12, 949.0], [1.65164592E12, 603.0], [1.65164754E12, 645.0], [1.65164574E12, 666.0], [1.65164796E12, 909.0], [1.65164634E12, 979.0], [1.65164856E12, 639.0], [1.65164646E12, 907.0], [1.65164868E12, 808.0], [1.65164706E12, 949.0], [1.65164748E12, 878.0], [1.65164586E12, 639.0], [1.65164808E12, 672.0], [1.65164628E12, 871.0], [1.6516479E12, 882.0], [1.6516485E12, 872.0], [1.65164688E12, 961.0], [1.6516467E12, 479.0], [1.65164568E12, 795.0], [1.6516473E12, 826.0], [1.6516458E12, 676.0], [1.65164742E12, 782.0], [1.6516464E12, 881.0], [1.65164802E12, 853.0], [1.65164622E12, 998.0], [1.65164844E12, 794.0], [1.65164682E12, 829.0], [1.65164724E12, 797.0], [1.65164784E12, 886.0], [1.65164604E12, 833.0], [1.65164766E12, 831.0], [1.65164664E12, 995.0], [1.65164826E12, 926.0], [1.65164838E12, 799.0], [1.65164676E12, 875.0], [1.65164736E12, 915.0], [1.65164718E12, 681.0], [1.65164616E12, 806.0], [1.65164778E12, 839.0], [1.65164598E12, 617.0], [1.6516482E12, 869.0], [1.65164658E12, 1019.0], [1.6516488E12, 615.0], [1.65164862E12, 654.0], [1.651647E12, 961.0], [1.6516476E12, 864.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65164772E12, 1997.0], [1.6516461E12, 1873.0], [1.65164832E12, 2684.0], [1.65164652E12, 3574.0], [1.65164814E12, 2292.0], [1.65164874E12, 1745.0], [1.65164712E12, 2651.0], [1.65164694E12, 3881.0], [1.65164592E12, 1267.0], [1.65164754E12, 1895.0], [1.65164574E12, 851.0], [1.65164796E12, 3478.0], [1.65164634E12, 3000.0], [1.65164856E12, 2445.0], [1.65164646E12, 2801.5], [1.65164868E12, 2779.0], [1.65164706E12, 3150.0], [1.65164748E12, 2613.5], [1.65164586E12, 1125.5], [1.65164808E12, 2590.0], [1.65164628E12, 2590.0], [1.6516479E12, 4358.0], [1.6516485E12, 2562.0], [1.65164688E12, 4363.5], [1.6516467E12, 2972.5], [1.65164568E12, 843.0], [1.6516473E12, 2284.0], [1.6516458E12, 956.0], [1.65164742E12, 2642.0], [1.6516464E12, 3020.5], [1.65164802E12, 3069.0], [1.65164622E12, 2669.0], [1.65164844E12, 2354.0], [1.65164682E12, 3495.5], [1.65164724E12, 1924.0], [1.65164784E12, 2919.0], [1.65164604E12, 1746.0], [1.65164766E12, 2760.5], [1.65164664E12, 3140.0], [1.65164826E12, 2681.0], [1.65164838E12, 3044.0], [1.65164676E12, 2626.0], [1.65164736E12, 3311.0], [1.65164718E12, 2376.0], [1.65164616E12, 2046.0], [1.65164778E12, 2536.0], [1.65164598E12, 1507.0], [1.6516482E12, 2623.0], [1.65164658E12, 3501.0], [1.6516488E12, 1325.0], [1.65164862E12, 2447.5], [1.651647E12, 3557.5], [1.6516476E12, 2872.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6516488E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 870.5, "minX": 1.0, "maxY": 2543.5, "series": [{"data": [[1.0, 870.5], [2.0, 2445.5], [4.0, 2460.5], [3.0, 2543.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 870.5, "minX": 1.0, "maxY": 2543.5, "series": [{"data": [[1.0, 870.5], [2.0, 2445.5], [4.0, 2460.5], [3.0, 2543.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0833333333333333, "minX": 1.65164568E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.65164772E12, 2.533333333333333], [1.6516461E12, 2.6], [1.65164832E12, 2.5833333333333335], [1.65164652E12, 2.6], [1.65164814E12, 2.533333333333333], [1.65164874E12, 2.433333333333333], [1.65164712E12, 2.5166666666666666], [1.65164694E12, 2.566666666666667], [1.65164592E12, 2.4833333333333334], [1.65164754E12, 2.5166666666666666], [1.65164574E12, 1.55], [1.65164796E12, 2.55], [1.65164634E12, 2.6], [1.65164856E12, 2.5833333333333335], [1.65164646E12, 2.5833333333333335], [1.65164868E12, 2.3666666666666667], [1.65164706E12, 2.5833333333333335], [1.65164748E12, 2.5], [1.65164586E12, 2.45], [1.65164808E12, 2.466666666666667], [1.65164628E12, 2.6333333333333333], [1.6516479E12, 2.5], [1.6516485E12, 2.4833333333333334], [1.65164688E12, 2.6], [1.6516467E12, 2.533333333333333], [1.65164568E12, 1.0833333333333333], [1.6516473E12, 2.5833333333333335], [1.6516458E12, 2.0166666666666666], [1.65164742E12, 2.5833333333333335], [1.6516464E12, 2.6166666666666667], [1.65164802E12, 2.3833333333333333], [1.65164622E12, 2.4833333333333334], [1.65164844E12, 2.55], [1.65164682E12, 2.6166666666666667], [1.65164724E12, 2.5166666666666666], [1.65164784E12, 2.5833333333333335], [1.65164604E12, 2.566666666666667], [1.65164766E12, 2.566666666666667], [1.65164664E12, 2.6666666666666665], [1.65164826E12, 2.55], [1.65164838E12, 2.5166666666666666], [1.65164676E12, 2.6166666666666667], [1.65164736E12, 2.55], [1.65164718E12, 2.4833333333333334], [1.65164616E12, 2.6166666666666667], [1.65164778E12, 2.5166666666666666], [1.65164598E12, 2.533333333333333], [1.6516482E12, 2.55], [1.65164658E12, 2.566666666666667], [1.6516488E12, 1.45], [1.65164862E12, 2.466666666666667], [1.651647E12, 2.6], [1.6516476E12, 2.5166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6516488E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.65164568E12, "maxY": 2.65, "series": [{"data": [[1.65164772E12, 2.533333333333333], [1.6516461E12, 2.5833333333333335], [1.65164832E12, 2.5833333333333335], [1.65164652E12, 2.6], [1.65164814E12, 2.533333333333333], [1.65164874E12, 2.5166666666666666], [1.65164712E12, 2.5166666666666666], [1.65164694E12, 2.566666666666667], [1.65164592E12, 2.466666666666667], [1.65164754E12, 2.5166666666666666], [1.65164574E12, 1.5333333333333334], [1.65164796E12, 2.55], [1.65164634E12, 2.6], [1.65164856E12, 2.5833333333333335], [1.65164646E12, 2.566666666666667], [1.65164868E12, 2.45], [1.65164706E12, 2.5833333333333335], [1.65164748E12, 2.5], [1.65164586E12, 2.433333333333333], [1.65164808E12, 2.466666666666667], [1.65164628E12, 2.6166666666666667], [1.6516479E12, 2.5], [1.6516485E12, 2.4833333333333334], [1.65164688E12, 2.6], [1.6516467E12, 2.533333333333333], [1.65164568E12, 1.0666666666666667], [1.6516473E12, 2.5833333333333335], [1.6516458E12, 2.0166666666666666], [1.65164742E12, 2.5833333333333335], [1.6516464E12, 2.6], [1.65164802E12, 2.3833333333333333], [1.65164622E12, 2.466666666666667], [1.65164844E12, 2.55], [1.65164682E12, 2.6], [1.65164724E12, 2.5166666666666666], [1.65164784E12, 2.5833333333333335], [1.65164604E12, 2.55], [1.65164766E12, 2.566666666666667], [1.65164664E12, 2.65], [1.65164826E12, 2.55], [1.65164838E12, 2.5166666666666666], [1.65164676E12, 2.6], [1.65164736E12, 2.55], [1.65164718E12, 2.4833333333333334], [1.65164616E12, 2.6166666666666667], [1.65164778E12, 2.5166666666666666], [1.65164598E12, 2.533333333333333], [1.6516482E12, 2.55], [1.65164658E12, 2.55], [1.6516488E12, 1.5166666666666666], [1.65164862E12, 2.466666666666667], [1.651647E12, 2.6], [1.6516476E12, 2.5166666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6516488E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.65164568E12, "maxY": 1.3333333333333333, "series": [{"data": [[1.65164772E12, 1.2333333333333334], [1.6516461E12, 1.2833333333333334], [1.65164832E12, 1.3166666666666667], [1.65164652E12, 1.3166666666666667], [1.65164814E12, 1.25], [1.65164874E12, 1.3], [1.65164712E12, 1.2166666666666666], [1.65164694E12, 1.2666666666666666], [1.65164592E12, 1.25], [1.65164754E12, 1.2833333333333334], [1.65164574E12, 0.7833333333333333], [1.65164796E12, 1.2833333333333334], [1.65164634E12, 1.3], [1.65164856E12, 1.3], [1.65164646E12, 1.25], [1.65164868E12, 1.2166666666666666], [1.65164706E12, 1.3], [1.65164748E12, 1.2166666666666666], [1.65164586E12, 1.2166666666666666], [1.65164808E12, 1.2333333333333334], [1.65164628E12, 1.3], [1.6516479E12, 1.2166666666666666], [1.6516485E12, 1.2166666666666666], [1.65164688E12, 1.2833333333333334], [1.6516467E12, 1.2833333333333334], [1.65164568E12, 0.5333333333333333], [1.6516473E12, 1.3], [1.6516458E12, 1.0], [1.65164742E12, 1.2833333333333334], [1.6516464E12, 1.3333333333333333], [1.65164802E12, 1.1833333333333333], [1.65164622E12, 1.25], [1.65164844E12, 1.3], [1.65164682E12, 1.3166666666666667], [1.65164724E12, 1.2333333333333334], [1.65164784E12, 1.3], [1.65164604E12, 1.2833333333333334], [1.65164766E12, 1.3], [1.65164664E12, 1.3166666666666667], [1.65164826E12, 1.2833333333333334], [1.65164838E12, 1.2166666666666666], [1.65164676E12, 1.3], [1.65164736E12, 1.2833333333333334], [1.65164718E12, 1.3], [1.65164616E12, 1.3166666666666667], [1.65164778E12, 1.3], [1.65164598E12, 1.25], [1.6516482E12, 1.2833333333333334], [1.65164658E12, 1.2833333333333334], [1.6516488E12, 0.75], [1.65164862E12, 1.25], [1.651647E12, 1.3166666666666667], [1.6516476E12, 1.25]], "isOverall": false, "label": "smp-success", "isController": false}, {"data": [[1.65164772E12, 1.3], [1.6516461E12, 1.3], [1.65164832E12, 1.2666666666666666], [1.65164652E12, 1.2833333333333334], [1.65164814E12, 1.2833333333333334], [1.65164874E12, 1.2166666666666666], [1.65164712E12, 1.3], [1.65164694E12, 1.3], [1.65164592E12, 1.2166666666666666], [1.65164754E12, 1.2333333333333334], [1.65164574E12, 0.75], [1.65164796E12, 1.2666666666666666], [1.65164634E12, 1.3], [1.65164856E12, 1.2833333333333334], [1.65164646E12, 1.3166666666666667], [1.65164868E12, 1.2333333333333334], [1.65164706E12, 1.2833333333333334], [1.65164748E12, 1.2833333333333334], [1.65164586E12, 1.2166666666666666], [1.65164808E12, 1.2333333333333334], [1.65164628E12, 1.3166666666666667], [1.6516479E12, 1.2833333333333334], [1.6516485E12, 1.2666666666666666], [1.65164688E12, 1.3166666666666667], [1.6516467E12, 1.25], [1.65164568E12, 0.5333333333333333], [1.6516473E12, 1.2833333333333334], [1.6516458E12, 1.0166666666666666], [1.65164742E12, 1.3], [1.6516464E12, 1.2666666666666666], [1.65164802E12, 1.2], [1.65164622E12, 1.2166666666666666], [1.65164844E12, 1.25], [1.65164682E12, 1.2833333333333334], [1.65164724E12, 1.2833333333333334], [1.65164784E12, 1.2833333333333334], [1.65164604E12, 1.2666666666666666], [1.65164766E12, 1.2666666666666666], [1.65164664E12, 1.3333333333333333], [1.65164826E12, 1.2666666666666666], [1.65164838E12, 1.3], [1.65164676E12, 1.3], [1.65164736E12, 1.2666666666666666], [1.65164718E12, 1.1833333333333333], [1.65164616E12, 1.3], [1.65164778E12, 1.2166666666666666], [1.65164598E12, 1.2833333333333334], [1.6516482E12, 1.2666666666666666], [1.65164658E12, 1.2666666666666666], [1.6516488E12, 0.7666666666666667], [1.65164862E12, 1.2166666666666666], [1.651647E12, 1.2833333333333334], [1.6516476E12, 1.2666666666666666]], "isOverall": false, "label": "smp ex-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6516488E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.65164568E12, "maxY": 2.65, "series": [{"data": [[1.65164772E12, 2.533333333333333], [1.6516461E12, 2.5833333333333335], [1.65164832E12, 2.5833333333333335], [1.65164652E12, 2.6], [1.65164814E12, 2.533333333333333], [1.65164874E12, 2.5166666666666666], [1.65164712E12, 2.5166666666666666], [1.65164694E12, 2.566666666666667], [1.65164592E12, 2.466666666666667], [1.65164754E12, 2.5166666666666666], [1.65164574E12, 1.5333333333333334], [1.65164796E12, 2.55], [1.65164634E12, 2.6], [1.65164856E12, 2.5833333333333335], [1.65164646E12, 2.566666666666667], [1.65164868E12, 2.45], [1.65164706E12, 2.5833333333333335], [1.65164748E12, 2.5], [1.65164586E12, 2.433333333333333], [1.65164808E12, 2.466666666666667], [1.65164628E12, 2.6166666666666667], [1.6516479E12, 2.5], [1.6516485E12, 2.4833333333333334], [1.65164688E12, 2.6], [1.6516467E12, 2.533333333333333], [1.65164568E12, 1.0666666666666667], [1.6516473E12, 2.5833333333333335], [1.6516458E12, 2.0166666666666666], [1.65164742E12, 2.5833333333333335], [1.6516464E12, 2.6], [1.65164802E12, 2.3833333333333333], [1.65164622E12, 2.466666666666667], [1.65164844E12, 2.55], [1.65164682E12, 2.6], [1.65164724E12, 2.5166666666666666], [1.65164784E12, 2.5833333333333335], [1.65164604E12, 2.55], [1.65164766E12, 2.566666666666667], [1.65164664E12, 2.65], [1.65164826E12, 2.55], [1.65164838E12, 2.5166666666666666], [1.65164676E12, 2.6], [1.65164736E12, 2.55], [1.65164718E12, 2.4833333333333334], [1.65164616E12, 2.6166666666666667], [1.65164778E12, 2.5166666666666666], [1.65164598E12, 2.533333333333333], [1.6516482E12, 2.55], [1.65164658E12, 2.55], [1.6516488E12, 1.5166666666666666], [1.65164862E12, 2.466666666666667], [1.651647E12, 2.6], [1.6516476E12, 2.5166666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6516488E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


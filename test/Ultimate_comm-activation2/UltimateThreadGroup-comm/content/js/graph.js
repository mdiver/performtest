/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 749.0, "minX": 0.0, "maxY": 12922.0, "series": [{"data": [[0.0, 763.0], [0.1, 763.0], [0.2, 770.0], [0.3, 770.0], [0.4, 776.0], [0.5, 776.0], [0.6, 777.0], [0.7, 777.0], [0.8, 779.0], [0.9, 808.0], [1.0, 808.0], [1.1, 818.0], [1.2, 818.0], [1.3, 840.0], [1.4, 840.0], [1.5, 855.0], [1.6, 857.0], [1.7, 857.0], [1.8, 857.0], [1.9, 857.0], [2.0, 863.0], [2.1, 863.0], [2.2, 906.0], [2.3, 912.0], [2.4, 912.0], [2.5, 916.0], [2.6, 916.0], [2.7, 929.0], [2.8, 929.0], [2.9, 955.0], [3.0, 957.0], [3.1, 957.0], [3.2, 958.0], [3.3, 958.0], [3.4, 960.0], [3.5, 960.0], [3.6, 979.0], [3.7, 983.0], [3.8, 983.0], [3.9, 992.0], [4.0, 992.0], [4.1, 995.0], [4.2, 995.0], [4.3, 1007.0], [4.4, 1009.0], [4.5, 1009.0], [4.6, 1017.0], [4.7, 1017.0], [4.8, 1026.0], [4.9, 1026.0], [5.0, 1031.0], [5.1, 1043.0], [5.2, 1043.0], [5.3, 1045.0], [5.4, 1045.0], [5.5, 1052.0], [5.6, 1052.0], [5.7, 1060.0], [5.8, 1061.0], [5.9, 1061.0], [6.0, 1078.0], [6.1, 1078.0], [6.2, 1079.0], [6.3, 1079.0], [6.4, 1083.0], [6.5, 1083.0], [6.6, 1090.0], [6.7, 1094.0], [6.8, 1094.0], [6.9, 1096.0], [7.0, 1096.0], [7.1, 1100.0], [7.2, 1100.0], [7.3, 1102.0], [7.4, 1103.0], [7.5, 1103.0], [7.6, 1111.0], [7.7, 1111.0], [7.8, 1120.0], [7.9, 1120.0], [8.0, 1134.0], [8.1, 1138.0], [8.2, 1138.0], [8.3, 1140.0], [8.4, 1140.0], [8.5, 1152.0], [8.6, 1152.0], [8.7, 1156.0], [8.8, 1161.0], [8.9, 1161.0], [9.0, 1170.0], [9.1, 1170.0], [9.2, 1171.0], [9.3, 1171.0], [9.4, 1173.0], [9.5, 1181.0], [9.6, 1181.0], [9.7, 1185.0], [9.8, 1185.0], [9.9, 1187.0], [10.0, 1187.0], [10.1, 1188.0], [10.2, 1195.0], [10.3, 1195.0], [10.4, 1204.0], [10.5, 1204.0], [10.6, 1218.0], [10.7, 1218.0], [10.8, 1222.0], [10.9, 1229.0], [11.0, 1229.0], [11.1, 1236.0], [11.2, 1236.0], [11.3, 1255.0], [11.4, 1255.0], [11.5, 1264.0], [11.6, 1278.0], [11.7, 1278.0], [11.8, 1296.0], [11.9, 1296.0], [12.0, 1297.0], [12.1, 1297.0], [12.2, 1308.0], [12.3, 1308.0], [12.4, 1312.0], [12.5, 1320.0], [12.6, 1320.0], [12.7, 1330.0], [12.8, 1330.0], [12.9, 1330.0], [13.0, 1330.0], [13.1, 1339.0], [13.2, 1348.0], [13.3, 1348.0], [13.4, 1348.0], [13.5, 1348.0], [13.6, 1356.0], [13.7, 1356.0], [13.8, 1358.0], [13.9, 1362.0], [14.0, 1362.0], [14.1, 1363.0], [14.2, 1363.0], [14.3, 1369.0], [14.4, 1369.0], [14.5, 1370.0], [14.6, 1372.0], [14.7, 1372.0], [14.8, 1382.0], [14.9, 1382.0], [15.0, 1393.0], [15.1, 1393.0], [15.2, 1396.0], [15.3, 1398.0], [15.4, 1398.0], [15.5, 1401.0], [15.6, 1401.0], [15.7, 1402.0], [15.8, 1402.0], [15.9, 1404.0], [16.0, 1413.0], [16.1, 1413.0], [16.2, 1414.0], [16.3, 1414.0], [16.4, 1414.0], [16.5, 1414.0], [16.6, 1416.0], [16.7, 1430.0], [16.8, 1430.0], [16.9, 1434.0], [17.0, 1434.0], [17.1, 1442.0], [17.2, 1442.0], [17.3, 1450.0], [17.4, 1459.0], [17.5, 1459.0], [17.6, 1477.0], [17.7, 1477.0], [17.8, 1482.0], [17.9, 1482.0], [18.0, 1505.0], [18.1, 1505.0], [18.2, 1516.0], [18.3, 1516.0], [18.4, 1516.0], [18.5, 1551.0], [18.6, 1551.0], [18.7, 1570.0], [18.8, 1570.0], [18.9, 1572.0], [19.0, 1583.0], [19.1, 1583.0], [19.2, 1586.0], [19.3, 1586.0], [19.4, 1591.0], [19.5, 1591.0], [19.6, 1594.0], [19.7, 1604.0], [19.8, 1604.0], [19.9, 1619.0], [20.0, 1619.0], [20.1, 1619.0], [20.2, 1619.0], [20.3, 1624.0], [20.4, 1626.0], [20.5, 1626.0], [20.6, 1634.0], [20.7, 1634.0], [20.8, 1635.0], [20.9, 1635.0], [21.0, 1645.0], [21.1, 1650.0], [21.2, 1650.0], [21.3, 1671.0], [21.4, 1671.0], [21.5, 1671.0], [21.6, 1671.0], [21.7, 1692.0], [21.8, 1696.0], [21.9, 1696.0], [22.0, 1705.0], [22.1, 1705.0], [22.2, 1727.0], [22.3, 1727.0], [22.4, 1743.0], [22.5, 1759.0], [22.6, 1759.0], [22.7, 1768.0], [22.8, 1768.0], [22.9, 1771.0], [23.0, 1771.0], [23.1, 1774.0], [23.2, 1796.0], [23.3, 1796.0], [23.4, 1815.0], [23.5, 1815.0], [23.6, 1823.0], [23.7, 1823.0], [23.8, 1824.0], [23.9, 1824.0], [24.0, 1833.0], [24.1, 1842.0], [24.2, 1842.0], [24.3, 1859.0], [24.4, 1859.0], [24.5, 1865.0], [24.6, 1865.0], [24.7, 1905.0], [24.8, 1909.0], [24.9, 1909.0], [25.0, 1924.0], [25.1, 1924.0], [25.2, 1956.0], [25.3, 1956.0], [25.4, 1966.0], [25.5, 1966.0], [25.6, 1966.0], [25.7, 1969.0], [25.8, 1969.0], [25.9, 1997.0], [26.0, 1997.0], [26.1, 2001.0], [26.2, 2023.0], [26.3, 2023.0], [26.4, 2075.0], [26.5, 2075.0], [26.6, 2091.0], [26.7, 2091.0], [26.8, 2102.0], [26.9, 2113.0], [27.0, 2113.0], [27.1, 2121.0], [27.2, 2121.0], [27.3, 2146.0], [27.4, 2146.0], [27.5, 2152.0], [27.6, 2176.0], [27.7, 2176.0], [27.8, 2231.0], [27.9, 2231.0], [28.0, 2232.0], [28.1, 2232.0], [28.2, 2252.0], [28.3, 2273.0], [28.4, 2273.0], [28.5, 2278.0], [28.6, 2278.0], [28.7, 2306.0], [28.8, 2306.0], [28.9, 2315.0], [29.0, 2319.0], [29.1, 2319.0], [29.2, 2326.0], [29.3, 2326.0], [29.4, 2331.0], [29.5, 2331.0], [29.6, 2334.0], [29.7, 2334.0], [29.8, 2365.0], [29.9, 2378.0], [30.0, 2378.0], [30.1, 2418.0], [30.2, 2418.0], [30.3, 2421.0], [30.4, 2421.0], [30.5, 2426.0], [30.6, 2436.0], [30.7, 2436.0], [30.8, 2441.0], [30.9, 2441.0], [31.0, 2449.0], [31.1, 2449.0], [31.2, 2454.0], [31.3, 2458.0], [31.4, 2458.0], [31.5, 2475.0], [31.6, 2475.0], [31.7, 2499.0], [31.8, 2499.0], [31.9, 2501.0], [32.0, 2508.0], [32.1, 2508.0], [32.2, 2509.0], [32.3, 2509.0], [32.4, 2512.0], [32.5, 2512.0], [32.6, 2515.0], [32.7, 2516.0], [32.8, 2516.0], [32.9, 2532.0], [33.0, 2532.0], [33.1, 2552.0], [33.2, 2552.0], [33.3, 2567.0], [33.4, 2567.0], [33.5, 2567.0], [33.6, 2576.0], [33.7, 2576.0], [33.8, 2582.0], [33.9, 2582.0], [34.0, 2589.0], [34.1, 2591.0], [34.2, 2591.0], [34.3, 2610.0], [34.4, 2610.0], [34.5, 2611.0], [34.6, 2611.0], [34.7, 2665.0], [34.8, 2678.0], [34.9, 2678.0], [35.0, 2696.0], [35.1, 2696.0], [35.2, 2697.0], [35.3, 2697.0], [35.4, 2699.0], [35.5, 2699.0], [35.6, 2700.0], [35.7, 2703.0], [35.8, 2703.0], [35.9, 2724.0], [36.0, 2724.0], [36.1, 2753.0], [36.2, 2753.0], [36.3, 2763.0], [36.4, 2770.0], [36.5, 2770.0], [36.6, 2772.0], [36.7, 2772.0], [36.8, 2781.0], [36.9, 2781.0], [37.0, 2795.0], [37.1, 2797.0], [37.2, 2797.0], [37.3, 2859.0], [37.4, 2859.0], [37.5, 2861.0], [37.6, 2861.0], [37.7, 2866.0], [37.8, 2867.0], [37.9, 2867.0], [38.0, 2868.0], [38.1, 2868.0], [38.2, 2886.0], [38.3, 2886.0], [38.4, 2895.0], [38.5, 2903.0], [38.6, 2903.0], [38.7, 2907.0], [38.8, 2907.0], [38.9, 2907.0], [39.0, 2907.0], [39.1, 2918.0], [39.2, 2920.0], [39.3, 2920.0], [39.4, 2923.0], [39.5, 2923.0], [39.6, 2926.0], [39.7, 2926.0], [39.8, 2941.0], [39.9, 2944.0], [40.0, 2944.0], [40.1, 2945.0], [40.2, 2945.0], [40.3, 2998.0], [40.4, 2998.0], [40.5, 3014.0], [40.6, 3027.0], [40.7, 3027.0], [40.8, 3044.0], [40.9, 3044.0], [41.0, 3049.0], [41.1, 3049.0], [41.2, 3054.0], [41.3, 3054.0], [41.4, 3077.0], [41.5, 3079.0], [41.6, 3079.0], [41.7, 3083.0], [41.8, 3083.0], [41.9, 3086.0], [42.0, 3086.0], [42.1, 3087.0], [42.2, 3089.0], [42.3, 3089.0], [42.4, 3091.0], [42.5, 3091.0], [42.6, 3099.0], [42.7, 3099.0], [42.8, 3111.0], [42.9, 3131.0], [43.0, 3131.0], [43.1, 3189.0], [43.2, 3189.0], [43.3, 3194.0], [43.4, 3194.0], [43.5, 3214.0], [43.6, 3220.0], [43.7, 3220.0], [43.8, 3230.0], [43.9, 3230.0], [44.0, 3242.0], [44.1, 3242.0], [44.2, 3243.0], [44.3, 3254.0], [44.4, 3254.0], [44.5, 3289.0], [44.6, 3289.0], [44.7, 3314.0], [44.8, 3314.0], [44.9, 3329.0], [45.0, 3365.0], [45.1, 3365.0], [45.2, 3382.0], [45.3, 3382.0], [45.4, 3399.0], [45.5, 3399.0], [45.6, 3448.0], [45.7, 3465.0], [45.8, 3465.0], [45.9, 3477.0], [46.0, 3477.0], [46.1, 3492.0], [46.2, 3492.0], [46.3, 3498.0], [46.4, 3499.0], [46.5, 3499.0], [46.6, 3500.0], [46.7, 3500.0], [46.8, 3500.0], [46.9, 3500.0], [47.0, 3509.0], [47.1, 3509.0], [47.2, 3527.0], [47.3, 3535.0], [47.4, 3535.0], [47.5, 3535.0], [47.6, 3535.0], [47.7, 3560.0], [47.8, 3560.0], [47.9, 3564.0], [48.0, 3597.0], [48.1, 3597.0], [48.2, 3613.0], [48.3, 3613.0], [48.4, 3650.0], [48.5, 3650.0], [48.6, 3651.0], [48.7, 3665.0], [48.8, 3665.0], [48.9, 3690.0], [49.0, 3690.0], [49.1, 3711.0], [49.2, 3711.0], [49.3, 3733.0], [49.4, 3739.0], [49.5, 3739.0], [49.6, 3760.0], [49.7, 3760.0], [49.8, 3769.0], [49.9, 3769.0], [50.0, 3798.0], [50.1, 3818.0], [50.2, 3818.0], [50.3, 3830.0], [50.4, 3830.0], [50.5, 3835.0], [50.6, 3835.0], [50.7, 3836.0], [50.8, 3863.0], [50.9, 3863.0], [51.0, 3865.0], [51.1, 3865.0], [51.2, 3880.0], [51.3, 3880.0], [51.4, 3901.0], [51.5, 3922.0], [51.6, 3922.0], [51.7, 3922.0], [51.8, 3922.0], [51.9, 3924.0], [52.0, 3924.0], [52.1, 3930.0], [52.2, 3931.0], [52.3, 3931.0], [52.4, 3932.0], [52.5, 3932.0], [52.6, 3965.0], [52.7, 3965.0], [52.8, 3968.0], [52.9, 3985.0], [53.0, 3985.0], [53.1, 4033.0], [53.2, 4033.0], [53.3, 4034.0], [53.4, 4034.0], [53.5, 4057.0], [53.6, 4057.0], [53.7, 4078.0], [53.8, 4092.0], [53.9, 4092.0], [54.0, 4105.0], [54.1, 4105.0], [54.2, 4109.0], [54.3, 4109.0], [54.4, 4113.0], [54.5, 4119.0], [54.6, 4119.0], [54.7, 4162.0], [54.8, 4162.0], [54.9, 4184.0], [55.0, 4184.0], [55.1, 4234.0], [55.2, 4235.0], [55.3, 4235.0], [55.4, 4263.0], [55.5, 4263.0], [55.6, 4270.0], [55.7, 4270.0], [55.8, 4325.0], [55.9, 4336.0], [56.0, 4336.0], [56.1, 4337.0], [56.2, 4337.0], [56.3, 4356.0], [56.4, 4356.0], [56.5, 4359.0], [56.6, 4365.0], [56.7, 4365.0], [56.8, 4393.0], [56.9, 4393.0], [57.0, 4393.0], [57.1, 4393.0], [57.2, 4403.0], [57.3, 4410.0], [57.4, 4410.0], [57.5, 4445.0], [57.6, 4445.0], [57.7, 4449.0], [57.8, 4449.0], [57.9, 4451.0], [58.0, 4473.0], [58.1, 4473.0], [58.2, 4501.0], [58.3, 4501.0], [58.4, 4533.0], [58.5, 4533.0], [58.6, 4587.0], [58.7, 4620.0], [58.8, 4620.0], [58.9, 4624.0], [59.0, 4624.0], [59.1, 4625.0], [59.2, 4625.0], [59.3, 4657.0], [59.4, 4657.0], [59.5, 4657.0], [59.6, 4657.0], [59.7, 4657.0], [59.8, 4734.0], [59.9, 4734.0], [60.0, 4736.0], [60.1, 4736.0], [60.2, 4768.0], [60.3, 4772.0], [60.4, 4772.0], [60.5, 4777.0], [60.6, 4777.0], [60.7, 4787.0], [60.8, 4787.0], [60.9, 4809.0], [61.0, 4827.0], [61.1, 4827.0], [61.2, 4833.0], [61.3, 4833.0], [61.4, 4865.0], [61.5, 4865.0], [61.6, 4870.0], [61.7, 4896.0], [61.8, 4896.0], [61.9, 4897.0], [62.0, 4897.0], [62.1, 4909.0], [62.2, 4909.0], [62.3, 4918.0], [62.4, 4972.0], [62.5, 4972.0], [62.6, 4976.0], [62.7, 4976.0], [62.8, 4999.0], [62.9, 4999.0], [63.0, 5015.0], [63.1, 5103.0], [63.2, 5103.0], [63.3, 5173.0], [63.4, 5173.0], [63.5, 5197.0], [63.6, 5197.0], [63.7, 5215.0], [63.8, 5216.0], [63.9, 5216.0], [64.0, 5232.0], [64.1, 5232.0], [64.2, 5256.0], [64.3, 5256.0], [64.4, 5259.0], [64.5, 5289.0], [64.6, 5289.0], [64.7, 5294.0], [64.8, 5294.0], [64.9, 5309.0], [65.0, 5309.0], [65.1, 5310.0], [65.2, 5310.0], [65.3, 5311.0], [65.4, 5319.0], [65.5, 5319.0], [65.6, 5329.0], [65.7, 5329.0], [65.8, 5355.0], [65.9, 5355.0], [66.0, 5375.0], [66.1, 5384.0], [66.2, 5384.0], [66.3, 5395.0], [66.4, 5395.0], [66.5, 5402.0], [66.6, 5402.0], [66.7, 5403.0], [66.8, 5416.0], [66.9, 5416.0], [67.0, 5442.0], [67.1, 5442.0], [67.2, 5455.0], [67.3, 5455.0], [67.4, 5478.0], [67.5, 5497.0], [67.6, 5497.0], [67.7, 5502.0], [67.8, 5502.0], [67.9, 5505.0], [68.0, 5505.0], [68.1, 5509.0], [68.2, 5524.0], [68.3, 5524.0], [68.4, 5593.0], [68.5, 5593.0], [68.6, 5594.0], [68.7, 5594.0], [68.8, 5594.0], [68.9, 5604.0], [69.0, 5604.0], [69.1, 5606.0], [69.2, 5606.0], [69.3, 5609.0], [69.4, 5609.0], [69.5, 5611.0], [69.6, 5631.0], [69.7, 5631.0], [69.8, 5653.0], [69.9, 5653.0], [70.0, 5686.0], [70.1, 5686.0], [70.2, 5689.0], [70.3, 5694.0], [70.4, 5694.0], [70.5, 5712.0], [70.6, 5712.0], [70.7, 5713.0], [70.8, 5713.0], [70.9, 5782.0], [71.0, 5782.0], [71.1, 5784.0], [71.2, 5808.0], [71.3, 5808.0], [71.4, 5860.0], [71.5, 5860.0], [71.6, 5869.0], [71.7, 5869.0], [71.8, 5872.0], [71.9, 5873.0], [72.0, 5873.0], [72.1, 5888.0], [72.2, 5888.0], [72.3, 5931.0], [72.4, 5931.0], [72.5, 5954.0], [72.6, 6041.0], [72.7, 6041.0], [72.8, 6076.0], [72.9, 6076.0], [73.0, 6135.0], [73.1, 6135.0], [73.2, 6165.0], [73.3, 6166.0], [73.4, 6166.0], [73.5, 6176.0], [73.6, 6176.0], [73.7, 6176.0], [73.8, 6176.0], [73.9, 6199.0], [74.0, 6220.0], [74.1, 6220.0], [74.2, 6243.0], [74.3, 6243.0], [74.4, 6256.0], [74.5, 6256.0], [74.6, 6259.0], [74.7, 6278.0], [74.8, 6278.0], [74.9, 6300.0], [75.0, 6300.0], [75.1, 6306.0], [75.2, 6306.0], [75.3, 6320.0], [75.4, 6335.0], [75.5, 6335.0], [75.6, 6351.0], [75.7, 6351.0], [75.8, 6381.0], [75.9, 6381.0], [76.0, 6408.0], [76.1, 6419.0], [76.2, 6419.0], [76.3, 6424.0], [76.4, 6424.0], [76.5, 6427.0], [76.6, 6427.0], [76.7, 6437.0], [76.8, 6437.0], [76.9, 6461.0], [77.0, 6470.0], [77.1, 6470.0], [77.2, 6487.0], [77.3, 6487.0], [77.4, 6512.0], [77.5, 6512.0], [77.6, 6515.0], [77.7, 6568.0], [77.8, 6568.0], [77.9, 6623.0], [78.0, 6623.0], [78.1, 6628.0], [78.2, 6628.0], [78.3, 6641.0], [78.4, 6692.0], [78.5, 6692.0], [78.6, 6692.0], [78.7, 6692.0], [78.8, 6696.0], [78.9, 6696.0], [79.0, 6710.0], [79.1, 6724.0], [79.2, 6724.0], [79.3, 6735.0], [79.4, 6735.0], [79.5, 6735.0], [79.6, 6735.0], [79.7, 6792.0], [79.8, 6807.0], [79.9, 6807.0], [80.0, 6843.0], [80.1, 6843.0], [80.2, 6855.0], [80.3, 6855.0], [80.4, 6862.0], [80.5, 6884.0], [80.6, 6884.0], [80.7, 6959.0], [80.8, 6959.0], [80.9, 6972.0], [81.0, 6972.0], [81.1, 6976.0], [81.2, 6999.0], [81.3, 6999.0], [81.4, 7014.0], [81.5, 7014.0], [81.6, 7038.0], [81.7, 7038.0], [81.8, 7126.0], [81.9, 7141.0], [82.0, 7141.0], [82.1, 7204.0], [82.2, 7204.0], [82.3, 7223.0], [82.4, 7223.0], [82.5, 7244.0], [82.6, 7244.0], [82.7, 7271.0], [82.8, 7296.0], [82.9, 7296.0], [83.0, 7298.0], [83.1, 7298.0], [83.2, 7344.0], [83.3, 7344.0], [83.4, 7367.0], [83.5, 7380.0], [83.6, 7380.0], [83.7, 7401.0], [83.8, 7401.0], [83.9, 7405.0], [84.0, 7405.0], [84.1, 7444.0], [84.2, 7449.0], [84.3, 7449.0], [84.4, 7455.0], [84.5, 7455.0], [84.6, 7487.0], [84.7, 7487.0], [84.8, 7491.0], [84.9, 7495.0], [85.0, 7495.0], [85.1, 7513.0], [85.2, 7513.0], [85.3, 7578.0], [85.4, 7578.0], [85.5, 7607.0], [85.6, 7615.0], [85.7, 7615.0], [85.8, 7646.0], [85.9, 7646.0], [86.0, 7658.0], [86.1, 7658.0], [86.2, 7660.0], [86.3, 7672.0], [86.4, 7672.0], [86.5, 7676.0], [86.6, 7676.0], [86.7, 7682.0], [86.8, 7682.0], [86.9, 7735.0], [87.0, 7750.0], [87.1, 7750.0], [87.2, 7782.0], [87.3, 7782.0], [87.4, 7786.0], [87.5, 7786.0], [87.6, 7795.0], [87.7, 7825.0], [87.8, 7825.0], [87.9, 7842.0], [88.0, 7842.0], [88.1, 7843.0], [88.2, 7843.0], [88.3, 7874.0], [88.4, 7874.0], [88.5, 7934.0], [88.6, 7961.0], [88.7, 7961.0], [88.8, 8002.0], [88.9, 8002.0], [89.0, 8035.0], [89.1, 8035.0], [89.2, 8088.0], [89.3, 8095.0], [89.4, 8095.0], [89.5, 8100.0], [89.6, 8100.0], [89.7, 8123.0], [89.8, 8123.0], [89.9, 8153.0], [90.0, 8178.0], [90.1, 8178.0], [90.2, 8199.0], [90.3, 8199.0], [90.4, 8207.0], [90.5, 8207.0], [90.6, 8245.0], [90.7, 8254.0], [90.8, 8254.0], [90.9, 8299.0], [91.0, 8299.0], [91.1, 8319.0], [91.2, 8319.0], [91.3, 8352.0], [91.4, 8403.0], [91.5, 8403.0], [91.6, 8466.0], [91.7, 8466.0], [91.8, 8536.0], [91.9, 8536.0], [92.0, 8612.0], [92.1, 8714.0], [92.2, 8714.0], [92.3, 8721.0], [92.4, 8721.0], [92.5, 8776.0], [92.6, 8776.0], [92.7, 8837.0], [92.8, 8958.0], [92.9, 8958.0], [93.0, 8997.0], [93.1, 8997.0], [93.2, 9007.0], [93.3, 9007.0], [93.4, 9033.0], [93.5, 9097.0], [93.6, 9097.0], [93.7, 9115.0], [93.8, 9115.0], [93.9, 9152.0], [94.0, 9152.0], [94.1, 9176.0], [94.2, 9176.0], [94.3, 9260.0], [94.4, 9292.0], [94.5, 9292.0], [94.6, 9331.0], [94.7, 9331.0], [94.8, 9413.0], [94.9, 9413.0], [95.0, 9464.0], [95.1, 9582.0], [95.2, 9582.0], [95.3, 9607.0], [95.4, 9607.0], [95.5, 9631.0], [95.6, 9631.0], [95.7, 9674.0], [95.8, 9699.0], [95.9, 9699.0], [96.0, 9764.0], [96.1, 9764.0], [96.2, 9767.0], [96.3, 9767.0], [96.4, 9865.0], [96.5, 9926.0], [96.6, 9926.0], [96.7, 9999.0], [96.8, 9999.0], [96.9, 10079.0], [97.0, 10079.0], [97.1, 10081.0], [97.2, 10263.0], [97.3, 10263.0], [97.4, 10328.0], [97.5, 10328.0], [97.6, 10372.0], [97.7, 10372.0], [97.8, 10428.0], [97.9, 10447.0], [98.0, 10447.0], [98.1, 10466.0], [98.2, 10466.0], [98.3, 10731.0], [98.4, 10731.0], [98.5, 10769.0], [98.6, 10848.0], [98.7, 10848.0], [98.8, 10863.0], [98.9, 10863.0], [99.0, 10936.0], [99.1, 10936.0], [99.2, 10966.0], [99.3, 11530.0], [99.4, 11530.0], [99.5, 11634.0], [99.6, 11634.0], [99.7, 12609.0], [99.8, 12609.0], [99.9, 12922.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[0.0, 749.0], [0.1, 749.0], [0.2, 761.0], [0.3, 761.0], [0.4, 785.0], [0.5, 785.0], [0.6, 789.0], [0.7, 789.0], [0.8, 790.0], [0.9, 790.0], [1.0, 790.0], [1.1, 798.0], [1.2, 798.0], [1.3, 805.0], [1.4, 805.0], [1.5, 827.0], [1.6, 827.0], [1.7, 830.0], [1.8, 831.0], [1.9, 831.0], [2.0, 831.0], [2.1, 831.0], [2.2, 876.0], [2.3, 876.0], [2.4, 885.0], [2.5, 898.0], [2.6, 898.0], [2.7, 898.0], [2.8, 898.0], [2.9, 913.0], [3.0, 913.0], [3.1, 915.0], [3.2, 915.0], [3.3, 922.0], [3.4, 937.0], [3.5, 937.0], [3.6, 954.0], [3.7, 954.0], [3.8, 966.0], [3.9, 966.0], [4.0, 970.0], [4.1, 970.0], [4.2, 984.0], [4.3, 986.0], [4.4, 986.0], [4.5, 1003.0], [4.6, 1003.0], [4.7, 1007.0], [4.8, 1007.0], [4.9, 1008.0], [5.0, 1011.0], [5.1, 1011.0], [5.2, 1014.0], [5.3, 1014.0], [5.4, 1014.0], [5.5, 1014.0], [5.6, 1020.0], [5.7, 1020.0], [5.8, 1022.0], [5.9, 1024.0], [6.0, 1024.0], [6.1, 1025.0], [6.2, 1025.0], [6.3, 1048.0], [6.4, 1048.0], [6.5, 1069.0], [6.6, 1069.0], [6.7, 1070.0], [6.8, 1070.0], [6.9, 1070.0], [7.0, 1071.0], [7.1, 1071.0], [7.2, 1082.0], [7.3, 1082.0], [7.4, 1082.0], [7.5, 1082.0], [7.6, 1122.0], [7.7, 1122.0], [7.8, 1122.0], [7.9, 1150.0], [8.0, 1150.0], [8.1, 1180.0], [8.2, 1180.0], [8.3, 1180.0], [8.4, 1190.0], [8.5, 1190.0], [8.6, 1208.0], [8.7, 1208.0], [8.8, 1208.0], [8.9, 1208.0], [9.0, 1220.0], [9.1, 1220.0], [9.2, 1233.0], [9.3, 1236.0], [9.4, 1236.0], [9.5, 1260.0], [9.6, 1260.0], [9.7, 1269.0], [9.8, 1269.0], [9.9, 1270.0], [10.0, 1270.0], [10.1, 1300.0], [10.2, 1311.0], [10.3, 1311.0], [10.4, 1312.0], [10.5, 1312.0], [10.6, 1320.0], [10.7, 1320.0], [10.8, 1322.0], [10.9, 1324.0], [11.0, 1324.0], [11.1, 1338.0], [11.2, 1338.0], [11.3, 1340.0], [11.4, 1340.0], [11.5, 1347.0], [11.6, 1347.0], [11.7, 1352.0], [11.8, 1365.0], [11.9, 1365.0], [12.0, 1369.0], [12.1, 1369.0], [12.2, 1370.0], [12.3, 1370.0], [12.4, 1372.0], [12.5, 1372.0], [12.6, 1376.0], [12.7, 1384.0], [12.8, 1384.0], [12.9, 1392.0], [13.0, 1392.0], [13.1, 1393.0], [13.2, 1393.0], [13.3, 1404.0], [13.4, 1413.0], [13.5, 1413.0], [13.6, 1423.0], [13.7, 1423.0], [13.8, 1425.0], [13.9, 1425.0], [14.0, 1435.0], [14.1, 1435.0], [14.2, 1448.0], [14.3, 1462.0], [14.4, 1462.0], [14.5, 1464.0], [14.6, 1464.0], [14.7, 1467.0], [14.8, 1467.0], [14.9, 1473.0], [15.0, 1473.0], [15.1, 1477.0], [15.2, 1489.0], [15.3, 1489.0], [15.4, 1491.0], [15.5, 1491.0], [15.6, 1499.0], [15.7, 1499.0], [15.8, 1509.0], [15.9, 1512.0], [16.0, 1512.0], [16.1, 1527.0], [16.2, 1527.0], [16.3, 1529.0], [16.4, 1529.0], [16.5, 1538.0], [16.6, 1538.0], [16.7, 1548.0], [16.8, 1581.0], [16.9, 1581.0], [17.0, 1605.0], [17.1, 1605.0], [17.2, 1611.0], [17.3, 1611.0], [17.4, 1611.0], [17.5, 1611.0], [17.6, 1624.0], [17.7, 1636.0], [17.8, 1636.0], [17.9, 1654.0], [18.0, 1654.0], [18.1, 1656.0], [18.2, 1656.0], [18.3, 1672.0], [18.4, 1686.0], [18.5, 1686.0], [18.6, 1704.0], [18.7, 1704.0], [18.8, 1704.0], [18.9, 1704.0], [19.0, 1710.0], [19.1, 1710.0], [19.2, 1750.0], [19.3, 1751.0], [19.4, 1751.0], [19.5, 1762.0], [19.6, 1762.0], [19.7, 1787.0], [19.8, 1787.0], [19.9, 1792.0], [20.0, 1817.0], [20.1, 1817.0], [20.2, 1826.0], [20.3, 1826.0], [20.4, 1843.0], [20.5, 1843.0], [20.6, 1851.0], [20.7, 1851.0], [20.8, 1858.0], [20.9, 1931.0], [21.0, 1931.0], [21.1, 1936.0], [21.2, 1936.0], [21.3, 1957.0], [21.4, 1957.0], [21.5, 1976.0], [21.6, 1976.0], [21.7, 1986.0], [21.8, 1995.0], [21.9, 1995.0], [22.0, 2006.0], [22.1, 2006.0], [22.2, 2007.0], [22.3, 2007.0], [22.4, 2043.0], [22.5, 2080.0], [22.6, 2080.0], [22.7, 2097.0], [22.8, 2097.0], [22.9, 2106.0], [23.0, 2106.0], [23.1, 2115.0], [23.2, 2115.0], [23.3, 2121.0], [23.4, 2126.0], [23.5, 2126.0], [23.6, 2137.0], [23.7, 2137.0], [23.8, 2143.0], [23.9, 2143.0], [24.0, 2171.0], [24.1, 2171.0], [24.2, 2186.0], [24.3, 2201.0], [24.4, 2201.0], [24.5, 2260.0], [24.6, 2260.0], [24.7, 2269.0], [24.8, 2269.0], [24.9, 2303.0], [25.0, 2305.0], [25.1, 2305.0], [25.2, 2309.0], [25.3, 2309.0], [25.4, 2356.0], [25.5, 2356.0], [25.6, 2392.0], [25.7, 2392.0], [25.8, 2404.0], [25.9, 2416.0], [26.0, 2416.0], [26.1, 2423.0], [26.2, 2423.0], [26.3, 2434.0], [26.4, 2434.0], [26.5, 2437.0], [26.6, 2437.0], [26.7, 2438.0], [26.8, 2444.0], [26.9, 2444.0], [27.0, 2451.0], [27.1, 2451.0], [27.2, 2460.0], [27.3, 2460.0], [27.4, 2483.0], [27.5, 2486.0], [27.6, 2486.0], [27.7, 2529.0], [27.8, 2529.0], [27.9, 2543.0], [28.0, 2543.0], [28.1, 2548.0], [28.2, 2548.0], [28.3, 2595.0], [28.4, 2600.0], [28.5, 2600.0], [28.6, 2617.0], [28.7, 2617.0], [28.8, 2651.0], [28.9, 2651.0], [29.0, 2658.0], [29.1, 2658.0], [29.2, 2679.0], [29.3, 2681.0], [29.4, 2681.0], [29.5, 2685.0], [29.6, 2685.0], [29.7, 2685.0], [29.8, 2685.0], [29.9, 2702.0], [30.0, 2746.0], [30.1, 2746.0], [30.2, 2765.0], [30.3, 2765.0], [30.4, 2781.0], [30.5, 2781.0], [30.6, 2798.0], [30.7, 2798.0], [30.8, 2812.0], [30.9, 2833.0], [31.0, 2833.0], [31.1, 2843.0], [31.2, 2843.0], [31.3, 2854.0], [31.4, 2854.0], [31.5, 2867.0], [31.6, 2867.0], [31.7, 2883.0], [31.8, 2977.0], [31.9, 2977.0], [32.0, 3014.0], [32.1, 3014.0], [32.2, 3025.0], [32.3, 3025.0], [32.4, 3046.0], [32.5, 3055.0], [32.6, 3055.0], [32.7, 3057.0], [32.8, 3057.0], [32.9, 3082.0], [33.0, 3082.0], [33.1, 3082.0], [33.2, 3082.0], [33.3, 3082.0], [33.4, 3114.0], [33.5, 3114.0], [33.6, 3137.0], [33.7, 3137.0], [33.8, 3143.0], [33.9, 3143.0], [34.0, 3164.0], [34.1, 3164.0], [34.2, 3172.0], [34.3, 3199.0], [34.4, 3199.0], [34.5, 3211.0], [34.6, 3211.0], [34.7, 3215.0], [34.8, 3215.0], [34.9, 3224.0], [35.0, 3236.0], [35.1, 3236.0], [35.2, 3267.0], [35.3, 3267.0], [35.4, 3299.0], [35.5, 3299.0], [35.6, 3305.0], [35.7, 3305.0], [35.8, 3324.0], [35.9, 3325.0], [36.0, 3325.0], [36.1, 3332.0], [36.2, 3332.0], [36.3, 3339.0], [36.4, 3339.0], [36.5, 3344.0], [36.6, 3344.0], [36.7, 3388.0], [36.8, 3395.0], [36.9, 3395.0], [37.0, 3407.0], [37.1, 3407.0], [37.2, 3422.0], [37.3, 3422.0], [37.4, 3435.0], [37.5, 3438.0], [37.6, 3438.0], [37.7, 3457.0], [37.8, 3457.0], [37.9, 3464.0], [38.0, 3464.0], [38.1, 3485.0], [38.2, 3485.0], [38.3, 3496.0], [38.4, 3516.0], [38.5, 3516.0], [38.6, 3545.0], [38.7, 3545.0], [38.8, 3554.0], [38.9, 3554.0], [39.0, 3560.0], [39.1, 3560.0], [39.2, 3588.0], [39.3, 3614.0], [39.4, 3614.0], [39.5, 3616.0], [39.6, 3616.0], [39.7, 3641.0], [39.8, 3641.0], [39.9, 3645.0], [40.0, 3654.0], [40.1, 3654.0], [40.2, 3665.0], [40.3, 3665.0], [40.4, 3665.0], [40.5, 3665.0], [40.6, 3687.0], [40.7, 3687.0], [40.8, 3702.0], [40.9, 3730.0], [41.0, 3730.0], [41.1, 3735.0], [41.2, 3735.0], [41.3, 3737.0], [41.4, 3737.0], [41.5, 3773.0], [41.6, 3773.0], [41.7, 3815.0], [41.8, 3829.0], [41.9, 3829.0], [42.0, 3844.0], [42.1, 3844.0], [42.2, 3850.0], [42.3, 3850.0], [42.4, 3853.0], [42.5, 3864.0], [42.6, 3864.0], [42.7, 3883.0], [42.8, 3883.0], [42.9, 3906.0], [43.0, 3906.0], [43.1, 3937.0], [43.2, 3937.0], [43.3, 3946.0], [43.4, 3968.0], [43.5, 3968.0], [43.6, 3968.0], [43.7, 3968.0], [43.8, 3970.0], [43.9, 3970.0], [44.0, 3985.0], [44.1, 3985.0], [44.2, 4002.0], [44.3, 4017.0], [44.4, 4017.0], [44.5, 4018.0], [44.6, 4018.0], [44.7, 4040.0], [44.8, 4040.0], [44.9, 4042.0], [45.0, 4042.0], [45.1, 4043.0], [45.2, 4043.0], [45.3, 4043.0], [45.4, 4059.0], [45.5, 4059.0], [45.6, 4062.0], [45.7, 4062.0], [45.8, 4100.0], [45.9, 4105.0], [46.0, 4105.0], [46.1, 4123.0], [46.2, 4123.0], [46.3, 4132.0], [46.4, 4132.0], [46.5, 4141.0], [46.6, 4141.0], [46.7, 4166.0], [46.8, 4186.0], [46.9, 4186.0], [47.0, 4188.0], [47.1, 4188.0], [47.2, 4190.0], [47.3, 4190.0], [47.4, 4204.0], [47.5, 4204.0], [47.6, 4232.0], [47.7, 4233.0], [47.8, 4233.0], [47.9, 4287.0], [48.0, 4287.0], [48.1, 4301.0], [48.2, 4301.0], [48.3, 4318.0], [48.4, 4323.0], [48.5, 4323.0], [48.6, 4325.0], [48.7, 4325.0], [48.8, 4335.0], [48.9, 4335.0], [49.0, 4351.0], [49.1, 4351.0], [49.2, 4352.0], [49.3, 4374.0], [49.4, 4374.0], [49.5, 4395.0], [49.6, 4395.0], [49.7, 4423.0], [49.8, 4423.0], [49.9, 4450.0], [50.0, 4450.0], [50.1, 4475.0], [50.2, 4476.0], [50.3, 4476.0], [50.4, 4495.0], [50.5, 4495.0], [50.6, 4497.0], [50.7, 4497.0], [50.8, 4498.0], [50.9, 4508.0], [51.0, 4508.0], [51.1, 4528.0], [51.2, 4528.0], [51.3, 4535.0], [51.4, 4535.0], [51.5, 4536.0], [51.6, 4536.0], [51.7, 4538.0], [51.8, 4549.0], [51.9, 4549.0], [52.0, 4564.0], [52.1, 4564.0], [52.2, 4571.0], [52.3, 4571.0], [52.4, 4573.0], [52.5, 4573.0], [52.6, 4575.0], [52.7, 4611.0], [52.8, 4611.0], [52.9, 4620.0], [53.0, 4620.0], [53.1, 4630.0], [53.2, 4630.0], [53.3, 4633.0], [53.4, 4636.0], [53.5, 4636.0], [53.6, 4646.0], [53.7, 4646.0], [53.8, 4650.0], [53.9, 4650.0], [54.0, 4682.0], [54.1, 4682.0], [54.2, 4766.0], [54.3, 4767.0], [54.4, 4767.0], [54.5, 4784.0], [54.6, 4784.0], [54.7, 4796.0], [54.8, 4796.0], [54.9, 4801.0], [55.0, 4801.0], [55.1, 4828.0], [55.2, 4849.0], [55.3, 4849.0], [55.4, 4875.0], [55.5, 4875.0], [55.6, 4884.0], [55.7, 4884.0], [55.8, 4888.0], [55.9, 4904.0], [56.0, 4904.0], [56.1, 4911.0], [56.2, 4911.0], [56.3, 4916.0], [56.4, 4916.0], [56.5, 4934.0], [56.6, 4934.0], [56.7, 4974.0], [56.8, 4974.0], [56.9, 4974.0], [57.0, 4987.0], [57.1, 4987.0], [57.2, 4996.0], [57.3, 4996.0], [57.4, 4999.0], [57.5, 4999.0], [57.6, 5019.0], [57.7, 5025.0], [57.8, 5025.0], [57.9, 5026.0], [58.0, 5026.0], [58.1, 5078.0], [58.2, 5078.0], [58.3, 5087.0], [58.4, 5114.0], [58.5, 5114.0], [58.6, 5115.0], [58.7, 5115.0], [58.8, 5116.0], [58.9, 5116.0], [59.0, 5122.0], [59.1, 5122.0], [59.2, 5145.0], [59.3, 5160.0], [59.4, 5160.0], [59.5, 5216.0], [59.6, 5216.0], [59.7, 5227.0], [59.8, 5227.0], [59.9, 5242.0], [60.0, 5242.0], [60.1, 5243.0], [60.2, 5282.0], [60.3, 5282.0], [60.4, 5285.0], [60.5, 5285.0], [60.6, 5296.0], [60.7, 5296.0], [60.8, 5299.0], [60.9, 5302.0], [61.0, 5302.0], [61.1, 5324.0], [61.2, 5324.0], [61.3, 5357.0], [61.4, 5357.0], [61.5, 5359.0], [61.6, 5359.0], [61.7, 5397.0], [61.8, 5412.0], [61.9, 5412.0], [62.0, 5445.0], [62.1, 5445.0], [62.2, 5447.0], [62.3, 5447.0], [62.4, 5451.0], [62.5, 5451.0], [62.6, 5461.0], [62.7, 5461.0], [62.8, 5461.0], [62.9, 5497.0], [63.0, 5497.0], [63.1, 5499.0], [63.2, 5499.0], [63.3, 5510.0], [63.4, 5514.0], [63.5, 5514.0], [63.6, 5532.0], [63.7, 5532.0], [63.8, 5550.0], [63.9, 5550.0], [64.0, 5551.0], [64.1, 5551.0], [64.2, 5565.0], [64.3, 5588.0], [64.4, 5588.0], [64.5, 5599.0], [64.6, 5599.0], [64.7, 5620.0], [64.8, 5620.0], [64.9, 5648.0], [65.0, 5648.0], [65.1, 5671.0], [65.2, 5677.0], [65.3, 5677.0], [65.4, 5699.0], [65.5, 5699.0], [65.6, 5736.0], [65.7, 5736.0], [65.8, 5736.0], [65.9, 5740.0], [66.0, 5740.0], [66.1, 5743.0], [66.2, 5743.0], [66.3, 5776.0], [66.4, 5776.0], [66.5, 5785.0], [66.6, 5785.0], [66.7, 5787.0], [66.8, 5811.0], [66.9, 5811.0], [67.0, 5819.0], [67.1, 5819.0], [67.2, 5822.0], [67.3, 5822.0], [67.4, 5830.0], [67.5, 5830.0], [67.6, 5842.0], [67.7, 5852.0], [67.8, 5852.0], [67.9, 5856.0], [68.0, 5856.0], [68.1, 5857.0], [68.2, 5857.0], [68.3, 5884.0], [68.4, 5911.0], [68.5, 5911.0], [68.6, 5930.0], [68.7, 5930.0], [68.8, 5949.0], [68.9, 5949.0], [69.0, 5956.0], [69.1, 5956.0], [69.2, 5966.0], [69.3, 6003.0], [69.4, 6003.0], [69.5, 6005.0], [69.6, 6005.0], [69.7, 6006.0], [69.8, 6006.0], [69.9, 6036.0], [70.0, 6036.0], [70.1, 6036.0], [70.2, 6069.0], [70.3, 6069.0], [70.4, 6087.0], [70.5, 6087.0], [70.6, 6108.0], [70.7, 6108.0], [70.8, 6141.0], [70.9, 6149.0], [71.0, 6149.0], [71.1, 6151.0], [71.2, 6151.0], [71.3, 6167.0], [71.4, 6167.0], [71.5, 6178.0], [71.6, 6178.0], [71.7, 6197.0], [71.8, 6217.0], [71.9, 6217.0], [72.0, 6226.0], [72.1, 6226.0], [72.2, 6274.0], [72.3, 6274.0], [72.4, 6349.0], [72.5, 6349.0], [72.6, 6391.0], [72.7, 6394.0], [72.8, 6394.0], [72.9, 6412.0], [73.0, 6412.0], [73.1, 6431.0], [73.2, 6431.0], [73.3, 6445.0], [73.4, 6485.0], [73.5, 6485.0], [73.6, 6519.0], [73.7, 6519.0], [73.8, 6526.0], [73.9, 6526.0], [74.0, 6539.0], [74.1, 6539.0], [74.2, 6578.0], [74.3, 6583.0], [74.4, 6583.0], [74.5, 6603.0], [74.6, 6603.0], [74.7, 6611.0], [74.8, 6611.0], [74.9, 6641.0], [75.0, 6641.0], [75.1, 6642.0], [75.2, 6652.0], [75.3, 6652.0], [75.4, 6695.0], [75.5, 6695.0], [75.6, 6696.0], [75.7, 6696.0], [75.8, 6702.0], [75.9, 6705.0], [76.0, 6705.0], [76.1, 6716.0], [76.2, 6716.0], [76.3, 6720.0], [76.4, 6720.0], [76.5, 6740.0], [76.6, 6740.0], [76.7, 6759.0], [76.8, 6766.0], [76.9, 6766.0], [77.0, 6827.0], [77.1, 6827.0], [77.2, 6851.0], [77.3, 6851.0], [77.4, 6861.0], [77.5, 6861.0], [77.6, 6893.0], [77.7, 6899.0], [77.8, 6899.0], [77.9, 6903.0], [78.0, 6903.0], [78.1, 6931.0], [78.2, 6931.0], [78.3, 6935.0], [78.4, 6972.0], [78.5, 6972.0], [78.6, 6981.0], [78.7, 6981.0], [78.8, 6991.0], [78.9, 6991.0], [79.0, 7010.0], [79.1, 7010.0], [79.2, 7025.0], [79.3, 7074.0], [79.4, 7074.0], [79.5, 7089.0], [79.6, 7089.0], [79.7, 7094.0], [79.8, 7094.0], [79.9, 7101.0], [80.0, 7101.0], [80.1, 7102.0], [80.2, 7142.0], [80.3, 7142.0], [80.4, 7159.0], [80.5, 7159.0], [80.6, 7177.0], [80.7, 7177.0], [80.8, 7186.0], [80.9, 7190.0], [81.0, 7190.0], [81.1, 7192.0], [81.2, 7192.0], [81.3, 7225.0], [81.4, 7225.0], [81.5, 7227.0], [81.6, 7227.0], [81.7, 7244.0], [81.8, 7246.0], [81.9, 7246.0], [82.0, 7248.0], [82.1, 7248.0], [82.2, 7263.0], [82.3, 7263.0], [82.4, 7276.0], [82.5, 7276.0], [82.6, 7312.0], [82.7, 7316.0], [82.8, 7316.0], [82.9, 7320.0], [83.0, 7320.0], [83.1, 7328.0], [83.2, 7328.0], [83.3, 7461.0], [83.4, 7488.0], [83.5, 7488.0], [83.6, 7527.0], [83.7, 7527.0], [83.8, 7541.0], [83.9, 7541.0], [84.0, 7574.0], [84.1, 7574.0], [84.2, 7587.0], [84.3, 7601.0], [84.4, 7601.0], [84.5, 7624.0], [84.6, 7624.0], [84.7, 7675.0], [84.8, 7675.0], [84.9, 7757.0], [85.0, 7757.0], [85.1, 7775.0], [85.2, 7776.0], [85.3, 7776.0], [85.4, 7803.0], [85.5, 7803.0], [85.6, 7860.0], [85.7, 7860.0], [85.8, 7902.0], [85.9, 7960.0], [86.0, 7960.0], [86.1, 7962.0], [86.2, 7962.0], [86.3, 7963.0], [86.4, 7963.0], [86.5, 7973.0], [86.6, 7973.0], [86.7, 7999.0], [86.8, 8038.0], [86.9, 8038.0], [87.0, 8082.0], [87.1, 8082.0], [87.2, 8093.0], [87.3, 8093.0], [87.4, 8152.0], [87.5, 8152.0], [87.6, 8164.0], [87.7, 8181.0], [87.8, 8181.0], [87.9, 8213.0], [88.0, 8213.0], [88.1, 8234.0], [88.2, 8234.0], [88.3, 8252.0], [88.4, 8264.0], [88.5, 8264.0], [88.6, 8270.0], [88.7, 8270.0], [88.8, 8288.0], [88.9, 8288.0], [89.0, 8292.0], [89.1, 8292.0], [89.2, 8303.0], [89.3, 8305.0], [89.4, 8305.0], [89.5, 8328.0], [89.6, 8328.0], [89.7, 8459.0], [89.8, 8459.0], [89.9, 8474.0], [90.0, 8474.0], [90.1, 8480.0], [90.2, 8498.0], [90.3, 8498.0], [90.4, 8509.0], [90.5, 8509.0], [90.6, 8551.0], [90.7, 8551.0], [90.8, 8594.0], [90.9, 8600.0], [91.0, 8600.0], [91.1, 8606.0], [91.2, 8606.0], [91.3, 8611.0], [91.4, 8611.0], [91.5, 8624.0], [91.6, 8624.0], [91.7, 8647.0], [91.8, 8703.0], [91.9, 8703.0], [92.0, 8762.0], [92.1, 8762.0], [92.2, 8889.0], [92.3, 8889.0], [92.4, 8927.0], [92.5, 8927.0], [92.6, 8982.0], [92.7, 9016.0], [92.8, 9016.0], [92.9, 9050.0], [93.0, 9050.0], [93.1, 9078.0], [93.2, 9078.0], [93.3, 9108.0], [93.4, 9207.0], [93.5, 9207.0], [93.6, 9230.0], [93.7, 9230.0], [93.8, 9233.0], [93.9, 9233.0], [94.0, 9256.0], [94.1, 9256.0], [94.2, 9356.0], [94.3, 9376.0], [94.4, 9376.0], [94.5, 9376.0], [94.6, 9376.0], [94.7, 9382.0], [94.8, 9382.0], [94.9, 9413.0], [95.0, 9413.0], [95.1, 9424.0], [95.2, 9435.0], [95.3, 9435.0], [95.4, 9452.0], [95.5, 9452.0], [95.6, 9482.0], [95.7, 9482.0], [95.8, 9563.0], [95.9, 9594.0], [96.0, 9594.0], [96.1, 9629.0], [96.2, 9629.0], [96.3, 9652.0], [96.4, 9652.0], [96.5, 9681.0], [96.6, 9681.0], [96.7, 9704.0], [96.8, 9715.0], [96.9, 9715.0], [97.0, 9719.0], [97.1, 9719.0], [97.2, 9861.0], [97.3, 9861.0], [97.4, 9874.0], [97.5, 9874.0], [97.6, 9938.0], [97.7, 9968.0], [97.8, 9968.0], [97.9, 10024.0], [98.0, 10024.0], [98.1, 10071.0], [98.2, 10071.0], [98.3, 10127.0], [98.4, 10242.0], [98.5, 10242.0], [98.6, 10369.0], [98.7, 10369.0], [98.8, 10715.0], [98.9, 10715.0], [99.0, 11093.0], [99.1, 11093.0], [99.2, 11525.0], [99.3, 11752.0], [99.4, 11752.0], [99.5, 11872.0], [99.6, 11872.0], [99.7, 12397.0], [99.8, 12397.0], [99.9, 12499.0], [100.0, 12499.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 19.0, "series": [{"data": [[700.0, 5.0], [800.0, 7.0], [900.0, 12.0], [1000.0, 16.0], [1100.0, 19.0], [1200.0, 10.0], [1300.0, 19.0], [1400.0, 14.0], [1500.0, 10.0], [1600.0, 13.0], [1700.0, 8.0], [1800.0, 7.0], [1900.0, 8.0], [2000.0, 4.0], [2100.0, 6.0], [2300.0, 8.0], [2200.0, 5.0], [2400.0, 10.0], [2500.0, 14.0], [2600.0, 7.0], [2800.0, 7.0], [2700.0, 10.0], [2900.0, 11.0], [3000.0, 13.0], [3100.0, 4.0], [3200.0, 7.0], [3300.0, 5.0], [3400.0, 6.0], [3500.0, 9.0], [3600.0, 5.0], [3700.0, 6.0], [3800.0, 7.0], [3900.0, 10.0], [4000.0, 5.0], [4100.0, 6.0], [4300.0, 8.0], [4200.0, 4.0], [4400.0, 6.0], [4600.0, 6.0], [4500.0, 3.0], [4800.0, 7.0], [4700.0, 6.0], [4900.0, 5.0], [5100.0, 3.0], [5000.0, 1.0], [5200.0, 7.0], [5300.0, 9.0], [5600.0, 9.0], [5400.0, 7.0], [5500.0, 7.0], [5700.0, 4.0], [5800.0, 6.0], [6100.0, 6.0], [5900.0, 2.0], [6000.0, 2.0], [6300.0, 6.0], [6200.0, 5.0], [6600.0, 6.0], [6400.0, 8.0], [6500.0, 3.0], [6900.0, 4.0], [6700.0, 5.0], [6800.0, 5.0], [7100.0, 2.0], [7000.0, 2.0], [7400.0, 8.0], [7300.0, 3.0], [7200.0, 6.0], [7500.0, 2.0], [7600.0, 8.0], [7800.0, 4.0], [7700.0, 5.0], [7900.0, 2.0], [8000.0, 4.0], [8100.0, 5.0], [8200.0, 4.0], [8600.0, 1.0], [8300.0, 2.0], [8400.0, 2.0], [8700.0, 3.0], [8500.0, 1.0], [9000.0, 3.0], [9100.0, 3.0], [9200.0, 2.0], [8900.0, 2.0], [8800.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9600.0, 4.0], [9400.0, 2.0], [9700.0, 2.0], [10000.0, 2.0], [9900.0, 2.0], [9800.0, 1.0], [10200.0, 1.0], [10400.0, 3.0], [10700.0, 2.0], [10300.0, 2.0], [10900.0, 2.0], [10800.0, 2.0], [11600.0, 1.0], [11500.0, 1.0], [12600.0, 1.0], [12900.0, 1.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[700.0, 7.0], [800.0, 9.0], [900.0, 9.0], [1000.0, 17.0], [1100.0, 6.0], [1200.0, 8.0], [1300.0, 18.0], [1400.0, 14.0], [1500.0, 7.0], [1600.0, 9.0], [1700.0, 8.0], [1800.0, 5.0], [1900.0, 6.0], [2000.0, 5.0], [2100.0, 8.0], [2200.0, 3.0], [2300.0, 5.0], [2400.0, 11.0], [2500.0, 4.0], [2600.0, 8.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 1.0], [3000.0, 8.0], [3100.0, 6.0], [3200.0, 6.0], [3300.0, 8.0], [3400.0, 8.0], [3500.0, 5.0], [3600.0, 8.0], [3700.0, 5.0], [3800.0, 7.0], [3900.0, 7.0], [4000.0, 9.0], [4300.0, 9.0], [4200.0, 4.0], [4100.0, 9.0], [4600.0, 8.0], [4500.0, 10.0], [4400.0, 7.0], [4700.0, 4.0], [4800.0, 6.0], [5100.0, 6.0], [4900.0, 9.0], [5000.0, 5.0], [5200.0, 8.0], [5300.0, 5.0], [5400.0, 8.0], [5600.0, 5.0], [5500.0, 8.0], [5800.0, 9.0], [5700.0, 7.0], [6000.0, 7.0], [6100.0, 7.0], [5900.0, 5.0], [6300.0, 3.0], [6200.0, 3.0], [6400.0, 4.0], [6600.0, 7.0], [6500.0, 5.0], [6900.0, 6.0], [6700.0, 7.0], [6800.0, 5.0], [7000.0, 5.0], [7100.0, 8.0], [7200.0, 7.0], [7400.0, 2.0], [7300.0, 4.0], [7500.0, 4.0], [7600.0, 3.0], [7700.0, 3.0], [7800.0, 2.0], [7900.0, 6.0], [8000.0, 3.0], [8100.0, 3.0], [8200.0, 7.0], [8700.0, 2.0], [8400.0, 4.0], [8600.0, 5.0], [8500.0, 3.0], [8300.0, 3.0], [9100.0, 1.0], [9200.0, 4.0], [9000.0, 3.0], [8900.0, 2.0], [8800.0, 1.0], [9300.0, 4.0], [9400.0, 5.0], [9500.0, 2.0], [9600.0, 3.0], [9700.0, 3.0], [9800.0, 2.0], [10000.0, 2.0], [9900.0, 2.0], [10200.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [11000.0, 1.0], [11700.0, 1.0], [11500.0, 1.0], [11800.0, 1.0], [12400.0, 1.0], [12300.0, 1.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 190.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 939.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 190.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 939.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.158730158730159, "minX": 1.6521651E12, "maxY": 14.0, "series": [{"data": [[1.65216546E12, 12.16363636363637], [1.65216528E12, 14.0], [1.65216534E12, 14.0], [1.65216516E12, 12.545454545454545], [1.65216522E12, 14.0], [1.65216552E12, 4.158730158730159], [1.6521651E12, 4.500000000000001], [1.6521654E12, 14.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65216552E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 868.875, "minX": 1.0, "maxY": 5161.458333333336, "series": [{"data": [[2.0, 1084.5555555555557], [8.0, 3034.4], [9.0, 2892.222222222222], [10.0, 3425.75], [11.0, 4284.538461538462], [3.0, 1312.5555555555557], [12.0, 4583.0], [13.0, 4564.9], [14.0, 4832.669767441862], [1.0, 929.8], [4.0, 1555.9], [5.0, 1823.1666666666667], [6.0, 1976.4444444444443], [7.0, 2388.8750000000005]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[12.41124780316345, 4324.543057996487]], "isOverall": false, "label": "smp-Aggregated", "isController": false}, {"data": [[2.0, 868.875], [8.0, 3248.0000000000005], [9.0, 3486.5], [10.0, 3916.6], [11.0, 4623.5], [3.0, 1449.5], [12.0, 5009.666666666666], [13.0, 4074.6], [14.0, 5161.458333333336], [1.0, 905.75], [4.0, 1644.625], [5.0, 2205.071428571429], [6.0, 1956.0], [7.0, 2662.666666666667]], "isOverall": false, "label": "smp ex", "isController": false}, {"data": [[12.485714285714277, 4645.458928571427]], "isOverall": false, "label": "smp ex-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 14.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 161.13333333333333, "minX": 1.6521651E12, "maxY": 538.6166666666667, "series": [{"data": [[1.65216546E12, 514.0333333333333], [1.65216528E12, 517.9], [1.65216534E12, 538.6166666666667], [1.65216516E12, 513.55], [1.65216522E12, 526.5333333333333], [1.65216552E12, 195.76666666666668], [1.6521651E12, 192.3], [1.6521654E12, 517.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65216546E12, 428.98333333333335], [1.65216528E12, 431.6333333333333], [1.65216534E12, 449.75], [1.65216516E12, 428.95], [1.65216522E12, 439.3833333333333], [1.65216552E12, 163.78333333333333], [1.6521651E12, 161.13333333333333], [1.6521654E12, 431.6333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65216552E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1656.7499999999995, "minX": 1.6521651E12, "maxY": 5451.8809523809505, "series": [{"data": [[1.65216546E12, 4512.048192771083], [1.65216528E12, 5110.695121951219], [1.65216534E12, 4870.863636363639], [1.65216516E12, 4030.547619047619], [1.65216522E12, 4784.988235294119], [1.65216552E12, 1656.7499999999995], [1.6521651E12, 1694.5757575757577], [1.6521654E12, 4685.670731707319]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65216546E12, 4723.573170731708], [1.65216528E12, 4883.214285714285], [1.65216534E12, 4950.388235294117], [1.65216516E12, 4730.407407407408], [1.65216522E12, 5146.404761904761], [1.65216552E12, 1813.5161290322585], [1.6521651E12, 1845.2758620689651], [1.6521654E12, 5451.8809523809505]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65216552E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1656.7499999999995, "minX": 1.6521651E12, "maxY": 5451.821428571429, "series": [{"data": [[1.65216546E12, 4512.012048192772], [1.65216528E12, 5110.670731707317], [1.65216534E12, 4870.84090909091], [1.65216516E12, 4030.5119047619046], [1.65216522E12, 4784.929411764704], [1.65216552E12, 1656.7499999999995], [1.6521651E12, 1694.4848484848487], [1.6521654E12, 4685.646341463417]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65216546E12, 4723.548780487803], [1.65216528E12, 4883.178571428572], [1.65216534E12, 4950.376470588235], [1.65216516E12, 4730.370370370372], [1.65216522E12, 5146.321428571429], [1.65216552E12, 1813.5161290322585], [1.6521651E12, 1845.2758620689651], [1.6521654E12, 5451.821428571429]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65216552E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.21875, "minX": 1.6521651E12, "maxY": 25.696969696969692, "series": [{"data": [[1.65216546E12, 7.891566265060241], [1.65216528E12, 8.621951219512198], [1.65216534E12, 8.261363636363633], [1.65216516E12, 11.333333333333334], [1.65216522E12, 8.917647058823528], [1.65216552E12, 7.21875], [1.6521651E12, 25.696969696969692], [1.6521654E12, 8.04878048780488]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65216546E12, 8.524390243902438], [1.65216528E12, 9.452380952380954], [1.65216534E12, 9.152941176470586], [1.65216516E12, 10.888888888888886], [1.65216522E12, 9.89285714285714], [1.65216552E12, 9.096774193548386], [1.6521651E12, 15.379310344827587], [1.6521654E12, 9.357142857142858]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65216552E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 749.0, "minX": 1.6521651E12, "maxY": 12922.0, "series": [{"data": [[1.65216546E12, 11530.0], [1.65216528E12, 12922.0], [1.65216534E12, 11872.0], [1.65216516E12, 9861.0], [1.65216522E12, 10447.0], [1.65216552E12, 5609.0], [1.6521651E12, 4162.0], [1.6521654E12, 11093.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65216546E12, 8600.8], [1.65216528E12, 9371.300000000005], [1.65216534E12, 8940.399999999998], [1.65216516E12, 7775.4], [1.65216522E12, 8264.0], [1.65216552E12, 3753.8], [1.6521651E12, 3221.3], [1.6521654E12, 8614.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65216546E12, 11027.740000000003], [1.65216528E12, 12712.290000000005], [1.65216534E12, 11125.339999999991], [1.65216516E12, 9544.860000000002], [1.65216522E12, 10189.400000000005], [1.65216552E12, 5609.0], [1.6521651E12, 4162.0], [1.6521654E12, 10609.93000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65216546E12, 9560.499999999998], [1.65216528E12, 10955.5], [1.65216534E12, 9799.099999999999], [1.65216516E12, 8518.099999999997], [1.65216522E12, 9429.5], [1.65216552E12, 5048.999999999999], [1.6521651E12, 3640.099999999999], [1.6521654E12, 9716.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65216546E12, 898.0], [1.65216528E12, 831.0], [1.65216534E12, 922.0], [1.65216516E12, 876.0], [1.65216522E12, 827.0], [1.65216552E12, 749.0], [1.6521651E12, 808.0], [1.6521654E12, 857.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65216546E12, 4188.0], [1.65216528E12, 4562.0], [1.65216534E12, 4768.0], [1.65216516E12, 4325.0], [1.65216522E12, 4976.0], [1.65216552E12, 1152.0], [1.6521651E12, 1524.5], [1.6521654E12, 4937.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65216552E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1029.5, "minX": 1.0, "maxY": 4359.0, "series": [{"data": [[1.0, 1029.5], [2.0, 4060.5], [4.0, 3696.0], [3.0, 4359.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1029.5, "minX": 1.0, "maxY": 4359.0, "series": [{"data": [[1.0, 1029.5], [2.0, 4060.5], [4.0, 3696.0], [3.0, 4359.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9333333333333333, "minX": 1.6521651E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65216546E12, 2.6333333333333333], [1.65216528E12, 2.7666666666666666], [1.65216534E12, 2.8833333333333333], [1.65216516E12, 2.85], [1.65216522E12, 2.816666666666667], [1.65216552E12, 0.9333333333333333], [1.6521651E12, 1.1666666666666667], [1.6521654E12, 2.7666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65216552E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0333333333333334, "minX": 1.6521651E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65216546E12, 2.75], [1.65216528E12, 2.7666666666666666], [1.65216534E12, 2.8833333333333333], [1.65216516E12, 2.75], [1.65216522E12, 2.816666666666667], [1.65216552E12, 1.05], [1.6521651E12, 1.0333333333333334], [1.6521654E12, 2.7666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65216552E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.6521651E12, "maxY": 1.4666666666666666, "series": [{"data": [[1.65216546E12, 1.3833333333333333], [1.65216528E12, 1.3666666666666667], [1.65216534E12, 1.4666666666666666], [1.65216516E12, 1.4], [1.65216522E12, 1.4166666666666667], [1.65216552E12, 0.5333333333333333], [1.6521651E12, 0.55], [1.6521654E12, 1.3666666666666667]], "isOverall": false, "label": "smp-success", "isController": false}, {"data": [[1.65216546E12, 1.3666666666666667], [1.65216528E12, 1.4], [1.65216534E12, 1.4166666666666667], [1.65216516E12, 1.35], [1.65216522E12, 1.4], [1.65216552E12, 0.5166666666666667], [1.6521651E12, 0.48333333333333334], [1.6521654E12, 1.4]], "isOverall": false, "label": "smp ex-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65216552E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0333333333333334, "minX": 1.6521651E12, "maxY": 2.8833333333333333, "series": [{"data": [[1.65216546E12, 2.75], [1.65216528E12, 2.7666666666666666], [1.65216534E12, 2.8833333333333333], [1.65216516E12, 2.75], [1.65216522E12, 2.816666666666667], [1.65216552E12, 1.05], [1.6521651E12, 1.0333333333333334], [1.6521654E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65216552E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


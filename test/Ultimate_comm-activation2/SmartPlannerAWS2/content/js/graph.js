/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 580.0, "minX": 0.0, "maxY": 18024.0, "series": [{"data": [[0.0, 580.0], [0.1, 605.0], [0.2, 629.0], [0.3, 786.0], [0.4, 794.0], [0.5, 795.0], [0.6, 799.0], [0.7, 805.0], [0.8, 806.0], [0.9, 809.0], [1.0, 811.0], [1.1, 813.0], [1.2, 817.0], [1.3, 819.0], [1.4, 820.0], [1.5, 822.0], [1.6, 823.0], [1.7, 825.0], [1.8, 827.0], [1.9, 827.0], [2.0, 830.0], [2.1, 834.0], [2.2, 836.0], [2.3, 839.0], [2.4, 840.0], [2.5, 842.0], [2.6, 845.0], [2.7, 847.0], [2.8, 851.0], [2.9, 853.0], [3.0, 855.0], [3.1, 858.0], [3.2, 863.0], [3.3, 866.0], [3.4, 870.0], [3.5, 872.0], [3.6, 876.0], [3.7, 879.0], [3.8, 884.0], [3.9, 892.0], [4.0, 896.0], [4.1, 905.0], [4.2, 908.0], [4.3, 912.0], [4.4, 923.0], [4.5, 931.0], [4.6, 938.0], [4.7, 946.0], [4.8, 951.0], [4.9, 958.0], [5.0, 964.0], [5.1, 974.0], [5.2, 982.0], [5.3, 988.0], [5.4, 992.0], [5.5, 999.0], [5.6, 1000.0], [5.7, 1005.0], [5.8, 1009.0], [5.9, 1011.0], [6.0, 1014.0], [6.1, 1015.0], [6.2, 1018.0], [6.3, 1020.0], [6.4, 1021.0], [6.5, 1025.0], [6.6, 1028.0], [6.7, 1031.0], [6.8, 1033.0], [6.9, 1037.0], [7.0, 1038.0], [7.1, 1041.0], [7.2, 1043.0], [7.3, 1045.0], [7.4, 1049.0], [7.5, 1050.0], [7.6, 1051.0], [7.7, 1053.0], [7.8, 1056.0], [7.9, 1066.0], [8.0, 1070.0], [8.1, 1074.0], [8.2, 1077.0], [8.3, 1081.0], [8.4, 1082.0], [8.5, 1085.0], [8.6, 1089.0], [8.7, 1092.0], [8.8, 1094.0], [8.9, 1101.0], [9.0, 1102.0], [9.1, 1104.0], [9.2, 1105.0], [9.3, 1107.0], [9.4, 1110.0], [9.5, 1114.0], [9.6, 1115.0], [9.7, 1117.0], [9.8, 1120.0], [9.9, 1121.0], [10.0, 1124.0], [10.1, 1127.0], [10.2, 1130.0], [10.3, 1134.0], [10.4, 1137.0], [10.5, 1138.0], [10.6, 1141.0], [10.7, 1144.0], [10.8, 1147.0], [10.9, 1148.0], [11.0, 1150.0], [11.1, 1151.0], [11.2, 1155.0], [11.3, 1158.0], [11.4, 1161.0], [11.5, 1167.0], [11.6, 1168.0], [11.7, 1174.0], [11.8, 1177.0], [11.9, 1179.0], [12.0, 1183.0], [12.1, 1187.0], [12.2, 1190.0], [12.3, 1191.0], [12.4, 1194.0], [12.5, 1197.0], [12.6, 1201.0], [12.7, 1204.0], [12.8, 1205.0], [12.9, 1209.0], [13.0, 1213.0], [13.1, 1214.0], [13.2, 1216.0], [13.3, 1219.0], [13.4, 1220.0], [13.5, 1221.0], [13.6, 1225.0], [13.7, 1230.0], [13.8, 1234.0], [13.9, 1235.0], [14.0, 1237.0], [14.1, 1240.0], [14.2, 1242.0], [14.3, 1245.0], [14.4, 1245.0], [14.5, 1247.0], [14.6, 1249.0], [14.7, 1251.0], [14.8, 1256.0], [14.9, 1259.0], [15.0, 1261.0], [15.1, 1267.0], [15.2, 1268.0], [15.3, 1272.0], [15.4, 1274.0], [15.5, 1277.0], [15.6, 1279.0], [15.7, 1280.0], [15.8, 1285.0], [15.9, 1289.0], [16.0, 1291.0], [16.1, 1301.0], [16.2, 1303.0], [16.3, 1308.0], [16.4, 1311.0], [16.5, 1314.0], [16.6, 1317.0], [16.7, 1324.0], [16.8, 1328.0], [16.9, 1330.0], [17.0, 1332.0], [17.1, 1337.0], [17.2, 1339.0], [17.3, 1343.0], [17.4, 1344.0], [17.5, 1351.0], [17.6, 1354.0], [17.7, 1359.0], [17.8, 1363.0], [17.9, 1365.0], [18.0, 1371.0], [18.1, 1378.0], [18.2, 1381.0], [18.3, 1386.0], [18.4, 1393.0], [18.5, 1394.0], [18.6, 1396.0], [18.7, 1397.0], [18.8, 1401.0], [18.9, 1403.0], [19.0, 1408.0], [19.1, 1410.0], [19.2, 1411.0], [19.3, 1414.0], [19.4, 1417.0], [19.5, 1419.0], [19.6, 1420.0], [19.7, 1426.0], [19.8, 1427.0], [19.9, 1430.0], [20.0, 1432.0], [20.1, 1436.0], [20.2, 1438.0], [20.3, 1439.0], [20.4, 1442.0], [20.5, 1444.0], [20.6, 1446.0], [20.7, 1448.0], [20.8, 1449.0], [20.9, 1451.0], [21.0, 1453.0], [21.1, 1454.0], [21.2, 1455.0], [21.3, 1456.0], [21.4, 1459.0], [21.5, 1460.0], [21.6, 1463.0], [21.7, 1464.0], [21.8, 1466.0], [21.9, 1467.0], [22.0, 1469.0], [22.1, 1474.0], [22.2, 1477.0], [22.3, 1479.0], [22.4, 1481.0], [22.5, 1482.0], [22.6, 1485.0], [22.7, 1488.0], [22.8, 1490.0], [22.9, 1496.0], [23.0, 1500.0], [23.1, 1501.0], [23.2, 1502.0], [23.3, 1503.0], [23.4, 1506.0], [23.5, 1509.0], [23.6, 1512.0], [23.7, 1517.0], [23.8, 1519.0], [23.9, 1521.0], [24.0, 1524.0], [24.1, 1526.0], [24.2, 1530.0], [24.3, 1531.0], [24.4, 1535.0], [24.5, 1537.0], [24.6, 1542.0], [24.7, 1544.0], [24.8, 1551.0], [24.9, 1556.0], [25.0, 1560.0], [25.1, 1563.0], [25.2, 1565.0], [25.3, 1569.0], [25.4, 1570.0], [25.5, 1573.0], [25.6, 1580.0], [25.7, 1581.0], [25.8, 1583.0], [25.9, 1584.0], [26.0, 1586.0], [26.1, 1591.0], [26.2, 1595.0], [26.3, 1598.0], [26.4, 1601.0], [26.5, 1605.0], [26.6, 1606.0], [26.7, 1608.0], [26.8, 1613.0], [26.9, 1617.0], [27.0, 1619.0], [27.1, 1621.0], [27.2, 1624.0], [27.3, 1625.0], [27.4, 1631.0], [27.5, 1636.0], [27.6, 1637.0], [27.7, 1642.0], [27.8, 1645.0], [27.9, 1645.0], [28.0, 1648.0], [28.1, 1649.0], [28.2, 1653.0], [28.3, 1658.0], [28.4, 1663.0], [28.5, 1667.0], [28.6, 1673.0], [28.7, 1675.0], [28.8, 1676.0], [28.9, 1679.0], [29.0, 1681.0], [29.1, 1683.0], [29.2, 1690.0], [29.3, 1694.0], [29.4, 1697.0], [29.5, 1700.0], [29.6, 1703.0], [29.7, 1708.0], [29.8, 1713.0], [29.9, 1717.0], [30.0, 1719.0], [30.1, 1722.0], [30.2, 1729.0], [30.3, 1733.0], [30.4, 1738.0], [30.5, 1740.0], [30.6, 1744.0], [30.7, 1752.0], [30.8, 1760.0], [30.9, 1765.0], [31.0, 1769.0], [31.1, 1784.0], [31.2, 1795.0], [31.3, 1798.0], [31.4, 1801.0], [31.5, 1804.0], [31.6, 1807.0], [31.7, 1816.0], [31.8, 1823.0], [31.9, 1828.0], [32.0, 1831.0], [32.1, 1838.0], [32.2, 1846.0], [32.3, 1858.0], [32.4, 1861.0], [32.5, 1868.0], [32.6, 1878.0], [32.7, 1886.0], [32.8, 1891.0], [32.9, 1902.0], [33.0, 1910.0], [33.1, 1919.0], [33.2, 1931.0], [33.3, 1940.0], [33.4, 1943.0], [33.5, 1950.0], [33.6, 1953.0], [33.7, 1964.0], [33.8, 1967.0], [33.9, 1977.0], [34.0, 1990.0], [34.1, 1997.0], [34.2, 2002.0], [34.3, 2011.0], [34.4, 2020.0], [34.5, 2026.0], [34.6, 2034.0], [34.7, 2042.0], [34.8, 2050.0], [34.9, 2055.0], [35.0, 2065.0], [35.1, 2072.0], [35.2, 2074.0], [35.3, 2078.0], [35.4, 2082.0], [35.5, 2095.0], [35.6, 2105.0], [35.7, 2109.0], [35.8, 2111.0], [35.9, 2116.0], [36.0, 2130.0], [36.1, 2135.0], [36.2, 2142.0], [36.3, 2147.0], [36.4, 2149.0], [36.5, 2159.0], [36.6, 2168.0], [36.7, 2177.0], [36.8, 2190.0], [36.9, 2198.0], [37.0, 2202.0], [37.1, 2205.0], [37.2, 2210.0], [37.3, 2217.0], [37.4, 2219.0], [37.5, 2224.0], [37.6, 2232.0], [37.7, 2240.0], [37.8, 2244.0], [37.9, 2255.0], [38.0, 2257.0], [38.1, 2264.0], [38.2, 2272.0], [38.3, 2275.0], [38.4, 2281.0], [38.5, 2284.0], [38.6, 2289.0], [38.7, 2298.0], [38.8, 2307.0], [38.9, 2311.0], [39.0, 2320.0], [39.1, 2325.0], [39.2, 2330.0], [39.3, 2333.0], [39.4, 2338.0], [39.5, 2346.0], [39.6, 2350.0], [39.7, 2354.0], [39.8, 2360.0], [39.9, 2366.0], [40.0, 2372.0], [40.1, 2380.0], [40.2, 2387.0], [40.3, 2396.0], [40.4, 2404.0], [40.5, 2411.0], [40.6, 2422.0], [40.7, 2424.0], [40.8, 2437.0], [40.9, 2440.0], [41.0, 2445.0], [41.1, 2450.0], [41.2, 2452.0], [41.3, 2456.0], [41.4, 2462.0], [41.5, 2476.0], [41.6, 2480.0], [41.7, 2486.0], [41.8, 2487.0], [41.9, 2504.0], [42.0, 2512.0], [42.1, 2518.0], [42.2, 2527.0], [42.3, 2529.0], [42.4, 2533.0], [42.5, 2540.0], [42.6, 2548.0], [42.7, 2551.0], [42.8, 2556.0], [42.9, 2558.0], [43.0, 2562.0], [43.1, 2566.0], [43.2, 2575.0], [43.3, 2577.0], [43.4, 2580.0], [43.5, 2584.0], [43.6, 2587.0], [43.7, 2596.0], [43.8, 2600.0], [43.9, 2604.0], [44.0, 2609.0], [44.1, 2616.0], [44.2, 2621.0], [44.3, 2626.0], [44.4, 2628.0], [44.5, 2631.0], [44.6, 2636.0], [44.7, 2643.0], [44.8, 2646.0], [44.9, 2656.0], [45.0, 2660.0], [45.1, 2664.0], [45.2, 2671.0], [45.3, 2676.0], [45.4, 2691.0], [45.5, 2696.0], [45.6, 2702.0], [45.7, 2705.0], [45.8, 2715.0], [45.9, 2721.0], [46.0, 2733.0], [46.1, 2735.0], [46.2, 2737.0], [46.3, 2751.0], [46.4, 2759.0], [46.5, 2770.0], [46.6, 2782.0], [46.7, 2787.0], [46.8, 2791.0], [46.9, 2799.0], [47.0, 2813.0], [47.1, 2827.0], [47.2, 2837.0], [47.3, 2841.0], [47.4, 2847.0], [47.5, 2850.0], [47.6, 2853.0], [47.7, 2858.0], [47.8, 2863.0], [47.9, 2871.0], [48.0, 2876.0], [48.1, 2882.0], [48.2, 2887.0], [48.3, 2893.0], [48.4, 2898.0], [48.5, 2906.0], [48.6, 2908.0], [48.7, 2915.0], [48.8, 2921.0], [48.9, 2924.0], [49.0, 2927.0], [49.1, 2930.0], [49.2, 2933.0], [49.3, 2944.0], [49.4, 2953.0], [49.5, 2961.0], [49.6, 2968.0], [49.7, 2977.0], [49.8, 2988.0], [49.9, 2997.0], [50.0, 3005.0], [50.1, 3015.0], [50.2, 3025.0], [50.3, 3032.0], [50.4, 3036.0], [50.5, 3043.0], [50.6, 3047.0], [50.7, 3052.0], [50.8, 3062.0], [50.9, 3071.0], [51.0, 3079.0], [51.1, 3090.0], [51.2, 3097.0], [51.3, 3099.0], [51.4, 3111.0], [51.5, 3120.0], [51.6, 3126.0], [51.7, 3132.0], [51.8, 3136.0], [51.9, 3141.0], [52.0, 3158.0], [52.1, 3170.0], [52.2, 3196.0], [52.3, 3201.0], [52.4, 3208.0], [52.5, 3212.0], [52.6, 3213.0], [52.7, 3223.0], [52.8, 3230.0], [52.9, 3240.0], [53.0, 3243.0], [53.1, 3249.0], [53.2, 3254.0], [53.3, 3271.0], [53.4, 3277.0], [53.5, 3277.0], [53.6, 3286.0], [53.7, 3294.0], [53.8, 3302.0], [53.9, 3305.0], [54.0, 3311.0], [54.1, 3319.0], [54.2, 3322.0], [54.3, 3332.0], [54.4, 3339.0], [54.5, 3348.0], [54.6, 3364.0], [54.7, 3370.0], [54.8, 3379.0], [54.9, 3384.0], [55.0, 3393.0], [55.1, 3403.0], [55.2, 3417.0], [55.3, 3426.0], [55.4, 3438.0], [55.5, 3442.0], [55.6, 3466.0], [55.7, 3473.0], [55.8, 3482.0], [55.9, 3486.0], [56.0, 3493.0], [56.1, 3499.0], [56.2, 3505.0], [56.3, 3519.0], [56.4, 3527.0], [56.5, 3531.0], [56.6, 3536.0], [56.7, 3541.0], [56.8, 3546.0], [56.9, 3552.0], [57.0, 3560.0], [57.1, 3577.0], [57.2, 3582.0], [57.3, 3592.0], [57.4, 3597.0], [57.5, 3608.0], [57.6, 3620.0], [57.7, 3628.0], [57.8, 3634.0], [57.9, 3638.0], [58.0, 3648.0], [58.1, 3656.0], [58.2, 3664.0], [58.3, 3673.0], [58.4, 3679.0], [58.5, 3691.0], [58.6, 3695.0], [58.7, 3707.0], [58.8, 3718.0], [58.9, 3726.0], [59.0, 3729.0], [59.1, 3736.0], [59.2, 3753.0], [59.3, 3770.0], [59.4, 3776.0], [59.5, 3788.0], [59.6, 3799.0], [59.7, 3814.0], [59.8, 3827.0], [59.9, 3841.0], [60.0, 3847.0], [60.1, 3854.0], [60.2, 3863.0], [60.3, 3880.0], [60.4, 3902.0], [60.5, 3905.0], [60.6, 3911.0], [60.7, 3925.0], [60.8, 3942.0], [60.9, 3948.0], [61.0, 3961.0], [61.1, 3973.0], [61.2, 3981.0], [61.3, 3995.0], [61.4, 4000.0], [61.5, 4007.0], [61.6, 4020.0], [61.7, 4026.0], [61.8, 4032.0], [61.9, 4036.0], [62.0, 4044.0], [62.1, 4048.0], [62.2, 4052.0], [62.3, 4065.0], [62.4, 4080.0], [62.5, 4094.0], [62.6, 4105.0], [62.7, 4108.0], [62.8, 4113.0], [62.9, 4123.0], [63.0, 4129.0], [63.1, 4143.0], [63.2, 4159.0], [63.3, 4175.0], [63.4, 4177.0], [63.5, 4186.0], [63.6, 4196.0], [63.7, 4203.0], [63.8, 4212.0], [63.9, 4220.0], [64.0, 4238.0], [64.1, 4246.0], [64.2, 4257.0], [64.3, 4260.0], [64.4, 4267.0], [64.5, 4290.0], [64.6, 4300.0], [64.7, 4306.0], [64.8, 4319.0], [64.9, 4331.0], [65.0, 4335.0], [65.1, 4345.0], [65.2, 4361.0], [65.3, 4368.0], [65.4, 4372.0], [65.5, 4387.0], [65.6, 4402.0], [65.7, 4407.0], [65.8, 4411.0], [65.9, 4428.0], [66.0, 4436.0], [66.1, 4445.0], [66.2, 4457.0], [66.3, 4475.0], [66.4, 4497.0], [66.5, 4508.0], [66.6, 4511.0], [66.7, 4527.0], [66.8, 4531.0], [66.9, 4547.0], [67.0, 4552.0], [67.1, 4558.0], [67.2, 4570.0], [67.3, 4580.0], [67.4, 4587.0], [67.5, 4596.0], [67.6, 4605.0], [67.7, 4622.0], [67.8, 4631.0], [67.9, 4637.0], [68.0, 4650.0], [68.1, 4665.0], [68.2, 4672.0], [68.3, 4692.0], [68.4, 4708.0], [68.5, 4725.0], [68.6, 4738.0], [68.7, 4747.0], [68.8, 4754.0], [68.9, 4756.0], [69.0, 4769.0], [69.1, 4802.0], [69.2, 4812.0], [69.3, 4845.0], [69.4, 4849.0], [69.5, 4857.0], [69.6, 4882.0], [69.7, 4899.0], [69.8, 4907.0], [69.9, 4936.0], [70.0, 4950.0], [70.1, 4958.0], [70.2, 4964.0], [70.3, 4967.0], [70.4, 4979.0], [70.5, 4992.0], [70.6, 5006.0], [70.7, 5027.0], [70.8, 5035.0], [70.9, 5045.0], [71.0, 5052.0], [71.1, 5068.0], [71.2, 5075.0], [71.3, 5101.0], [71.4, 5110.0], [71.5, 5118.0], [71.6, 5138.0], [71.7, 5149.0], [71.8, 5191.0], [71.9, 5202.0], [72.0, 5221.0], [72.1, 5239.0], [72.2, 5249.0], [72.3, 5277.0], [72.4, 5290.0], [72.5, 5308.0], [72.6, 5328.0], [72.7, 5355.0], [72.8, 5385.0], [72.9, 5397.0], [73.0, 5407.0], [73.1, 5415.0], [73.2, 5443.0], [73.3, 5452.0], [73.4, 5473.0], [73.5, 5481.0], [73.6, 5484.0], [73.7, 5504.0], [73.8, 5520.0], [73.9, 5534.0], [74.0, 5540.0], [74.1, 5568.0], [74.2, 5590.0], [74.3, 5613.0], [74.4, 5645.0], [74.5, 5661.0], [74.6, 5687.0], [74.7, 5694.0], [74.8, 5708.0], [74.9, 5736.0], [75.0, 5748.0], [75.1, 5766.0], [75.2, 5788.0], [75.3, 5807.0], [75.4, 5816.0], [75.5, 5822.0], [75.6, 5849.0], [75.7, 5860.0], [75.8, 5880.0], [75.9, 5891.0], [76.0, 5905.0], [76.1, 5918.0], [76.2, 5941.0], [76.3, 5950.0], [76.4, 5987.0], [76.5, 6000.0], [76.6, 6012.0], [76.7, 6026.0], [76.8, 6033.0], [76.9, 6062.0], [77.0, 6073.0], [77.1, 6106.0], [77.2, 6113.0], [77.3, 6165.0], [77.4, 6204.0], [77.5, 6252.0], [77.6, 6286.0], [77.7, 6299.0], [77.8, 6318.0], [77.9, 6364.0], [78.0, 6374.0], [78.1, 6400.0], [78.2, 6424.0], [78.3, 6444.0], [78.4, 6460.0], [78.5, 6472.0], [78.6, 6484.0], [78.7, 6493.0], [78.8, 6526.0], [78.9, 6551.0], [79.0, 6576.0], [79.1, 6610.0], [79.2, 6635.0], [79.3, 6662.0], [79.4, 6682.0], [79.5, 6707.0], [79.6, 6719.0], [79.7, 6780.0], [79.8, 6819.0], [79.9, 6850.0], [80.0, 6866.0], [80.1, 6885.0], [80.2, 6906.0], [80.3, 6933.0], [80.4, 6976.0], [80.5, 7017.0], [80.6, 7042.0], [80.7, 7065.0], [80.8, 7087.0], [80.9, 7129.0], [81.0, 7156.0], [81.1, 7225.0], [81.2, 7248.0], [81.3, 7298.0], [81.4, 7323.0], [81.5, 7340.0], [81.6, 7370.0], [81.7, 7393.0], [81.8, 7438.0], [81.9, 7465.0], [82.0, 7496.0], [82.1, 7520.0], [82.2, 7577.0], [82.3, 7612.0], [82.4, 7674.0], [82.5, 7707.0], [82.6, 7752.0], [82.7, 7769.0], [82.8, 7793.0], [82.9, 7838.0], [83.0, 7852.0], [83.1, 7879.0], [83.2, 7930.0], [83.3, 7973.0], [83.4, 8031.0], [83.5, 8067.0], [83.6, 8095.0], [83.7, 8120.0], [83.8, 8160.0], [83.9, 8209.0], [84.0, 8259.0], [84.1, 8296.0], [84.2, 8330.0], [84.3, 8358.0], [84.4, 8380.0], [84.5, 8407.0], [84.6, 8440.0], [84.7, 8462.0], [84.8, 8507.0], [84.9, 8557.0], [85.0, 8612.0], [85.1, 8629.0], [85.2, 8647.0], [85.3, 8716.0], [85.4, 8744.0], [85.5, 8778.0], [85.6, 8812.0], [85.7, 8836.0], [85.8, 8887.0], [85.9, 8914.0], [86.0, 8937.0], [86.1, 8941.0], [86.2, 8956.0], [86.3, 8977.0], [86.4, 8995.0], [86.5, 9038.0], [86.6, 9064.0], [86.7, 9148.0], [86.8, 9191.0], [86.9, 9227.0], [87.0, 9257.0], [87.1, 9291.0], [87.2, 9310.0], [87.3, 9337.0], [87.4, 9359.0], [87.5, 9391.0], [87.6, 9429.0], [87.7, 9437.0], [87.8, 9500.0], [87.9, 9532.0], [88.0, 9557.0], [88.1, 9572.0], [88.2, 9626.0], [88.3, 9654.0], [88.4, 9678.0], [88.5, 9692.0], [88.6, 9738.0], [88.7, 9785.0], [88.8, 9822.0], [88.9, 9867.0], [89.0, 9912.0], [89.1, 9936.0], [89.2, 9979.0], [89.3, 10015.0], [89.4, 10087.0], [89.5, 10141.0], [89.6, 10170.0], [89.7, 10185.0], [89.8, 10204.0], [89.9, 10240.0], [90.0, 10275.0], [90.1, 10339.0], [90.2, 10384.0], [90.3, 10407.0], [90.4, 10414.0], [90.5, 10495.0], [90.6, 10567.0], [90.7, 10590.0], [90.8, 10626.0], [90.9, 10650.0], [91.0, 10684.0], [91.1, 10719.0], [91.2, 10761.0], [91.3, 10800.0], [91.4, 10806.0], [91.5, 10844.0], [91.6, 10894.0], [91.7, 10932.0], [91.8, 10955.0], [91.9, 11002.0], [92.0, 11098.0], [92.1, 11156.0], [92.2, 11175.0], [92.3, 11243.0], [92.4, 11315.0], [92.5, 11351.0], [92.6, 11396.0], [92.7, 11452.0], [92.8, 11473.0], [92.9, 11538.0], [93.0, 11581.0], [93.1, 11634.0], [93.2, 11660.0], [93.3, 11718.0], [93.4, 11782.0], [93.5, 11842.0], [93.6, 11866.0], [93.7, 11918.0], [93.8, 11947.0], [93.9, 11988.0], [94.0, 12015.0], [94.1, 12037.0], [94.2, 12100.0], [94.3, 12186.0], [94.4, 12199.0], [94.5, 12217.0], [94.6, 12254.0], [94.7, 12342.0], [94.8, 12380.0], [94.9, 12418.0], [95.0, 12458.0], [95.1, 12487.0], [95.2, 12532.0], [95.3, 12568.0], [95.4, 12650.0], [95.5, 12673.0], [95.6, 12718.0], [95.7, 12790.0], [95.8, 12812.0], [95.9, 12861.0], [96.0, 12905.0], [96.1, 12954.0], [96.2, 13005.0], [96.3, 13120.0], [96.4, 13146.0], [96.5, 13229.0], [96.6, 13252.0], [96.7, 13277.0], [96.8, 13361.0], [96.9, 13417.0], [97.0, 13465.0], [97.1, 13537.0], [97.2, 13623.0], [97.3, 13706.0], [97.4, 13738.0], [97.5, 13777.0], [97.6, 13840.0], [97.7, 13955.0], [97.8, 14014.0], [97.9, 14049.0], [98.0, 14123.0], [98.1, 14191.0], [98.2, 14304.0], [98.3, 14355.0], [98.4, 14473.0], [98.5, 14531.0], [98.6, 14631.0], [98.7, 14769.0], [98.8, 14840.0], [98.9, 14999.0], [99.0, 15062.0], [99.1, 15143.0], [99.2, 15358.0], [99.3, 15577.0], [99.4, 15708.0], [99.5, 15938.0], [99.6, 16132.0], [99.7, 16604.0], [99.8, 16708.0], [99.9, 17193.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[0.0, 593.0], [0.1, 620.0], [0.2, 780.0], [0.3, 797.0], [0.4, 800.0], [0.5, 807.0], [0.6, 808.0], [0.7, 812.0], [0.8, 813.0], [0.9, 815.0], [1.0, 816.0], [1.1, 820.0], [1.2, 821.0], [1.3, 823.0], [1.4, 824.0], [1.5, 826.0], [1.6, 829.0], [1.7, 831.0], [1.8, 833.0], [1.9, 835.0], [2.0, 838.0], [2.1, 840.0], [2.2, 842.0], [2.3, 844.0], [2.4, 849.0], [2.5, 855.0], [2.6, 859.0], [2.7, 861.0], [2.8, 862.0], [2.9, 867.0], [3.0, 870.0], [3.1, 873.0], [3.2, 880.0], [3.3, 885.0], [3.4, 891.0], [3.5, 895.0], [3.6, 901.0], [3.7, 908.0], [3.8, 923.0], [3.9, 928.0], [4.0, 937.0], [4.1, 953.0], [4.2, 955.0], [4.3, 961.0], [4.4, 964.0], [4.5, 967.0], [4.6, 973.0], [4.7, 976.0], [4.8, 981.0], [4.9, 982.0], [5.0, 985.0], [5.1, 988.0], [5.2, 993.0], [5.3, 995.0], [5.4, 1006.0], [5.5, 1009.0], [5.6, 1010.0], [5.7, 1013.0], [5.8, 1016.0], [5.9, 1020.0], [6.0, 1025.0], [6.1, 1027.0], [6.2, 1030.0], [6.3, 1032.0], [6.4, 1035.0], [6.5, 1037.0], [6.6, 1040.0], [6.7, 1046.0], [6.8, 1049.0], [6.9, 1051.0], [7.0, 1053.0], [7.1, 1056.0], [7.2, 1058.0], [7.3, 1064.0], [7.4, 1066.0], [7.5, 1070.0], [7.6, 1072.0], [7.7, 1075.0], [7.8, 1077.0], [7.9, 1079.0], [8.0, 1080.0], [8.1, 1084.0], [8.2, 1086.0], [8.3, 1088.0], [8.4, 1089.0], [8.5, 1092.0], [8.6, 1093.0], [8.7, 1096.0], [8.8, 1099.0], [8.9, 1104.0], [9.0, 1106.0], [9.1, 1110.0], [9.2, 1111.0], [9.3, 1114.0], [9.4, 1117.0], [9.5, 1120.0], [9.6, 1126.0], [9.7, 1129.0], [9.8, 1135.0], [9.9, 1138.0], [10.0, 1140.0], [10.1, 1145.0], [10.2, 1148.0], [10.3, 1154.0], [10.4, 1156.0], [10.5, 1156.0], [10.6, 1159.0], [10.7, 1167.0], [10.8, 1170.0], [10.9, 1175.0], [11.0, 1177.0], [11.1, 1178.0], [11.2, 1179.0], [11.3, 1182.0], [11.4, 1184.0], [11.5, 1187.0], [11.6, 1189.0], [11.7, 1191.0], [11.8, 1192.0], [11.9, 1194.0], [12.0, 1196.0], [12.1, 1200.0], [12.2, 1201.0], [12.3, 1204.0], [12.4, 1205.0], [12.5, 1206.0], [12.6, 1207.0], [12.7, 1210.0], [12.8, 1215.0], [12.9, 1215.0], [13.0, 1217.0], [13.1, 1219.0], [13.2, 1222.0], [13.3, 1223.0], [13.4, 1226.0], [13.5, 1228.0], [13.6, 1230.0], [13.7, 1231.0], [13.8, 1233.0], [13.9, 1235.0], [14.0, 1238.0], [14.1, 1239.0], [14.2, 1241.0], [14.3, 1242.0], [14.4, 1244.0], [14.5, 1245.0], [14.6, 1251.0], [14.7, 1253.0], [14.8, 1254.0], [14.9, 1255.0], [15.0, 1258.0], [15.1, 1261.0], [15.2, 1262.0], [15.3, 1266.0], [15.4, 1269.0], [15.5, 1271.0], [15.6, 1273.0], [15.7, 1276.0], [15.8, 1279.0], [15.9, 1282.0], [16.0, 1284.0], [16.1, 1286.0], [16.2, 1287.0], [16.3, 1292.0], [16.4, 1293.0], [16.5, 1296.0], [16.6, 1297.0], [16.7, 1299.0], [16.8, 1301.0], [16.9, 1304.0], [17.0, 1307.0], [17.1, 1310.0], [17.2, 1312.0], [17.3, 1316.0], [17.4, 1318.0], [17.5, 1320.0], [17.6, 1323.0], [17.7, 1325.0], [17.8, 1329.0], [17.9, 1332.0], [18.0, 1338.0], [18.1, 1342.0], [18.2, 1346.0], [18.3, 1351.0], [18.4, 1357.0], [18.5, 1364.0], [18.6, 1368.0], [18.7, 1373.0], [18.8, 1377.0], [18.9, 1379.0], [19.0, 1384.0], [19.1, 1385.0], [19.2, 1388.0], [19.3, 1390.0], [19.4, 1393.0], [19.5, 1399.0], [19.6, 1402.0], [19.7, 1403.0], [19.8, 1405.0], [19.9, 1409.0], [20.0, 1412.0], [20.1, 1414.0], [20.2, 1418.0], [20.3, 1419.0], [20.4, 1420.0], [20.5, 1422.0], [20.6, 1424.0], [20.7, 1425.0], [20.8, 1426.0], [20.9, 1430.0], [21.0, 1435.0], [21.1, 1437.0], [21.2, 1438.0], [21.3, 1439.0], [21.4, 1441.0], [21.5, 1441.0], [21.6, 1443.0], [21.7, 1445.0], [21.8, 1447.0], [21.9, 1448.0], [22.0, 1450.0], [22.1, 1452.0], [22.2, 1454.0], [22.3, 1457.0], [22.4, 1461.0], [22.5, 1462.0], [22.6, 1466.0], [22.7, 1469.0], [22.8, 1472.0], [22.9, 1473.0], [23.0, 1474.0], [23.1, 1478.0], [23.2, 1479.0], [23.3, 1481.0], [23.4, 1481.0], [23.5, 1486.0], [23.6, 1489.0], [23.7, 1490.0], [23.8, 1492.0], [23.9, 1495.0], [24.0, 1496.0], [24.1, 1499.0], [24.2, 1503.0], [24.3, 1504.0], [24.4, 1505.0], [24.5, 1506.0], [24.6, 1510.0], [24.7, 1514.0], [24.8, 1517.0], [24.9, 1520.0], [25.0, 1521.0], [25.1, 1524.0], [25.2, 1525.0], [25.3, 1529.0], [25.4, 1532.0], [25.5, 1540.0], [25.6, 1543.0], [25.7, 1545.0], [25.8, 1548.0], [25.9, 1551.0], [26.0, 1556.0], [26.1, 1561.0], [26.2, 1567.0], [26.3, 1571.0], [26.4, 1574.0], [26.5, 1579.0], [26.6, 1583.0], [26.7, 1586.0], [26.8, 1589.0], [26.9, 1595.0], [27.0, 1599.0], [27.1, 1603.0], [27.2, 1608.0], [27.3, 1612.0], [27.4, 1616.0], [27.5, 1619.0], [27.6, 1623.0], [27.7, 1626.0], [27.8, 1632.0], [27.9, 1636.0], [28.0, 1641.0], [28.1, 1646.0], [28.2, 1654.0], [28.3, 1656.0], [28.4, 1657.0], [28.5, 1665.0], [28.6, 1670.0], [28.7, 1673.0], [28.8, 1675.0], [28.9, 1678.0], [29.0, 1683.0], [29.1, 1687.0], [29.2, 1691.0], [29.3, 1697.0], [29.4, 1700.0], [29.5, 1703.0], [29.6, 1707.0], [29.7, 1710.0], [29.8, 1715.0], [29.9, 1721.0], [30.0, 1724.0], [30.1, 1727.0], [30.2, 1730.0], [30.3, 1737.0], [30.4, 1743.0], [30.5, 1747.0], [30.6, 1749.0], [30.7, 1755.0], [30.8, 1756.0], [30.9, 1761.0], [31.0, 1764.0], [31.1, 1769.0], [31.2, 1772.0], [31.3, 1780.0], [31.4, 1783.0], [31.5, 1788.0], [31.6, 1795.0], [31.7, 1799.0], [31.8, 1802.0], [31.9, 1807.0], [32.0, 1812.0], [32.1, 1819.0], [32.2, 1835.0], [32.3, 1837.0], [32.4, 1838.0], [32.5, 1845.0], [32.6, 1850.0], [32.7, 1852.0], [32.8, 1855.0], [32.9, 1860.0], [33.0, 1865.0], [33.1, 1873.0], [33.2, 1877.0], [33.3, 1881.0], [33.4, 1884.0], [33.5, 1890.0], [33.6, 1895.0], [33.7, 1904.0], [33.8, 1918.0], [33.9, 1923.0], [34.0, 1926.0], [34.1, 1929.0], [34.2, 1934.0], [34.3, 1947.0], [34.4, 1959.0], [34.5, 1965.0], [34.6, 1967.0], [34.7, 1971.0], [34.8, 1975.0], [34.9, 1995.0], [35.0, 2003.0], [35.1, 2008.0], [35.2, 2021.0], [35.3, 2027.0], [35.4, 2031.0], [35.5, 2038.0], [35.6, 2052.0], [35.7, 2056.0], [35.8, 2059.0], [35.9, 2063.0], [36.0, 2070.0], [36.1, 2074.0], [36.2, 2076.0], [36.3, 2083.0], [36.4, 2097.0], [36.5, 2100.0], [36.6, 2115.0], [36.7, 2119.0], [36.8, 2123.0], [36.9, 2129.0], [37.0, 2136.0], [37.1, 2147.0], [37.2, 2154.0], [37.3, 2168.0], [37.4, 2179.0], [37.5, 2186.0], [37.6, 2190.0], [37.7, 2208.0], [37.8, 2218.0], [37.9, 2227.0], [38.0, 2234.0], [38.1, 2238.0], [38.2, 2242.0], [38.3, 2249.0], [38.4, 2256.0], [38.5, 2263.0], [38.6, 2271.0], [38.7, 2280.0], [38.8, 2286.0], [38.9, 2297.0], [39.0, 2301.0], [39.1, 2309.0], [39.2, 2321.0], [39.3, 2331.0], [39.4, 2340.0], [39.5, 2342.0], [39.6, 2345.0], [39.7, 2350.0], [39.8, 2360.0], [39.9, 2376.0], [40.0, 2378.0], [40.1, 2384.0], [40.2, 2390.0], [40.3, 2398.0], [40.4, 2405.0], [40.5, 2407.0], [40.6, 2413.0], [40.7, 2416.0], [40.8, 2420.0], [40.9, 2425.0], [41.0, 2429.0], [41.1, 2438.0], [41.2, 2442.0], [41.3, 2447.0], [41.4, 2462.0], [41.5, 2467.0], [41.6, 2471.0], [41.7, 2474.0], [41.8, 2477.0], [41.9, 2483.0], [42.0, 2487.0], [42.1, 2489.0], [42.2, 2490.0], [42.3, 2494.0], [42.4, 2499.0], [42.5, 2509.0], [42.6, 2519.0], [42.7, 2521.0], [42.8, 2527.0], [42.9, 2532.0], [43.0, 2535.0], [43.1, 2544.0], [43.2, 2552.0], [43.3, 2557.0], [43.4, 2568.0], [43.5, 2571.0], [43.6, 2580.0], [43.7, 2591.0], [43.8, 2605.0], [43.9, 2612.0], [44.0, 2618.0], [44.1, 2627.0], [44.2, 2638.0], [44.3, 2650.0], [44.4, 2663.0], [44.5, 2676.0], [44.6, 2678.0], [44.7, 2686.0], [44.8, 2697.0], [44.9, 2702.0], [45.0, 2708.0], [45.1, 2713.0], [45.2, 2717.0], [45.3, 2723.0], [45.4, 2735.0], [45.5, 2748.0], [45.6, 2755.0], [45.7, 2758.0], [45.8, 2768.0], [45.9, 2774.0], [46.0, 2781.0], [46.1, 2784.0], [46.2, 2790.0], [46.3, 2799.0], [46.4, 2809.0], [46.5, 2820.0], [46.6, 2826.0], [46.7, 2836.0], [46.8, 2841.0], [46.9, 2850.0], [47.0, 2860.0], [47.1, 2866.0], [47.2, 2877.0], [47.3, 2878.0], [47.4, 2882.0], [47.5, 2883.0], [47.6, 2895.0], [47.7, 2899.0], [47.8, 2903.0], [47.9, 2912.0], [48.0, 2915.0], [48.1, 2932.0], [48.2, 2942.0], [48.3, 2952.0], [48.4, 2954.0], [48.5, 2962.0], [48.6, 2969.0], [48.7, 2977.0], [48.8, 2983.0], [48.9, 2989.0], [49.0, 2996.0], [49.1, 3007.0], [49.2, 3016.0], [49.3, 3022.0], [49.4, 3027.0], [49.5, 3034.0], [49.6, 3038.0], [49.7, 3042.0], [49.8, 3048.0], [49.9, 3058.0], [50.0, 3062.0], [50.1, 3065.0], [50.2, 3069.0], [50.3, 3082.0], [50.4, 3089.0], [50.5, 3103.0], [50.6, 3107.0], [50.7, 3113.0], [50.8, 3118.0], [50.9, 3129.0], [51.0, 3135.0], [51.1, 3144.0], [51.2, 3151.0], [51.3, 3156.0], [51.4, 3164.0], [51.5, 3182.0], [51.6, 3188.0], [51.7, 3192.0], [51.8, 3199.0], [51.9, 3205.0], [52.0, 3216.0], [52.1, 3225.0], [52.2, 3240.0], [52.3, 3248.0], [52.4, 3250.0], [52.5, 3258.0], [52.6, 3262.0], [52.7, 3269.0], [52.8, 3278.0], [52.9, 3283.0], [53.0, 3288.0], [53.1, 3301.0], [53.2, 3309.0], [53.3, 3326.0], [53.4, 3332.0], [53.5, 3340.0], [53.6, 3346.0], [53.7, 3354.0], [53.8, 3365.0], [53.9, 3374.0], [54.0, 3382.0], [54.1, 3396.0], [54.2, 3404.0], [54.3, 3413.0], [54.4, 3420.0], [54.5, 3435.0], [54.6, 3437.0], [54.7, 3456.0], [54.8, 3461.0], [54.9, 3463.0], [55.0, 3483.0], [55.1, 3487.0], [55.2, 3498.0], [55.3, 3508.0], [55.4, 3528.0], [55.5, 3539.0], [55.6, 3546.0], [55.7, 3561.0], [55.8, 3565.0], [55.9, 3574.0], [56.0, 3580.0], [56.1, 3587.0], [56.2, 3593.0], [56.3, 3598.0], [56.4, 3609.0], [56.5, 3625.0], [56.6, 3636.0], [56.7, 3641.0], [56.8, 3649.0], [56.9, 3652.0], [57.0, 3667.0], [57.1, 3685.0], [57.2, 3698.0], [57.3, 3710.0], [57.4, 3716.0], [57.5, 3731.0], [57.6, 3746.0], [57.7, 3751.0], [57.8, 3759.0], [57.9, 3770.0], [58.0, 3778.0], [58.1, 3798.0], [58.2, 3807.0], [58.3, 3818.0], [58.4, 3823.0], [58.5, 3829.0], [58.6, 3835.0], [58.7, 3846.0], [58.8, 3854.0], [58.9, 3860.0], [59.0, 3861.0], [59.1, 3872.0], [59.2, 3897.0], [59.3, 3903.0], [59.4, 3919.0], [59.5, 3938.0], [59.6, 3951.0], [59.7, 3957.0], [59.8, 3965.0], [59.9, 3969.0], [60.0, 3975.0], [60.1, 3989.0], [60.2, 3999.0], [60.3, 4022.0], [60.4, 4032.0], [60.5, 4040.0], [60.6, 4048.0], [60.7, 4059.0], [60.8, 4077.0], [60.9, 4079.0], [61.0, 4094.0], [61.1, 4100.0], [61.2, 4115.0], [61.3, 4122.0], [61.4, 4129.0], [61.5, 4135.0], [61.6, 4152.0], [61.7, 4163.0], [61.8, 4181.0], [61.9, 4194.0], [62.0, 4197.0], [62.1, 4213.0], [62.2, 4229.0], [62.3, 4242.0], [62.4, 4247.0], [62.5, 4250.0], [62.6, 4258.0], [62.7, 4265.0], [62.8, 4278.0], [62.9, 4288.0], [63.0, 4299.0], [63.1, 4302.0], [63.2, 4307.0], [63.3, 4317.0], [63.4, 4330.0], [63.5, 4334.0], [63.6, 4360.0], [63.7, 4374.0], [63.8, 4383.0], [63.9, 4386.0], [64.0, 4391.0], [64.1, 4399.0], [64.2, 4429.0], [64.3, 4437.0], [64.4, 4445.0], [64.5, 4455.0], [64.6, 4465.0], [64.7, 4471.0], [64.8, 4483.0], [64.9, 4489.0], [65.0, 4500.0], [65.1, 4504.0], [65.2, 4511.0], [65.3, 4521.0], [65.4, 4523.0], [65.5, 4533.0], [65.6, 4549.0], [65.7, 4561.0], [65.8, 4570.0], [65.9, 4581.0], [66.0, 4591.0], [66.1, 4603.0], [66.2, 4607.0], [66.3, 4622.0], [66.4, 4626.0], [66.5, 4642.0], [66.6, 4647.0], [66.7, 4654.0], [66.8, 4666.0], [66.9, 4686.0], [67.0, 4699.0], [67.1, 4704.0], [67.2, 4713.0], [67.3, 4735.0], [67.4, 4747.0], [67.5, 4779.0], [67.6, 4788.0], [67.7, 4797.0], [67.8, 4802.0], [67.9, 4809.0], [68.0, 4815.0], [68.1, 4823.0], [68.2, 4838.0], [68.3, 4879.0], [68.4, 4892.0], [68.5, 4898.0], [68.6, 4909.0], [68.7, 4917.0], [68.8, 4938.0], [68.9, 4948.0], [69.0, 4981.0], [69.1, 4990.0], [69.2, 5000.0], [69.3, 5008.0], [69.4, 5028.0], [69.5, 5044.0], [69.6, 5070.0], [69.7, 5086.0], [69.8, 5110.0], [69.9, 5150.0], [70.0, 5157.0], [70.1, 5166.0], [70.2, 5183.0], [70.3, 5202.0], [70.4, 5209.0], [70.5, 5228.0], [70.6, 5240.0], [70.7, 5248.0], [70.8, 5269.0], [70.9, 5298.0], [71.0, 5312.0], [71.1, 5321.0], [71.2, 5329.0], [71.3, 5342.0], [71.4, 5346.0], [71.5, 5363.0], [71.6, 5367.0], [71.7, 5384.0], [71.8, 5395.0], [71.9, 5414.0], [72.0, 5435.0], [72.1, 5467.0], [72.2, 5486.0], [72.3, 5506.0], [72.4, 5518.0], [72.5, 5527.0], [72.6, 5542.0], [72.7, 5556.0], [72.8, 5568.0], [72.9, 5593.0], [73.0, 5608.0], [73.1, 5619.0], [73.2, 5653.0], [73.3, 5665.0], [73.4, 5697.0], [73.5, 5719.0], [73.6, 5751.0], [73.7, 5766.0], [73.8, 5798.0], [73.9, 5818.0], [74.0, 5834.0], [74.1, 5860.0], [74.2, 5886.0], [74.3, 5940.0], [74.4, 5957.0], [74.5, 5978.0], [74.6, 5994.0], [74.7, 6007.0], [74.8, 6030.0], [74.9, 6052.0], [75.0, 6062.0], [75.1, 6075.0], [75.2, 6106.0], [75.3, 6113.0], [75.4, 6133.0], [75.5, 6155.0], [75.6, 6165.0], [75.7, 6174.0], [75.8, 6196.0], [75.9, 6204.0], [76.0, 6248.0], [76.1, 6261.0], [76.2, 6307.0], [76.3, 6323.0], [76.4, 6371.0], [76.5, 6382.0], [76.6, 6401.0], [76.7, 6439.0], [76.8, 6484.0], [76.9, 6536.0], [77.0, 6548.0], [77.1, 6560.0], [77.2, 6584.0], [77.3, 6606.0], [77.4, 6628.0], [77.5, 6654.0], [77.6, 6681.0], [77.7, 6727.0], [77.8, 6737.0], [77.9, 6761.0], [78.0, 6771.0], [78.1, 6805.0], [78.2, 6847.0], [78.3, 6869.0], [78.4, 6885.0], [78.5, 6907.0], [78.6, 6962.0], [78.7, 7006.0], [78.8, 7024.0], [78.9, 7038.0], [79.0, 7050.0], [79.1, 7114.0], [79.2, 7159.0], [79.3, 7172.0], [79.4, 7180.0], [79.5, 7212.0], [79.6, 7227.0], [79.7, 7237.0], [79.8, 7291.0], [79.9, 7307.0], [80.0, 7342.0], [80.1, 7374.0], [80.2, 7388.0], [80.3, 7398.0], [80.4, 7440.0], [80.5, 7506.0], [80.6, 7527.0], [80.7, 7546.0], [80.8, 7558.0], [80.9, 7583.0], [81.0, 7620.0], [81.1, 7655.0], [81.2, 7666.0], [81.3, 7679.0], [81.4, 7704.0], [81.5, 7720.0], [81.6, 7775.0], [81.7, 7823.0], [81.8, 7865.0], [81.9, 7880.0], [82.0, 7906.0], [82.1, 7934.0], [82.2, 7955.0], [82.3, 7969.0], [82.4, 8028.0], [82.5, 8089.0], [82.6, 8126.0], [82.7, 8173.0], [82.8, 8217.0], [82.9, 8236.0], [83.0, 8258.0], [83.1, 8274.0], [83.2, 8329.0], [83.3, 8382.0], [83.4, 8391.0], [83.5, 8407.0], [83.6, 8442.0], [83.7, 8467.0], [83.8, 8483.0], [83.9, 8559.0], [84.0, 8597.0], [84.1, 8632.0], [84.2, 8646.0], [84.3, 8701.0], [84.4, 8728.0], [84.5, 8758.0], [84.6, 8801.0], [84.7, 8832.0], [84.8, 8856.0], [84.9, 8895.0], [85.0, 8932.0], [85.1, 8952.0], [85.2, 9017.0], [85.3, 9029.0], [85.4, 9068.0], [85.5, 9094.0], [85.6, 9160.0], [85.7, 9204.0], [85.8, 9228.0], [85.9, 9240.0], [86.0, 9258.0], [86.1, 9279.0], [86.2, 9307.0], [86.3, 9366.0], [86.4, 9399.0], [86.5, 9439.0], [86.6, 9508.0], [86.7, 9532.0], [86.8, 9556.0], [86.9, 9618.0], [87.0, 9673.0], [87.1, 9701.0], [87.2, 9722.0], [87.3, 9770.0], [87.4, 9798.0], [87.5, 9806.0], [87.6, 9848.0], [87.7, 9868.0], [87.8, 9946.0], [87.9, 9972.0], [88.0, 9986.0], [88.1, 10035.0], [88.2, 10106.0], [88.3, 10144.0], [88.4, 10194.0], [88.5, 10248.0], [88.6, 10262.0], [88.7, 10296.0], [88.8, 10353.0], [88.9, 10407.0], [89.0, 10427.0], [89.1, 10458.0], [89.2, 10545.0], [89.3, 10592.0], [89.4, 10626.0], [89.5, 10635.0], [89.6, 10649.0], [89.7, 10677.0], [89.8, 10742.0], [89.9, 10802.0], [90.0, 10856.0], [90.1, 10908.0], [90.2, 10963.0], [90.3, 10979.0], [90.4, 11017.0], [90.5, 11046.0], [90.6, 11070.0], [90.7, 11107.0], [90.8, 11149.0], [90.9, 11173.0], [91.0, 11196.0], [91.1, 11234.0], [91.2, 11255.0], [91.3, 11269.0], [91.4, 11303.0], [91.5, 11316.0], [91.6, 11346.0], [91.7, 11370.0], [91.8, 11406.0], [91.9, 11441.0], [92.0, 11477.0], [92.1, 11530.0], [92.2, 11572.0], [92.3, 11639.0], [92.4, 11661.0], [92.5, 11691.0], [92.6, 11737.0], [92.7, 11760.0], [92.8, 11885.0], [92.9, 11929.0], [93.0, 11962.0], [93.1, 12028.0], [93.2, 12061.0], [93.3, 12200.0], [93.4, 12239.0], [93.5, 12304.0], [93.6, 12334.0], [93.7, 12352.0], [93.8, 12393.0], [93.9, 12429.0], [94.0, 12463.0], [94.1, 12521.0], [94.2, 12536.0], [94.3, 12551.0], [94.4, 12619.0], [94.5, 12643.0], [94.6, 12681.0], [94.7, 12741.0], [94.8, 12775.0], [94.9, 12839.0], [95.0, 12854.0], [95.1, 12894.0], [95.2, 13007.0], [95.3, 13048.0], [95.4, 13097.0], [95.5, 13105.0], [95.6, 13160.0], [95.7, 13224.0], [95.8, 13268.0], [95.9, 13324.0], [96.0, 13354.0], [96.1, 13384.0], [96.2, 13424.0], [96.3, 13459.0], [96.4, 13528.0], [96.5, 13635.0], [96.6, 13685.0], [96.7, 13717.0], [96.8, 13815.0], [96.9, 13861.0], [97.0, 13905.0], [97.1, 13934.0], [97.2, 13948.0], [97.3, 13981.0], [97.4, 14072.0], [97.5, 14139.0], [97.6, 14161.0], [97.7, 14194.0], [97.8, 14236.0], [97.9, 14286.0], [98.0, 14357.0], [98.1, 14413.0], [98.2, 14532.0], [98.3, 14649.0], [98.4, 14718.0], [98.5, 14879.0], [98.6, 14912.0], [98.7, 14975.0], [98.8, 15115.0], [98.9, 15268.0], [99.0, 15319.0], [99.1, 15394.0], [99.2, 15562.0], [99.3, 15636.0], [99.4, 15739.0], [99.5, 15968.0], [99.6, 16231.0], [99.7, 16505.0], [99.8, 16675.0], [99.9, 17513.0], [100.0, 17796.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 185.0, "series": [{"data": [[500.0, 2.0], [600.0, 6.0], [700.0, 16.0], [800.0, 137.0], [900.0, 60.0], [1000.0, 132.0], [1100.0, 149.0], [1200.0, 139.0], [1300.0, 107.0], [1400.0, 168.0], [1500.0, 134.0], [1600.0, 124.0], [1700.0, 76.0], [1800.0, 60.0], [1900.0, 52.0], [2000.0, 55.0], [2100.0, 55.0], [2300.0, 65.0], [2200.0, 71.0], [2400.0, 61.0], [2500.0, 75.0], [2600.0, 72.0], [2800.0, 61.0], [2700.0, 54.0], [2900.0, 60.0], [3000.0, 54.0], [3100.0, 39.0], [3300.0, 52.0], [3200.0, 59.0], [3400.0, 42.0], [3500.0, 51.0], [3600.0, 49.0], [3700.0, 39.0], [3800.0, 31.0], [3900.0, 40.0], [4000.0, 46.0], [4200.0, 37.0], [4100.0, 44.0], [4300.0, 39.0], [4500.0, 45.0], [4600.0, 33.0], [4400.0, 34.0], [4700.0, 29.0], [4800.0, 25.0], [5100.0, 23.0], [5000.0, 31.0], [4900.0, 32.0], [5200.0, 22.0], [5300.0, 19.0], [5500.0, 24.0], [5600.0, 19.0], [5400.0, 29.0], [5800.0, 26.0], [5700.0, 22.0], [5900.0, 23.0], [6100.0, 12.0], [6000.0, 24.0], [6200.0, 14.0], [6300.0, 14.0], [6400.0, 24.0], [6600.0, 18.0], [6500.0, 12.0], [6700.0, 12.0], [6900.0, 12.0], [6800.0, 15.0], [7000.0, 17.0], [7100.0, 8.0], [7400.0, 12.0], [7300.0, 15.0], [7200.0, 11.0], [7600.0, 8.0], [7500.0, 11.0], [7700.0, 13.0], [7800.0, 14.0], [7900.0, 7.0], [8100.0, 11.0], [8000.0, 11.0], [8200.0, 9.0], [8400.0, 12.0], [8300.0, 15.0], [8600.0, 14.0], [8700.0, 12.0], [8500.0, 6.0], [9000.0, 9.0], [8900.0, 24.0], [8800.0, 9.0], [9100.0, 6.0], [9200.0, 13.0], [9300.0, 15.0], [9600.0, 14.0], [9400.0, 11.0], [9700.0, 9.0], [9500.0, 16.0], [9800.0, 9.0], [10200.0, 10.0], [10000.0, 6.0], [9900.0, 12.0], [10100.0, 14.0], [10300.0, 8.0], [10400.0, 11.0], [10700.0, 11.0], [10600.0, 11.0], [10500.0, 9.0], [11100.0, 8.0], [10900.0, 11.0], [10800.0, 13.0], [11200.0, 6.0], [11000.0, 5.0], [11700.0, 7.0], [11600.0, 8.0], [11500.0, 8.0], [11300.0, 11.0], [11400.0, 8.0], [12000.0, 10.0], [12100.0, 9.0], [12200.0, 9.0], [11800.0, 9.0], [11900.0, 11.0], [12700.0, 10.0], [12400.0, 11.0], [12500.0, 7.0], [12600.0, 8.0], [12300.0, 9.0], [12900.0, 8.0], [12800.0, 9.0], [13300.0, 5.0], [13100.0, 11.0], [13200.0, 10.0], [13000.0, 1.0], [13600.0, 5.0], [13700.0, 11.0], [13400.0, 8.0], [13500.0, 3.0], [13800.0, 6.0], [13900.0, 2.0], [14200.0, 3.0], [14000.0, 9.0], [14100.0, 6.0], [14300.0, 7.0], [14400.0, 5.0], [14500.0, 4.0], [14800.0, 5.0], [14700.0, 4.0], [14600.0, 2.0], [15100.0, 5.0], [15000.0, 5.0], [15300.0, 2.0], [15200.0, 1.0], [14900.0, 2.0], [15400.0, 1.0], [15700.0, 4.0], [15500.0, 3.0], [15600.0, 1.0], [16300.0, 1.0], [15900.0, 2.0], [16100.0, 2.0], [16000.0, 2.0], [16600.0, 3.0], [16700.0, 2.0], [17100.0, 3.0], [16400.0, 2.0], [17000.0, 1.0], [16900.0, 1.0], [17600.0, 1.0], [18000.0, 1.0]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[500.0, 1.0], [600.0, 5.0], [700.0, 9.0], [800.0, 127.0], [900.0, 71.0], [1000.0, 138.0], [1100.0, 129.0], [1200.0, 185.0], [1300.0, 111.0], [1400.0, 183.0], [1500.0, 115.0], [1600.0, 94.0], [1700.0, 93.0], [1800.0, 76.0], [1900.0, 52.0], [2000.0, 62.0], [2100.0, 46.0], [2300.0, 53.0], [2200.0, 53.0], [2400.0, 83.0], [2500.0, 54.0], [2600.0, 44.0], [2700.0, 57.0], [2800.0, 56.0], [2900.0, 54.0], [3000.0, 55.0], [3100.0, 54.0], [3200.0, 51.0], [3300.0, 41.0], [3400.0, 43.0], [3500.0, 44.0], [3700.0, 36.0], [3600.0, 37.0], [3800.0, 43.0], [3900.0, 39.0], [4000.0, 35.0], [4100.0, 37.0], [4200.0, 40.0], [4300.0, 43.0], [4500.0, 44.0], [4600.0, 36.0], [4400.0, 35.0], [4700.0, 30.0], [4800.0, 30.0], [4900.0, 27.0], [5000.0, 22.0], [5100.0, 22.0], [5300.0, 34.0], [5200.0, 26.0], [5500.0, 27.0], [5600.0, 18.0], [5400.0, 19.0], [5700.0, 16.0], [5800.0, 16.0], [6100.0, 27.0], [6000.0, 20.0], [5900.0, 17.0], [6300.0, 16.0], [6200.0, 14.0], [6500.0, 18.0], [6400.0, 9.0], [6600.0, 15.0], [6800.0, 15.0], [6700.0, 18.0], [6900.0, 9.0], [7000.0, 15.0], [7100.0, 13.0], [7300.0, 18.0], [7200.0, 18.0], [7400.0, 7.0], [7600.0, 17.0], [7500.0, 19.0], [7700.0, 9.0], [7900.0, 13.0], [7800.0, 15.0], [8100.0, 9.0], [8000.0, 9.0], [8300.0, 10.0], [8400.0, 17.0], [8600.0, 11.0], [8200.0, 16.0], [8500.0, 6.0], [8700.0, 12.0], [9000.0, 16.0], [9100.0, 6.0], [9200.0, 17.0], [8800.0, 13.0], [8900.0, 9.0], [9300.0, 12.0], [9500.0, 12.0], [9700.0, 13.0], [9600.0, 9.0], [9400.0, 6.0], [10000.0, 6.0], [9800.0, 12.0], [10200.0, 12.0], [9900.0, 12.0], [10100.0, 9.0], [10500.0, 8.0], [10400.0, 13.0], [10700.0, 5.0], [10600.0, 17.0], [10300.0, 4.0], [11100.0, 13.0], [10900.0, 11.0], [11200.0, 14.0], [11000.0, 14.0], [10800.0, 7.0], [11300.0, 15.0], [11600.0, 11.0], [11500.0, 8.0], [11400.0, 12.0], [11700.0, 7.0], [11900.0, 8.0], [12000.0, 8.0], [12200.0, 8.0], [12100.0, 3.0], [11800.0, 4.0], [12600.0, 12.0], [12300.0, 13.0], [12400.0, 10.0], [12500.0, 11.0], [12700.0, 10.0], [13100.0, 7.0], [13200.0, 9.0], [13300.0, 10.0], [12800.0, 9.0], [12900.0, 3.0], [13000.0, 10.0], [13800.0, 8.0], [13400.0, 11.0], [13700.0, 6.0], [13600.0, 7.0], [13500.0, 3.0], [13900.0, 13.0], [14200.0, 9.0], [14100.0, 11.0], [14000.0, 5.0], [14300.0, 4.0], [14400.0, 5.0], [14800.0, 6.0], [14700.0, 3.0], [14500.0, 3.0], [14600.0, 4.0], [15200.0, 4.0], [15000.0, 3.0], [14900.0, 6.0], [15300.0, 6.0], [15100.0, 3.0], [15700.0, 3.0], [15800.0, 2.0], [15500.0, 3.0], [15400.0, 1.0], [15600.0, 6.0], [16100.0, 1.0], [16000.0, 2.0], [15900.0, 1.0], [16300.0, 1.0], [16200.0, 2.0], [16800.0, 1.0], [16400.0, 1.0], [16500.0, 4.0], [16600.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17700.0, 2.0], [17500.0, 2.0]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1879.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 6083.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1879.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6083.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65206502E12, "maxY": 14.0, "series": [{"data": [[1.65206646E12, 14.0], [1.65206544E12, 5.0], [1.65206706E12, 14.0], [1.65206526E12, 3.0], [1.65206748E12, 14.0], [1.65206586E12, 9.859872611464967], [1.65206808E12, 9.935064935064942], [1.65206724E12, 14.0], [1.65206502E12, 1.0], [1.65206562E12, 7.0], [1.65206784E12, 14.0], [1.65206604E12, 11.853503184713377], [1.65206766E12, 14.0], [1.65206664E12, 14.0], [1.6520655E12, 5.865384615384614], [1.65206772E12, 14.0], [1.6520661E12, 12.352941176470585], [1.65206814E12, 4.809210526315789], [1.65206652E12, 14.0], [1.65206712E12, 14.0], [1.6520679E12, 14.0], [1.65206628E12, 14.0], [1.65206688E12, 14.0], [1.65206508E12, 1.0], [1.6520667E12, 14.0], [1.65206568E12, 7.85897435897436], [1.6520673E12, 14.0], [1.65206676E12, 14.0], [1.65206514E12, 1.9152542372881354], [1.65206736E12, 14.0], [1.65206556E12, 6.363057324840764], [1.65206718E12, 14.0], [1.65206778E12, 14.0], [1.65206616E12, 13.0], [1.65206532E12, 3.870967741935486], [1.65206694E12, 14.0], [1.65206592E12, 10.365384615384611], [1.65206754E12, 14.0], [1.65206574E12, 8.371794871794872], [1.65206796E12, 14.0], [1.65206634E12, 14.0], [1.6520658E12, 9.0], [1.65206742E12, 14.0], [1.65206802E12, 14.0], [1.6520664E12, 14.0], [1.65206622E12, 13.858974358974358], [1.6520652E12, 2.424999999999999], [1.65206682E12, 14.0], [1.65206598E12, 11.0], [1.6520682E12, 3.76], [1.65206658E12, 14.0], [1.652067E12, 14.0], [1.65206538E12, 4.36184210526316], [1.6520676E12, 14.0]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6520682E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 847.9814814814815, "minX": 1.0, "maxY": 5496.081641110641, "series": [{"data": [[2.0, 993.0222222222224], [8.0, 3175.373913043477], [9.0, 3369.132978723405], [10.0, 4217.063492063492], [11.0, 3930.9327731092435], [3.0, 1226.4862385321103], [12.0, 4360.239316239316], [13.0, 5032.008695652171], [14.0, 5307.357942762326], [1.0, 848.622641509434], [4.0, 1592.386243386243], [5.0, 1918.0940170940173], [6.0, 2251.36440677966], [7.0, 2737.2016806722686]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[11.358755644756647, 4332.003763171089]], "isOverall": false, "label": "smp-Aggregated", "isController": false}, {"data": [[2.0, 1039.0454545454545], [8.0, 2979.6355932203383], [9.0, 3504.016216216218], [10.0, 3530.349593495935], [11.0, 4452.865546218487], [3.0, 1268.6851851851848], [12.0, 4815.666666666664], [13.0, 5246.785714285714], [14.0, 5496.081641110641], [1.0, 847.9814814814815], [4.0, 1558.7052631578945], [5.0, 1967.2086956521737], [6.0, 2336.8389830508486], [7.0, 2697.060344827585]], "isOverall": false, "label": "smp ex", "isController": false}, {"data": [[11.367957746478872, 4467.383299798803]], "isOverall": false, "label": "smp ex-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 14.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 64.98333333333333, "minX": 1.65206502E12, "maxY": 499.05, "series": [{"data": [[1.65206646E12, 498.96666666666664], [1.65206544E12, 483.55], [1.65206706E12, 489.1166666666667], [1.65206526E12, 450.96666666666664], [1.65206748E12, 479.51666666666665], [1.65206586E12, 489.51666666666665], [1.65206808E12, 479.55], [1.65206724E12, 489.95], [1.65206502E12, 77.3], [1.65206562E12, 479.8666666666667], [1.65206784E12, 484.5833333333333], [1.65206604E12, 488.51666666666665], [1.65206766E12, 489.2], [1.65206664E12, 484.6333333333333], [1.6520655E12, 485.65], [1.65206772E12, 487.01666666666665], [1.6520661E12, 477.48333333333335], [1.65206814E12, 473.55], [1.65206652E12, 479.93333333333334], [1.65206712E12, 499.05], [1.6520679E12, 488.98333333333335], [1.65206628E12, 490.3833333333333], [1.65206688E12, 479.6333333333333], [1.65206508E12, 220.31666666666666], [1.6520667E12, 477.1166666666667], [1.65206568E12, 486.55], [1.6520673E12, 492.8], [1.65206676E12, 477.0833333333333], [1.65206514E12, 366.4], [1.65206736E12, 486.53333333333336], [1.65206556E12, 489.05], [1.65206718E12, 492.76666666666665], [1.65206778E12, 486.26666666666665], [1.65206616E12, 468.23333333333335], [1.65206532E12, 482.53333333333336], [1.65206694E12, 490.75], [1.65206592E12, 486.21666666666664], [1.65206754E12, 492.35], [1.65206574E12, 485.8], [1.65206796E12, 464.3833333333333], [1.65206634E12, 492.46666666666664], [1.6520658E12, 494.48333333333335], [1.65206742E12, 477.81666666666666], [1.65206802E12, 492.51666666666665], [1.6520664E12, 483.6166666666667], [1.65206622E12, 486.31666666666666], [1.6520652E12, 372.9166666666667], [1.65206682E12, 486.5833333333333], [1.65206598E12, 490.01666666666665], [1.6520682E12, 77.6], [1.65206658E12, 471.26666666666665], [1.652067E12, 458.4166666666667], [1.65206538E12, 473.4], [1.6520676E12, 490.73333333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65206646E12, 416.0], [1.65206544E12, 403.05], [1.65206706E12, 408.15], [1.65206526E12, 376.98333333333335], [1.65206748E12, 400.3333333333333], [1.65206586E12, 408.21666666666664], [1.65206808E12, 400.3666666666667], [1.65206724E12, 408.21666666666664], [1.65206502E12, 64.98333333333333], [1.65206562E12, 400.4], [1.65206784E12, 403.0833333333333], [1.65206604E12, 408.1166666666667], [1.65206766E12, 408.15], [1.65206664E12, 403.0833333333333], [1.6520655E12, 405.56666666666666], [1.65206772E12, 405.6333333333333], [1.6520661E12, 397.81666666666666], [1.65206814E12, 395.2], [1.65206652E12, 400.3666666666667], [1.65206712E12, 416.0], [1.6520679E12, 408.15], [1.65206628E12, 408.25], [1.65206688E12, 400.3333333333333], [1.65206508E12, 184.61666666666667], [1.6520667E12, 397.78333333333336], [1.65206568E12, 405.6333333333333], [1.6520673E12, 410.8], [1.65206676E12, 397.78333333333336], [1.65206514E12, 306.8], [1.65206736E12, 405.6], [1.65206556E12, 408.18333333333334], [1.65206718E12, 410.8], [1.65206778E12, 405.56666666666666], [1.65206616E12, 390.03333333333336], [1.65206532E12, 402.98333333333335], [1.65206694E12, 408.28333333333336], [1.65206592E12, 405.6], [1.65206754E12, 410.76666666666665], [1.65206574E12, 405.56666666666666], [1.65206796E12, 387.3833333333333], [1.65206634E12, 410.76666666666665], [1.6520658E12, 413.31666666666666], [1.65206742E12, 397.85], [1.65206802E12, 410.8], [1.6520664E12, 403.01666666666665], [1.65206622E12, 405.56666666666666], [1.6520652E12, 311.96666666666664], [1.65206682E12, 405.6], [1.65206598E12, 408.25], [1.6520682E12, 64.98333333333333], [1.65206658E12, 392.6166666666667], [1.652067E12, 382.18333333333334], [1.65206538E12, 395.2], [1.6520676E12, 408.28333333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6520682E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 834.3888888888889, "minX": 1.65206502E12, "maxY": 6510.65, "series": [{"data": [[1.65206646E12, 4916.249999999999], [1.65206544E12, 1913.0657894736844], [1.65206706E12, 5535.3], [1.65206526E12, 1220.7123287671232], [1.65206748E12, 5528.088607594937], [1.65206586E12, 3993.4230769230758], [1.65206808E12, 4172.205128205127], [1.65206724E12, 4688.28205128205], [1.65206502E12, 870.3846153846154], [1.65206562E12, 2703.753246753246], [1.65206784E12, 5472.733333333334], [1.65206604E12, 4213.074074074075], [1.65206766E12, 5058.937499999999], [1.65206664E12, 4591.346666666667], [1.6520655E12, 2123.594936708861], [1.65206772E12, 5232.285714285713], [1.6520661E12, 4426.934210526316], [1.65206814E12, 1937.0789473684224], [1.65206652E12, 5394.4358974358975], [1.65206712E12, 5209.075000000002], [1.6520679E12, 5301.200000000002], [1.65206628E12, 5636.870129870129], [1.65206688E12, 5559.329113924052], [1.65206508E12, 844.1142857142856], [1.6520667E12, 5333.7532467532465], [1.65206568E12, 3049.961038961039], [1.6520673E12, 5293.9240506329115], [1.65206676E12, 5842.389610389608], [1.65206514E12, 931.5593220338983], [1.65206736E12, 5521.256410256412], [1.65206556E12, 2494.797468354431], [1.65206718E12, 5713.658227848103], [1.65206778E12, 5956.253164556962], [1.65206616E12, 5125.594594594595], [1.65206532E12, 1547.4871794871794], [1.65206694E12, 5317.486842105264], [1.65206592E12, 3844.756410256409], [1.65206754E12, 4270.25], [1.65206574E12, 3332.278481012658], [1.65206796E12, 5609.253333333334], [1.65206634E12, 5141.862500000001], [1.6520658E12, 3225.402439024391], [1.65206742E12, 5701.88], [1.65206802E12, 5152.506329113924], [1.6520664E12, 5152.272727272727], [1.65206622E12, 5550.999999999997], [1.6520652E12, 1133.9344262295083], [1.65206682E12, 5050.974358974361], [1.65206598E12, 4090.545454545454], [1.6520682E12, 1671.153846153846], [1.65206658E12, 5302.639999999999], [1.652067E12, 5952.027027027026], [1.65206538E12, 1700.0263157894735], [1.6520676E12, 4705.855263157894]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65206646E12, 5554.325000000001], [1.65206544E12, 1961.4430379746836], [1.65206706E12, 5126.363636363637], [1.65206526E12, 1270.8194444444443], [1.65206748E12, 5306.466666666667], [1.65206586E12, 3371.113924050633], [1.65206808E12, 3888.0263157894724], [1.65206724E12, 6046.189873417723], [1.65206502E12, 848.7499999999999], [1.65206562E12, 2790.9090909090905], [1.65206784E12, 5594.337500000001], [1.65206604E12, 4587.289473684212], [1.65206766E12, 5579.038961038963], [1.65206664E12, 6510.65], [1.6520655E12, 2336.688311688312], [1.65206772E12, 5499.050632911393], [1.6520661E12, 5171.805194805195], [1.65206814E12, 2045.1184210526326], [1.65206652E12, 5419.2631578947385], [1.65206712E12, 5495.575], [1.6520679E12, 5281.53246753247], [1.65206628E12, 5054.312500000003], [1.65206688E12, 5069.52], [1.65206508E12, 834.3888888888889], [1.6520667E12, 5707.61842105263], [1.65206568E12, 2958.696202531646], [1.6520673E12, 5393.962025316457], [1.65206676E12, 5027.184210526314], [1.65206514E12, 966.3220338983048], [1.65206736E12, 5177.217948717948], [1.65206556E12, 2291.076923076923], [1.65206718E12, 4850.8987341772145], [1.65206778E12, 4809.805194805194], [1.65206616E12, 5329.644736842109], [1.65206532E12, 1431.4285714285716], [1.65206694E12, 5511.962962962964], [1.65206592E12, 4174.346153846154], [1.65206754E12, 6295.833333333334], [1.65206574E12, 3089.298701298701], [1.65206796E12, 5829.445945945946], [1.65206634E12, 5809.512820512821], [1.6520658E12, 3455.9350649350645], [1.65206742E12, 5363.551282051283], [1.65206802E12, 5456.189873417724], [1.6520664E12, 5650.012820512821], [1.65206622E12, 4989.376623376624], [1.6520652E12, 1193.2033898305083], [1.65206682E12, 5760.423076923075], [1.65206598E12, 4324.825000000001], [1.6520682E12, 1418.3333333333333], [1.65206658E12, 5490.921052631578], [1.652067E12, 5463.123287671232], [1.65206538E12, 1717.328947368421], [1.6520676E12, 6018.209876543207]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6520682E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 834.3333333333335, "minX": 1.65206502E12, "maxY": 6510.625000000001, "series": [{"data": [[1.65206646E12, 4916.237499999999], [1.65206544E12, 1913.0657894736844], [1.65206706E12, 5535.2875], [1.65206526E12, 1220.698630136986], [1.65206748E12, 5528.075949367089], [1.65206586E12, 3993.3846153846157], [1.65206808E12, 4172.205128205127], [1.65206724E12, 4688.256410256412], [1.65206502E12, 870.0769230769231], [1.65206562E12, 2703.7402597402597], [1.65206784E12, 5472.733333333334], [1.65206604E12, 4213.061728395063], [1.65206766E12, 5058.937499999999], [1.65206664E12, 4591.346666666667], [1.6520655E12, 2123.5696202531644], [1.65206772E12, 5232.272727272725], [1.6520661E12, 4426.921052631578], [1.65206814E12, 1937.0657894736848], [1.65206652E12, 5394.423076923074], [1.65206712E12, 5209.062500000001], [1.6520679E12, 5301.200000000002], [1.65206628E12, 5636.831168831167], [1.65206688E12, 5559.303797468354], [1.65206508E12, 844.0285714285715], [1.6520667E12, 5333.74025974026], [1.65206568E12, 3049.948051948051], [1.6520673E12, 5293.9113924050625], [1.65206676E12, 5842.389610389608], [1.65206514E12, 931.4915254237288], [1.65206736E12, 5521.243589743592], [1.65206556E12, 2494.797468354431], [1.65206718E12, 5713.645569620254], [1.65206778E12, 5956.253164556962], [1.65206616E12, 5125.594594594595], [1.65206532E12, 1547.4615384615383], [1.65206694E12, 5317.486842105264], [1.65206592E12, 3844.756410256409], [1.65206754E12, 4270.237500000001], [1.65206574E12, 3332.2531645569625], [1.65206796E12, 5609.253333333334], [1.65206634E12, 5141.812500000002], [1.6520658E12, 3225.3780487804884], [1.65206742E12, 5701.88], [1.65206802E12, 5152.493670886075], [1.6520664E12, 5152.259740259741], [1.65206622E12, 5550.999999999997], [1.6520652E12, 1133.901639344262], [1.65206682E12, 5050.974358974361], [1.65206598E12, 4090.545454545454], [1.6520682E12, 1671.153846153846], [1.65206658E12, 5302.626666666668], [1.652067E12, 5951.986486486485], [1.65206538E12, 1699.9868421052627], [1.6520676E12, 4705.855263157894]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65206646E12, 5554.325000000001], [1.65206544E12, 1961.4177215189868], [1.65206706E12, 5126.363636363637], [1.65206526E12, 1270.791666666667], [1.65206748E12, 5306.453333333334], [1.65206586E12, 3371.113924050633], [1.65206808E12, 3888.0263157894724], [1.65206724E12, 6046.189873417723], [1.65206502E12, 848.7499999999999], [1.65206562E12, 2790.896103896104], [1.65206784E12, 5594.325], [1.65206604E12, 4587.289473684212], [1.65206766E12, 5579.038961038963], [1.65206664E12, 6510.625000000001], [1.6520655E12, 2336.64935064935], [1.65206772E12, 5499.050632911393], [1.6520661E12, 5171.792207792209], [1.65206814E12, 2045.1052631578953], [1.65206652E12, 5419.236842105262], [1.65206712E12, 5495.55], [1.6520679E12, 5281.51948051948], [1.65206628E12, 5054.312500000003], [1.65206688E12, 5069.52], [1.65206508E12, 834.3333333333335], [1.6520667E12, 5707.578947368421], [1.65206568E12, 2958.67088607595], [1.6520673E12, 5393.962025316457], [1.65206676E12, 5027.184210526314], [1.65206514E12, 966.2711864406778], [1.65206736E12, 5177.179487179489], [1.65206556E12, 2291.0641025641025], [1.65206718E12, 4850.886075949367], [1.65206778E12, 4809.805194805194], [1.65206616E12, 5329.644736842109], [1.65206532E12, 1431.4025974025983], [1.65206694E12, 5511.962962962964], [1.65206592E12, 4174.346153846154], [1.65206754E12, 6295.833333333334], [1.65206574E12, 3089.2857142857147], [1.65206796E12, 5829.445945945946], [1.65206634E12, 5809.48717948718], [1.6520658E12, 3455.9350649350645], [1.65206742E12, 5363.551282051283], [1.65206802E12, 5456.164556962025], [1.6520664E12, 5649.987179487181], [1.65206622E12, 4989.376623376624], [1.6520652E12, 1193.2033898305083], [1.65206682E12, 5760.423076923075], [1.65206598E12, 4324.800000000001], [1.6520682E12, 1418.3333333333333], [1.65206658E12, 5490.907894736841], [1.652067E12, 5463.123287671232], [1.65206538E12, 1717.3157894736846], [1.6520676E12, 6018.209876543207]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6520682E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.906666666666665, "minX": 1.65206502E12, "maxY": 37.38461538461539, "series": [{"data": [[1.65206646E12, 6.325000000000001], [1.65206544E12, 7.184210526315789], [1.65206706E12, 6.512500000000002], [1.65206526E12, 8.424657534246574], [1.65206748E12, 6.430379746835446], [1.65206586E12, 6.80769230769231], [1.65206808E12, 6.115384615384616], [1.65206724E12, 6.512820512820514], [1.65206502E12, 37.38461538461539], [1.65206562E12, 7.103896103896106], [1.65206784E12, 6.213333333333333], [1.65206604E12, 6.481481481481482], [1.65206766E12, 6.750000000000001], [1.65206664E12, 6.093333333333333], [1.6520655E12, 7.30379746835443], [1.65206772E12, 6.116883116883116], [1.6520661E12, 7.1842105263157885], [1.65206814E12, 6.223684210526316], [1.65206652E12, 6.346153846153846], [1.65206712E12, 6.550000000000001], [1.6520679E12, 6.274999999999999], [1.65206628E12, 6.571428571428573], [1.65206688E12, 6.215189873417722], [1.65206508E12, 12.285714285714288], [1.6520667E12, 6.376623376623377], [1.65206568E12, 6.740259740259741], [1.6520673E12, 6.215189873417721], [1.65206676E12, 6.272727272727274], [1.65206514E12, 9.983050847457624], [1.65206736E12, 6.333333333333335], [1.65206556E12, 7.430379746835444], [1.65206718E12, 6.708860759493669], [1.65206778E12, 6.189873417721517], [1.65206616E12, 6.635135135135134], [1.65206532E12, 7.743589743589742], [1.65206694E12, 6.578947368421055], [1.65206592E12, 7.115384615384618], [1.65206754E12, 6.849999999999999], [1.65206574E12, 7.1645569620253164], [1.65206796E12, 5.906666666666665], [1.65206634E12, 6.249999999999998], [1.6520658E12, 6.548780487804879], [1.65206742E12, 6.3999999999999995], [1.65206802E12, 6.227848101265821], [1.6520664E12, 6.3896103896103895], [1.65206622E12, 6.835443037974684], [1.6520652E12, 9.327868852459014], [1.65206682E12, 6.499999999999997], [1.65206598E12, 6.740259740259743], [1.6520682E12, 6.615384615384615], [1.65206658E12, 6.013333333333333], [1.652067E12, 6.486486486486488], [1.65206538E12, 8.263157894736846], [1.6520676E12, 6.56578947368421]], "isOverall": false, "label": "smp", "isController": false}, {"data": [[1.65206646E12, 7.737500000000002], [1.65206544E12, 8.848101265822782], [1.65206706E12, 7.740259740259741], [1.65206526E12, 9.555555555555554], [1.65206748E12, 7.706666666666666], [1.65206586E12, 8.531645569620258], [1.65206808E12, 7.776315789473682], [1.65206724E12, 7.607594936708864], [1.65206502E12, 19.666666666666668], [1.65206562E12, 8.285714285714286], [1.65206784E12, 7.537499999999999], [1.65206604E12, 7.710526315789475], [1.65206766E12, 8.038961038961041], [1.65206664E12, 7.637500000000003], [1.6520655E12, 8.987012987012989], [1.65206772E12, 8.025316455696203], [1.6520661E12, 7.831168831168831], [1.65206814E12, 8.434210526315791], [1.65206652E12, 8.013157894736839], [1.65206712E12, 7.7250000000000005], [1.6520679E12, 7.909090909090911], [1.65206628E12, 7.675], [1.65206688E12, 7.426666666666667], [1.65206508E12, 12.833333333333332], [1.6520667E12, 8.776315789473687], [1.65206568E12, 8.037974683544306], [1.6520673E12, 7.835443037974685], [1.65206676E12, 7.9868421052631575], [1.65206514E12, 10.610169491525422], [1.65206736E12, 7.4230769230769225], [1.65206556E12, 8.243589743589745], [1.65206718E12, 7.860759493670886], [1.65206778E12, 7.337662337662339], [1.65206616E12, 7.973684210526316], [1.65206532E12, 9.662337662337661], [1.65206694E12, 7.876543209876546], [1.65206592E12, 7.8076923076923075], [1.65206754E12, 7.666666666666667], [1.65206574E12, 7.922077922077922], [1.65206796E12, 7.527027027027026], [1.65206634E12, 8.333333333333332], [1.6520658E12, 8.077922077922079], [1.65206742E12, 7.628205128205127], [1.65206802E12, 7.506329113924052], [1.6520664E12, 7.884615384615386], [1.65206622E12, 7.8961038961039], [1.6520652E12, 10.016949152542376], [1.65206682E12, 7.4230769230769225], [1.65206598E12, 7.812500000000002], [1.6520682E12, 7.666666666666667], [1.65206658E12, 7.513157894736843], [1.652067E12, 7.63013698630137], [1.65206538E12, 8.894736842105262], [1.6520676E12, 7.543209876543211]], "isOverall": false, "label": "smp ex", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6520682E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.65206502E12, "maxY": 18024.0, "series": [{"data": [[1.65206646E12, 14160.0], [1.65206544E12, 4195.0], [1.65206706E12, 15586.0], [1.65206526E12, 2628.0], [1.65206748E12, 13595.0], [1.65206586E12, 12002.0], [1.65206808E12, 9607.0], [1.65206724E12, 14951.0], [1.65206502E12, 1209.0], [1.65206562E12, 7408.0], [1.65206784E12, 15703.0], [1.65206604E12, 13934.0], [1.65206766E12, 15190.0], [1.65206664E12, 17513.0], [1.6520655E12, 5720.0], [1.65206772E12, 16132.0], [1.6520661E12, 16152.0], [1.65206814E12, 6382.0], [1.65206652E12, 15271.0], [1.65206712E12, 14815.0], [1.6520679E12, 13103.0], [1.65206628E12, 16401.0], [1.65206688E12, 17019.0], [1.65206508E12, 1227.0], [1.6520667E12, 16675.0], [1.65206568E12, 6204.0], [1.6520673E12, 14473.0], [1.65206676E12, 16400.0], [1.65206514E12, 1725.0], [1.65206736E12, 14413.0], [1.65206556E12, 6848.0], [1.65206718E12, 14020.0], [1.65206778E12, 16066.0], [1.65206616E12, 17796.0], [1.65206532E12, 3214.0], [1.65206694E12, 16579.0], [1.65206592E12, 12186.0], [1.65206754E12, 14253.0], [1.65206574E12, 6489.0], [1.65206796E12, 14975.0], [1.65206634E12, 16081.0], [1.6520658E12, 9399.0], [1.65206742E12, 14656.0], [1.65206802E12, 10749.0], [1.6520664E12, 12991.0], [1.65206622E12, 17592.0], [1.6520652E12, 2510.0], [1.65206682E12, 18024.0], [1.65206598E12, 11548.0], [1.6520682E12, 3049.0], [1.65206658E12, 16579.0], [1.652067E12, 16934.0], [1.65206538E12, 4531.0], [1.6520676E12, 15305.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65206646E12, 10987.000000000002], [1.65206544E12, 3118.2000000000003], [1.65206706E12, 12240.600000000004], [1.65206526E12, 1684.6000000000001], [1.65206748E12, 10794.0], [1.65206586E12, 8721.000000000002], [1.65206808E12, 7163.5], [1.65206724E12, 12472.800000000001], [1.65206502E12, 943.6], [1.65206562E12, 5527.5], [1.65206784E12, 13196.4], [1.65206604E12, 10552.6], [1.65206766E12, 12600.200000000006], [1.65206664E12, 13717.400000000001], [1.6520655E12, 4260.1], [1.65206772E12, 12494.100000000002], [1.6520661E12, 11953.8], [1.65206814E12, 3776.6000000000045], [1.65206652E12, 11552.0], [1.65206712E12, 11221.600000000002], [1.6520679E12, 10643.200000000003], [1.65206628E12, 13319.4], [1.65206688E12, 13596.5], [1.65206508E12, 907.4], [1.6520667E12, 12870.6], [1.65206568E12, 4733.6], [1.6520673E12, 11339.5], [1.65206676E12, 12869.599999999999], [1.65206514E12, 1180.1000000000001], [1.65206736E12, 11413.800000000005], [1.65206556E12, 4733.800000000002], [1.65206718E12, 10749.299999999997], [1.65206778E12, 12813.000000000002], [1.65206616E12, 14233.2], [1.65206532E12, 2386.4], [1.65206694E12, 12389.800000000001], [1.65206592E12, 9558.500000000002], [1.65206754E12, 11120.199999999999], [1.65206574E12, 5261.300000000002], [1.65206796E12, 9912.0], [1.65206634E12, 12243.899999999998], [1.6520658E12, 6460.0], [1.65206742E12, 11847.599999999999], [1.65206802E12, 8676.399999999998], [1.6520664E12, 10898.800000000001], [1.65206622E12, 13487.600000000002], [1.6520652E12, 1655.9], [1.65206682E12, 14443.200000000004], [1.65206598E12, 9275.200000000006], [1.6520682E12, 2745.0000000000005], [1.65206658E12, 12667.000000000004], [1.652067E12, 13602.600000000006], [1.65206538E12, 2863.200000000002], [1.6520676E12, 11896.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65206646E12, 13770.209999999992], [1.65206544E12, 4188.28], [1.65206706E12, 15316.299999999994], [1.65206526E12, 2524.039999999998], [1.65206748E12, 13349.699999999995], [1.65206586E12, 11515.95999999999], [1.65206808E12, 9458.499999999996], [1.65206724E12, 14928.38], [1.65206502E12, 1209.0], [1.65206562E12, 7352.449999999999], [1.65206784E12, 15665.48], [1.65206604E12, 13795.379999999997], [1.65206766E12, 15132.579999999998], [1.65206664E12, 17333.8], [1.6520655E12, 5604.8600000000015], [1.65206772E12, 15854.410000000003], [1.6520661E12, 15140.040000000015], [1.65206814E12, 6264.34], [1.65206652E12, 14928.899999999992], [1.65206712E12, 14420.32999999999], [1.6520679E12, 12956.259999999997], [1.65206628E12, 16128.399999999994], [1.65206688E12, 16828.149999999998], [1.65206508E12, 1227.0], [1.6520667E12, 16277.020000000006], [1.65206568E12, 5889.930000000004], [1.6520673E12, 13915.449999999997], [1.65206676E12, 16249.880000000003], [1.65206514E12, 1712.0800000000002], [1.65206736E12, 14348.02], [1.65206556E12, 6790.579999999999], [1.65206718E12, 13642.399999999998], [1.65206778E12, 15836.290000000003], [1.65206616E12, 17696.04], [1.65206532E12, 3182.08], [1.65206694E12, 15963.619999999986], [1.65206592E12, 11955.150000000003], [1.65206754E12, 14011.099999999999], [1.65206574E12, 6421.740000000001], [1.65206796E12, 14397.0], [1.65206634E12, 15672.129999999997], [1.6520658E12, 9182.400000000001], [1.65206742E12, 14422.180000000004], [1.65206802E12, 10684.69], [1.6520664E12, 12814.039999999999], [1.65206622E12, 17348.610000000004], [1.6520652E12, 2466.9499999999985], [1.65206682E12, 17853.570000000003], [1.65206598E12, 11413.439999999997], [1.6520682E12, 3049.0], [1.65206658E12, 15923.799999999987], [1.652067E12, 16728.080000000005], [1.65206538E12, 4366.7], [1.6520676E12, 15145.499999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65206646E12, 12334.6], [1.65206544E12, 3405.1999999999966], [1.65206706E12, 13721.9], [1.65206526E12, 1983.5999999999979], [1.65206748E12, 12522.75], [1.65206586E12, 10083.599999999999], [1.65206808E12, 8369.0], [1.65206724E12, 13968.499999999998], [1.65206502E12, 1135.4999999999998], [1.65206562E12, 6039.25], [1.65206784E12, 14028.199999999997], [1.65206604E12, 11597.699999999999], [1.65206766E12, 13840.3], [1.65206664E12, 15436.4], [1.6520655E12, 5039.200000000001], [1.65206772E12, 13776.750000000002], [1.6520661E12, 13253.999999999998], [1.65206814E12, 4953.05], [1.65206652E12, 13094.5], [1.65206712E12, 12889.9], [1.6520679E12, 11982.6], [1.65206628E12, 14741.8], [1.65206688E12, 15120.0], [1.65206508E12, 976.1999999999999], [1.6520667E12, 14304.799999999987], [1.65206568E12, 5029.250000000001], [1.6520673E12, 12716.249999999998], [1.65206676E12, 14063.099999999999], [1.65206514E12, 1277.4499999999996], [1.65206736E12, 12537.65], [1.65206556E12, 5513.2], [1.65206718E12, 12010.25], [1.65206778E12, 14254.150000000001], [1.65206616E12, 15773.899999999998], [1.65206532E12, 2703.9999999999995], [1.65206694E12, 13785.399999999998], [1.65206592E12, 10851.65], [1.65206754E12, 12529.85], [1.65206574E12, 6007.75], [1.65206796E12, 11161.5], [1.65206634E12, 13911.549999999997], [1.6520658E12, 7693.0], [1.65206742E12, 12928.299999999996], [1.65206802E12, 9714.0], [1.6520664E12, 11812.599999999999], [1.65206622E12, 15583.900000000001], [1.6520652E12, 1807.55], [1.65206682E12, 16241.95], [1.65206598E12, 10593.3], [1.6520682E12, 3009.1], [1.65206658E12, 13872.000000000002], [1.652067E12, 14600.0], [1.65206538E12, 3616.149999999999], [1.6520676E12, 13791.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65206646E12, 852.0], [1.65206544E12, 742.0], [1.65206706E12, 870.0], [1.65206526E12, 592.0], [1.65206748E12, 1009.0], [1.65206586E12, 629.0], [1.65206808E12, 972.0], [1.65206724E12, 928.0], [1.65206502E12, 795.0], [1.65206562E12, 811.0], [1.65206784E12, 1009.0], [1.65206604E12, 841.0], [1.65206766E12, 838.0], [1.65206664E12, 1009.0], [1.6520655E12, 792.0], [1.65206772E12, 931.0], [1.6520661E12, 1031.0], [1.65206814E12, 813.0], [1.65206652E12, 984.0], [1.65206712E12, 959.0], [1.6520679E12, 797.0], [1.65206628E12, 903.0], [1.65206688E12, 940.0], [1.65206508E12, 782.0], [1.6520667E12, 879.0], [1.65206568E12, 746.0], [1.6520673E12, 938.0], [1.65206676E12, 977.0], [1.65206514E12, 636.0], [1.65206736E12, 1007.0], [1.65206556E12, 836.0], [1.65206718E12, 827.0], [1.65206778E12, 964.0], [1.65206616E12, 580.0], [1.65206532E12, 618.0], [1.65206694E12, 876.0], [1.65206592E12, 831.0], [1.65206754E12, 819.0], [1.65206574E12, 1049.0], [1.65206796E12, 982.0], [1.65206634E12, 885.0], [1.6520658E12, 914.0], [1.65206742E12, 983.0], [1.65206802E12, 1074.0], [1.6520664E12, 1039.0], [1.65206622E12, 842.0], [1.6520652E12, 593.0], [1.65206682E12, 797.0], [1.65206598E12, 870.0], [1.6520682E12, 786.0], [1.65206658E12, 976.0], [1.652067E12, 882.0], [1.65206538E12, 600.0], [1.6520676E12, 958.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65206646E12, 4402.0], [1.65206544E12, 1674.0], [1.65206706E12, 4016.0], [1.65206526E12, 1151.0], [1.65206748E12, 4791.0], [1.65206586E12, 2256.0], [1.65206808E12, 3682.5], [1.65206724E12, 4086.0], [1.65206502E12, 839.0], [1.65206562E12, 2167.5], [1.65206784E12, 3823.0], [1.65206604E12, 2959.0], [1.65206766E12, 3621.0], [1.65206664E12, 3114.0], [1.6520655E12, 1694.0], [1.65206772E12, 3570.0], [1.6520661E12, 2529.0], [1.65206814E12, 1583.0], [1.65206652E12, 4373.0], [1.65206712E12, 4372.5], [1.6520679E12, 4708.0], [1.65206628E12, 3417.0], [1.65206688E12, 3036.5], [1.65206508E12, 823.0], [1.6520667E12, 3770.0], [1.65206568E12, 3037.0], [1.6520673E12, 4393.5], [1.65206676E12, 3993.0], [1.65206514E12, 867.0], [1.65206736E12, 4251.5], [1.65206556E12, 1733.0], [1.65206718E12, 4491.0], [1.65206778E12, 3599.5], [1.65206616E12, 2335.5], [1.65206532E12, 1348.0], [1.65206694E12, 3691.0], [1.65206592E12, 2458.5], [1.65206754E12, 4536.0], [1.65206574E12, 3245.5], [1.65206796E12, 5443.0], [1.65206634E12, 3986.0], [1.6520658E12, 2781.0], [1.65206742E12, 4596.0], [1.65206802E12, 5288.5], [1.6520664E12, 4721.0], [1.65206622E12, 2445.5], [1.6520652E12, 1092.0], [1.65206682E12, 2404.0], [1.65206598E12, 2979.0], [1.6520682E12, 1332.0], [1.65206658E12, 4028.0], [1.652067E12, 3817.0], [1.65206538E12, 1467.5], [1.6520676E12, 4004.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6520682E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 842.0, "minX": 1.0, "maxY": 3551.5, "series": [{"data": [[1.0, 842.0], [2.0, 2959.0], [4.0, 3551.5], [3.0, 3101.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 842.0, "minX": 1.0, "maxY": 3551.5, "series": [{"data": [[1.0, 842.0], [2.0, 2959.0], [4.0, 3551.5], [3.0, 3101.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.65206502E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.65206646E12, 2.6666666666666665], [1.65206544E12, 2.5833333333333335], [1.65206706E12, 2.6166666666666667], [1.65206526E12, 2.4166666666666665], [1.65206748E12, 2.566666666666667], [1.65206586E12, 2.6333333333333333], [1.65206808E12, 2.4833333333333334], [1.65206724E12, 2.6166666666666667], [1.65206502E12, 0.43333333333333335], [1.65206562E12, 2.566666666666667], [1.65206784E12, 2.5833333333333335], [1.65206604E12, 2.6333333333333333], [1.65206766E12, 2.6166666666666667], [1.65206664E12, 2.5833333333333335], [1.6520655E12, 2.6166666666666667], [1.65206772E12, 2.6], [1.6520661E12, 2.566666666666667], [1.65206814E12, 2.45], [1.65206652E12, 2.566666666666667], [1.65206712E12, 2.6666666666666665], [1.6520679E12, 2.6166666666666667], [1.65206628E12, 2.6166666666666667], [1.65206688E12, 2.566666666666667], [1.65206508E12, 1.1833333333333333], [1.6520667E12, 2.55], [1.65206568E12, 2.6166666666666667], [1.6520673E12, 2.6333333333333333], [1.65206676E12, 2.55], [1.65206514E12, 1.9833333333333334], [1.65206736E12, 2.6], [1.65206556E12, 2.6333333333333333], [1.65206718E12, 2.6333333333333333], [1.65206778E12, 2.6], [1.65206616E12, 2.5], [1.65206532E12, 2.6], [1.65206694E12, 2.6166666666666667], [1.65206592E12, 2.6166666666666667], [1.65206754E12, 2.6333333333333333], [1.65206574E12, 2.6166666666666667], [1.65206796E12, 2.4833333333333334], [1.65206634E12, 2.6333333333333333], [1.6520658E12, 2.65], [1.65206742E12, 2.55], [1.65206802E12, 2.6333333333333333], [1.6520664E12, 2.5833333333333335], [1.65206622E12, 2.6166666666666667], [1.6520652E12, 2.0166666666666666], [1.65206682E12, 2.6], [1.65206598E12, 2.6166666666666667], [1.6520682E12, 0.35], [1.65206658E12, 2.5166666666666666], [1.652067E12, 2.45], [1.65206538E12, 2.55], [1.6520676E12, 2.6166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6520682E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.65206502E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.65206646E12, 2.6666666666666665], [1.65206544E12, 2.5833333333333335], [1.65206706E12, 2.6166666666666667], [1.65206526E12, 2.4166666666666665], [1.65206748E12, 2.566666666666667], [1.65206586E12, 2.6166666666666667], [1.65206808E12, 2.566666666666667], [1.65206724E12, 2.6166666666666667], [1.65206502E12, 0.4166666666666667], [1.65206562E12, 2.566666666666667], [1.65206784E12, 2.5833333333333335], [1.65206604E12, 2.6166666666666667], [1.65206766E12, 2.6166666666666667], [1.65206664E12, 2.5833333333333335], [1.6520655E12, 2.6], [1.65206772E12, 2.6], [1.6520661E12, 2.55], [1.65206814E12, 2.533333333333333], [1.65206652E12, 2.566666666666667], [1.65206712E12, 2.6666666666666665], [1.6520679E12, 2.6166666666666667], [1.65206628E12, 2.6166666666666667], [1.65206688E12, 2.566666666666667], [1.65206508E12, 1.1833333333333333], [1.6520667E12, 2.55], [1.65206568E12, 2.6], [1.6520673E12, 2.6333333333333333], [1.65206676E12, 2.55], [1.65206514E12, 1.9666666666666666], [1.65206736E12, 2.6], [1.65206556E12, 2.6166666666666667], [1.65206718E12, 2.6333333333333333], [1.65206778E12, 2.6], [1.65206616E12, 2.5], [1.65206532E12, 2.5833333333333335], [1.65206694E12, 2.6166666666666667], [1.65206592E12, 2.6], [1.65206754E12, 2.6333333333333333], [1.65206574E12, 2.6], [1.65206796E12, 2.4833333333333334], [1.65206634E12, 2.6333333333333333], [1.6520658E12, 2.65], [1.65206742E12, 2.55], [1.65206802E12, 2.6333333333333333], [1.6520664E12, 2.5833333333333335], [1.65206622E12, 2.6], [1.6520652E12, 2.0], [1.65206682E12, 2.6], [1.65206598E12, 2.6166666666666667], [1.6520682E12, 0.4166666666666667], [1.65206658E12, 2.5166666666666666], [1.652067E12, 2.45], [1.65206538E12, 2.533333333333333], [1.6520676E12, 2.6166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6520682E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.65206502E12, "maxY": 1.3666666666666667, "series": [{"data": [[1.65206646E12, 1.3333333333333333], [1.65206544E12, 1.2666666666666666], [1.65206706E12, 1.3333333333333333], [1.65206526E12, 1.2166666666666666], [1.65206748E12, 1.3166666666666667], [1.65206586E12, 1.3], [1.65206808E12, 1.3], [1.65206724E12, 1.3], [1.65206502E12, 0.21666666666666667], [1.65206562E12, 1.2833333333333334], [1.65206784E12, 1.25], [1.65206604E12, 1.35], [1.65206766E12, 1.3333333333333333], [1.65206664E12, 1.25], [1.6520655E12, 1.3166666666666667], [1.65206772E12, 1.2833333333333334], [1.6520661E12, 1.2666666666666666], [1.65206814E12, 1.2666666666666666], [1.65206652E12, 1.3], [1.65206712E12, 1.3333333333333333], [1.6520679E12, 1.3333333333333333], [1.65206628E12, 1.2833333333333334], [1.65206688E12, 1.3166666666666667], [1.65206508E12, 0.5833333333333334], [1.6520667E12, 1.2833333333333334], [1.65206568E12, 1.2833333333333334], [1.6520673E12, 1.3166666666666667], [1.65206676E12, 1.2833333333333334], [1.65206514E12, 0.9833333333333333], [1.65206736E12, 1.3], [1.65206556E12, 1.3166666666666667], [1.65206718E12, 1.3166666666666667], [1.65206778E12, 1.3166666666666667], [1.65206616E12, 1.2333333333333334], [1.65206532E12, 1.3], [1.65206694E12, 1.2666666666666666], [1.65206592E12, 1.3], [1.65206754E12, 1.3333333333333333], [1.65206574E12, 1.3166666666666667], [1.65206796E12, 1.25], [1.65206634E12, 1.3333333333333333], [1.6520658E12, 1.3666666666666667], [1.65206742E12, 1.25], [1.65206802E12, 1.3166666666666667], [1.6520664E12, 1.2833333333333334], [1.65206622E12, 1.3166666666666667], [1.6520652E12, 1.0166666666666666], [1.65206682E12, 1.3], [1.65206598E12, 1.2833333333333334], [1.6520682E12, 0.21666666666666667], [1.65206658E12, 1.25], [1.652067E12, 1.2333333333333334], [1.65206538E12, 1.2666666666666666], [1.6520676E12, 1.2666666666666666]], "isOverall": false, "label": "smp-success", "isController": false}, {"data": [[1.65206646E12, 1.3333333333333333], [1.65206544E12, 1.3166666666666667], [1.65206706E12, 1.2833333333333334], [1.65206526E12, 1.2], [1.65206748E12, 1.25], [1.65206586E12, 1.3166666666666667], [1.65206808E12, 1.2666666666666666], [1.65206724E12, 1.3166666666666667], [1.65206502E12, 0.2], [1.65206562E12, 1.2833333333333334], [1.65206784E12, 1.3333333333333333], [1.65206604E12, 1.2666666666666666], [1.65206766E12, 1.2833333333333334], [1.65206664E12, 1.3333333333333333], [1.6520655E12, 1.2833333333333334], [1.65206772E12, 1.3166666666666667], [1.6520661E12, 1.2833333333333334], [1.65206814E12, 1.2666666666666666], [1.65206652E12, 1.2666666666666666], [1.65206712E12, 1.3333333333333333], [1.6520679E12, 1.2833333333333334], [1.65206628E12, 1.3333333333333333], [1.65206688E12, 1.25], [1.65206508E12, 0.6], [1.6520667E12, 1.2666666666666666], [1.65206568E12, 1.3166666666666667], [1.6520673E12, 1.3166666666666667], [1.65206676E12, 1.2666666666666666], [1.65206514E12, 0.9833333333333333], [1.65206736E12, 1.3], [1.65206556E12, 1.3], [1.65206718E12, 1.3166666666666667], [1.65206778E12, 1.2833333333333334], [1.65206616E12, 1.2666666666666666], [1.65206532E12, 1.2833333333333334], [1.65206694E12, 1.35], [1.65206592E12, 1.3], [1.65206754E12, 1.3], [1.65206574E12, 1.2833333333333334], [1.65206796E12, 1.2333333333333334], [1.65206634E12, 1.3], [1.6520658E12, 1.2833333333333334], [1.65206742E12, 1.3], [1.65206802E12, 1.3166666666666667], [1.6520664E12, 1.3], [1.65206622E12, 1.2833333333333334], [1.6520652E12, 0.9833333333333333], [1.65206682E12, 1.3], [1.65206598E12, 1.3333333333333333], [1.6520682E12, 0.2], [1.65206658E12, 1.2666666666666666], [1.652067E12, 1.2166666666666666], [1.65206538E12, 1.2666666666666666], [1.6520676E12, 1.35]], "isOverall": false, "label": "smp ex-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6520682E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.65206502E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.65206646E12, 2.6666666666666665], [1.65206544E12, 2.5833333333333335], [1.65206706E12, 2.6166666666666667], [1.65206526E12, 2.4166666666666665], [1.65206748E12, 2.566666666666667], [1.65206586E12, 2.6166666666666667], [1.65206808E12, 2.566666666666667], [1.65206724E12, 2.6166666666666667], [1.65206502E12, 0.4166666666666667], [1.65206562E12, 2.566666666666667], [1.65206784E12, 2.5833333333333335], [1.65206604E12, 2.6166666666666667], [1.65206766E12, 2.6166666666666667], [1.65206664E12, 2.5833333333333335], [1.6520655E12, 2.6], [1.65206772E12, 2.6], [1.6520661E12, 2.55], [1.65206814E12, 2.533333333333333], [1.65206652E12, 2.566666666666667], [1.65206712E12, 2.6666666666666665], [1.6520679E12, 2.6166666666666667], [1.65206628E12, 2.6166666666666667], [1.65206688E12, 2.566666666666667], [1.65206508E12, 1.1833333333333333], [1.6520667E12, 2.55], [1.65206568E12, 2.6], [1.6520673E12, 2.6333333333333333], [1.65206676E12, 2.55], [1.65206514E12, 1.9666666666666666], [1.65206736E12, 2.6], [1.65206556E12, 2.6166666666666667], [1.65206718E12, 2.6333333333333333], [1.65206778E12, 2.6], [1.65206616E12, 2.5], [1.65206532E12, 2.5833333333333335], [1.65206694E12, 2.6166666666666667], [1.65206592E12, 2.6], [1.65206754E12, 2.6333333333333333], [1.65206574E12, 2.6], [1.65206796E12, 2.4833333333333334], [1.65206634E12, 2.6333333333333333], [1.6520658E12, 2.65], [1.65206742E12, 2.55], [1.65206802E12, 2.6333333333333333], [1.6520664E12, 2.5833333333333335], [1.65206622E12, 2.6], [1.6520652E12, 2.0], [1.65206682E12, 2.6], [1.65206598E12, 2.6166666666666667], [1.6520682E12, 0.4166666666666667], [1.65206658E12, 2.5166666666666666], [1.652067E12, 2.45], [1.65206538E12, 2.533333333333333], [1.6520676E12, 2.6166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6520682E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}


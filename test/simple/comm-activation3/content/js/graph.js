/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 58256.0, "series": [{"data": [[0.0, 6.0], [0.1, 6.0], [0.2, 7.0], [0.3, 7.0], [0.4, 7.0], [0.5, 7.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 7.0], [1.4, 7.0], [1.5, 7.0], [1.6, 7.0], [1.7, 7.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 7.0], [2.3, 7.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 8.0], [4.0, 8.0], [4.1, 8.0], [4.2, 8.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 8.0], [7.5, 8.0], [7.6, 8.0], [7.7, 8.0], [7.8, 8.0], [7.9, 8.0], [8.0, 8.0], [8.1, 8.0], [8.2, 8.0], [8.3, 8.0], [8.4, 8.0], [8.5, 8.0], [8.6, 9.0], [8.7, 9.0], [8.8, 9.0], [8.9, 9.0], [9.0, 9.0], [9.1, 9.0], [9.2, 9.0], [9.3, 9.0], [9.4, 9.0], [9.5, 9.0], [9.6, 9.0], [9.7, 9.0], [9.8, 9.0], [9.9, 9.0], [10.0, 9.0], [10.1, 9.0], [10.2, 9.0], [10.3, 9.0], [10.4, 9.0], [10.5, 9.0], [10.6, 9.0], [10.7, 9.0], [10.8, 9.0], [10.9, 9.0], [11.0, 9.0], [11.1, 9.0], [11.2, 9.0], [11.3, 9.0], [11.4, 9.0], [11.5, 9.0], [11.6, 9.0], [11.7, 9.0], [11.8, 9.0], [11.9, 9.0], [12.0, 9.0], [12.1, 9.0], [12.2, 9.0], [12.3, 9.0], [12.4, 9.0], [12.5, 9.0], [12.6, 9.0], [12.7, 9.0], [12.8, 9.0], [12.9, 9.0], [13.0, 9.0], [13.1, 9.0], [13.2, 9.0], [13.3, 9.0], [13.4, 9.0], [13.5, 9.0], [13.6, 9.0], [13.7, 9.0], [13.8, 9.0], [13.9, 9.0], [14.0, 9.0], [14.1, 9.0], [14.2, 9.0], [14.3, 9.0], [14.4, 9.0], [14.5, 9.0], [14.6, 10.0], [14.7, 10.0], [14.8, 10.0], [14.9, 10.0], [15.0, 10.0], [15.1, 10.0], [15.2, 10.0], [15.3, 10.0], [15.4, 10.0], [15.5, 10.0], [15.6, 10.0], [15.7, 10.0], [15.8, 10.0], [15.9, 10.0], [16.0, 10.0], [16.1, 10.0], [16.2, 10.0], [16.3, 10.0], [16.4, 10.0], [16.5, 10.0], [16.6, 10.0], [16.7, 10.0], [16.8, 10.0], [16.9, 10.0], [17.0, 10.0], [17.1, 10.0], [17.2, 10.0], [17.3, 10.0], [17.4, 10.0], [17.5, 10.0], [17.6, 10.0], [17.7, 10.0], [17.8, 10.0], [17.9, 10.0], [18.0, 10.0], [18.1, 10.0], [18.2, 10.0], [18.3, 10.0], [18.4, 10.0], [18.5, 10.0], [18.6, 10.0], [18.7, 10.0], [18.8, 10.0], [18.9, 10.0], [19.0, 10.0], [19.1, 10.0], [19.2, 10.0], [19.3, 10.0], [19.4, 10.0], [19.5, 10.0], [19.6, 10.0], [19.7, 10.0], [19.8, 10.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 11.0], [20.6, 11.0], [20.7, 11.0], [20.8, 11.0], [20.9, 11.0], [21.0, 11.0], [21.1, 11.0], [21.2, 11.0], [21.3, 11.0], [21.4, 11.0], [21.5, 11.0], [21.6, 11.0], [21.7, 11.0], [21.8, 11.0], [21.9, 11.0], [22.0, 11.0], [22.1, 11.0], [22.2, 11.0], [22.3, 11.0], [22.4, 11.0], [22.5, 11.0], [22.6, 11.0], [22.7, 11.0], [22.8, 11.0], [22.9, 11.0], [23.0, 11.0], [23.1, 11.0], [23.2, 11.0], [23.3, 11.0], [23.4, 11.0], [23.5, 11.0], [23.6, 11.0], [23.7, 11.0], [23.8, 11.0], [23.9, 11.0], [24.0, 11.0], [24.1, 11.0], [24.2, 11.0], [24.3, 11.0], [24.4, 11.0], [24.5, 11.0], [24.6, 11.0], [24.7, 11.0], [24.8, 11.0], [24.9, 11.0], [25.0, 11.0], [25.1, 11.0], [25.2, 12.0], [25.3, 12.0], [25.4, 12.0], [25.5, 12.0], [25.6, 12.0], [25.7, 12.0], [25.8, 12.0], [25.9, 12.0], [26.0, 12.0], [26.1, 12.0], [26.2, 12.0], [26.3, 12.0], [26.4, 12.0], [26.5, 12.0], [26.6, 12.0], [26.7, 12.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 13.0], [27.2, 13.0], [27.3, 13.0], [27.4, 13.0], [27.5, 13.0], [27.6, 13.0], [27.7, 13.0], [27.8, 13.0], [27.9, 13.0], [28.0, 13.0], [28.1, 14.0], [28.2, 14.0], [28.3, 14.0], [28.4, 14.0], [28.5, 14.0], [28.6, 14.0], [28.7, 14.0], [28.8, 15.0], [28.9, 15.0], [29.0, 15.0], [29.1, 15.0], [29.2, 15.0], [29.3, 15.0], [29.4, 16.0], [29.5, 16.0], [29.6, 16.0], [29.7, 16.0], [29.8, 17.0], [29.9, 17.0], [30.0, 17.0], [30.1, 17.0], [30.2, 17.0], [30.3, 18.0], [30.4, 18.0], [30.5, 18.0], [30.6, 18.0], [30.7, 18.0], [30.8, 19.0], [30.9, 19.0], [31.0, 19.0], [31.1, 19.0], [31.2, 19.0], [31.3, 23.0], [31.4, 23.0], [31.5, 24.0], [31.6, 27.0], [31.7, 32.0], [31.8, 32.0], [31.9, 734.0], [32.0, 786.0], [32.1, 846.0], [32.2, 878.0], [32.3, 920.0], [32.4, 936.0], [32.5, 965.0], [32.6, 1000.0], [32.7, 1067.0], [32.8, 1074.0], [32.9, 1110.0], [33.0, 1161.0], [33.1, 1169.0], [33.2, 1170.0], [33.3, 1170.0], [33.4, 1173.0], [33.5, 1197.0], [33.6, 1214.0], [33.7, 1219.0], [33.8, 1222.0], [33.9, 1271.0], [34.0, 1295.0], [34.1, 1357.0], [34.2, 1358.0], [34.3, 1363.0], [34.4, 1376.0], [34.5, 1390.0], [34.6, 1397.0], [34.7, 1419.0], [34.8, 1423.0], [34.9, 1427.0], [35.0, 1484.0], [35.1, 1492.0], [35.2, 1506.0], [35.3, 1544.0], [35.4, 1551.0], [35.5, 1585.0], [35.6, 1587.0], [35.7, 1635.0], [35.8, 1640.0], [35.9, 1642.0], [36.0, 1659.0], [36.1, 1699.0], [36.2, 1707.0], [36.3, 1742.0], [36.4, 1761.0], [36.5, 1809.0], [36.6, 1885.0], [36.7, 1926.0], [36.8, 1947.0], [36.9, 1988.0], [37.0, 1989.0], [37.1, 2047.0], [37.2, 2076.0], [37.3, 2082.0], [37.4, 2091.0], [37.5, 2119.0], [37.6, 2134.0], [37.7, 2170.0], [37.8, 2208.0], [37.9, 2248.0], [38.0, 2317.0], [38.1, 2321.0], [38.2, 2335.0], [38.3, 2348.0], [38.4, 2355.0], [38.5, 2359.0], [38.6, 2370.0], [38.7, 2514.0], [38.8, 2514.0], [38.9, 2515.0], [39.0, 2548.0], [39.1, 2610.0], [39.2, 2614.0], [39.3, 2634.0], [39.4, 2669.0], [39.5, 2678.0], [39.6, 2715.0], [39.7, 2799.0], [39.8, 2818.0], [39.9, 2843.0], [40.0, 2869.0], [40.1, 2888.0], [40.2, 2938.0], [40.3, 2945.0], [40.4, 2970.0], [40.5, 2981.0], [40.6, 2985.0], [40.7, 3053.0], [40.8, 3109.0], [40.9, 3146.0], [41.0, 3324.0], [41.1, 3333.0], [41.2, 3336.0], [41.3, 3341.0], [41.4, 3347.0], [41.5, 3464.0], [41.6, 3535.0], [41.7, 3550.0], [41.8, 3573.0], [41.9, 3581.0], [42.0, 3594.0], [42.1, 3598.0], [42.2, 3604.0], [42.3, 3608.0], [42.4, 3617.0], [42.5, 3690.0], [42.6, 3737.0], [42.7, 3754.0], [42.8, 3759.0], [42.9, 3776.0], [43.0, 3782.0], [43.1, 3854.0], [43.2, 3897.0], [43.3, 3924.0], [43.4, 3928.0], [43.5, 3929.0], [43.6, 3941.0], [43.7, 3944.0], [43.8, 3977.0], [43.9, 3986.0], [44.0, 4089.0], [44.1, 4104.0], [44.2, 4123.0], [44.3, 4150.0], [44.4, 4188.0], [44.5, 4299.0], [44.6, 4323.0], [44.7, 4350.0], [44.8, 4367.0], [44.9, 4409.0], [45.0, 4413.0], [45.1, 4437.0], [45.2, 4447.0], [45.3, 4479.0], [45.4, 4503.0], [45.5, 4594.0], [45.6, 4631.0], [45.7, 4641.0], [45.8, 4685.0], [45.9, 4688.0], [46.0, 4690.0], [46.1, 4742.0], [46.2, 4748.0], [46.3, 4804.0], [46.4, 4832.0], [46.5, 4907.0], [46.6, 4935.0], [46.7, 5002.0], [46.8, 5205.0], [46.9, 5229.0], [47.0, 5268.0], [47.1, 5283.0], [47.2, 5322.0], [47.3, 5340.0], [47.4, 5358.0], [47.5, 5360.0], [47.6, 5361.0], [47.7, 5365.0], [47.8, 5404.0], [47.9, 5412.0], [48.0, 5446.0], [48.1, 5466.0], [48.2, 5480.0], [48.3, 5493.0], [48.4, 5534.0], [48.5, 5600.0], [48.6, 5656.0], [48.7, 5722.0], [48.8, 5737.0], [48.9, 5749.0], [49.0, 5753.0], [49.1, 5789.0], [49.2, 5844.0], [49.3, 5882.0], [49.4, 5924.0], [49.5, 6011.0], [49.6, 6018.0], [49.7, 6030.0], [49.8, 6059.0], [49.9, 6073.0], [50.0, 6089.0], [50.1, 6189.0], [50.2, 6201.0], [50.3, 6245.0], [50.4, 6263.0], [50.5, 6271.0], [50.6, 6323.0], [50.7, 6367.0], [50.8, 6485.0], [50.9, 6517.0], [51.0, 6562.0], [51.1, 6564.0], [51.2, 6575.0], [51.3, 6608.0], [51.4, 6694.0], [51.5, 6871.0], [51.6, 6940.0], [51.7, 6944.0], [51.8, 7025.0], [51.9, 7026.0], [52.0, 7038.0], [52.1, 7070.0], [52.2, 7191.0], [52.3, 7239.0], [52.4, 7260.0], [52.5, 7333.0], [52.6, 7398.0], [52.7, 7413.0], [52.8, 7480.0], [52.9, 7492.0], [53.0, 7514.0], [53.1, 7551.0], [53.2, 7605.0], [53.3, 7654.0], [53.4, 7683.0], [53.5, 7696.0], [53.6, 7719.0], [53.7, 7815.0], [53.8, 7854.0], [53.9, 7857.0], [54.0, 7888.0], [54.1, 7908.0], [54.2, 8031.0], [54.3, 8141.0], [54.4, 8147.0], [54.5, 8170.0], [54.6, 8252.0], [54.7, 8321.0], [54.8, 8337.0], [54.9, 8370.0], [55.0, 8442.0], [55.1, 8501.0], [55.2, 8545.0], [55.3, 8548.0], [55.4, 8710.0], [55.5, 8758.0], [55.6, 8785.0], [55.7, 8812.0], [55.8, 8914.0], [55.9, 8941.0], [56.0, 8969.0], [56.1, 9126.0], [56.2, 9158.0], [56.3, 9163.0], [56.4, 9210.0], [56.5, 9273.0], [56.6, 9292.0], [56.7, 9303.0], [56.8, 9318.0], [56.9, 9411.0], [57.0, 9421.0], [57.1, 9524.0], [57.2, 9614.0], [57.3, 9654.0], [57.4, 9657.0], [57.5, 9768.0], [57.6, 9826.0], [57.7, 9885.0], [57.8, 9904.0], [57.9, 9969.0], [58.0, 10035.0], [58.1, 10053.0], [58.2, 10089.0], [58.3, 10125.0], [58.4, 10257.0], [58.5, 10290.0], [58.6, 10290.0], [58.7, 10302.0], [58.8, 10320.0], [58.9, 10393.0], [59.0, 10478.0], [59.1, 10598.0], [59.2, 10618.0], [59.3, 10697.0], [59.4, 10732.0], [59.5, 10748.0], [59.6, 10748.0], [59.7, 10780.0], [59.8, 10893.0], [59.9, 10968.0], [60.0, 11033.0], [60.1, 11071.0], [60.2, 11111.0], [60.3, 11126.0], [60.4, 11136.0], [60.5, 11137.0], [60.6, 11174.0], [60.7, 11404.0], [60.8, 11443.0], [60.9, 11447.0], [61.0, 11461.0], [61.1, 11531.0], [61.2, 11540.0], [61.3, 11550.0], [61.4, 11638.0], [61.5, 11643.0], [61.6, 11709.0], [61.7, 11749.0], [61.8, 11847.0], [61.9, 11851.0], [62.0, 11852.0], [62.1, 11948.0], [62.2, 11994.0], [62.3, 12002.0], [62.4, 12079.0], [62.5, 12160.0], [62.6, 12170.0], [62.7, 12318.0], [62.8, 12382.0], [62.9, 12434.0], [63.0, 12566.0], [63.1, 12584.0], [63.2, 12599.0], [63.3, 12623.0], [63.4, 12679.0], [63.5, 12717.0], [63.6, 12734.0], [63.7, 12828.0], [63.8, 12926.0], [63.9, 12945.0], [64.0, 12967.0], [64.1, 13160.0], [64.2, 13241.0], [64.3, 13360.0], [64.4, 13418.0], [64.5, 13430.0], [64.6, 13547.0], [64.7, 13727.0], [64.8, 13776.0], [64.9, 13794.0], [65.0, 13834.0], [65.1, 13844.0], [65.2, 14035.0], [65.3, 14091.0], [65.4, 14119.0], [65.5, 14137.0], [65.6, 14148.0], [65.7, 14150.0], [65.8, 14170.0], [65.9, 14232.0], [66.0, 14257.0], [66.1, 14408.0], [66.2, 14471.0], [66.3, 14487.0], [66.4, 14580.0], [66.5, 14628.0], [66.6, 14629.0], [66.7, 14638.0], [66.8, 14739.0], [66.9, 14871.0], [67.0, 14901.0], [67.1, 14962.0], [67.2, 14965.0], [67.3, 15090.0], [67.4, 15119.0], [67.5, 15244.0], [67.6, 15308.0], [67.7, 15378.0], [67.8, 15387.0], [67.9, 15559.0], [68.0, 15651.0], [68.1, 15661.0], [68.2, 15973.0], [68.3, 15989.0], [68.4, 16057.0], [68.5, 16092.0], [68.6, 16130.0], [68.7, 16134.0], [68.8, 16193.0], [68.9, 16211.0], [69.0, 16235.0], [69.1, 16367.0], [69.2, 16435.0], [69.3, 16573.0], [69.4, 16704.0], [69.5, 16820.0], [69.6, 16847.0], [69.7, 16970.0], [69.8, 17031.0], [69.9, 17040.0], [70.0, 17060.0], [70.1, 17214.0], [70.2, 17225.0], [70.3, 17231.0], [70.4, 17257.0], [70.5, 17267.0], [70.6, 17352.0], [70.7, 17408.0], [70.8, 17456.0], [70.9, 17515.0], [71.0, 17515.0], [71.1, 17642.0], [71.2, 17656.0], [71.3, 17880.0], [71.4, 17894.0], [71.5, 17910.0], [71.6, 17926.0], [71.7, 18067.0], [71.8, 18120.0], [71.9, 18171.0], [72.0, 18287.0], [72.1, 18399.0], [72.2, 18403.0], [72.3, 18414.0], [72.4, 18550.0], [72.5, 18848.0], [72.6, 18849.0], [72.7, 18875.0], [72.8, 19017.0], [72.9, 19072.0], [73.0, 19077.0], [73.1, 19226.0], [73.2, 19263.0], [73.3, 19280.0], [73.4, 19346.0], [73.5, 19385.0], [73.6, 19521.0], [73.7, 19532.0], [73.8, 19601.0], [73.9, 19740.0], [74.0, 19743.0], [74.1, 19786.0], [74.2, 19840.0], [74.3, 20227.0], [74.4, 20242.0], [74.5, 20296.0], [74.6, 20329.0], [74.7, 20524.0], [74.8, 20548.0], [74.9, 20592.0], [75.0, 20767.0], [75.1, 20778.0], [75.2, 20796.0], [75.3, 20822.0], [75.4, 20847.0], [75.5, 20924.0], [75.6, 20954.0], [75.7, 20987.0], [75.8, 21217.0], [75.9, 21331.0], [76.0, 21392.0], [76.1, 21395.0], [76.2, 21571.0], [76.3, 21606.0], [76.4, 21733.0], [76.5, 21860.0], [76.6, 21965.0], [76.7, 22009.0], [76.8, 22029.0], [76.9, 22105.0], [77.0, 22170.0], [77.1, 22352.0], [77.2, 22354.0], [77.3, 22538.0], [77.4, 22545.0], [77.5, 22667.0], [77.6, 22669.0], [77.7, 22685.0], [77.8, 22754.0], [77.9, 22837.0], [78.0, 22880.0], [78.1, 23074.0], [78.2, 23151.0], [78.3, 23166.0], [78.4, 23182.0], [78.5, 23412.0], [78.6, 23473.0], [78.7, 23478.0], [78.8, 23635.0], [78.9, 23708.0], [79.0, 23790.0], [79.1, 23809.0], [79.2, 23853.0], [79.3, 23885.0], [79.4, 23950.0], [79.5, 24125.0], [79.6, 24433.0], [79.7, 24532.0], [79.8, 24583.0], [79.9, 24592.0], [80.0, 24663.0], [80.1, 24743.0], [80.2, 24861.0], [80.3, 24925.0], [80.4, 24958.0], [80.5, 25023.0], [80.6, 25045.0], [80.7, 25060.0], [80.8, 25291.0], [80.9, 25310.0], [81.0, 25373.0], [81.1, 25494.0], [81.2, 25923.0], [81.3, 26085.0], [81.4, 26094.0], [81.5, 26099.0], [81.6, 26111.0], [81.7, 26120.0], [81.8, 26161.0], [81.9, 26239.0], [82.0, 26268.0], [82.1, 26271.0], [82.2, 26340.0], [82.3, 26371.0], [82.4, 26512.0], [82.5, 26673.0], [82.6, 27009.0], [82.7, 27146.0], [82.8, 27267.0], [82.9, 27285.0], [83.0, 27313.0], [83.1, 27487.0], [83.2, 27583.0], [83.3, 27601.0], [83.4, 27700.0], [83.5, 27713.0], [83.6, 27715.0], [83.7, 27900.0], [83.8, 28054.0], [83.9, 28165.0], [84.0, 28216.0], [84.1, 28377.0], [84.2, 28416.0], [84.3, 28545.0], [84.4, 28644.0], [84.5, 28738.0], [84.6, 28909.0], [84.7, 28911.0], [84.8, 28974.0], [84.9, 29091.0], [85.0, 29220.0], [85.1, 29241.0], [85.2, 29247.0], [85.3, 29363.0], [85.4, 29592.0], [85.5, 29623.0], [85.6, 29649.0], [85.7, 30200.0], [85.8, 30249.0], [85.9, 30297.0], [86.0, 30481.0], [86.1, 30527.0], [86.2, 30626.0], [86.3, 30788.0], [86.4, 31013.0], [86.5, 31087.0], [86.6, 31120.0], [86.7, 31511.0], [86.8, 31539.0], [86.9, 31642.0], [87.0, 31678.0], [87.1, 31703.0], [87.2, 32051.0], [87.3, 32070.0], [87.4, 32122.0], [87.5, 32352.0], [87.6, 32361.0], [87.7, 32497.0], [87.8, 32689.0], [87.9, 32908.0], [88.0, 32919.0], [88.1, 32989.0], [88.2, 33061.0], [88.3, 33389.0], [88.4, 33501.0], [88.5, 33536.0], [88.6, 33616.0], [88.7, 33992.0], [88.8, 34005.0], [88.9, 34289.0], [89.0, 34297.0], [89.1, 34333.0], [89.2, 34359.0], [89.3, 34569.0], [89.4, 34869.0], [89.5, 34911.0], [89.6, 35239.0], [89.7, 35244.0], [89.8, 35261.0], [89.9, 35274.0], [90.0, 35313.0], [90.1, 35316.0], [90.2, 35804.0], [90.3, 35810.0], [90.4, 35842.0], [90.5, 35863.0], [90.6, 36084.0], [90.7, 36136.0], [90.8, 36348.0], [90.9, 36450.0], [91.0, 36837.0], [91.1, 36888.0], [91.2, 36995.0], [91.3, 37033.0], [91.4, 37046.0], [91.5, 37233.0], [91.6, 37456.0], [91.7, 37593.0], [91.8, 37723.0], [91.9, 37733.0], [92.0, 37767.0], [92.1, 37934.0], [92.2, 37984.0], [92.3, 38012.0], [92.4, 38270.0], [92.5, 38557.0], [92.6, 38628.0], [92.7, 38815.0], [92.8, 38856.0], [92.9, 39012.0], [93.0, 39024.0], [93.1, 39430.0], [93.2, 39559.0], [93.3, 39638.0], [93.4, 39722.0], [93.5, 39822.0], [93.6, 39839.0], [93.7, 39958.0], [93.8, 40325.0], [93.9, 40521.0], [94.0, 40860.0], [94.1, 40979.0], [94.2, 41063.0], [94.3, 41166.0], [94.4, 41360.0], [94.5, 41402.0], [94.6, 41638.0], [94.7, 41985.0], [94.8, 42147.0], [94.9, 42153.0], [95.0, 42277.0], [95.1, 42383.0], [95.2, 42430.0], [95.3, 42747.0], [95.4, 42756.0], [95.5, 43140.0], [95.6, 43214.0], [95.7, 43750.0], [95.8, 43794.0], [95.9, 43870.0], [96.0, 43919.0], [96.1, 44038.0], [96.2, 44240.0], [96.3, 44395.0], [96.4, 44806.0], [96.5, 44873.0], [96.6, 44909.0], [96.7, 45046.0], [96.8, 45330.0], [96.9, 45358.0], [97.0, 45553.0], [97.1, 45988.0], [97.2, 46131.0], [97.3, 46696.0], [97.4, 46930.0], [97.5, 46973.0], [97.6, 47258.0], [97.7, 47314.0], [97.8, 48077.0], [97.9, 48300.0], [98.0, 48456.0], [98.1, 48927.0], [98.2, 48958.0], [98.3, 49217.0], [98.4, 49318.0], [98.5, 50052.0], [98.6, 50279.0], [98.7, 50630.0], [98.8, 50671.0], [98.9, 50786.0], [99.0, 50911.0], [99.1, 51242.0], [99.2, 51962.0], [99.3, 52341.0], [99.4, 52723.0], [99.5, 53025.0], [99.6, 53738.0], [99.7, 53743.0], [99.8, 54236.0], [99.9, 56842.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 361.0, "series": [{"data": [[0.0, 361.0], [32900.0, 3.0], [34500.0, 1.0], [33300.0, 1.0], [35300.0, 2.0], [34900.0, 1.0], [36100.0, 1.0], [37700.0, 3.0], [36900.0, 1.0], [38500.0, 1.0], [39700.0, 1.0], [40500.0, 1.0], [40900.0, 1.0], [41300.0, 1.0], [42100.0, 2.0], [41700.0, 1.0], [43700.0, 2.0], [44900.0, 1.0], [45300.0, 2.0], [46900.0, 2.0], [46100.0, 1.0], [48900.0, 2.0], [47300.0, 1.0], [49300.0, 1.0], [49700.0, 1.0], [50900.0, 1.0], [53700.0, 2.0], [700.0, 2.0], [800.0, 2.0], [900.0, 4.0], [1000.0, 3.0], [1100.0, 8.0], [1200.0, 5.0], [1300.0, 7.0], [1400.0, 6.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 3.0], [2300.0, 7.0], [2200.0, 3.0], [2400.0, 1.0], [2500.0, 4.0], [2600.0, 6.0], [2800.0, 4.0], [2700.0, 2.0], [2900.0, 6.0], [3000.0, 1.0], [3100.0, 3.0], [3300.0, 5.0], [3400.0, 1.0], [3500.0, 7.0], [3700.0, 5.0], [3600.0, 5.0], [3800.0, 3.0], [3900.0, 7.0], [4000.0, 2.0], [4300.0, 4.0], [4200.0, 1.0], [4100.0, 4.0], [4400.0, 5.0], [4600.0, 5.0], [4500.0, 3.0], [4800.0, 2.0], [4700.0, 3.0], [5000.0, 1.0], [4900.0, 2.0], [5300.0, 7.0], [5200.0, 5.0], [5400.0, 6.0], [5500.0, 2.0], [5600.0, 2.0], [5700.0, 5.0], [5800.0, 3.0], [6000.0, 6.0], [6100.0, 2.0], [5900.0, 1.0], [6300.0, 2.0], [6200.0, 4.0], [6500.0, 4.0], [6600.0, 2.0], [6400.0, 2.0], [6800.0, 2.0], [6900.0, 2.0], [7000.0, 4.0], [7100.0, 2.0], [7400.0, 3.0], [7200.0, 2.0], [7300.0, 2.0], [7500.0, 3.0], [7600.0, 4.0], [7700.0, 1.0], [7800.0, 5.0], [7900.0, 1.0], [8100.0, 3.0], [8000.0, 1.0], [8500.0, 3.0], [8200.0, 2.0], [8700.0, 3.0], [8300.0, 3.0], [8600.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [9100.0, 3.0], [9200.0, 3.0], [8900.0, 4.0], [9300.0, 3.0], [9700.0, 2.0], [9400.0, 2.0], [9600.0, 3.0], [9500.0, 1.0], [9800.0, 2.0], [10000.0, 3.0], [10200.0, 3.0], [9900.0, 2.0], [10100.0, 2.0], [10300.0, 3.0], [10600.0, 2.0], [10700.0, 4.0], [10500.0, 2.0], [10400.0, 1.0], [11100.0, 5.0], [11000.0, 2.0], [10900.0, 2.0], [11200.0, 1.0], [10800.0, 1.0], [11600.0, 2.0], [11700.0, 2.0], [11500.0, 4.0], [11400.0, 4.0], [11900.0, 3.0], [11800.0, 3.0], [12100.0, 2.0], [12000.0, 2.0], [12700.0, 3.0], [12300.0, 3.0], [12600.0, 2.0], [12500.0, 3.0], [12400.0, 1.0], [13200.0, 1.0], [12900.0, 3.0], [13100.0, 1.0], [12800.0, 1.0], [13300.0, 1.0], [13700.0, 3.0], [13400.0, 3.0], [13800.0, 2.0], [13500.0, 1.0], [14200.0, 3.0], [14100.0, 5.0], [14000.0, 3.0], [14600.0, 4.0], [14500.0, 1.0], [14400.0, 3.0], [14700.0, 1.0], [14800.0, 1.0], [15300.0, 3.0], [15000.0, 1.0], [14900.0, 3.0], [15200.0, 2.0], [15100.0, 1.0], [15500.0, 1.0], [15600.0, 2.0], [15900.0, 3.0], [16100.0, 3.0], [16300.0, 1.0], [16000.0, 2.0], [16200.0, 3.0], [17200.0, 6.0], [17400.0, 2.0], [16800.0, 2.0], [17000.0, 3.0], [16400.0, 1.0], [18400.0, 2.0], [17800.0, 2.0], [18200.0, 2.0], [18000.0, 1.0], [17600.0, 2.0], [18800.0, 3.0], [19000.0, 4.0], [19200.0, 3.0], [20200.0, 3.0], [19800.0, 1.0], [19600.0, 1.0], [21200.0, 1.0], [20800.0, 2.0], [20600.0, 1.0], [21000.0, 1.0], [22000.0, 2.0], [21600.0, 1.0], [21800.0, 1.0], [22400.0, 1.0], [22600.0, 3.0], [22800.0, 2.0], [23400.0, 4.0], [23000.0, 1.0], [23600.0, 1.0], [24400.0, 1.0], [23800.0, 3.0], [24600.0, 1.0], [25000.0, 3.0], [24800.0, 1.0], [25400.0, 2.0], [25200.0, 1.0], [26000.0, 3.0], [26200.0, 4.0], [26600.0, 1.0], [27200.0, 2.0], [27000.0, 1.0], [27600.0, 2.0], [27400.0, 1.0], [28400.0, 1.0], [28200.0, 2.0], [28000.0, 1.0], [28600.0, 1.0], [29600.0, 2.0], [29200.0, 3.0], [29000.0, 2.0], [30200.0, 3.0], [30400.0, 1.0], [30600.0, 1.0], [31600.0, 2.0], [31000.0, 2.0], [32600.0, 1.0], [32400.0, 1.0], [32000.0, 2.0], [31800.0, 1.0], [33600.0, 1.0], [34000.0, 1.0], [34800.0, 1.0], [36800.0, 2.0], [36400.0, 2.0], [35200.0, 4.0], [36000.0, 1.0], [38000.0, 1.0], [38800.0, 2.0], [37200.0, 1.0], [40800.0, 2.0], [39600.0, 1.0], [41600.0, 1.0], [42400.0, 1.0], [44800.0, 2.0], [43200.0, 1.0], [44000.0, 1.0], [47200.0, 1.0], [48000.0, 1.0], [48400.0, 1.0], [50000.0, 1.0], [49200.0, 1.0], [51200.0, 1.0], [52000.0, 1.0], [56800.0, 1.0], [33900.0, 2.0], [33500.0, 2.0], [34300.0, 2.0], [36300.0, 1.0], [38300.0, 1.0], [37500.0, 2.0], [37900.0, 2.0], [39900.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [42300.0, 1.0], [41100.0, 1.0], [41900.0, 1.0], [42700.0, 2.0], [43100.0, 1.0], [43900.0, 1.0], [44300.0, 2.0], [45500.0, 2.0], [45900.0, 1.0], [48300.0, 1.0], [50700.0, 1.0], [52700.0, 1.0], [51900.0, 1.0], [52300.0, 1.0], [16900.0, 2.0], [16700.0, 1.0], [16500.0, 1.0], [17300.0, 1.0], [17900.0, 2.0], [17500.0, 2.0], [18100.0, 2.0], [18300.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [19300.0, 3.0], [19900.0, 1.0], [19500.0, 2.0], [19700.0, 3.0], [20300.0, 1.0], [20700.0, 3.0], [21500.0, 1.0], [20900.0, 3.0], [20500.0, 3.0], [21300.0, 3.0], [22100.0, 2.0], [22500.0, 2.0], [21900.0, 2.0], [22300.0, 2.0], [21700.0, 1.0], [23100.0, 3.0], [22900.0, 1.0], [22700.0, 1.0], [24500.0, 3.0], [24100.0, 2.0], [23700.0, 2.0], [23900.0, 1.0], [24700.0, 1.0], [25300.0, 2.0], [24900.0, 3.0], [26100.0, 3.0], [26300.0, 2.0], [25900.0, 1.0], [26500.0, 1.0], [27300.0, 1.0], [27100.0, 1.0], [26700.0, 1.0], [27500.0, 1.0], [27700.0, 3.0], [28300.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [28900.0, 3.0], [29500.0, 1.0], [28700.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [31500.0, 2.0], [31700.0, 1.0], [30900.0, 1.0], [31100.0, 1.0], [32100.0, 1.0], [32300.0, 2.0], [32700.0, 1.0], [34600.0, 1.0], [33000.0, 1.0], [34200.0, 2.0], [35800.0, 4.0], [35400.0, 1.0], [37000.0, 2.0], [37400.0, 1.0], [38200.0, 1.0], [38600.0, 1.0], [39400.0, 2.0], [39000.0, 2.0], [39800.0, 2.0], [41000.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [43000.0, 1.0], [43800.0, 1.0], [45000.0, 1.0], [44200.0, 1.0], [46600.0, 1.0], [47800.0, 1.0], [50600.0, 2.0], [50200.0, 1.0], [53000.0, 1.0], [54200.0, 1.0], [58200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 58200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 734.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 37.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 734.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 361.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.291666666666668, "minX": 1.65121818E12, "maxY": 79.77108433734938, "series": [{"data": [[1.65121836E12, 67.06201550387598], [1.65121848E12, 41.83529411764705], [1.65121818E12, 7.291666666666668], [1.6512183E12, 42.81746031746036], [1.65121824E12, 19.151515151515156], [1.65121842E12, 79.77108433734938]], "isOverall": false, "label": "jp@gc - Stepping Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65121848E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2739.352272727273, "minX": 1.0, "maxY": 53738.0, "series": [{"data": [[2.0, 52341.0], [3.0, 17369.333333333332], [4.0, 16577.333333333336], [5.0, 5771.0], [6.0, 24432.5], [7.0, 6454.25], [8.0, 15893.333333333334], [9.0, 17527.666666666668], [10.0, 2739.352272727273], [11.0, 25589.5], [12.0, 12457.5], [13.0, 14214.0], [14.0, 15378.0], [15.0, 16007.333333333334], [16.0, 15962.333333333334], [17.0, 12439.5], [18.0, 8852.6], [19.0, 15689.333333333334], [20.0, 4573.569767441861], [21.0, 18023.333333333336], [22.0, 14923.25], [23.0, 17844.333333333336], [24.0, 12625.5], [25.0, 10710.0], [26.0, 12312.0], [27.0, 14722.666666666666], [28.0, 10297.25], [29.0, 13551.666666666666], [30.0, 6191.023255813952], [31.0, 14855.666666666666], [32.0, 23159.5], [33.0, 15783.0], [34.0, 19578.0], [35.0, 26428.5], [36.0, 13340.666666666668], [37.0, 31120.0], [38.0, 8293.2], [39.0, 22697.0], [40.0, 8070.549450549447], [41.0, 10973.4], [42.0, 14992.333333333334], [43.0, 11498.400000000001], [44.0, 13777.5], [45.0, 8829.0], [46.0, 9770.5], [47.0, 9293.0], [48.0, 14106.5], [49.0, 13255.0], [50.0, 9652.815217391306], [51.0, 22238.5], [52.0, 14262.25], [53.0, 13845.333333333334], [54.0, 12011.4], [55.0, 15170.666666666666], [56.0, 12011.2], [57.0, 20872.5], [58.0, 15202.0], [59.0, 23070.0], [60.0, 12267.141176470588], [61.0, 23302.0], [62.0, 32215.0], [63.0, 16284.0], [64.0, 14624.0], [65.0, 3621.25], [66.0, 16398.5], [67.0, 11468.166666666668], [68.0, 20275.333333333336], [69.0, 12779.2], [70.0, 14365.955555555553], [71.0, 19691.333333333332], [72.0, 31957.4], [73.0, 20181.0], [74.0, 18633.454545454544], [75.0, 19473.0], [76.0, 15313.42857142857], [77.0, 29044.6], [78.0, 23170.75], [79.0, 25373.285714285714], [80.0, 17503.602316602308], [1.0, 53738.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[50.12544169611305, 12163.995583038868]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 80.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 61.516666666666666, "minX": 1.65121818E12, "maxY": 690.0, "series": [{"data": [[1.65121836E12, 683.7666666666667], [1.65121848E12, 258.75], [1.65121818E12, 61.516666666666666], [1.6512183E12, 661.55], [1.65121824E12, 690.0], [1.65121842E12, 665.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65121836E12, 670.75], [1.65121848E12, 220.73333333333332], [1.65121818E12, 62.35], [1.6512183E12, 655.0], [1.65121824E12, 686.15], [1.65121842E12, 647.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65121848E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 971.4999999999999, "minX": 1.65121818E12, "maxY": 31634.658823529415, "series": [{"data": [[1.65121836E12, 12709.259689922468], [1.65121848E12, 31634.658823529415], [1.65121818E12, 971.4999999999999], [1.6512183E12, 8625.583333333336], [1.65121824E12, 3638.973484848484], [1.65121842E12, 18650.827309236953]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65121848E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 971.375, "minX": 1.65121818E12, "maxY": 31634.623529411765, "series": [{"data": [[1.65121836E12, 12709.255813953489], [1.65121848E12, 31634.623529411765], [1.65121818E12, 971.375], [1.6512183E12, 8625.563492063498], [1.65121824E12, 3638.9393939393926], [1.65121842E12, 18650.8032128514]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65121848E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.04819277108434, "minX": 1.65121818E12, "maxY": 39.49999999999999, "series": [{"data": [[1.65121836E12, 8.197674418604656], [1.65121848E12, 8.141176470588233], [1.65121818E12, 39.49999999999999], [1.6512183E12, 8.801587301587295], [1.65121824E12, 10.223484848484855], [1.65121842E12, 8.04819277108434]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65121848E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 734.0, "minX": 1.65121818E12, "maxY": 58256.0, "series": [{"data": [[1.65121836E12, 42383.0], [1.65121848E12, 58256.0], [1.65121818E12, 2678.0], [1.6512183E12, 29623.0], [1.65121824E12, 15559.0], [1.65121842E12, 52723.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65121836E12, 34451.40000000001], [1.65121848E12, 51999.8], [1.65121818E12, 2579.6], [1.6512183E12, 22858.5], [1.65121824E12, 11123.800000000001], [1.65121842E12, 44367.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65121836E12, 41846.6], [1.65121848E12, 58256.0], [1.65121818E12, 2678.0], [1.6512183E12, 28838.449999999993], [1.65121824E12, 15435.16], [1.65121842E12, 51701.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65121836E12, 37562.8], [1.65121848E12, 53742.25], [1.65121818E12, 2678.0], [1.6512183E12, 24589.75], [1.65121824E12, 12500.800000000001], [1.65121842E12, 47129.74999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65121836E12, 846.0], [1.65121848E12, 1809.0], [1.65121818E12, 786.0], [1.6512183E12, 1067.0], [1.65121824E12, 734.0], [1.65121842E12, 1110.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65121836E12, 19263.0], [1.65121848E12, 34430.5], [1.65121818E12, 1295.0], [1.6512183E12, 13751.5], [1.65121824E12, 4690.0], [1.65121842E12, 30576.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65121848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 23074.0, "series": [{"data": [[2.0, 23074.0], [4.0, 12679.0], [1.0, 4299.0], [5.0, 12747.0], [6.0, 11552.0], [3.0, 17456.0], [7.0, 8488.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 27.0], [4.0, 9.0], [5.0, 10.0], [6.0, 10.0], [3.0, 10.0], [7.0, 10.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 23073.0, "series": [{"data": [[2.0, 23073.0], [4.0, 12679.0], [1.0, 4299.0], [5.0, 12747.0], [6.0, 11551.5], [3.0, 17456.0], [7.0, 8488.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 27.0], [4.0, 9.0], [5.0, 10.0], [6.0, 10.0], [3.0, 10.0], [7.0, 10.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.65121818E12, "maxY": 4.733333333333333, "series": [{"data": [[1.65121836E12, 4.733333333333333], [1.65121848E12, 0.18333333333333332], [1.65121818E12, 0.5666666666666667], [1.6512183E12, 4.6], [1.65121824E12, 4.733333333333333], [1.65121842E12, 4.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65121848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65121818E12, "maxY": 2.85, "series": [{"data": [[1.65121836E12, 2.85], [1.65121848E12, 1.3666666666666667], [1.65121818E12, 0.25], [1.6512183E12, 2.7333333333333334], [1.65121824E12, 2.85], [1.65121842E12, 2.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65121836E12, 1.45], [1.65121848E12, 0.05], [1.65121818E12, 0.15], [1.6512183E12, 1.4666666666666666], [1.65121824E12, 1.55], [1.65121842E12, 1.35]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65121848E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65121818E12, "maxY": 2.85, "series": [{"data": [[1.65121836E12, 2.85], [1.65121848E12, 1.3666666666666667], [1.65121818E12, 0.25], [1.6512183E12, 2.7333333333333334], [1.65121824E12, 2.85], [1.65121842E12, 2.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65121836E12, 1.45], [1.65121848E12, 0.05], [1.65121818E12, 0.15], [1.6512183E12, 1.4666666666666666], [1.65121824E12, 1.55], [1.65121842E12, 1.35]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65121848E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65121818E12, "maxY": 2.85, "series": [{"data": [[1.65121836E12, 2.85], [1.65121848E12, 1.3666666666666667], [1.65121818E12, 0.25], [1.6512183E12, 2.7333333333333334], [1.65121824E12, 2.85], [1.65121842E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65121836E12, 1.45], [1.65121848E12, 0.05], [1.65121818E12, 0.15], [1.6512183E12, 1.4666666666666666], [1.65121824E12, 1.55], [1.65121842E12, 1.35]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65121848E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

